diff --git a/AUTHORS b/AUTHORS
index 21bd1dd57d..af37f8db25 100644
--- a/AUTHORS
+++ b/AUTHORS
@@ -60,6 +60,7 @@ Allan Sandfeld Jensen <allan.jensen@qt.io>
 Amos Lim <eui-sang.lim@samsung.com>
 Andreas Anyuru <andreas.anyuru@gmail.com>
 Andrei Kashcha <anvaka@gmail.com>
+Andreu Botella <andreu@andreubotella.com>
 Andrew Paprocki <andrew@ishiboo.com>
 Anna Henningsen <anna@addaleax.net>
 Antoine du Hamel <duhamelantoine1995@gmail.com>
diff --git a/BUILD.gn b/BUILD.gn
index 61187af305..fafa3e81fd 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -59,7 +59,7 @@ declare_args() {
   v8_deprecation_warnings = true
 
   # Enable compiler warnings when using V8_DEPRECATE_SOON apis.
-  v8_imminent_deprecation_warnings = true
+  v8_imminent_deprecation_warnings = false
 
   # Embeds the given script into the snapshot.
   v8_embed_script = ""
@@ -308,7 +308,7 @@ declare_args() {
 
   # Enable the experimental V8 sandbox.
   # Sets -DV8_ENABLE_SANDBOX.
-  v8_enable_sandbox = ""
+  v8_enable_sandbox = false
 
   # Enable all available sandbox features. Implies v8_enable_sandbox.
   v8_enable_sandbox_future = false
@@ -340,7 +340,7 @@ declare_args() {
   v8_enable_map_packing = false
 
   # Allow for JS promise hooks (instead of just C++).
-  v8_enable_javascript_promise_hooks = false
+  v8_enable_javascript_promise_hooks = true
 
   # Enable allocation folding globally (sets -dV8_ALLOCATION_FOLDING).
   # When it's disabled, the --turbo-allocation-folding runtime flag will be ignored.
@@ -356,7 +356,7 @@ declare_args() {
   # Enable legacy mode for ScriptOrModule's lifetime. By default it's a
   # temporary object, if enabled it will be kept alive by the parent Script.
   # This is only used by nodejs.
-  v8_scriptormodule_legacy_lifetime = false
+  v8_scriptormodule_legacy_lifetime = true
 
   # Change code emission and runtime features to be CET shadow-stack compliant
   # (incomplete and experimental).
@@ -625,7 +625,7 @@ config("internal_config_base") {
 
 config("internal_config") {
   defines = []
-
+  cflags = []
   # Only targets in this file and its subdirs can depend on this.
   visibility = [ "./*" ]
 
@@ -636,13 +636,17 @@ config("internal_config") {
     ":cppgc_header_features",
   ]
 
-  if (is_component_build) {
+  if (true) {
     defines += [ "BUILDING_V8_SHARED" ]
   }
 
   if (v8_current_cpu == "riscv64" || v8_current_cpu == "riscv32") {
     libs = [ "atomic" ]
   }
+
+  if (is_win) {
+    cflags += [ "/Zc:dllexportInlines-" ]
+  }
 }
 
 # Should be applied to all targets that write trace events.
@@ -659,14 +663,14 @@ config("v8_tracing_config") {
 # This config should be applied to code using the libplatform.
 config("libplatform_config") {
   include_dirs = [ "include" ]
-  if (is_component_build) {
+  if (false) {
     defines = [ "USING_V8_PLATFORM_SHARED" ]
   }
 }
 
 # This config should be applied to code using the libbase.
 config("libbase_config") {
-  if (is_component_build) {
+  if (false) {
     defines = [ "USING_V8_BASE_SHARED" ]
   }
   libs = []
@@ -709,7 +713,9 @@ config("external_config") {
   configs = [ ":headers_config" ]
   defines = []
   if (is_component_build) {
-    defines += [ "USING_V8_SHARED" ]
+    defines += [ "USING_V8_SHARED", "V8_SHARED", "USING_V8_PLATFORM_SHARED" ]
+  } else {
+    defines += [ "V8_SHARED" ]
   }
 
   if (current_cpu == "riscv64" || current_cpu == "riscv32") {
@@ -2347,6 +2353,8 @@ v8_source_set("v8_initializers") {
   visibility = [
     ":*",
     "test/cctest:*",
+    "//tools/v8_context_snapshot:*",
+    "//chrome:*",
   ]
 
   allow_circular_includes_from = [ ":torque_generated_initializers" ]
@@ -5335,7 +5343,8 @@ v8_source_set("torque_ls_base") {
   }
 }
 
-v8_component("v8_libbase") {
+v8_static_lib("v8_libbase") {
+
   sources = [
     "src/base/address-region.h",
     "src/base/atomic-utils.h",
@@ -5464,7 +5473,7 @@ v8_component("v8_libbase") {
 
   defines = []
 
-  if (is_component_build) {
+  if (false) {
     defines = [ "BUILDING_V8_BASE_SHARED" ]
   }
 
@@ -5596,7 +5605,7 @@ v8_component("v8_libbase") {
   # TODO(infra): Add support for qnx, freebsd, openbsd, netbsd, and solaris.
 }
 
-v8_component("v8_libplatform") {
+v8_static_lib("v8_libplatform") {
   sources = [
     "//base/trace_event/common/trace_event_common.h",
     "include/libplatform/libplatform-export.h",
@@ -5627,7 +5636,7 @@ v8_component("v8_libplatform") {
 
   configs = [ ":internal_config_base" ]
 
-  if (is_component_build) {
+  if (true) {
     defines = [ "BUILDING_V8_PLATFORM_SHARED" ]
   }
 
@@ -6059,6 +6068,25 @@ if (v8_enable_webassembly) {
 ###############################################################################
 # Executables
 #
+v8_executable("nwjc") {
+
+    sources = [
+      "src/nwjc.cc",
+    ]
+
+    configs = [
+      ":internal_config",
+    ]
+
+    deps = [
+      ":v8_base",
+      ":v8_libplatform",
+      ":v8_libbase",
+      ":v8_snapshot",
+      ":v8_initializers",
+      "//build/win:default_exe_manifest",
+    ]
+}
 
 if (current_toolchain == v8_generator_toolchain) {
   v8_executable("bytecode_builtins_list_generator") {
diff --git a/gni/v8.gni b/gni/v8.gni
index 3f093597fa..77b0a24834 100644
--- a/gni/v8.gni
+++ b/gni/v8.gni
@@ -242,6 +242,15 @@ template("v8_header_set") {
   }
 }
 
+template("v8_static_lib") {
+  static_library(target_name) {
+    forward_variables_from(invoker, "*", [ "configs" ])
+    configs += invoker.configs
+    configs -= v8_remove_configs
+    configs += v8_add_configs
+  }
+}
+
 template("v8_executable") {
   executable(target_name) {
     forward_variables_from(invoker,
diff --git a/gypfiles/detect_host_arch.py b/gypfiles/detect_host_arch.py
new file mode 100755
index 0000000000..8d6a1ba917
--- /dev/null
+++ b/gypfiles/detect_host_arch.py
@@ -0,0 +1,47 @@
+#!/usr/bin/env python
+# Copyright 2014 The Chromium Authors. All rights reserved.
+# Use of this source code is governed by a BSD-style license that can be
+# found in the LICENSE file.
+
+"""Outputs host CPU architecture in format recognized by gyp."""
+
+import platform
+import re
+import sys
+
+
+def HostArch():
+  """Returns the host architecture with a predictable string."""
+  host_arch = platform.machine()
+
+  # Convert machine type to format recognized by gyp.
+  if re.match(r'i.86', host_arch) or host_arch == 'i86pc':
+    host_arch = 'ia32'
+  elif host_arch in ['x86_64', 'amd64']:
+    host_arch = 'x64'
+  elif host_arch.startswith('arm'):
+    host_arch = 'arm'
+  elif host_arch.startswith('mips'):
+    host_arch = 'mips'
+  elif host_arch.startswith('ppc'):
+    host_arch = 'ppc'
+  elif host_arch.startswith('s390'):
+    host_arch = 's390'
+
+
+  # platform.machine is based on running kernel. It's possible to use 64-bit
+  # kernel with 32-bit userland, e.g. to give linker slightly more memory.
+  # Distinguish between different userland bitness by querying
+  # the python binary.
+  if host_arch == 'x64' and platform.architecture()[0] == '32bit':
+    host_arch = 'ia32'
+
+  return host_arch
+
+def DoMain(_):
+  """Hook to be called from gyp without starting a separate python
+  interpreter."""
+  return HostArch()
+
+if __name__ == '__main__':
+  print DoMain([])
diff --git a/gypfiles/toolchain.gypi b/gypfiles/toolchain.gypi
new file mode 100644
index 0000000000..1830a18e17
--- /dev/null
+++ b/gypfiles/toolchain.gypi
@@ -0,0 +1,1446 @@
+# Copyright 2013 the V8 project authors. All rights reserved.
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met:
+#
+#     * Redistributions of source code must retain the above copyright
+#       notice, this list of conditions and the following disclaimer.
+#     * Redistributions in binary form must reproduce the above
+#       copyright notice, this list of conditions and the following
+#       disclaimer in the documentation and/or other materials provided
+#       with the distribution.
+#     * Neither the name of Google Inc. nor the names of its
+#       contributors may be used to endorse or promote products derived
+#       from this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+# Shared definitions for all V8-related targets.
+
+{
+  'variables': {
+          'variables': {
+            'conditions': [
+              ['OS=="linux" or OS=="freebsd" or OS=="openbsd" or \
+                 OS=="netbsd" or OS=="mac" or OS=="qnx" or OS=="aix"', {
+                # This handles the Unix platforms we generally deal with.
+                # Anything else gets passed through, which probably won't work
+                # very well; such hosts should pass an explicit target_arch
+                # to gyp.
+                'host_arch%': '<!pymod_do_main(detect_host_arch)',
+              }, {
+                # OS!="linux" and OS!="freebsd" and OS!="openbsd" and
+                # OS!="netbsd" and OS!="mac" and OS!="aix"
+                'host_arch%': 'ia32',
+              }],
+            ],
+          },
+          'host_arch%': '<(host_arch)',
+    'msvs_use_common_release': 0,
+    'clang%': 0,
+    'asan%': 0,
+    'cfi_vptr%': 0,
+    'lsan%': 0,
+    'msan%': 0,
+    'tsan%': 0,
+    'ubsan%': 0,
+    'ubsan_vptr%': 0,
+    'has_valgrind%': 0,
+    'coverage%': 0,
+    'v8_target_arch%': '<(target_arch)',
+    'v8_host_byteorder%': '<!(python -c "import sys; print sys.byteorder")',
+    'force_dynamic_crt%': 0,
+
+    # Setting 'v8_can_use_vfp32dregs' to 'true' will cause V8 to use the VFP
+    # registers d16-d31 in the generated code, both in the snapshot and for the
+    # ARM target. Leaving the default value of 'false' will avoid the use of
+    # these registers in the snapshot and use CPU feature probing when running
+    # on the target.
+    'v8_can_use_vfp32dregs%': 'false',
+    'arm_test_noprobe%': 'off',
+
+    # Similar to vfp but on MIPS.
+    'v8_can_use_fpu_instructions%': 'true',
+
+    # Similar to the ARM hard float ABI but on MIPS.
+    'v8_use_mips_abi_hardfloat%': 'true',
+
+    # MIPS MSA support
+    'mips_use_msa%': 0,
+
+    # Print to stdout on Android.
+    'v8_android_log_stdout%': 0,
+
+    # Force disable libstdc++ debug mode.
+    'disable_glibcxx_debug%': 0,
+
+    'v8_enable_backtrace%': 0,
+
+    # Enable profiling support. Only required on Windows.
+    'v8_enable_prof%': 0,
+
+    # Some versions of GCC 4.5 seem to need -fno-strict-aliasing.
+    'v8_no_strict_aliasing%': 0,
+
+    # Chrome needs this definition unconditionally. For standalone V8 builds,
+    # it's handled in gypfiles/standalone.gypi.
+    'want_separate_host_toolset%': 1,
+
+    # Toolset the shell binary should be compiled for. Possible values are
+    # 'host' and 'target'.
+    # The setting is ignored if want_separate_host_toolset is 0.
+    'v8_toolset_for_shell%': 'target',
+
+    'host_os%': '<(OS)',
+    'werror%': '-Werror',
+    # For a shared library build, results in "libv8-<(soname_version).so".
+    'soname_version%': '',
+
+    # Allow to suppress the array bounds warning (default is no suppression).
+    'wno_array_bounds%': '',
+
+    # Override where to find binutils
+    'binutils_dir%': '',
+
+    'conditions': [
+      ['OS=="linux" and host_arch=="x64"', {
+        'binutils_dir%': 'third_party/binutils/Linux_x64/Release/bin',
+      }],
+      ['OS=="linux" and host_arch=="ia32"', {
+        'binutils_dir%': 'third_party/binutils/Linux_ia32/Release/bin',
+      }],
+
+      # linux_use_bundled_gold: whether to use the gold linker binary checked
+      # into third_party/binutils.  Force this off via GYP_DEFINES when you
+      # are using a custom toolchain and need to control -B in ldflags.
+      # Do not use 32-bit gold on 32-bit hosts as it runs out address space
+      # for component=static_library builds.
+      ['((OS=="linux" or OS=="android") and (target_arch=="x64" or target_arch=="arm" or (target_arch=="ia32" and host_arch=="x64"))) or (OS=="linux" and target_arch=="mipsel")', {
+        'linux_use_bundled_gold%': 1,
+      }, {
+        'linux_use_bundled_gold%': 0,
+      }],
+      # linux_use_bundled_binutils: whether to use the binary binutils
+      # checked into third_party/binutils.  These are not multi-arch so cannot
+      # be used except on x86 and x86-64 (the only two architectures which
+      # are currently checke in).  Force this off via GYP_DEFINES when you
+      # are using a custom toolchain and need to control -B in cflags.
+      ['OS=="linux" and (target_arch=="ia32" or target_arch=="x64")', {
+        'linux_use_bundled_binutils%': 1,
+      }, {
+        'linux_use_bundled_binutils%': 0,
+      }],
+      # linux_use_gold_flags: whether to use build flags that rely on gold.
+      # On by default for x64 Linux.
+      ['OS=="linux" and target_arch=="x64"', {
+        'linux_use_gold_flags%': 1,
+      }, {
+        'linux_use_gold_flags%': 0,
+      }],
+    ],
+
+    # Indicates if gcmole tools are downloaded by a hook.
+    'gcmole%': 0,
+  },
+  'conditions': [
+    ['host_arch=="ia32" or host_arch=="x64" or \
+      host_arch=="ppc" or host_arch=="ppc64" or \
+      host_arch=="s390" or host_arch=="s390x" or \
+      clang==1', {
+      'variables': {
+        'host_cxx_is_biarch%': 1,
+       },
+     }, {
+      'variables': {
+        'host_cxx_is_biarch%': 0,
+      },
+    }],
+    ['target_arch=="ia32" or target_arch=="x64" or \
+      target_arch=="ppc" or target_arch=="ppc64" or target_arch=="s390" or \
+      target_arch=="s390x" or clang==1', {
+      'variables': {
+        'target_cxx_is_biarch%': 1,
+       },
+     }, {
+      'variables': {
+        'target_cxx_is_biarch%': 0,
+      },
+    }],
+  ],
+  'target_defaults': {
+    'conditions': [
+      ['v8_target_arch=="arm"', {
+        'defines': [
+          'V8_TARGET_ARCH_ARM',
+        ],
+        'conditions': [
+          [ 'arm_version==7 or arm_version=="default"', {
+            'defines': [
+              'CAN_USE_ARMV7_INSTRUCTIONS',
+            ],
+          }],
+          [ 'arm_fpu=="vfpv3-d16" or arm_fpu=="default"', {
+            'defines': [
+              'CAN_USE_VFP3_INSTRUCTIONS',
+            ],
+          }],
+          [ 'arm_fpu=="vfpv3"', {
+            'defines': [
+              'CAN_USE_VFP3_INSTRUCTIONS',
+              'CAN_USE_VFP32DREGS',
+            ],
+          }],
+          [ 'arm_fpu=="neon"', {
+            'defines': [
+              'CAN_USE_VFP3_INSTRUCTIONS',
+              'CAN_USE_VFP32DREGS',
+              'CAN_USE_NEON',
+            ],
+          }],
+          [ 'arm_test_noprobe=="on"', {
+            'defines': [
+              'ARM_TEST_NO_FEATURE_PROBE',
+            ],
+          }],
+        ],
+        'target_conditions': [
+          ['_toolset=="host"', {
+            'conditions': [
+              ['v8_target_arch==host_arch', {
+                # Host built with an Arm CXX compiler.
+                'conditions': [
+                  [ 'arm_version==7', {
+                    'cflags': ['-march=armv7-a',],
+                  }],
+                  [ 'arm_version==7 or arm_version=="default"', {
+                    'conditions': [
+                      [ 'arm_fpu!="default"', {
+                        'cflags': ['-mfpu=<(arm_fpu)',],
+                      }],
+                    ],
+                  }],
+                  [ 'arm_float_abi!="default"', {
+                    'cflags': ['-mfloat-abi=<(arm_float_abi)',],
+                  }],
+                  [ 'arm_thumb==1', {
+                    'cflags': ['-mthumb',],
+                  }],
+                  [ 'arm_thumb==0', {
+                    'cflags': ['-marm',],
+                  }],
+                ],
+              }, {
+                # 'v8_target_arch!=host_arch'
+                # Host not built with an Arm CXX compiler (simulator build).
+                'conditions': [
+                  [ 'arm_float_abi=="hard"', {
+                    'defines': [
+                      'USE_EABI_HARDFLOAT=1',
+                    ],
+                  }],
+                  [ 'arm_float_abi=="softfp" or arm_float_abi=="default"', {
+                    'defines': [
+                      'USE_EABI_HARDFLOAT=0',
+                    ],
+                  }],
+                ],
+              }],
+            ],
+          }],  # _toolset=="host"
+          ['_toolset=="target"', {
+            'conditions': [
+              ['v8_target_arch==target_arch', {
+                # Target built with an Arm CXX compiler.
+                'conditions': [
+                  [ 'arm_version==7', {
+                    'cflags': ['-march=armv7-a',],
+                  }],
+                  [ 'arm_version==7 or arm_version=="default"', {
+                    'conditions': [
+                      [ 'arm_fpu!="default"', {
+                        'cflags': ['-mfpu=<(arm_fpu)',],
+                      }],
+                    ],
+                  }],
+                  [ 'arm_float_abi!="default"', {
+                    'cflags': ['-mfloat-abi=<(arm_float_abi)',],
+                  }],
+                  [ 'arm_thumb==1', {
+                    'cflags': ['-mthumb',],
+                  }],
+                  [ 'arm_thumb==0', {
+                    'cflags': ['-marm',],
+                  }],
+                ],
+              }, {
+                # 'v8_target_arch!=target_arch'
+                # Target not built with an Arm CXX compiler (simulator build).
+                'conditions': [
+                  [ 'arm_float_abi=="hard"', {
+                    'defines': [
+                      'USE_EABI_HARDFLOAT=1',
+                    ],
+                  }],
+                  [ 'arm_float_abi=="softfp" or arm_float_abi=="default"', {
+                    'defines': [
+                      'USE_EABI_HARDFLOAT=0',
+                    ],
+                  }],
+                ],
+              }],
+            ],
+          }],  # _toolset=="target"
+        ],
+      }],  # v8_target_arch=="arm"
+      ['v8_target_arch=="arm64"', {
+        'defines': [
+          'V8_TARGET_ARCH_ARM64',
+        ],
+      }],
+      ['v8_target_arch=="s390" or v8_target_arch=="s390x"', {
+        'defines': [
+          'V8_TARGET_ARCH_S390',
+        ],
+        'conditions': [
+          ['v8_target_arch=="s390x"', {
+            'defines': [
+              'V8_TARGET_ARCH_S390X',
+            ],
+          }],
+          ['v8_host_byteorder=="little"', {
+            'defines': [
+              'V8_TARGET_ARCH_S390_LE_SIM',
+            ],
+          }, {
+            'cflags': [ '-march=z196' ],
+          }],
+          ],
+      }],  # s390
+      ['v8_target_arch=="ppc" or v8_target_arch=="ppc64"', {
+        'defines': [
+          'V8_TARGET_ARCH_PPC',
+        ],
+        'conditions': [
+          ['v8_target_arch=="ppc64"', {
+            'defines': [
+              'V8_TARGET_ARCH_PPC64',
+            ],
+          }],
+          ['v8_host_byteorder=="little"', {
+            'defines': [
+              'V8_TARGET_ARCH_PPC_LE',
+            ],
+          }],
+          ['v8_host_byteorder=="big"', {
+            'defines': [
+              'V8_TARGET_ARCH_PPC_BE',
+            ],
+            'conditions': [
+              ['OS=="aix"', {
+                # Work around AIX ceil, trunc and round oddities.
+                'cflags': [ '-mcpu=power5+ -mfprnd' ],
+              }],
+              ['OS=="aix"', {
+                # Work around AIX assembler popcntb bug.
+                'cflags': [ '-mno-popcntb' ],
+              }],
+            ],
+          }],
+        ],
+      }],  # ppc
+      ['v8_target_arch=="ia32"', {
+        'defines': [
+          'V8_TARGET_ARCH_IA32',
+        ],
+      }],  # v8_target_arch=="ia32"
+      ['v8_target_arch=="mips" or v8_target_arch=="mipsel" \
+        or v8_target_arch=="mips64" or v8_target_arch=="mips64el"', {
+        'target_conditions': [
+          ['_toolset=="target"', {
+            'conditions': [
+              ['v8_target_arch==target_arch', {
+                # Target built with a Mips CXX compiler.
+                'variables': {
+                  'ldso_path%': '<!(/bin/echo -n $LDSO_PATH)',
+                  'ld_r_path%': '<!(/bin/echo -n $LD_R_PATH)',
+                },
+                'conditions': [
+                  ['ldso_path!=""', {
+                    'ldflags': ['-Wl,--dynamic-linker=<(ldso_path)'],
+                  }],
+                  ['ld_r_path!=""', {
+                    'ldflags': ['-Wl,--rpath=<(ld_r_path)'],
+                  }],
+                  [ 'clang==1', {
+                    'cflags': ['-integrated-as'],
+                  }],
+                  ['OS!="mac"', {
+                    'defines': ['_MIPS_TARGET_HW',],
+                  }, {
+                    'defines': ['_MIPS_TARGET_SIMULATOR',],
+                  }],
+                ],
+              }, {
+                'defines': ['_MIPS_TARGET_SIMULATOR',],
+              }],
+            ],
+          }],  #'_toolset=="target"
+          ['_toolset=="host"', {
+            'conditions': [
+              ['v8_target_arch==target_arch and OS!="mac"', {
+                'defines': ['_MIPS_TARGET_HW',],
+              }, {
+                'defines': ['_MIPS_TARGET_SIMULATOR',],
+              }],
+            ],
+          }],  #'_toolset=="host"
+        ],
+      }],
+      ['v8_target_arch=="mips"', {
+        'defines': [
+          'V8_TARGET_ARCH_MIPS',
+        ],
+        'conditions': [
+          [ 'v8_can_use_fpu_instructions=="true"', {
+            'defines': [
+              'CAN_USE_FPU_INSTRUCTIONS',
+            ],
+          }],
+          [ 'v8_use_mips_abi_hardfloat=="true"', {
+            'defines': [
+              '__mips_hard_float=1',
+              'CAN_USE_FPU_INSTRUCTIONS',
+            ],
+          }, {
+            'defines': [
+              '__mips_soft_float=1'
+            ]
+          }],
+        ],
+        'target_conditions': [
+          ['_toolset=="target"', {
+            'conditions': [
+              ['v8_target_arch==target_arch', {
+                # Target built with a Mips CXX compiler.
+                'cflags': [
+                  '-EB',
+                  '-Wno-error=array-bounds',  # Workaround https://gcc.gnu.org/bugzilla/show_bug.cgi?id=56273
+                ],
+                'ldflags': ['-EB'],
+                'conditions': [
+                  [ 'v8_use_mips_abi_hardfloat=="true"', {
+                    'cflags': ['-mhard-float'],
+                    'ldflags': ['-mhard-float'],
+                  }, {
+                    'cflags': ['-msoft-float'],
+                    'ldflags': ['-msoft-float'],
+                  }],
+                  ['mips_arch_variant=="r6"', {
+                    'defines': [
+                      '_MIPS_ARCH_MIPS32R6',
+                      'FPU_MODE_FP64',
+                    ],
+                    'cflags!': ['-mfp32', '-mfpxx'],
+                    'conditions': [
+                      [ 'clang==0', {
+                        'cflags': ['-Wa,-mips32r6'],
+                      }],
+                    ],
+                    'cflags': ['-mips32r6'],
+                    'ldflags': ['-mips32r6'],
+                  }],
+                  ['mips_arch_variant=="r6" and mips_use_msa==1', {
+                    'defines': [ '_MIPS_MSA' ],
+                  }],
+                  ['mips_arch_variant=="r2"', {
+                    'conditions': [
+                      [ 'mips_fpu_mode=="fp64"', {
+                        'defines': [
+                          '_MIPS_ARCH_MIPS32R2',
+                          'FPU_MODE_FP64',
+                        ],
+                        'cflags': ['-mfp64'],
+                      }],
+                      ['mips_fpu_mode=="fpxx"', {
+                        'defines': [
+                          '_MIPS_ARCH_MIPS32R2',
+                          'FPU_MODE_FPXX',
+                        ],
+                        'cflags': ['-mfpxx'],
+                      }],
+                      ['mips_fpu_mode=="fp32"', {
+                        'defines': [
+                          '_MIPS_ARCH_MIPS32R2',
+                          'FPU_MODE_FP32',
+                        ],
+                        'cflags': ['-mfp32'],
+                      }],
+                      [ 'clang==0', {
+                        'cflags': ['-Wa,-mips32r2'],
+                      }],
+                    ],
+                    'cflags': ['-mips32r2'],
+                    'ldflags': ['-mips32r2'],
+                  }],
+                  ['mips_arch_variant=="r1"', {
+                    'defines': [
+                      'FPU_MODE_FP32',
+                    ],
+                    'cflags!': ['-mfp64', '-mfpxx'],
+                    'conditions': [
+                      [ 'clang==0', {
+                        'cflags': ['-Wa,-mips32'],
+                      }],
+                    ],
+                    'cflags': ['-mips32'],
+                    'ldflags': ['-mips32'],
+                  }],
+                  ['mips_arch_variant=="rx"', {
+                    'defines': [
+                      '_MIPS_ARCH_MIPS32RX',
+                      'FPU_MODE_FPXX',
+                    ],
+                    'cflags!': ['-mfp64', '-mfp32'],
+                    'conditions': [
+                      [ 'clang==0', {
+                        'cflags': ['-Wa,-mips32'],
+                      }],
+                    ],
+                    'cflags': ['-mips32', '-mfpxx'],
+                    'ldflags': ['-mips32'],
+                  }],
+                ],
+              }, {
+                # 'v8_target_arch!=target_arch'
+                # Target not built with an MIPS CXX compiler (simulator build).
+                'conditions': [
+                  ['mips_arch_variant=="r6"', {
+                    'defines': [
+                      '_MIPS_ARCH_MIPS32R6',
+                      'FPU_MODE_FP64',
+                    ],
+                  }],
+                  ['mips_arch_variant=="r6" and mips_use_msa==1', {
+                    'defines': [ '_MIPS_MSA' ],
+                  }],
+                  ['mips_arch_variant=="r2"', {
+                    'conditions': [
+                      [ 'mips_fpu_mode=="fp64"', {
+                        'defines': [
+                          '_MIPS_ARCH_MIPS32R2',
+                          'FPU_MODE_FP64',
+                        ],
+                      }],
+                      ['mips_fpu_mode=="fpxx"', {
+                        'defines': [
+                          '_MIPS_ARCH_MIPS32R2',
+                          'FPU_MODE_FPXX',
+                        ],
+                      }],
+                      ['mips_fpu_mode=="fp32"', {
+                        'defines': [
+                          '_MIPS_ARCH_MIPS32R2',
+                          'FPU_MODE_FP32',
+                        ],
+                      }],
+                    ],
+                  }],
+                  ['mips_arch_variant=="r1"', {
+                    'defines': [
+                      'FPU_MODE_FP32',
+                    ],
+                  }],
+                  ['mips_arch_variant=="rx"', {
+                    'defines': [
+                      '_MIPS_ARCH_MIPS32RX',
+                      'FPU_MODE_FPXX',
+                    ],
+                  }],
+                ],
+              }],
+            ],
+          }],  #_toolset=="target"
+          ['_toolset=="host"', {
+            'conditions': [
+              ['mips_arch_variant=="rx"', {
+                'defines': [
+                  '_MIPS_ARCH_MIPS32RX',
+                  'FPU_MODE_FPXX',
+                ],
+              }],
+              ['mips_arch_variant=="r6"', {
+                'defines': [
+                  '_MIPS_ARCH_MIPS32R6',
+                  'FPU_MODE_FP64',
+                ],
+              }],
+              ['mips_arch_variant=="r6" and mips_use_msa==1', {
+                'defines': [ '_MIPS_MSA' ],
+              }],
+              ['mips_arch_variant=="r2"', {
+                'conditions': [
+                  ['mips_fpu_mode=="fp64"', {
+                    'defines': [
+                      '_MIPS_ARCH_MIPS32R2',
+                      'FPU_MODE_FP64',
+                    ],
+                  }],
+                  ['mips_fpu_mode=="fpxx"', {
+                    'defines': [
+                      '_MIPS_ARCH_MIPS32R2',
+                      'FPU_MODE_FPXX',
+                    ],
+                  }],
+                  ['mips_fpu_mode=="fp32"', {
+                    'defines': [
+                      '_MIPS_ARCH_MIPS32R2',
+                      'FPU_MODE_FP32'
+                    ],
+                  }],
+                ],
+              }],
+              ['mips_arch_variant=="r1"', {
+                'defines': ['FPU_MODE_FP32',],
+              }],
+            ]
+          }],  #_toolset=="host"
+        ],
+      }],  # v8_target_arch=="mips"
+      ['v8_target_arch=="mipsel"', {
+        'defines': [
+          'V8_TARGET_ARCH_MIPS',
+        ],
+        'conditions': [
+          [ 'v8_can_use_fpu_instructions=="true"', {
+            'defines': [
+              'CAN_USE_FPU_INSTRUCTIONS',
+            ],
+          }],
+          [ 'v8_use_mips_abi_hardfloat=="true"', {
+            'defines': [
+              '__mips_hard_float=1',
+              'CAN_USE_FPU_INSTRUCTIONS',
+            ],
+          }, {
+            'defines': [
+              '__mips_soft_float=1'
+            ],
+          }],
+        ],
+        'target_conditions': [
+          ['_toolset=="target"', {
+            'conditions': [
+              ['v8_target_arch==target_arch', {
+                # Target built with a Mips CXX compiler.
+                'cflags': [
+                  '-EL',
+                  '-Wno-error=array-bounds',  # Workaround https://gcc.gnu.org/bugzilla/show_bug.cgi?id=56273
+                ],
+                'ldflags': ['-EL'],
+                'conditions': [
+                  [ 'v8_use_mips_abi_hardfloat=="true"', {
+                    'cflags': ['-mhard-float'],
+                    'ldflags': ['-mhard-float'],
+                  }, {
+                    'cflags': ['-msoft-float'],
+                    'ldflags': ['-msoft-float'],
+                  }],
+                  ['mips_arch_variant=="r6"', {
+                    'defines': [
+                      '_MIPS_ARCH_MIPS32R6',
+                      'FPU_MODE_FP64',
+                    ],
+                    'cflags!': ['-mfp32', '-mfpxx'],
+                    'conditions': [
+                      [ 'clang==0', {
+                        'cflags': ['-Wa,-mips32r6'],
+                      }],
+                    ],
+                    'cflags': ['-mips32r6'],
+                    'ldflags': ['-mips32r6'],
+                  }],
+                  ['mips_arch_variant=="r6" and mips_use_msa==1', {
+                    'defines': [ '_MIPS_MSA' ],
+                  }],
+                  ['mips_arch_variant=="r2"', {
+                    'conditions': [
+                      [ 'mips_fpu_mode=="fp64"', {
+                        'defines': [
+                          '_MIPS_ARCH_MIPS32R2',
+                          'FPU_MODE_FP64',
+                        ],
+                        'cflags': ['-mfp64'],
+                      }],
+                      ['mips_fpu_mode=="fpxx"', {
+                        'defines': [
+                          '_MIPS_ARCH_MIPS32R2',
+                          'FPU_MODE_FPXX',
+                        ],
+                        'cflags': ['-mfpxx'],
+                      }],
+                      ['mips_fpu_mode=="fp32"', {
+                        'defines': [
+                          '_MIPS_ARCH_MIPS32R2',
+                          'FPU_MODE_FP32',
+                        ],
+                        'cflags': ['-mfp32'],
+                      }],
+                      [ 'clang==0', {
+                        'cflags': ['-Wa,-mips32r2'],
+                      }],
+                    ],
+                    'cflags': ['-mips32r2'],
+                    'ldflags': ['-mips32r2'],
+                  }],
+                  ['mips_arch_variant=="r1"', {
+                    'defines': [
+                      'FPU_MODE_FP32',
+                    ],
+                    'cflags!': ['-mfp64', '-mfpxx'],
+                    'conditions': [
+                      [ 'clang==0', {
+                        'cflags': ['-Wa,-mips32'],
+                      }],
+                    ],
+                    'cflags': ['-mips32'],
+                    'ldflags': ['-mips32'],
+                  }],
+                  ['mips_arch_variant=="rx"', {
+                    'defines': [
+                      '_MIPS_ARCH_MIPS32RX',
+                      'FPU_MODE_FPXX',
+                    ],
+                    'cflags!': ['-mfp64', '-mfp32'],
+                    'conditions': [
+                      [ 'clang==0', {
+                        'cflags': ['-Wa,-mips32'],
+                      }],
+                    ],
+                    'cflags': ['-mips32', '-mfpxx'],
+                    'ldflags': ['-mips32'],
+                  }],
+                  ['mips_arch_variant=="loongson"', {
+                    'defines': [
+                      '_MIPS_ARCH_LOONGSON',
+                      'FPU_MODE_FP32',
+                    ],
+                    'cflags!': ['-mfp64', '-mfpxx'],
+                    'conditions': [
+                      [ 'clang==0', {
+                        'cflags': ['-Wa,-mips3'],
+                      }],
+                    ],
+                    'cflags': ['-mips3', '-mfp32'],
+                  }],
+                ],
+              }, {
+                # 'v8_target_arch!=target_arch'
+                # Target not built with an MIPS CXX compiler (simulator build).
+                'conditions': [
+                  ['mips_arch_variant=="r6"', {
+                    'defines': [
+                      '_MIPS_ARCH_MIPS32R6',
+                      'FPU_MODE_FP64',
+                    ],
+                  }],
+                  ['mips_arch_variant=="r6" and mips_use_msa==1', {
+                    'defines': [ '_MIPS_MSA' ],
+                  }],
+                  ['mips_arch_variant=="r2"', {
+                    'conditions': [
+                      [ 'mips_fpu_mode=="fp64"', {
+                        'defines': [
+                          '_MIPS_ARCH_MIPS32R2',
+                          'FPU_MODE_FP64',
+                        ],
+                      }],
+                      ['mips_fpu_mode=="fpxx"', {
+                        'defines': [
+                          '_MIPS_ARCH_MIPS32R2',
+                          'FPU_MODE_FPXX',
+                        ],
+                      }],
+                      ['mips_fpu_mode=="fp32"', {
+                        'defines': [
+                          '_MIPS_ARCH_MIPS32R2',
+                          'FPU_MODE_FP32',
+                        ],
+                      }],
+                    ],
+                  }],
+                  ['mips_arch_variant=="r1"', {
+                    'defines': [
+                      'FPU_MODE_FP32',
+                    ],
+                  }],
+                  ['mips_arch_variant=="rx"', {
+                    'defines': [
+                      '_MIPS_ARCH_MIPS32RX',
+                      'FPU_MODE_FPXX',
+                    ],
+                  }],
+                  ['mips_arch_variant=="loongson"', {
+                    'defines': [
+                      '_MIPS_ARCH_LOONGSON',
+                      'FPU_MODE_FP32',
+                    ],
+                  }],
+                ],
+              }],
+            ],
+          }], #_toolset=="target
+          ['_toolset=="host"', {
+            'conditions': [
+              ['mips_arch_variant=="rx"', {
+                'defines': [
+                  '_MIPS_ARCH_MIPS32RX',
+                  'FPU_MODE_FPXX',
+                ],
+              }],
+              ['mips_arch_variant=="r6"', {
+                'defines': [
+                  '_MIPS_ARCH_MIPS32R6',
+                  'FPU_MODE_FP64',
+                ],
+              }],
+              ['mips_arch_variant=="r6" and mips_use_msa==1', {
+                'defines': [ '_MIPS_MSA' ],
+              }],
+              ['mips_arch_variant=="r2"', {
+                'conditions': [
+                  ['mips_fpu_mode=="fp64"', {
+                    'defines': [
+                      '_MIPS_ARCH_MIPS32R2',
+                      'FPU_MODE_FP64',
+                    ],
+                  }],
+                  ['mips_fpu_mode=="fpxx"', {
+                    'defines': [
+                      '_MIPS_ARCH_MIPS32R2',
+                      'FPU_MODE_FPXX',
+                    ],
+                  }],
+                  ['mips_fpu_mode=="fp32"', {
+                    'defines': [
+                      '_MIPS_ARCH_MIPS32R2',
+                      'FPU_MODE_FP32'
+                    ],
+                  }],
+                ],
+              }],
+              ['mips_arch_variant=="r1"', {
+                'defines': ['FPU_MODE_FP32',],
+              }],
+              ['mips_arch_variant=="loongson"', {
+                'defines': [
+                  '_MIPS_ARCH_LOONGSON',
+                  'FPU_MODE_FP32',
+                ],
+              }],
+            ]
+          }],
+        ],
+      }],  # v8_target_arch=="mipsel"
+      ['v8_target_arch=="mips64el" or v8_target_arch=="mips64"', {
+        'defines': [
+          'V8_TARGET_ARCH_MIPS64',
+        ],
+        'conditions': [
+          [ 'v8_can_use_fpu_instructions=="true"', {
+            'defines': [
+              'CAN_USE_FPU_INSTRUCTIONS',
+            ],
+          }],
+          [ 'v8_host_byteorder=="little"', {
+            'defines': [
+              'V8_TARGET_ARCH_MIPS64_LE',
+            ],
+          }],
+          [ 'v8_host_byteorder=="big"', {
+            'defines': [
+              'V8_TARGET_ARCH_MIPS64_BE',
+            ],
+          }],
+          [ 'v8_use_mips_abi_hardfloat=="true"', {
+            'defines': [
+              '__mips_hard_float=1',
+              'CAN_USE_FPU_INSTRUCTIONS',
+            ],
+          }, {
+            'defines': [
+              '__mips_soft_float=1'
+            ],
+          }],
+         ],
+        'target_conditions': [
+          ['_toolset=="target"', {
+            'conditions': [
+              ['v8_target_arch==target_arch', {
+                'cflags': [
+                  '-Wno-error=array-bounds',  # Workaround https://gcc.gnu.org/bugzilla/show_bug.cgi?id=56273
+                ],
+                'conditions': [
+                  ['v8_target_arch=="mips64el"', {
+                    'cflags': ['-EL'],
+                    'ldflags': ['-EL'],
+                  }],
+                  ['v8_target_arch=="mips64"', {
+                    'cflags': ['-EB'],
+                    'ldflags': ['-EB'],
+                  }],
+                  [ 'v8_use_mips_abi_hardfloat=="true"', {
+                    'cflags': ['-mhard-float'],
+                    'ldflags': ['-mhard-float'],
+                  }, {
+                    'cflags': ['-msoft-float'],
+                    'ldflags': ['-msoft-float'],
+                  }],
+                  ['mips_arch_variant=="r6"', {
+                    'defines': ['_MIPS_ARCH_MIPS64R6',],
+                    'conditions': [
+                      [ 'clang==0', {
+                        'cflags': ['-Wa,-mips64r6'],
+                      }],
+                    ],
+                    'cflags': ['-mips64r6', '-mabi=64'],
+                    'ldflags': ['-mips64r6', '-mabi=64'],
+                  }],
+                  ['mips_arch_variant=="r6" and mips_use_msa==1', {
+                    'defines': [ '_MIPS_MSA' ],
+                  }],
+                  ['mips_arch_variant=="r2"', {
+                    'defines': ['_MIPS_ARCH_MIPS64R2',],
+                    'conditions': [
+                      [ 'clang==0', {
+                        'cflags': ['-Wa,-mips64r2'],
+                      }],
+                    ],
+                    'cflags': ['-mips64r2', '-mabi=64'],
+                    'ldflags': ['-mips64r2', '-mabi=64'],
+                  }],
+                ],
+              }, {
+                # 'v8_target_arch!=target_arch'
+                # Target not built with an MIPS CXX compiler (simulator build).
+                'conditions': [
+                  ['mips_arch_variant=="r6"', {
+                    'defines': ['_MIPS_ARCH_MIPS64R6',],
+                  }],
+                  ['mips_arch_variant=="r6" and mips_use_msa==1', {
+                    'defines': [ '_MIPS_MSA' ],
+                  }],
+                  ['mips_arch_variant=="r2"', {
+                    'defines': ['_MIPS_ARCH_MIPS64R2',],
+                  }],
+                ],
+              }],
+            ],
+          }],  #'_toolset=="target"
+          ['_toolset=="host"', {
+            'conditions': [
+              ['mips_arch_variant=="r6"', {
+                'defines': ['_MIPS_ARCH_MIPS64R6',],
+              }],
+              ['mips_arch_variant=="r6" and mips_use_msa==1', {
+                'defines': [ '_MIPS_MSA' ],
+              }],
+              ['mips_arch_variant=="r2"', {
+                'defines': ['_MIPS_ARCH_MIPS64R2',],
+              }],
+            ],
+          }],  #'_toolset=="host"
+        ],
+      }],  # v8_target_arch=="mips64el"
+      ['v8_target_arch=="x64"', {
+        'defines': [
+          'V8_TARGET_ARCH_X64',
+        ],
+        'xcode_settings': {
+          'ARCHS': [ 'x86_64' ],
+        },
+        'msvs_settings': {
+          'VCLinkerTool': {
+            'StackReserveSize': '2097152',
+          },
+        },
+        'msvs_configuration_platform': 'x64',
+      }],  # v8_target_arch=="x64"
+      ['v8_target_arch=="x32"', {
+        'defines': [
+          # x32 port shares the source code with x64 port.
+          'V8_TARGET_ARCH_X64',
+          'V8_TARGET_ARCH_32_BIT',
+        ],
+        'cflags': [
+          '-mx32',
+          # Inhibit warning if long long type is used.
+          '-Wno-long-long',
+        ],
+        'ldflags': [
+          '-mx32',
+        ],
+      }],  # v8_target_arch=="x32"
+      ['linux_use_gold_flags==1', {
+        # Newer gccs and clangs support -fuse-ld, use the flag to force gold
+        # selection.
+        # gcc -- http://gcc.gnu.org/onlinedocs/gcc-4.8.0/gcc/Optimize-Options.html
+        'ldflags': [ '-fuse-ld=gold', ],
+      }],
+      ['linux_use_bundled_binutils==1', {
+        'cflags': [
+          '-B<!(cd <(DEPTH) && pwd -P)/<(binutils_dir)',
+        ],
+      }],
+      ['linux_use_bundled_gold==1', {
+        # Put our binutils, which contains gold in the search path. We pass
+        # the path to gold to the compiler. gyp leaves unspecified what the
+        # cwd is when running the compiler, so the normal gyp path-munging
+        # fails us. This hack gets the right path.
+        'ldflags': [
+          '-B<!(cd <(DEPTH) && pwd -P)/<(binutils_dir)',
+        ],
+      }],
+      ['OS=="win"', {
+        'defines': [
+          'WIN32',
+        ],
+        # 4351: VS 2005 and later are warning us that they've fixed a bug
+        #       present in VS 2003 and earlier.
+        'msvs_disabled_warnings': [4351],
+        'msvs_configuration_attributes': {
+          'CharacterSet': '1',
+        },
+      }],
+      ['OS=="win" and v8_target_arch=="ia32"', {
+        'msvs_settings': {
+          'VCCLCompilerTool': {
+            # Ensure no surprising artifacts from 80bit double math with x86.
+            'AdditionalOptions': ['/arch:SSE2'],
+          },
+        },
+      }],
+      ['OS=="win" and v8_enable_prof==1', {
+        'msvs_settings': {
+          'VCLinkerTool': {
+            'GenerateMapFile': 'true',
+          },
+        },
+      }],
+      ['(OS=="linux" or OS=="freebsd" or OS=="openbsd" or OS=="solaris" \
+         or OS=="netbsd" or OS=="mac" or OS=="android" or OS=="qnx") and \
+        v8_target_arch=="ia32"', {
+        'cflags': [
+          '-msse2',
+          '-mfpmath=sse',
+          '-mmmx',  # Allows mmintrin.h for MMX intrinsics.
+        ],
+      }],
+      ['(OS=="linux" or OS=="freebsd" or OS=="openbsd" or OS=="solaris" \
+         or OS=="netbsd" or OS=="mac" or OS=="android" or OS=="qnx") and \
+        (v8_target_arch=="arm" or v8_target_arch=="ia32" or \
+         v8_target_arch=="mips" or v8_target_arch=="mipsel" or \
+         v8_target_arch=="ppc" or v8_target_arch=="s390")', {
+        'target_conditions': [
+          ['_toolset=="host"', {
+            'conditions': [
+              ['host_cxx_is_biarch==1', {
+                'conditions': [
+                  ['host_arch=="s390" or host_arch=="s390x"', {
+                    'cflags': [ '-m31' ],
+                    'ldflags': [ '-m31' ]
+                  },{
+                   'cflags': [ '-m32' ],
+                   'ldflags': [ '-m32' ]
+                  }],
+                ],
+              }],
+            ],
+            'xcode_settings': {
+              'ARCHS': [ 'i386' ],
+            },
+          }],
+          ['_toolset=="target"', {
+            'conditions': [
+              ['target_cxx_is_biarch==1', {
+                'conditions': [
+                  ['host_arch=="s390" or host_arch=="s390x"', {
+                    'cflags': [ '-m31' ],
+                    'ldflags': [ '-m31' ]
+                  },{
+                   'cflags': [ '-m32' ],
+                   'ldflags': [ '-m32' ],
+                  }],
+                ],
+              }],
+            ],
+            'xcode_settings': {
+              'ARCHS': [ 'i386' ],
+            },
+          }],
+        ],
+      }],
+      ['(OS=="linux" or OS=="android") and \
+        (v8_target_arch=="x64" or v8_target_arch=="arm64" or \
+         v8_target_arch=="ppc64" or v8_target_arch=="s390x")', {
+        'target_conditions': [
+          ['_toolset=="host"', {
+            'conditions': [
+              ['host_cxx_is_biarch==1', {
+                'cflags': [ '-m64' ],
+                'ldflags': [ '-m64' ]
+              }],
+             ],
+           }],
+           ['_toolset=="target"', {
+             'conditions': [
+               ['target_cxx_is_biarch==1', {
+                 'cflags': [ '-m64' ],
+                 'ldflags': [ '-m64' ],
+               }],
+             ]
+           }],
+         ],
+      }],
+      ['OS=="android" and v8_android_log_stdout==1', {
+        'defines': [
+          'V8_ANDROID_LOG_STDOUT',
+        ],
+      }],
+      ['OS=="linux" or OS=="freebsd" or OS=="openbsd" or OS=="solaris" \
+         or OS=="netbsd" or OS=="qnx" or OS=="aix"', {
+        'conditions': [
+          [ 'v8_no_strict_aliasing==1', {
+            'cflags': [ '-fno-strict-aliasing' ],
+          }],
+        ],  # conditions
+      }],
+      ['OS=="solaris"', {
+        'defines': [ '__C99FEATURES__=1' ],  # isinf() etc.
+      }],
+      ['OS=="freebsd" or OS=="openbsd"', {
+        'cflags': [ '-I/usr/local/include' ],
+      }],
+      ['OS=="netbsd"', {
+        'cflags': [ '-I/usr/pkg/include' ],
+      }],
+      ['OS=="aix"', {
+        'defines': [
+          # Support for malloc(0)
+          '_LINUX_SOURCE_COMPAT=1',
+          '__STDC_FORMAT_MACROS',
+          '_ALL_SOURCE=1'],
+        'conditions': [
+          [ 'v8_target_arch=="ppc"', {
+            'ldflags': [ '-Wl,-bmaxdata:0x60000000/dsa' ],
+          }],
+          [ 'v8_target_arch=="ppc64"', {
+            'cflags': [ '-maix64' ],
+            'ldflags': [ '-maix64 -Wl,-bbigtoc' ],
+          }],
+        ],
+      }],
+    ],  # conditions
+    'configurations': {
+      # Abstract configuration for v8_optimized_debug == 0.
+      'DebugBase0': {
+        'abstract': 1,
+        'msvs_settings': {
+          'VCCLCompilerTool': {
+            'Optimization': '0',
+            'conditions': [
+              ['component=="shared_library" or force_dynamic_crt==1', {
+                'RuntimeLibrary': '3',  # /MDd
+              }, {
+                'RuntimeLibrary': '1',  # /MTd
+              }],
+            ],
+          },
+          'VCLinkerTool': {
+            'LinkIncremental': '2',
+          },
+        },
+        'variables': {
+          'v8_enable_slow_dchecks%': 1,
+        },
+        'conditions': [
+          ['OS=="linux" or OS=="freebsd" or OS=="openbsd" or OS=="netbsd" or \
+            OS=="qnx" or OS=="aix"', {
+            'cflags!': [
+              '-O3',
+              '-O2',
+              '-O1',
+              '-Os',
+            ],
+            'cflags': [
+              '-fdata-sections',
+              '-ffunction-sections',
+            ],
+          }],
+          ['OS=="mac"', {
+            'xcode_settings': {
+               'GCC_OPTIMIZATION_LEVEL': '0',  # -O0
+            },
+          }],
+          ['v8_enable_slow_dchecks==1', {
+            'defines': [
+              'ENABLE_SLOW_DCHECKS',
+            ],
+          }],
+        ],
+      },  # DebugBase0
+      # Abstract configuration for v8_optimized_debug == 1.
+      'DebugBase1': {
+        'abstract': 1,
+        'msvs_settings': {
+          'VCCLCompilerTool': {
+            'Optimization': '2',
+            'InlineFunctionExpansion': '2',
+            'EnableIntrinsicFunctions': 'true',
+            'FavorSizeOrSpeed': '0',
+            'StringPooling': 'true',
+            'BasicRuntimeChecks': '0',
+            'conditions': [
+              ['component=="shared_library" or force_dynamic_crt==1', {
+                'RuntimeLibrary': '3',  #/MDd
+              }, {
+                'RuntimeLibrary': '1',  #/MTd
+              }],
+            ],
+          },
+          'VCLinkerTool': {
+            'LinkIncremental': '1',
+            'OptimizeReferences': '2',
+            'EnableCOMDATFolding': '2',
+          },
+        },
+        'variables': {
+          'v8_enable_slow_dchecks%': 0,
+        },
+        'conditions': [
+          ['OS=="linux" or OS=="freebsd" or OS=="openbsd" or OS=="netbsd" or \
+            OS=="qnx" or OS=="aix"', {
+            'cflags!': [
+              '-O0',
+              '-O1',
+              '-Os',
+            ],
+            'cflags': [
+              '-fdata-sections',
+              '-ffunction-sections',
+            ],
+            'conditions': [
+              # Don't use -O3 with sanitizers.
+              ['asan==0 and msan==0 and lsan==0 \
+                and tsan==0 and ubsan==0 and ubsan_vptr==0', {
+                'cflags': ['-O3'],
+                'cflags!': ['-O2'],
+                }, {
+                'cflags': ['-O2'],
+                'cflags!': ['-O3'],
+              }],
+            ],
+          }],
+          ['OS=="mac"', {
+            'xcode_settings': {
+              'GCC_OPTIMIZATION_LEVEL': '3',  # -O3
+              'GCC_STRICT_ALIASING': 'YES',
+            },
+          }],
+          ['v8_enable_slow_dchecks==1', {
+            'defines': [
+              'ENABLE_SLOW_DCHECKS',
+            ],
+          }],
+        ],
+      },  # DebugBase1
+      # Common settings for the Debug configuration.
+      'DebugBaseCommon': {
+        'abstract': 1,
+        'defines': [
+          'ENABLE_DISASSEMBLER',
+          'V8_ENABLE_CHECKS',
+          'OBJECT_PRINT',
+          'VERIFY_HEAP',
+          'DEBUG',
+          'V8_TRACE_MAPS',
+          'V8_ENABLE_ALLOCATION_TIMEOUT',
+          'V8_ENABLE_FORCE_SLOW_PATH',
+        ],
+        'conditions': [
+          ['OS=="linux" or OS=="freebsd" or OS=="openbsd" or OS=="netbsd" or \
+            OS=="qnx" or OS=="aix"', {
+            'cflags': [ '-Woverloaded-virtual', '<(wno_array_bounds)', ],
+          }],
+          ['OS=="linux" and v8_enable_backtrace==1', {
+            # Support for backtrace_symbols.
+            'ldflags': [ '-rdynamic' ],
+          }],
+          ['OS=="linux" and disable_glibcxx_debug==0', {
+            # Enable libstdc++ debugging facilities to help catch problems
+            # early, see http://crbug.com/65151 .
+            'defines': ['_GLIBCXX_DEBUG=1',],
+          }],
+          ['OS=="aix"', {
+            'ldflags': [ '-Wl,-bbigtoc' ],
+            'conditions': [
+              ['v8_target_arch=="ppc64"', {
+                'cflags': [ '-maix64 -mcmodel=large' ],
+              }],
+            ],
+          }],
+          ['OS=="android"', {
+            'variables': {
+              'android_full_debug%': 1,
+            },
+            'conditions': [
+              ['android_full_debug==0', {
+                # Disable full debug if we want a faster v8 in a debug build.
+                # TODO(2304): pass DISABLE_DEBUG_ASSERT instead of hiding DEBUG.
+                'defines!': [
+                  'DEBUG',
+                  'ENABLE_SLOW_DCHECKS',
+                ],
+              }],
+            ],
+          }],
+          ['linux_use_gold_flags==1', {
+            'target_conditions': [
+              ['_toolset=="target"', {
+                'ldflags': [
+                  # Experimentation found that using four linking threads
+                  # saved ~20% of link time.
+                  # https://groups.google.com/a/chromium.org/group/chromium-dev/browse_thread/thread/281527606915bb36
+                  # Only apply this to the target linker, since the host
+                  # linker might not be gold, but isn't used much anyway.
+                  '-Wl,--threads',
+                  '-Wl,--thread-count=4',
+                ],
+              }],
+            ],
+          }],
+        ],
+      },  # DebugBaseCommon
+      'Debug': {
+        'inherit_from': ['DebugBaseCommon'],
+        'conditions': [
+          ['v8_optimized_debug==0', {
+            'inherit_from': ['DebugBase0'],
+          }, {
+            'inherit_from': ['DebugBase1'],
+          }],
+        ],
+      },  # Debug
+      'ReleaseBase': {
+        'abstract': 1,
+        'variables': {
+          'v8_enable_slow_dchecks%': 0,
+        },
+        'conditions': [
+          ['OS=="linux" or OS=="freebsd" or OS=="openbsd" or OS=="netbsd" \
+            or OS=="aix"', {
+            'cflags!': [
+              '-Os',
+            ],
+            'cflags': [
+              '-fdata-sections',
+              '-ffunction-sections',
+              '<(wno_array_bounds)',
+            ],
+            'conditions': [
+              # Don't use -O3 with sanitizers.
+              ['asan==0 and msan==0 and lsan==0 \
+                and tsan==0 and ubsan==0 and ubsan_vptr==0', {
+                'cflags': ['-O3'],
+                'cflags!': ['-O2'],
+              }, {
+                'cflags': ['-O2'],
+                'cflags!': ['-O3'],
+              }],
+            ],
+          }],
+          ['OS=="android"', {
+            'cflags!': [
+              '-O3',
+              '-Os',
+            ],
+            'cflags': [
+              '-fdata-sections',
+              '-ffunction-sections',
+              '-O2',
+            ],
+          }],
+          ['OS=="mac"', {
+            'xcode_settings': {
+              'GCC_OPTIMIZATION_LEVEL': '3',  # -O3
+
+              # -fstrict-aliasing.  Mainline gcc
+              # enables this at -O2 and above,
+              # but Apple gcc does not unless it
+              # is specified explicitly.
+              'GCC_STRICT_ALIASING': 'YES',
+            },
+          }],  # OS=="mac"
+          ['OS=="win"', {
+            'msvs_settings': {
+              'VCCLCompilerTool': {
+                'Optimization': '2',
+                'InlineFunctionExpansion': '2',
+                'EnableIntrinsicFunctions': 'true',
+                'FavorSizeOrSpeed': '0',
+                'StringPooling': 'true',
+                'conditions': [
+                  ['component=="shared_library" or force_dynamic_crt==1', {
+                    'RuntimeLibrary': '2',  #/MD
+                  }, {
+                    'RuntimeLibrary': '0',  #/MT
+                  }],
+                ],
+              },
+              'VCLinkerTool': {
+                'LinkIncremental': '1',
+                'OptimizeReferences': '2',
+                'EnableCOMDATFolding': '2',
+              },
+            },
+          }],  # OS=="win"
+          ['v8_enable_slow_dchecks==1', {
+            'defines': [
+              'ENABLE_SLOW_DCHECKS',
+            ],
+          }],
+        ],  # conditions
+      },  # Release
+      'Release': {
+        'inherit_from': ['ReleaseBase'],
+      },  # Debug
+      'conditions': [
+        [ 'OS=="win"', {
+          # TODO(bradnelson): add a gyp mechanism to make this more graceful.
+          'Debug_x64': {
+            'inherit_from': ['DebugBaseCommon'],
+            'conditions': [
+              ['v8_optimized_debug==0', {
+                'inherit_from': ['DebugBase0'],
+              }, {
+                'inherit_from': ['DebugBase1'],
+              }],
+            ],
+          },
+          'Release_x64': {
+            'inherit_from': ['ReleaseBase'],
+          },
+        }],
+      ],
+    },  # configurations
+  },  # target_defaults
+}
diff --git a/gypfiles/v8.gyp b/gypfiles/v8.gyp
new file mode 100644
index 0000000000..7116333b01
--- /dev/null
+++ b/gypfiles/v8.gyp
@@ -0,0 +1,2640 @@
+# Copyright 2012 the V8 project authors. All rights reserved.
+# Use of this source code is governed by a BSD-style license that can be
+# found in the LICENSE file.
+
+{
+  'variables': {
+    'v8_code': 1,
+    'v8_random_seed%': 314159265,
+    'v8_vector_stores%': 0,
+    'embed_script%': "",
+    'warmup_script%': "",
+    'v8_extra_library_files%': [],
+    'v8_experimental_extra_library_files%': [],
+    'mksnapshot_exec': '<(PRODUCT_DIR)/<(EXECUTABLE_PREFIX)mksnapshot<(EXECUTABLE_SUFFIX)',
+    'v8_os_page_size%': 0,
+  },
+  'includes': ['toolchain.gypi', 'features.gypi', 'inspector.gypi'],
+  'targets': [
+    {
+      'target_name': 'v8',
+      'dependencies_traverse': 1,
+      'dependencies': ['v8_maybe_snapshot', 'v8_dump_build_config#target'],
+      'conditions': [
+        ['want_separate_host_toolset==1', {
+          'toolsets': ['host', 'target'],
+        }, {
+          'toolsets': ['target'],
+        }],
+        ['component=="shared_library"', {
+          'sources': [
+            # Note: on non-Windows we still build this file so that gyp
+            # has some sources to link into the component.
+            '../src/v8dll-main.cc',
+          ],
+          'direct_dependent_settings': {
+            'defines': [
+              'USING_V8_SHARED',
+            ],
+          },
+        }],
+        ['1==1', {
+          'type': '<(component)',
+          'include_dirs': [
+            '..',
+          ],
+          'defines': [
+            'BUILDING_V8_SHARED',
+          ],
+          'direct_dependent_settings': {
+            'defines': [
+              'V8_SHARED',
+            ],
+          },
+          'conditions': [
+            ['OS=="mac"', {
+              'xcode_settings': {
+                'OTHER_LDFLAGS': ['-dynamiclib', '-all_load']
+              },
+            }],
+            ['soname_version!=""', {
+              'product_extension': 'so.<(soname_version)',
+            }],
+          ],
+        },
+        {
+          'type': 'none',
+        }],
+      ],
+      'direct_dependent_settings': {
+        'include_dirs': [
+          '../include/',
+        ],
+      },
+    },
+    {
+      # This rule delegates to either v8_snapshot, v8_nosnapshot, or
+      # v8_external_snapshot, depending on the current variables.
+      # The intention is to make the 'calling' rules a bit simpler.
+      'target_name': 'v8_maybe_snapshot',
+      'type': 'none',
+      'conditions': [
+        ['v8_use_snapshot!="true"', {
+          # The dependency on v8_base should come from a transitive
+          # dependency however the Android toolchain requires libv8_base.a
+          # to appear before libv8_snapshot.a so it's listed explicitly.
+          'dependencies': ['v8_base', 'v8_init', 'v8_nosnapshot'],
+        }],
+        ['v8_use_snapshot=="true" and v8_use_external_startup_data==0', {
+          # The dependency on v8_base should come from a transitive
+          # dependency however the Android toolchain requires libv8_base.a
+          # to appear before libv8_snapshot.a so it's listed explicitly.
+          'dependencies': ['v8_base', 'v8_snapshot'],
+        }],
+        ['v8_use_snapshot=="true" and v8_use_external_startup_data==1 and want_separate_host_toolset==0', {
+          'dependencies': ['v8_base', 'v8_external_snapshot'],
+          'inputs': [ '<(PRODUCT_DIR)/snapshot_blob.bin', ],
+        }],
+        ['v8_use_snapshot=="true" and v8_use_external_startup_data==1 and want_separate_host_toolset==1', {
+          'dependencies': ['v8_base', 'v8_external_snapshot'],
+          'target_conditions': [
+            ['_toolset=="host"', {
+              'inputs': [
+                '<(PRODUCT_DIR)/snapshot_blob_host.bin',
+              ],
+            }, {
+              'inputs': [
+                '<(PRODUCT_DIR)/snapshot_blob.bin',
+              ],
+            }],
+          ],
+        }],
+        ['want_separate_host_toolset==1', {
+          'toolsets': ['host', 'target'],
+        }, {
+          'toolsets': ['target'],
+        }],
+      ]
+    },
+    {
+      'target_name': 'v8_init',
+      'type': 'static_library',
+      'dependencies': [
+        'v8_initializers',
+      ],
+      'variables': {
+        'optimize': 'max',
+      },
+      'include_dirs+': [
+        '..',
+        '../include/',
+      ],
+      'sources': [
+        '../src/setup-isolate-full.cc',
+      ],
+      'conditions': [
+        ['want_separate_host_toolset==1', {
+          'toolsets': ['host', 'target'],
+        }, {
+          'toolsets': ['target'],
+        }],
+      ],
+    },
+    {
+      'target_name': 'v8_initializers',
+      'type': 'static_library',
+      'dependencies': [
+        'v8_base',
+      ],
+       'variables': {
+        'optimize': 'max',
+      },
+      'include_dirs+': [
+        '..',
+        '../include/',
+      ],
+      'sources': [
+        '../src/builtins/builtins-arguments-gen.cc',
+        '../src/builtins/builtins-arguments-gen.h',
+        '../src/builtins/builtins-array-gen.cc',
+        '../src/builtins/builtins-array-gen.h',
+        '../src/builtins/builtins-async-function-gen.cc',
+        '../src/builtins/builtins-async-gen.cc',
+        '../src/builtins/builtins-async-gen.h',
+        '../src/builtins/builtins-async-generator-gen.cc',
+        '../src/builtins/builtins-async-iterator-gen.cc',
+        '../src/builtins/builtins-boolean-gen.cc',
+        '../src/builtins/builtins-call-gen.cc',
+        '../src/builtins/builtins-call-gen.h',
+        '../src/builtins/builtins-collections-gen.cc',
+        '../src/builtins/builtins-console-gen.cc',
+        '../src/builtins/builtins-constructor-gen.cc',
+        '../src/builtins/builtins-constructor-gen.h',
+        '../src/builtins/builtins-constructor.h',
+        '../src/builtins/builtins-conversion-gen.cc',
+        '../src/builtins/builtins-date-gen.cc',
+        '../src/builtins/builtins-debug-gen.cc',
+        '../src/builtins/builtins-function-gen.cc',
+        '../src/builtins/builtins-generator-gen.cc',
+        '../src/builtins/builtins-global-gen.cc',
+        '../src/builtins/builtins-handler-gen.cc',
+        '../src/builtins/builtins-ic-gen.cc',
+        '../src/builtins/builtins-internal-gen.cc',
+        '../src/builtins/builtins-interpreter-gen.cc',
+        '../src/builtins/builtins-intl-gen.cc',
+        '../src/builtins/builtins-iterator-gen.h',
+        '../src/builtins/builtins-iterator-gen.cc',
+        '../src/builtins/builtins-math-gen.cc',
+        '../src/builtins/builtins-math-gen.h',
+        '../src/builtins/builtins-number-gen.cc',
+        '../src/builtins/builtins-object-gen.cc',
+        '../src/builtins/builtins-promise-gen.cc',
+        '../src/builtins/builtins-promise-gen.h',
+        '../src/builtins/builtins-proxy-gen.cc',
+        '../src/builtins/builtins-proxy-gen.h',
+        '../src/builtins/builtins-reflect-gen.cc',
+        '../src/builtins/builtins-regexp-gen.cc',
+        '../src/builtins/builtins-regexp-gen.h',
+        '../src/builtins/builtins-sharedarraybuffer-gen.cc',
+        '../src/builtins/builtins-string-gen.cc',
+        '../src/builtins/builtins-string-gen.h',
+        '../src/builtins/builtins-symbol-gen.cc',
+        '../src/builtins/builtins-typedarray-gen.cc',
+        '../src/builtins/builtins-utils-gen.h',
+        '../src/builtins/builtins-wasm-gen.cc',
+        '../src/builtins/setup-builtins-internal.cc',
+        '../src/heap/setup-heap-internal.cc',
+        '../src/ic/accessor-assembler.cc',
+        '../src/ic/accessor-assembler.h',
+        '../src/ic/binary-op-assembler.cc',
+        '../src/ic/binary-op-assembler.h',
+        '../src/ic/keyed-store-generic.cc',
+        '../src/ic/keyed-store-generic.h',
+        '../src/interpreter/interpreter-assembler.cc',
+        '../src/interpreter/interpreter-assembler.h',
+        '../src/interpreter/interpreter-generator.cc',
+        '../src/interpreter/interpreter-generator.h',
+        '../src/interpreter/interpreter-intrinsics-generator.cc',
+        '../src/interpreter/interpreter-intrinsics-generator.h',
+        '../src/interpreter/setup-interpreter-internal.cc',
+        '../src/interpreter/setup-interpreter.h',
+      ],
+      'conditions': [
+        ['want_separate_host_toolset==1', {
+          'toolsets': ['host', 'target'],
+        }, {
+          'toolsets': ['target'],
+        }],
+        ['v8_target_arch=="ia32"', {
+          'sources': [
+            '../src/builtins/ia32/builtins-ia32.cc',
+          ],
+        }],
+        ['v8_target_arch=="x64"', {
+          'sources': [
+            '../src/builtins/x64/builtins-x64.cc',
+          ],
+        }],
+        ['v8_target_arch=="arm"', {
+          'sources': [
+            '../src/builtins/arm/builtins-arm.cc',
+          ],
+        }],
+        ['v8_target_arch=="arm64"', {
+          'sources': [
+            '../src/builtins/arm64/builtins-arm64.cc',
+          ],
+        }],
+        ['v8_target_arch=="mips" or v8_target_arch=="mipsel"', {
+          'sources': [
+            '../src/builtins/mips/builtins-mips.cc',
+          ],
+        }],
+        ['v8_target_arch=="mips64" or v8_target_arch=="mips64el"', {
+          'sources': [
+            '../src/builtins/mips64/builtins-mips64.cc',
+          ],
+        }],
+        ['v8_target_arch=="ppc" or v8_target_arch=="ppc64"', {
+          'sources': [
+            '../src/builtins/ppc/builtins-ppc.cc',
+          ],
+        }],
+        ['v8_target_arch=="s390" or v8_target_arch=="s390x"', {
+          'sources': [
+            '../src/builtins/s390/builtins-s390.cc',
+          ],
+        }],
+        ['v8_enable_i18n_support==0', {
+          'sources!': [
+            '../src/builtins/builtins-intl-gen.cc',
+          ],
+        }],
+      ],
+    },
+    {
+      'target_name': 'v8_snapshot',
+      'type': 'static_library',
+      'conditions': [
+        ['want_separate_host_toolset==1', {
+          'toolsets': ['host', 'target'],
+          'dependencies': [
+            'mksnapshot#host',
+            'js2c#host',
+          ],
+        }, {
+          'toolsets': ['target'],
+          'dependencies': [
+            'mksnapshot',
+            'js2c',
+          ],
+        }],
+        ['1==1', {
+          'defines': [
+            'BUILDING_V8_SHARED',
+          ],
+          'direct_dependent_settings': {
+            'defines': [
+              'V8_SHARED',
+            ],
+          },
+        }],
+      ],
+      'dependencies': [
+        'v8_base',
+      ],
+      'include_dirs+': [
+        '..',
+        '<(DEPTH)',
+      ],
+      'sources': [
+        '<(SHARED_INTERMEDIATE_DIR)/libraries.cc',
+        '<(SHARED_INTERMEDIATE_DIR)/extras-libraries.cc',
+        '<(SHARED_INTERMEDIATE_DIR)/experimental-extras-libraries.cc',
+        '<(INTERMEDIATE_DIR)/snapshot.cc',
+        '../src/setup-isolate-deserialize.cc',
+      ],
+      'actions': [
+        {
+          'action_name': 'run_mksnapshot',
+          'inputs': [
+            '<(mksnapshot_exec)',
+          ],
+          'conditions': [
+            ['embed_script!=""', {
+              'inputs': [
+                '<(embed_script)',
+              ],
+            }],
+            ['warmup_script!=""', {
+              'inputs': [
+                '<(warmup_script)',
+              ],
+            }],
+          ],
+          'outputs': [
+            '<(INTERMEDIATE_DIR)/snapshot.cc',
+          ],
+          'variables': {
+            'mksnapshot_flags': [],
+            'conditions': [
+              ['v8_random_seed!=0', {
+                'mksnapshot_flags': ['--random-seed', '<(v8_random_seed)'],
+              }],
+              ['v8_vector_stores!=0', {
+                'mksnapshot_flags': ['--vector-stores'],
+              }],
+            ],
+          },
+          'action': [
+            '<(mksnapshot_exec)',
+            '<@(mksnapshot_flags)',
+            '--startup_src', '<@(INTERMEDIATE_DIR)/snapshot.cc',
+            '<(embed_script)',
+            '<(warmup_script)',
+          ],
+        },
+      ],
+    },
+    {
+      'target_name': 'v8_nosnapshot',
+      'type': 'static_library',
+      'dependencies': [
+        'v8_base',
+      ],
+      'include_dirs+': [
+        '..',
+        '<(DEPTH)',
+      ],
+      'sources': [
+        '<(SHARED_INTERMEDIATE_DIR)/libraries.cc',
+        '<(SHARED_INTERMEDIATE_DIR)/extras-libraries.cc',
+        '<(SHARED_INTERMEDIATE_DIR)/experimental-extras-libraries.cc',
+        '../src/snapshot/snapshot-empty.cc',
+      ],
+      'conditions': [
+        ['want_separate_host_toolset==1', {
+          'toolsets': ['host', 'target'],
+          'dependencies': ['js2c#host'],
+        }, {
+          'toolsets': ['target'],
+          'dependencies': ['js2c'],
+        }],
+        ['1==1', {
+          'defines': [
+            'BUILDING_V8_SHARED',
+          ],
+        }],
+      ]
+    },
+    {
+      'target_name': 'v8_external_snapshot',
+      'type': 'static_library',
+      'conditions': [
+        [ 'v8_use_external_startup_data==1', {
+          'conditions': [
+            ['want_separate_host_toolset==1', {
+              'toolsets': ['host', 'target'],
+              'dependencies': [
+                'mksnapshot#host',
+                'js2c#host',
+                'natives_blob',
+            ]}, {
+              'toolsets': ['target'],
+              'dependencies': [
+                'mksnapshot',
+                'js2c',
+                'natives_blob',
+              ],
+            }],
+            ['1==1', {
+              'defines': [
+                'BUILDING_V8_SHARED',
+              ],
+              'direct_dependent_settings': {
+                'defines': [
+                  'V8_SHARED',
+                ],
+              },
+            }],
+          ],
+          'dependencies': [
+            'v8_base',
+          ],
+          'include_dirs+': [
+            '..',
+            '<(DEPTH)',
+          ],
+          'sources': [
+            '../src/setup-isolate-deserialize.cc',
+            '../src/snapshot/natives-external.cc',
+            '../src/snapshot/snapshot-external.cc',
+          ],
+          'actions': [
+            {
+              'action_name': 'run_mksnapshot (external)',
+              'inputs': [
+                '<(mksnapshot_exec)',
+              ],
+              'variables': {
+                'mksnapshot_flags': [],
+                'conditions': [
+                  ['v8_random_seed!=0', {
+                    'mksnapshot_flags': ['--random-seed', '<(v8_random_seed)'],
+                  }],
+                  ['v8_vector_stores!=0', {
+                    'mksnapshot_flags': ['--vector-stores'],
+                  }],
+                  ['v8_os_page_size!=0', {
+                    'mksnapshot_flags': ['--v8_os_page_size', '<(v8_os_page_size)'],
+                  }],
+                ],
+              },
+              'conditions': [
+                ['embed_script!=""', {
+                  'inputs': [
+                    '<(embed_script)',
+                  ],
+                }],
+                ['warmup_script!=""', {
+                  'inputs': [
+                    '<(warmup_script)',
+                  ],
+                }],
+                ['want_separate_host_toolset==1', {
+                  'target_conditions': [
+                    ['_toolset=="host"', {
+                      'outputs': [
+                        '<(PRODUCT_DIR)/snapshot_blob_host.bin',
+                      ],
+                      'action': [
+                        '<(mksnapshot_exec)',
+                        '<@(mksnapshot_flags)',
+                        '--startup_blob', '<(PRODUCT_DIR)/snapshot_blob_host.bin',
+                        '<(embed_script)',
+                        '<(warmup_script)',
+                      ],
+                    }, {
+                      'outputs': [
+                        '<(PRODUCT_DIR)/snapshot_blob.bin',
+                      ],
+                      'action': [
+                        '<(mksnapshot_exec)',
+                        '<@(mksnapshot_flags)',
+                        '--startup_blob', '<(PRODUCT_DIR)/snapshot_blob.bin',
+                        '<(embed_script)',
+                        '<(warmup_script)',
+                      ],
+                    }],
+                  ],
+                }, {
+                  'outputs': [
+                    '<(PRODUCT_DIR)/snapshot_blob.bin',
+                  ],
+                  'action': [
+                    '<(mksnapshot_exec)',
+                    '<@(mksnapshot_flags)',
+                    '--startup_blob', '<(PRODUCT_DIR)/snapshot_blob.bin',
+                    '<(embed_script)',
+                    '<(warmup_script)',
+                  ],
+                }],
+              ],
+            },
+          ],
+        }],
+      ],
+    },
+    {
+      'target_name': 'v8_base',
+      'type': 'static_library',
+      'dependencies': [
+        'v8_libbase',
+        'v8_libsampler',
+        'inspector.gyp:protocol_generated_sources#target',
+        'inspector.gyp:inspector_injected_script#target',
+      ],
+      'objs': ['foo.o'],
+      'variables': {
+        'optimize': 'max',
+      },
+      'include_dirs+': [
+        '..',
+        '<(DEPTH)',
+        '<(SHARED_INTERMEDIATE_DIR)'
+      ],
+      'sources': [
+        '<@(inspector_all_sources)',
+        '../include//v8-debug.h',
+        '../include//v8-platform.h',
+        '../include//v8-profiler.h',
+        '../include//v8-testing.h',
+        '../include//v8-util.h',
+        '../include//v8-value-serializer-version.h',
+        '../include//v8-version-string.h',
+        '../include//v8-version.h',
+        '../include//v8.h',
+        '../include//v8config.h',
+        '../src/accessors.cc',
+        '../src/accessors.h',
+        '../src/address-map.cc',
+        '../src/address-map.h',
+        '../src/allocation.cc',
+        '../src/allocation.h',
+        '../src/allocation-site-scopes.h',
+        '../src/api.cc',
+        '../src/api.h',
+        '../src/api-arguments-inl.h',
+        '../src/api-arguments.cc',
+        '../src/api-arguments.h',
+        '../src/api-natives.cc',
+        '../src/api-natives.h',
+        '../src/arguments.cc',
+        '../src/arguments.h',
+        '../src/asmjs/asm-js.cc',
+        '../src/asmjs/asm-js.h',
+        '../src/asmjs/asm-names.h',
+        '../src/asmjs/asm-parser.cc',
+        '../src/asmjs/asm-parser.h',
+        '../src/asmjs/asm-scanner.cc',
+        '../src/asmjs/asm-scanner.h',
+        '../src/asmjs/asm-types.cc',
+        '../src/asmjs/asm-types.h',
+        '../src/asmjs/switch-logic.h',
+        '../src/asmjs/switch-logic.cc',
+        '../src/assembler.cc',
+        '../src/assembler.h',
+        '../src/assembler-inl.h',
+        '../src/assert-scope.h',
+        '../src/assert-scope.cc',
+        '../src/ast/ast-function-literal-id-reindexer.cc',
+        '../src/ast/ast-function-literal-id-reindexer.h',
+        '../src/ast/ast-source-ranges.h',
+        '../src/ast/ast-traversal-visitor.h',
+        '../src/ast/ast-value-factory.cc',
+        '../src/ast/ast-value-factory.h',
+        '../src/ast/ast.cc',
+        '../src/ast/ast.h',
+        '../src/ast/compile-time-value.cc',
+        '../src/ast/compile-time-value.h',
+        '../src/ast/context-slot-cache.cc',
+        '../src/ast/context-slot-cache.h',
+        '../src/ast/modules.cc',
+        '../src/ast/modules.h',
+        '../src/ast/prettyprinter.cc',
+        '../src/ast/prettyprinter.h',
+        '../src/ast/scopes.cc',
+        '../src/ast/scopes.h',
+        '../src/ast/variables.cc',
+        '../src/ast/variables.h',
+        '../src/bailout-reason.cc',
+        '../src/bailout-reason.h',
+        '../src/basic-block-profiler.cc',
+        '../src/basic-block-profiler.h',
+        '../src/bignum-dtoa.cc',
+        '../src/bignum-dtoa.h',
+        '../src/bignum.cc',
+        '../src/bignum.h',
+        '../src/bit-vector.cc',
+        '../src/bit-vector.h',
+        '../src/bootstrapper.cc',
+        '../src/bootstrapper.h',
+        '../src/boxed-float.h',
+        '../src/builtins/builtins-api.cc',
+        '../src/builtins/builtins-arraybuffer.cc',
+        '../src/builtins/builtins-array.cc',
+        '../src/builtins/builtins-bigint.cc',
+        '../src/builtins/builtins-boolean.cc',
+        '../src/builtins/builtins-call.cc',
+        '../src/builtins/builtins-callsite.cc',
+        '../src/builtins/builtins-collections.cc',
+        '../src/builtins/builtins-console.cc',
+        '../src/builtins/builtins-constructor.h',
+        '../src/builtins/builtins-dataview.cc',
+        '../src/builtins/builtins-date.cc',
+        '../src/builtins/builtins-definitions.h',
+        '../src/builtins/builtins-descriptors.h',
+        '../src/builtins/builtins-error.cc',
+        '../src/builtins/builtins-function.cc',
+        '../src/builtins/builtins-global.cc',
+        '../src/builtins/builtins-internal.cc',
+        '../src/builtins/builtins-interpreter.cc',
+        '../src/builtins/builtins-json.cc',
+        '../src/builtins/builtins-math.cc',
+        '../src/builtins/builtins-number.cc',
+        '../src/builtins/builtins-object.cc',
+        '../src/builtins/builtins-promise.cc',
+        '../src/builtins/builtins-reflect.cc',
+        '../src/builtins/builtins-regexp.cc',
+        '../src/builtins/builtins-sharedarraybuffer.cc',
+        '../src/builtins/builtins-string.cc',
+        '../src/builtins/builtins-intl.cc',
+        '../src/builtins/builtins-intl.h',
+        '../src/builtins/builtins-symbol.cc',
+        '../src/builtins/builtins-typedarray.cc',
+        '../src/builtins/builtins-utils.h',
+        '../src/builtins/builtins.cc',
+        '../src/builtins/builtins.h',
+        '../src/cached-powers.cc',
+        '../src/cached-powers.h',
+        '../src/callable.h',
+        '../src/cancelable-task.cc',
+        '../src/cancelable-task.h',
+        '../src/char-predicates.cc',
+        '../src/char-predicates-inl.h',
+        '../src/char-predicates.h',
+        '../src/checks.h',
+        '../src/code-events.h',
+        '../src/code-factory.cc',
+        '../src/code-factory.h',
+        '../src/code-stub-assembler.cc',
+        '../src/code-stub-assembler.h',
+        '../src/code-stubs.cc',
+        '../src/code-stubs.h',
+        '../src/code-stubs-utils.h',
+        '../src/codegen.cc',
+        '../src/codegen.h',
+        '../src/collector.h',
+        '../src/compilation-cache.cc',
+        '../src/compilation-cache.h',
+        '../src/compilation-dependencies.cc',
+        '../src/compilation-dependencies.h',
+        '../src/compilation-info.cc',
+        '../src/compilation-info.h',
+        '../src/compilation-statistics.cc',
+        '../src/compilation-statistics.h',
+        '../src/compiler/access-builder.cc',
+        '../src/compiler/access-builder.h',
+        '../src/compiler/access-info.cc',
+        '../src/compiler/access-info.h',
+        '../src/compiler/all-nodes.cc',
+        '../src/compiler/all-nodes.h',
+        '../src/compiler/allocation-builder.h',
+        '../src/compiler/basic-block-instrumentor.cc',
+        '../src/compiler/basic-block-instrumentor.h',
+        '../src/compiler/branch-elimination.cc',
+        '../src/compiler/branch-elimination.h',
+        '../src/compiler/bytecode-analysis.cc',
+        '../src/compiler/bytecode-analysis.h',
+        '../src/compiler/bytecode-graph-builder.cc',
+        '../src/compiler/bytecode-graph-builder.h',
+        '../src/compiler/bytecode-liveness-map.cc',
+        '../src/compiler/bytecode-liveness-map.h',
+        '../src/compiler/c-linkage.cc',
+        '../src/compiler/checkpoint-elimination.cc',
+        '../src/compiler/checkpoint-elimination.h',
+        '../src/compiler/code-generator-impl.h',
+        '../src/compiler/code-generator.cc',
+        '../src/compiler/code-generator.h',
+        '../src/compiler/code-assembler.cc',
+        '../src/compiler/code-assembler.h',
+        '../src/compiler/common-node-cache.cc',
+        '../src/compiler/common-node-cache.h',
+        '../src/compiler/common-operator-reducer.cc',
+        '../src/compiler/common-operator-reducer.h',
+        '../src/compiler/common-operator.cc',
+        '../src/compiler/common-operator.h',
+        '../src/compiler/control-equivalence.cc',
+        '../src/compiler/control-equivalence.h',
+        '../src/compiler/control-flow-optimizer.cc',
+        '../src/compiler/control-flow-optimizer.h',
+        '../src/compiler/dead-code-elimination.cc',
+        '../src/compiler/dead-code-elimination.h',
+        '../src/compiler/diamond.h',
+        '../src/compiler/effect-control-linearizer.cc',
+        '../src/compiler/effect-control-linearizer.h',
+        '../src/compiler/escape-analysis.cc',
+        '../src/compiler/escape-analysis.h',
+        '../src/compiler/escape-analysis-reducer.cc',
+        '../src/compiler/escape-analysis-reducer.h',
+        '../src/compiler/frame.cc',
+        '../src/compiler/frame.h',
+        '../src/compiler/frame-elider.cc',
+        '../src/compiler/frame-elider.h',
+        '../src/compiler/frame-states.cc',
+        '../src/compiler/frame-states.h',
+        '../src/compiler/functional-list.h',
+        '../src/compiler/gap-resolver.cc',
+        '../src/compiler/gap-resolver.h',
+        '../src/compiler/graph-assembler.cc',
+        '../src/compiler/graph-assembler.h',
+        '../src/compiler/graph-reducer.cc',
+        '../src/compiler/graph-reducer.h',
+        '../src/compiler/graph-trimmer.cc',
+        '../src/compiler/graph-trimmer.h',
+        '../src/compiler/graph-visualizer.cc',
+        '../src/compiler/graph-visualizer.h',
+        '../src/compiler/graph.cc',
+        '../src/compiler/graph.h',
+        '../src/compiler/instruction-codes.h',
+        '../src/compiler/instruction-selector-impl.h',
+        '../src/compiler/instruction-selector.cc',
+        '../src/compiler/instruction-selector.h',
+        '../src/compiler/instruction-scheduler.cc',
+        '../src/compiler/instruction-scheduler.h',
+        '../src/compiler/instruction.cc',
+        '../src/compiler/instruction.h',
+        '../src/compiler/int64-lowering.cc',
+        '../src/compiler/int64-lowering.h',
+        '../src/compiler/js-builtin-reducer.cc',
+        '../src/compiler/js-builtin-reducer.h',
+        '../src/compiler/js-call-reducer.cc',
+        '../src/compiler/js-call-reducer.h',
+        '../src/compiler/js-context-specialization.cc',
+        '../src/compiler/js-context-specialization.h',
+        '../src/compiler/js-create-lowering.cc',
+        '../src/compiler/js-create-lowering.h',
+        '../src/compiler/js-generic-lowering.cc',
+        '../src/compiler/js-generic-lowering.h',
+        '../src/compiler/js-graph.cc',
+        '../src/compiler/js-graph.h',
+        '../src/compiler/js-inlining.cc',
+        '../src/compiler/js-inlining.h',
+        '../src/compiler/js-inlining-heuristic.cc',
+        '../src/compiler/js-inlining-heuristic.h',
+        '../src/compiler/js-intrinsic-lowering.cc',
+        '../src/compiler/js-intrinsic-lowering.h',
+        '../src/compiler/js-native-context-specialization.cc',
+        '../src/compiler/js-native-context-specialization.h',
+        '../src/compiler/js-operator.cc',
+        '../src/compiler/js-operator.h',
+        '../src/compiler/js-type-hint-lowering.cc',
+        '../src/compiler/js-type-hint-lowering.h',
+        '../src/compiler/js-typed-lowering.cc',
+        '../src/compiler/js-typed-lowering.h',
+        '../src/compiler/jump-threading.cc',
+        '../src/compiler/jump-threading.h',
+        '../src/compiler/linkage.cc',
+        '../src/compiler/linkage.h',
+        '../src/compiler/live-range-separator.cc',
+        '../src/compiler/live-range-separator.h',
+        '../src/compiler/load-elimination.cc',
+        '../src/compiler/load-elimination.h',
+        '../src/compiler/loop-analysis.cc',
+        '../src/compiler/loop-analysis.h',
+        '../src/compiler/loop-peeling.cc',
+        '../src/compiler/loop-peeling.h',
+        '../src/compiler/loop-variable-optimizer.cc',
+        '../src/compiler/loop-variable-optimizer.h',
+        '../src/compiler/machine-operator-reducer.cc',
+        '../src/compiler/machine-operator-reducer.h',
+        '../src/compiler/machine-operator.cc',
+        '../src/compiler/machine-operator.h',
+        '../src/compiler/machine-graph-verifier.cc',
+        '../src/compiler/machine-graph-verifier.h',
+        '../src/compiler/memory-optimizer.cc',
+        '../src/compiler/memory-optimizer.h',
+        '../src/compiler/move-optimizer.cc',
+        '../src/compiler/move-optimizer.h',
+        '../src/compiler/node-aux-data.h',
+        '../src/compiler/node-cache.cc',
+        '../src/compiler/node-cache.h',
+        '../src/compiler/node-marker.cc',
+        '../src/compiler/node-marker.h',
+        '../src/compiler/node-matchers.cc',
+        '../src/compiler/node-matchers.h',
+        '../src/compiler/node-properties.cc',
+        '../src/compiler/node-properties.h',
+        '../src/compiler/node.cc',
+        '../src/compiler/node.h',
+        '../src/compiler/opcodes.cc',
+        '../src/compiler/opcodes.h',
+        '../src/compiler/operation-typer.cc',
+        '../src/compiler/operation-typer.h',
+        '../src/compiler/operator-properties.cc',
+        '../src/compiler/operator-properties.h',
+        '../src/compiler/operator.cc',
+        '../src/compiler/operator.h',
+        '../src/compiler/osr.cc',
+        '../src/compiler/osr.h',
+        '../src/compiler/persistent-map.h',
+        '../src/compiler/pipeline.cc',
+        '../src/compiler/pipeline.h',
+        '../src/compiler/pipeline-statistics.cc',
+        '../src/compiler/pipeline-statistics.h',
+        '../src/compiler/property-access-builder.cc',
+        '../src/compiler/property-access-builder.h',
+        '../src/compiler/raw-machine-assembler.cc',
+        '../src/compiler/raw-machine-assembler.h',
+        '../src/compiler/redundancy-elimination.cc',
+        '../src/compiler/redundancy-elimination.h',
+        '../src/compiler/register-allocator.cc',
+        '../src/compiler/register-allocator.h',
+        '../src/compiler/register-allocator-verifier.cc',
+        '../src/compiler/register-allocator-verifier.h',
+        '../src/compiler/representation-change.cc',
+        '../src/compiler/representation-change.h',
+        '../src/compiler/schedule.cc',
+        '../src/compiler/schedule.h',
+        '../src/compiler/scheduler.cc',
+        '../src/compiler/scheduler.h',
+        '../src/compiler/select-lowering.cc',
+        '../src/compiler/select-lowering.h',
+        '../src/compiler/simd-scalar-lowering.cc',
+        '../src/compiler/simd-scalar-lowering.h',
+        '../src/compiler/simplified-lowering.cc',
+        '../src/compiler/simplified-lowering.h',
+        '../src/compiler/simplified-operator-reducer.cc',
+        '../src/compiler/simplified-operator-reducer.h',
+        '../src/compiler/simplified-operator.cc',
+        '../src/compiler/simplified-operator.h',
+        '../src/compiler/compiler-source-position-table.cc',
+        '../src/compiler/compiler-source-position-table.h',
+        '../src/compiler/state-values-utils.cc',
+        '../src/compiler/state-values-utils.h',
+        '../src/compiler/store-store-elimination.cc',
+        '../src/compiler/store-store-elimination.h',
+        '../src/compiler/types.cc',
+        '../src/compiler/types.h',
+        '../src/compiler/type-cache.cc',
+        '../src/compiler/type-cache.h',
+        '../src/compiler/typed-optimization.cc',
+        '../src/compiler/typed-optimization.h',
+        '../src/compiler/typer.cc',
+        '../src/compiler/typer.h',
+        '../src/compiler/unwinding-info-writer.h',
+        '../src/compiler/value-numbering-reducer.cc',
+        '../src/compiler/value-numbering-reducer.h',
+        '../src/compiler/verifier.cc',
+        '../src/compiler/verifier.h',
+        '../src/compiler/wasm-compiler.cc',
+        '../src/compiler/wasm-compiler.h',
+        '../src/compiler/wasm-linkage.cc',
+        '../src/compiler/zone-stats.cc',
+        '../src/compiler/zone-stats.h',
+        '../src/compiler-dispatcher/compiler-dispatcher.cc',
+        '../src/compiler-dispatcher/compiler-dispatcher.h',
+        '../src/compiler-dispatcher/compiler-dispatcher-job.cc',
+        '../src/compiler-dispatcher/compiler-dispatcher-job.h',
+        '../src/compiler-dispatcher/compiler-dispatcher-tracer.cc',
+        '../src/compiler-dispatcher/compiler-dispatcher-tracer.h',
+        '../src/compiler-dispatcher/optimizing-compile-dispatcher.cc',
+        '../src/compiler-dispatcher/optimizing-compile-dispatcher.h',
+        '../src/compiler-dispatcher/unoptimized-compile-job.cc',
+        '../src/compiler-dispatcher/unoptimized-compile-job.h',
+        '../src/compiler.cc',
+        '../src/compiler.h',
+        '../src/contexts-inl.h',
+        '../src/contexts.cc',
+        '../src/contexts.h',
+        '../src/conversions-inl.h',
+        '../src/conversions.cc',
+        '../src/conversions.h',
+        '../src/counters-inl.h',
+        '../src/counters.cc',
+        '../src/counters.h',
+        '../src/date.cc',
+        '../src/date.h',
+        '../src/dateparser-inl.h',
+        '../src/dateparser.cc',
+        '../src/dateparser.h',
+        '../src/debug/debug-coverage.cc',
+        '../src/debug/debug-coverage.h',
+        '../src/debug/debug-evaluate.cc',
+        '../src/debug/debug-evaluate.h',
+        '../src/debug/debug-interface.h',
+        '../src/debug/debug-frames.cc',
+        '../src/debug/debug-frames.h',
+        '../src/debug/debug-scope-iterator.cc',
+        '../src/debug/debug-scope-iterator.h',
+        '../src/debug/debug-scopes.cc',
+        '../src/debug/debug-scopes.h',
+        '../src/debug/debug-stack-trace-iterator.cc',
+        '../src/debug/debug-stack-trace-iterator.h',
+        '../src/debug/debug-type-profile.cc',
+        '../src/debug/debug-type-profile.h',
+        '../src/debug/debug.cc',
+        '../src/debug/debug.h',
+        '../src/debug/interface-types.h',
+        '../src/debug/liveedit.cc',
+        '../src/debug/liveedit.h',
+        '../src/deoptimize-reason.cc',
+        '../src/deoptimize-reason.h',
+        '../src/deoptimizer.cc',
+        '../src/deoptimizer.h',
+        '../src/detachable-vector.h',
+        '../src/disasm.h',
+        '../src/disassembler.cc',
+        '../src/disassembler.h',
+        '../src/diy-fp.cc',
+        '../src/diy-fp.h',
+        '../src/double.h',
+        '../src/dtoa.cc',
+        '../src/dtoa.h',
+        '../src/eh-frame.cc',
+        '../src/eh-frame.h',
+        '../src/elements-kind.cc',
+        '../src/elements-kind.h',
+        '../src/elements.cc',
+        '../src/elements.h',
+        '../src/execution.cc',
+        '../src/execution.h',
+        '../src/extensions/externalize-string-extension.cc',
+        '../src/extensions/externalize-string-extension.h',
+        '../src/extensions/free-buffer-extension.cc',
+        '../src/extensions/free-buffer-extension.h',
+        '../src/extensions/gc-extension.cc',
+        '../src/extensions/gc-extension.h',
+        '../src/extensions/ignition-statistics-extension.cc',
+        '../src/extensions/ignition-statistics-extension.h',
+        '../src/extensions/statistics-extension.cc',
+        '../src/extensions/statistics-extension.h',
+        '../src/extensions/trigger-failure-extension.cc',
+        '../src/extensions/trigger-failure-extension.h',
+        '../src/external-reference-table.cc',
+        '../src/external-reference-table.h',
+        '../src/factory-inl.h',
+        '../src/factory.cc',
+        '../src/factory.h',
+        '../src/fast-dtoa.cc',
+        '../src/fast-dtoa.h',
+        '../src/feedback-vector-inl.h',
+        '../src/feedback-vector.cc',
+        '../src/feedback-vector.h',
+        '../src/field-index.h',
+        '../src/field-index-inl.h',
+        '../src/field-type.cc',
+        '../src/field-type.h',
+        '../src/fixed-dtoa.cc',
+        '../src/fixed-dtoa.h',
+        '../src/flag-definitions.h',
+        '../src/flags.cc',
+        '../src/flags.h',
+        '../src/frame-constants.h',
+        '../src/frames-inl.h',
+        '../src/frames.cc',
+        '../src/frames.h',
+        '../src/futex-emulation.cc',
+        '../src/futex-emulation.h',
+        '../src/gdb-jit.cc',
+        '../src/gdb-jit.h',
+        '../src/global-handles.cc',
+        '../src/global-handles.h',
+        '../src/globals.h',
+        '../src/handles-inl.h',
+        '../src/handles.cc',
+        '../src/handles.h',
+        '../src/heap-symbols.h',
+        '../src/heap/array-buffer-collector.cc',
+        '../src/heap/array-buffer-collector.h',
+        '../src/heap/array-buffer-tracker-inl.h',
+        '../src/heap/array-buffer-tracker.cc',
+        '../src/heap/array-buffer-tracker.h',
+        '../src/heap/barrier.h',
+        '../src/heap/code-stats.cc',
+        '../src/heap/code-stats.h',
+        '../src/heap/concurrent-marking.cc',
+        '../src/heap/concurrent-marking.h',
+        '../src/heap/embedder-tracing.cc',
+        '../src/heap/embedder-tracing.h',
+        '../src/heap/memory-reducer.cc',
+        '../src/heap/memory-reducer.h',
+        '../src/heap/gc-idle-time-handler.cc',
+        '../src/heap/gc-idle-time-handler.h',
+        '../src/heap/gc-tracer.cc',
+        '../src/heap/gc-tracer.h',
+        '../src/heap/heap-inl.h',
+        '../src/heap/heap.cc',
+        '../src/heap/heap.h',
+        '../src/heap/incremental-marking-inl.h',
+        '../src/heap/incremental-marking-job.cc',
+        '../src/heap/incremental-marking-job.h',
+        '../src/heap/incremental-marking.cc',
+        '../src/heap/incremental-marking.h',
+        '../src/heap/invalidated-slots-inl.h',
+        '../src/heap/invalidated-slots.cc',
+        '../src/heap/invalidated-slots.h',
+        '../src/heap/item-parallel-job.h',
+        '../src/heap/local-allocator.h',
+        '../src/heap/mark-compact-inl.h',
+        '../src/heap/mark-compact.cc',
+        '../src/heap/mark-compact.h',
+        '../src/heap/marking.cc',
+        '../src/heap/marking.h',
+        '../src/heap/object-stats.cc',
+        '../src/heap/object-stats.h',
+        '../src/heap/objects-visiting-inl.h',
+        '../src/heap/objects-visiting.cc',
+        '../src/heap/objects-visiting.h',
+        '../src/heap/remembered-set.h',
+        '../src/heap/scavenge-job.h',
+        '../src/heap/scavenge-job.cc',
+        '../src/heap/scavenger-inl.h',
+        '../src/heap/scavenger.cc',
+        '../src/heap/scavenger.h',
+        '../src/heap/slot-set.h',
+        '../src/heap/spaces-inl.h',
+        '../src/heap/spaces.cc',
+        '../src/heap/spaces.h',
+        '../src/heap/store-buffer.cc',
+        '../src/heap/store-buffer.h',
+        '../src/heap/stress-marking-observer.cc',
+        '../src/heap/stress-marking-observer.h',
+        '../src/heap/stress-scavenge-observer.cc',
+        '../src/heap/stress-scavenge-observer.h',
+        '../src/heap/sweeper.cc',
+        '../src/heap/sweeper.h',
+        '../src/heap/worklist.h',
+        '../src/intl.cc',
+        '../src/intl.h',
+        '../src/icu_util.cc',
+        '../src/icu_util.h',
+        '../src/ic/call-optimization.cc',
+        '../src/ic/call-optimization.h',
+        '../src/ic/handler-configuration.cc',
+        '../src/ic/handler-configuration-inl.h',
+        '../src/ic/handler-configuration.h',
+        '../src/ic/ic-inl.h',
+        '../src/ic/ic-stats.cc',
+        '../src/ic/ic-stats.h',
+        '../src/ic/ic.cc',
+        '../src/ic/ic.h',
+        '../src/identity-map.cc',
+        '../src/identity-map.h',
+        '../src/instruction-stream.cc',
+        '../src/instruction-stream.h',
+        '../src/interface-descriptors.cc',
+        '../src/interface-descriptors.h',
+        '../src/interpreter/block-coverage-builder.h',
+        '../src/interpreter/bytecodes.cc',
+        '../src/interpreter/bytecodes.h',
+        '../src/interpreter/bytecode-array-accessor.cc',
+        '../src/interpreter/bytecode-array-accessor.h',
+        '../src/interpreter/bytecode-array-builder.cc',
+        '../src/interpreter/bytecode-array-builder.h',
+        '../src/interpreter/bytecode-array-iterator.cc',
+        '../src/interpreter/bytecode-array-iterator.h',
+        '../src/interpreter/bytecode-array-random-iterator.cc',
+        '../src/interpreter/bytecode-array-random-iterator.h',
+        '../src/interpreter/bytecode-array-writer.cc',
+        '../src/interpreter/bytecode-array-writer.h',
+        '../src/interpreter/bytecode-decoder.cc',
+        '../src/interpreter/bytecode-decoder.h',
+        '../src/interpreter/bytecode-flags.cc',
+        '../src/interpreter/bytecode-flags.h',
+        '../src/interpreter/bytecode-generator.cc',
+        '../src/interpreter/bytecode-generator.h',
+        '../src/interpreter/bytecode-label.cc',
+        '../src/interpreter/bytecode-label.h',
+        '../src/interpreter/bytecode-node.cc',
+        '../src/interpreter/bytecode-node.h',
+        '../src/interpreter/bytecode-operands.cc',
+        '../src/interpreter/bytecode-operands.h',
+        '../src/interpreter/bytecode-register.cc',
+        '../src/interpreter/bytecode-register.h',
+        '../src/interpreter/bytecode-register-allocator.h',
+        '../src/interpreter/bytecode-register-optimizer.cc',
+        '../src/interpreter/bytecode-register-optimizer.h',
+        '../src/interpreter/bytecode-source-info.cc',
+        '../src/interpreter/bytecode-source-info.h',
+        '../src/interpreter/bytecode-jump-table.h',
+        '../src/interpreter/bytecode-traits.h',
+        '../src/interpreter/constant-array-builder.cc',
+        '../src/interpreter/constant-array-builder.h',
+        '../src/interpreter/control-flow-builders.cc',
+        '../src/interpreter/control-flow-builders.h',
+        '../src/interpreter/handler-table-builder.cc',
+        '../src/interpreter/handler-table-builder.h',
+        '../src/interpreter/interpreter.cc',
+        '../src/interpreter/interpreter.h',
+        '../src/interpreter/interpreter-generator.h',
+        '../src/interpreter/interpreter-intrinsics.cc',
+        '../src/interpreter/interpreter-intrinsics.h',
+        '../src/isolate-inl.h',
+        '../src/isolate.cc',
+        '../src/isolate.h',
+        '../src/json-parser.cc',
+        '../src/json-parser.h',
+        '../src/json-stringifier.cc',
+        '../src/json-stringifier.h',
+        '../src/keys.h',
+        '../src/keys.cc',
+        '../src/label.h',
+        '../src/layout-descriptor-inl.h',
+        '../src/layout-descriptor.cc',
+        '../src/layout-descriptor.h',
+        '../src/locked-queue-inl.h',
+        '../src/locked-queue.h',
+        '../src/log-inl.h',
+        '../src/log-utils.cc',
+        '../src/log-utils.h',
+        '../src/log.cc',
+        '../src/log.h',
+        '../src/lookup-cache-inl.h',
+        '../src/lookup-cache.cc',
+        '../src/lookup-cache.h',
+        '../src/lookup.cc',
+        '../src/lookup.h',
+        '../src/map-updater.cc',
+        '../src/map-updater.h',
+        '../src/macro-assembler-inl.h',
+        '../src/macro-assembler.h',
+        '../src/machine-type.cc',
+        '../src/machine-type.h',
+        '../src/managed.h',
+        '../src/messages.cc',
+        '../src/messages.h',
+        '../src/msan.h',
+        '../src/objects-body-descriptors-inl.h',
+        '../src/objects-body-descriptors.h',
+        '../src/objects-debug.cc',
+        '../src/objects-inl.h',
+        '../src/objects-printer.cc',
+        '../src/objects.cc',
+        '../src/objects.h',
+        '../src/objects/arguments-inl.h',
+        '../src/objects/arguments.h',
+        '../src/objects/bigint.cc',
+        '../src/objects/bigint.h',
+        '../src/objects/code-inl.h',
+        '../src/objects/code.h',
+        '../src/objects/compilation-cache.h',
+        '../src/objects/compilation-cache-inl.h',
+        '../src/objects/data-handler.h',
+        '../src/objects/data-handler-inl.h',
+        '../src/objects/debug-objects-inl.h',
+        '../src/objects/debug-objects.cc',
+        '../src/objects/debug-objects.h',
+        '../src/objects/descriptor-array.h',
+        '../src/objects/dictionary.h',
+        '../src/objects/fixed-array.h',
+        '../src/objects/fixed-array-inl.h',
+        '../src/objects/frame-array.h',
+        '../src/objects/frame-array-inl.h',
+        '../src/objects/hash-table-inl.h',
+        '../src/objects/hash-table.h',
+        '../src/objects/intl-objects.cc',
+        '../src/objects/intl-objects.h',
+        '../src/objects/js-array.h',
+        '../src/objects/js-array-inl.h',
+        '../src/objects/js-collection.h',
+        '../src/objects/js-collection-inl.h',
+        '../src/objects/js-regexp.h',
+        '../src/objects/js-regexp-inl.h',
+        '../src/objects/literal-objects.cc',
+        '../src/objects/literal-objects-inl.h',
+        '../src/objects/literal-objects.h',
+        '../src/objects/map-inl.h',
+        '../src/objects/map.h',
+        '../src/objects/name-inl.h',
+        '../src/objects/name.h',
+        '../src/objects/module-inl.h',
+        '../src/objects/module.cc',
+        '../src/objects/module.h',
+        '../src/objects/object-macros.h',
+        '../src/objects/object-macros-undef.h',
+        '../src/objects/property-descriptor-object.h',
+        '../src/objects/property-descriptor-object-inl.h',
+        '../src/objects/regexp-match-info.h',
+        '../src/objects/scope-info.cc',
+        '../src/objects/scope-info.h',
+        '../src/objects/script.h',
+        '../src/objects/script-inl.h',
+        '../src/objects/shared-function-info-inl.h',
+        '../src/objects/shared-function-info.h',
+        '../src/objects/string-inl.h',
+        '../src/objects/string.h',
+        '../src/objects/string-table.h',
+        '../src/objects/template-objects.cc',
+        '../src/objects/template-objects.h',
+        '../src/ostreams.cc',
+        '../src/ostreams.h',
+        '../src/parsing/background-parsing-task.cc',
+        '../src/parsing/background-parsing-task.h',
+        '../src/parsing/duplicate-finder.h',
+        '../src/parsing/expression-classifier.h',
+        '../src/parsing/expression-scope-reparenter.cc',
+        '../src/parsing/expression-scope-reparenter.h',
+        '../src/parsing/func-name-inferrer.cc',
+        '../src/parsing/func-name-inferrer.h',
+        '../src/parsing/parse-info.cc',
+        '../src/parsing/parse-info.h',
+        '../src/parsing/parser-base.h',
+        '../src/parsing/parser.cc',
+        '../src/parsing/parser.h',
+        '../src/parsing/parsing.cc',
+        '../src/parsing/parsing.h',
+        '../src/parsing/pattern-rewriter.cc',
+        '../src/parsing/preparse-data-format.h',
+        '../src/parsing/preparse-data.cc',
+        '../src/parsing/preparse-data.h',
+        '../src/parsing/preparsed-scope-data.cc',
+        '../src/parsing/preparsed-scope-data.h',
+        '../src/parsing/preparser.cc',
+        '../src/parsing/preparser.h',
+        '../src/parsing/rewriter.cc',
+        '../src/parsing/rewriter.h',
+        '../src/parsing/scanner-character-streams.cc',
+        '../src/parsing/scanner-character-streams.h',
+        '../src/parsing/scanner.cc',
+        '../src/parsing/scanner.h',
+        '../src/parsing/token.cc',
+        '../src/parsing/token.h',
+        '../src/pending-compilation-error-handler.cc',
+        '../src/pending-compilation-error-handler.h',
+        '../src/perf-jit.cc',
+        '../src/perf-jit.h',
+        '../src/profiler/allocation-tracker.cc',
+        '../src/profiler/allocation-tracker.h',
+        '../src/profiler/circular-queue-inl.h',
+        '../src/profiler/circular-queue.h',
+        '../src/profiler/cpu-profiler-inl.h',
+        '../src/profiler/cpu-profiler.cc',
+        '../src/profiler/cpu-profiler.h',
+        '../src/profiler/heap-profiler.cc',
+        '../src/profiler/heap-profiler.h',
+        '../src/profiler/heap-snapshot-generator-inl.h',
+        '../src/profiler/heap-snapshot-generator.cc',
+        '../src/profiler/heap-snapshot-generator.h',
+        '../src/profiler/profiler-listener.cc',
+        '../src/profiler/profiler-listener.h',
+        '../src/profiler/profile-generator-inl.h',
+        '../src/profiler/profile-generator.cc',
+        '../src/profiler/profile-generator.h',
+        '../src/profiler/sampling-heap-profiler.cc',
+        '../src/profiler/sampling-heap-profiler.h',
+        '../src/profiler/strings-storage.cc',
+        '../src/profiler/strings-storage.h',
+        '../src/profiler/tick-sample.cc',
+        '../src/profiler/tick-sample.h',
+        '../src/profiler/tracing-cpu-profiler.cc',
+        '../src/profiler/tracing-cpu-profiler.h',
+        '../src/profiler/unbound-queue-inl.h',
+        '../src/profiler/unbound-queue.h',
+        '../src/property-descriptor.cc',
+        '../src/property-descriptor.h',
+        '../src/property-details.h',
+        '../src/property.cc',
+        '../src/property.h',
+        '../src/prototype.h',
+        '../src/regexp/bytecodes-irregexp.h',
+        '../src/regexp/interpreter-irregexp.cc',
+        '../src/regexp/interpreter-irregexp.h',
+        '../src/regexp/jsregexp-inl.h',
+        '../src/regexp/jsregexp.cc',
+        '../src/regexp/jsregexp.h',
+        '../src/regexp/regexp-ast.cc',
+        '../src/regexp/regexp-ast.h',
+        '../src/regexp/regexp-macro-assembler-irregexp-inl.h',
+        '../src/regexp/regexp-macro-assembler-irregexp.cc',
+        '../src/regexp/regexp-macro-assembler-irregexp.h',
+        '../src/regexp/regexp-macro-assembler-tracer.cc',
+        '../src/regexp/regexp-macro-assembler-tracer.h',
+        '../src/regexp/regexp-macro-assembler.cc',
+        '../src/regexp/regexp-macro-assembler.h',
+        '../src/regexp/regexp-parser.cc',
+        '../src/regexp/regexp-parser.h',
+        '../src/regexp/regexp-stack.cc',
+        '../src/regexp/regexp-stack.h',
+        '../src/regexp/regexp-utils.cc',
+        '../src/regexp/regexp-utils.h',
+        '../src/register-configuration.cc',
+        '../src/register-configuration.h',
+        '../src/reglist.h',
+        '../src/runtime-profiler.cc',
+        '../src/runtime-profiler.h',
+        '../src/runtime/runtime-array.cc',
+        '../src/runtime/runtime-atomics.cc',
+        '../src/runtime/runtime-bigint.cc',
+        '../src/runtime/runtime-classes.cc',
+        '../src/runtime/runtime-collections.cc',
+        '../src/runtime/runtime-compiler.cc',
+        '../src/runtime/runtime-date.cc',
+        '../src/runtime/runtime-debug.cc',
+        '../src/runtime/runtime-forin.cc',
+        '../src/runtime/runtime-function.cc',
+        '../src/runtime/runtime-error.cc',
+        '../src/runtime/runtime-futex.cc',
+        '../src/runtime/runtime-generator.cc',
+        '../src/runtime/runtime-intl.cc',
+        '../src/runtime/runtime-internal.cc',
+        '../src/runtime/runtime-interpreter.cc',
+        '../src/runtime/runtime-literals.cc',
+        '../src/runtime/runtime-liveedit.cc',
+        '../src/runtime/runtime-maths.cc',
+        '../src/runtime/runtime-module.cc',
+        '../src/runtime/runtime-numbers.cc',
+        '../src/runtime/runtime-object.cc',
+        '../src/runtime/runtime-operators.cc',
+        '../src/runtime/runtime-promise.cc',
+        '../src/runtime/runtime-proxy.cc',
+        '../src/runtime/runtime-regexp.cc',
+        '../src/runtime/runtime-scopes.cc',
+        '../src/runtime/runtime-strings.cc',
+        '../src/runtime/runtime-symbol.cc',
+        '../src/runtime/runtime-test.cc',
+        '../src/runtime/runtime-typedarray.cc',
+        '../src/runtime/runtime-utils.h',
+        '../src/runtime/runtime-wasm.cc',
+        '../src/runtime/runtime.cc',
+        '../src/runtime/runtime.h',
+        '../src/safepoint-table.cc',
+        '../src/safepoint-table.h',
+        '../src/setup-isolate.h',
+        '../src/signature.h',
+        '../src/simulator-base.cc',
+        '../src/simulator-base.h',
+        '../src/simulator.h',
+        '../src/snapshot/builtin-deserializer-allocator.cc',
+        '../src/snapshot/builtin-deserializer-allocator.h',
+        '../src/snapshot/builtin-deserializer.cc',
+        '../src/snapshot/builtin-deserializer.h',
+        '../src/snapshot/builtin-serializer-allocator.cc',
+        '../src/snapshot/builtin-serializer-allocator.h',
+        '../src/snapshot/builtin-serializer.cc',
+        '../src/snapshot/builtin-serializer.h',
+        '../src/snapshot/builtin-snapshot-utils.cc',
+        '../src/snapshot/builtin-snapshot-utils.h',
+        '../src/snapshot/code-serializer.cc',
+        '../src/snapshot/code-serializer.h',
+        '../src/snapshot/default-deserializer-allocator.cc',
+        '../src/snapshot/default-deserializer-allocator.h',
+        '../src/snapshot/default-serializer-allocator.cc',
+        '../src/snapshot/default-serializer-allocator.h',
+        '../src/snapshot/deserializer.cc',
+        '../src/snapshot/deserializer.h',
+        '../src/snapshot/natives-common.cc',
+        '../src/snapshot/natives.h',
+        '../src/snapshot/object-deserializer.cc',
+        '../src/snapshot/object-deserializer.h',
+        '../src/snapshot/partial-deserializer.cc',
+        '../src/snapshot/partial-deserializer.h',
+        '../src/snapshot/partial-serializer.cc',
+        '../src/snapshot/partial-serializer.h',
+        '../src/snapshot/serializer.cc',
+        '../src/snapshot/serializer-common.cc',
+        '../src/snapshot/serializer-common.h',
+        '../src/snapshot/serializer.h',
+        '../src/snapshot/snapshot-common.cc',
+        '../src/snapshot/snapshot.h',
+        '../src/snapshot/snapshot-source-sink.cc',
+        '../src/snapshot/snapshot-source-sink.h',
+        '../src/snapshot/startup-deserializer.cc',
+        '../src/snapshot/startup-deserializer.h',
+        '../src/snapshot/startup-serializer.cc',
+        '../src/snapshot/startup-serializer.h',
+        '../src/source-position-table.cc',
+        '../src/source-position-table.h',
+        '../src/source-position.cc',
+        '../src/source-position.h',
+        '../src/splay-tree.h',
+        '../src/splay-tree-inl.h',
+        '../src/startup-data-util.cc',
+        '../src/startup-data-util.h',
+        '../src/string-builder.cc',
+        '../src/string-builder.h',
+        '../src/string-case.cc',
+        '../src/string-case.h',
+        '../src/string-hasher-inl.h',
+        '../src/string-hasher.h',
+        '../src/string-search.h',
+        '../src/string-stream.cc',
+        '../src/string-stream.h',
+        '../src/strtod.cc',
+        '../src/strtod.h',
+        '../src/ic/stub-cache.cc',
+        '../src/ic/stub-cache.h',
+        '../src/third_party/utf8-decoder/utf8-decoder.h',
+        '../src/tracing/trace-event.cc',
+        '../src/tracing/trace-event.h',
+        '../src/tracing/traced-value.cc',
+        '../src/tracing/traced-value.h',
+        '../src/tracing/tracing-category-observer.cc',
+        '../src/tracing/tracing-category-observer.h',
+        '../src/transitions-inl.h',
+        '../src/transitions.cc',
+        '../src/transitions.h',
+        '../src/trap-handler/handler-outside.cc',
+        '../src/trap-handler/handler-shared.cc',
+        '../src/trap-handler/trap-handler.h',
+        '../src/trap-handler/trap-handler-internal.h',
+        '../src/type-hints.cc',
+        '../src/type-hints.h',
+        '../src/unicode-inl.h',
+        '../src/unicode.cc',
+        '../src/unicode.h',
+        '../src/unicode-cache-inl.h',
+        '../src/unicode-cache.h',
+        '../src/unicode-decoder.cc',
+        '../src/unicode-decoder.h',
+        '../src/uri.cc',
+        '../src/uri.h',
+        '../src/utils-inl.h',
+        '../src/utils.cc',
+        '../src/utils.h',
+        '../src/v8.cc',
+        '../src/v8.h',
+        '../src/v8memory.h',
+        '../src/v8threads.cc',
+        '../src/v8threads.h',
+        '../src/value-serializer.cc',
+        '../src/value-serializer.h',
+        '../src/vector-slot-pair.cc',
+        '../src/vector-slot-pair.h',
+        '../src/vector.h',
+        '../src/version.cc',
+        '../src/version.h',
+        '../src/visitors.cc',
+        '../src/visitors.h',
+        '../src/vm-state-inl.h',
+        '../src/vm-state.h',
+        '../src/wasm/baseline/liftoff-assembler-defs.h',
+        '../src/wasm/baseline/liftoff-assembler.cc',
+        '../src/wasm/baseline/liftoff-assembler.h',
+        '../src/wasm/baseline/liftoff-compiler.cc',
+        '../src/wasm/baseline/liftoff-register.h',
+        '../src/wasm/compilation-manager.cc',
+        '../src/wasm/compilation-manager.h',
+        '../src/wasm/decoder.h',
+        '../src/wasm/function-body-decoder.cc',
+        '../src/wasm/function-body-decoder.h',
+        '../src/wasm/function-body-decoder-impl.h',
+        '../src/wasm/leb-helper.h',
+        '../src/wasm/local-decl-encoder.cc',
+        '../src/wasm/local-decl-encoder.h',
+        '../src/wasm/memory-tracing.cc',
+        '../src/wasm/memory-tracing.h',
+        '../src/wasm/module-compiler.cc',
+        '../src/wasm/module-compiler.h',
+        '../src/wasm/module-decoder.cc',
+        '../src/wasm/module-decoder.h',
+        '../src/wasm/signature-map.cc',
+        '../src/wasm/signature-map.h',
+        '../src/wasm/streaming-decoder.cc',
+        '../src/wasm/streaming-decoder.h',
+        '../src/wasm/wasm-code-manager.cc',
+        '../src/wasm/wasm-code-manager.h',
+        '../src/wasm/wasm-code-specialization.cc',
+        '../src/wasm/wasm-code-specialization.h',
+        '../src/wasm/wasm-code-wrapper.cc',
+        '../src/wasm/wasm-code-wrapper.h',
+        '../src/wasm/wasm-constants.h',
+        '../src/wasm/wasm-debug.cc',
+        '../src/wasm/wasm-engine.cc',
+        '../src/wasm/wasm-engine.h',
+        '../src/wasm/wasm-external-refs.cc',
+        '../src/wasm/wasm-external-refs.h',
+        '../src/wasm/wasm-js.cc',
+        '../src/wasm/wasm-js.h',
+        '../src/wasm/wasm-limits.h',
+        '../src/wasm/wasm-memory.cc',
+        '../src/wasm/wasm-memory.h',
+        '../src/wasm/wasm-module.cc',
+        '../src/wasm/wasm-module.h',
+        '../src/wasm/wasm-module-builder.cc',
+        '../src/wasm/wasm-module-builder.h',
+        '../src/wasm/wasm-interpreter.cc',
+        '../src/wasm/wasm-interpreter.h',
+        '../src/wasm/wasm-objects-inl.h',
+        '../src/wasm/wasm-objects.cc',
+        '../src/wasm/wasm-objects.h',
+        '../src/wasm/wasm-opcodes.cc',
+        '../src/wasm/wasm-opcodes.h',
+        '../src/wasm/wasm-result.cc',
+        '../src/wasm/wasm-result.h',
+        '../src/wasm/wasm-serialization.cc',
+        '../src/wasm/wasm-serialization.h',
+        '../src/wasm/wasm-text.cc',
+        '../src/wasm/wasm-text.h',
+        '../src/wasm/wasm-value.h',
+        '../src/zone/accounting-allocator.cc',
+        '../src/zone/accounting-allocator.h',
+        '../src/zone/zone-segment.cc',
+        '../src/zone/zone-segment.h',
+        '../src/zone/zone.cc',
+        '../src/zone/zone.h',
+        '../src/zone/zone-chunk-list.h',
+        '../src/zone/zone-segment.cc',
+        '../src/zone/zone-segment.h',
+        '../src/zone/zone-allocator.h',
+        '../src/zone/zone-containers.h',
+        '../src/zone/zone-handle-set.h',
+        '../src/zone/zone-list-inl.h',
+      ],
+      'conditions': [
+        ['want_separate_host_toolset==1', {
+          'toolsets': ['host', 'target'],
+        }, {
+          'toolsets': ['target'],
+        }],
+        ['v8_target_arch=="arm"', {
+          'sources': [
+            '../src/arm/assembler-arm-inl.h',
+            '../src/arm/assembler-arm.cc',
+            '../src/arm/assembler-arm.h',
+            '../src/arm/code-stubs-arm.cc',
+            '../src/arm/code-stubs-arm.h',
+            '../src/arm/codegen-arm.cc',
+            '../src/arm/constants-arm.h',
+            '../src/arm/constants-arm.cc',
+            '../src/arm/cpu-arm.cc',
+            '../src/arm/deoptimizer-arm.cc',
+            '../src/arm/disasm-arm.cc',
+            '../src/arm/frame-constants-arm.cc',
+            '../src/arm/frame-constants-arm.h',
+            '../src/arm/interface-descriptors-arm.cc',
+            '../src/arm/interface-descriptors-arm.h',
+            '../src/arm/macro-assembler-arm.cc',
+            '../src/arm/macro-assembler-arm.h',
+            '../src/arm/simulator-arm.cc',
+            '../src/arm/simulator-arm.h',
+            '../src/arm/eh-frame-arm.cc',
+            '../src/compiler/arm/code-generator-arm.cc',
+            '../src/compiler/arm/instruction-codes-arm.h',
+            '../src/compiler/arm/instruction-scheduler-arm.cc',
+            '../src/compiler/arm/instruction-selector-arm.cc',
+            '../src/compiler/arm/unwinding-info-writer-arm.cc',
+            '../src/compiler/arm/unwinding-info-writer-arm.h',
+            '../src/debug/arm/debug-arm.cc',
+            '../src/regexp/arm/regexp-macro-assembler-arm.cc',
+            '../src/regexp/arm/regexp-macro-assembler-arm.h',
+            '../src/wasm/baseline/arm/liftoff-assembler-arm.h',
+          ],
+        }],
+        ['v8_target_arch=="arm64"', {
+          'sources': [
+            '../src/arm64/assembler-arm64.cc',
+            '../src/arm64/assembler-arm64.h',
+            '../src/arm64/assembler-arm64-inl.h',
+            '../src/arm64/codegen-arm64.cc',
+            '../src/arm64/code-stubs-arm64.cc',
+            '../src/arm64/code-stubs-arm64.h',
+            '../src/arm64/constants-arm64.h',
+            '../src/arm64/cpu-arm64.cc',
+            '../src/arm64/decoder-arm64.cc',
+            '../src/arm64/decoder-arm64.h',
+            '../src/arm64/decoder-arm64-inl.h',
+            '../src/arm64/deoptimizer-arm64.cc',
+            '../src/arm64/disasm-arm64.cc',
+            '../src/arm64/disasm-arm64.h',
+            '../src/arm64/frame-constants-arm64.cc',
+            '../src/arm64/frame-constants-arm64.h',
+            '../src/arm64/instructions-arm64-constants.cc',
+            '../src/arm64/instructions-arm64.cc',
+            '../src/arm64/instructions-arm64.h',
+            '../src/arm64/instrument-arm64.cc',
+            '../src/arm64/instrument-arm64.h',
+            '../src/arm64/interface-descriptors-arm64.cc',
+            '../src/arm64/interface-descriptors-arm64.h',
+            '../src/arm64/macro-assembler-arm64.cc',
+            '../src/arm64/macro-assembler-arm64.h',
+            '../src/arm64/macro-assembler-arm64-inl.h',
+            '../src/arm64/simulator-arm64.cc',
+            '../src/arm64/simulator-arm64.h',
+            '../src/arm64/simulator-logic-arm64.cc',
+            '../src/arm64/utils-arm64.cc',
+            '../src/arm64/utils-arm64.h',
+            '../src/arm64/eh-frame-arm64.cc',
+            '../src/compiler/arm64/code-generator-arm64.cc',
+            '../src/compiler/arm64/instruction-codes-arm64.h',
+            '../src/compiler/arm64/instruction-scheduler-arm64.cc',
+            '../src/compiler/arm64/instruction-selector-arm64.cc',
+            '../src/compiler/arm64/unwinding-info-writer-arm64.cc',
+            '../src/compiler/arm64/unwinding-info-writer-arm64.h',
+            '../src/debug/arm64/debug-arm64.cc',
+            '../src/regexp/arm64/regexp-macro-assembler-arm64.cc',
+            '../src/regexp/arm64/regexp-macro-assembler-arm64.h',
+            '../src/wasm/baseline/arm64/liftoff-assembler-arm64.h',
+          ],
+        }],
+        ['v8_target_arch=="ia32"', {
+          'sources': [
+            '../src/ia32/assembler-ia32-inl.h',
+            '../src/ia32/assembler-ia32.cc',
+            '../src/ia32/assembler-ia32.h',
+            '../src/ia32/code-stubs-ia32.cc',
+            '../src/ia32/codegen-ia32.cc',
+            '../src/ia32/cpu-ia32.cc',
+            '../src/ia32/deoptimizer-ia32.cc',
+            '../src/ia32/disasm-ia32.cc',
+            '../src/ia32/frame-constants-ia32.cc',
+            '../src/ia32/frame-constants-ia32.h',
+            '../src/ia32/interface-descriptors-ia32.cc',
+            '../src/ia32/macro-assembler-ia32.cc',
+            '../src/ia32/macro-assembler-ia32.h',
+            '../src/ia32/simulator-ia32.cc',
+            '../src/ia32/simulator-ia32.h',
+            '../src/ia32/sse-instr.h',
+            '../src/compiler/ia32/code-generator-ia32.cc',
+            '../src/compiler/ia32/instruction-codes-ia32.h',
+            '../src/compiler/ia32/instruction-scheduler-ia32.cc',
+            '../src/compiler/ia32/instruction-selector-ia32.cc',
+            '../src/debug/ia32/debug-ia32.cc',
+            '../src/regexp/ia32/regexp-macro-assembler-ia32.cc',
+            '../src/regexp/ia32/regexp-macro-assembler-ia32.h',
+            '../src/wasm/baseline/ia32/liftoff-assembler-ia32.h',
+          ],
+        }],
+        ['v8_target_arch=="mips" or v8_target_arch=="mipsel"', {
+          'sources': [
+            '../src/mips/assembler-mips.cc',
+            '../src/mips/assembler-mips.h',
+            '../src/mips/assembler-mips-inl.h',
+            '../src/mips/codegen-mips.cc',
+            '../src/mips/code-stubs-mips.cc',
+            '../src/mips/code-stubs-mips.h',
+            '../src/mips/constants-mips.cc',
+            '../src/mips/constants-mips.h',
+            '../src/mips/cpu-mips.cc',
+            '../src/mips/deoptimizer-mips.cc',
+            '../src/mips/disasm-mips.cc',
+            '../src/mips/frame-constants-mips.cc',
+            '../src/mips/frame-constants-mips.h',
+            '../src/mips/interface-descriptors-mips.cc',
+            '../src/mips/macro-assembler-mips.cc',
+            '../src/mips/macro-assembler-mips.h',
+            '../src/mips/simulator-mips.cc',
+            '../src/mips/simulator-mips.h',
+            '../src/compiler/mips/code-generator-mips.cc',
+            '../src/compiler/mips/instruction-codes-mips.h',
+            '../src/compiler/mips/instruction-scheduler-mips.cc',
+            '../src/compiler/mips/instruction-selector-mips.cc',
+            '../src/debug/mips/debug-mips.cc',
+            '../src/regexp/mips/regexp-macro-assembler-mips.cc',
+            '../src/regexp/mips/regexp-macro-assembler-mips.h',
+            '../src/wasm/baseline/mips/liftoff-assembler-mips.h',
+          ],
+        }],
+        ['v8_target_arch=="mips64" or v8_target_arch=="mips64el"', {
+          'sources': [
+            '../src/mips64/assembler-mips64.cc',
+            '../src/mips64/assembler-mips64.h',
+            '../src/mips64/assembler-mips64-inl.h',
+            '../src/mips64/codegen-mips64.cc',
+            '../src/mips64/code-stubs-mips64.cc',
+            '../src/mips64/code-stubs-mips64.h',
+            '../src/mips64/constants-mips64.cc',
+            '../src/mips64/constants-mips64.h',
+            '../src/mips64/cpu-mips64.cc',
+            '../src/mips64/deoptimizer-mips64.cc',
+            '../src/mips64/disasm-mips64.cc',
+            '../src/mips64/frame-constants-mips64.cc',
+            '../src/mips64/frame-constants-mips64.h',
+            '../src/mips64/interface-descriptors-mips64.cc',
+            '../src/mips64/macro-assembler-mips64.cc',
+            '../src/mips64/macro-assembler-mips64.h',
+            '../src/mips64/simulator-mips64.cc',
+            '../src/mips64/simulator-mips64.h',
+            '../src/compiler/mips64/code-generator-mips64.cc',
+            '../src/compiler/mips64/instruction-codes-mips64.h',
+            '../src/compiler/mips64/instruction-scheduler-mips64.cc',
+            '../src/compiler/mips64/instruction-selector-mips64.cc',
+            '../src/debug/mips64/debug-mips64.cc',
+            '../src/regexp/mips64/regexp-macro-assembler-mips64.cc',
+            '../src/regexp/mips64/regexp-macro-assembler-mips64.h',
+            '../src/wasm/baseline/mips64/liftoff-assembler-mips64.h',
+          ],
+        }],
+        ['v8_target_arch=="x64"', {
+          'sources': [
+            '../src/compiler/x64/code-generator-x64.cc',
+            '../src/compiler/x64/instruction-codes-x64.h',
+            '../src/compiler/x64/instruction-scheduler-x64.cc',
+            '../src/compiler/x64/instruction-selector-x64.cc',
+            '../src/compiler/x64/unwinding-info-writer-x64.cc',
+            '../src/compiler/x64/unwinding-info-writer-x64.h',
+            '../src/x64/assembler-x64-inl.h',
+            '../src/x64/assembler-x64.cc',
+            '../src/x64/assembler-x64.h',
+            '../src/x64/code-stubs-x64.cc',
+            '../src/x64/codegen-x64.cc',
+            '../src/x64/cpu-x64.cc',
+            '../src/x64/deoptimizer-x64.cc',
+            '../src/x64/disasm-x64.cc',
+            '../src/x64/eh-frame-x64.cc',
+            '../src/x64/frame-constants-x64.cc',
+            '../src/x64/frame-constants-x64.h',
+            '../src/x64/interface-descriptors-x64.cc',
+            '../src/x64/macro-assembler-x64.cc',
+            '../src/x64/macro-assembler-x64.h',
+            '../src/x64/simulator-x64.cc',
+            '../src/x64/simulator-x64.h',
+            '../src/x64/sse-instr.h',
+            '../src/debug/x64/debug-x64.cc',
+            '../src/regexp/x64/regexp-macro-assembler-x64.cc',
+            '../src/regexp/x64/regexp-macro-assembler-x64.h',
+            '../src/third_party/valgrind/valgrind.h',
+            '../src/wasm/baseline/x64/liftoff-assembler-x64.h',
+          ],
+        }],
+        ['v8_target_arch=="x64" and OS=="linux"', {
+            'sources': ['../src/trap-handler/handler-inside.cc']
+        }],
+        ['v8_target_arch=="ppc" or v8_target_arch=="ppc64"', {
+          'sources': [
+            '../src/compiler/ppc/code-generator-ppc.cc',
+            '../src/compiler/ppc/instruction-codes-ppc.h',
+            '../src/compiler/ppc/instruction-scheduler-ppc.cc',
+            '../src/compiler/ppc/instruction-selector-ppc.cc',
+            '../src/debug/ppc/debug-ppc.cc',
+            '../src/ppc/assembler-ppc-inl.h',
+            '../src/ppc/assembler-ppc.cc',
+            '../src/ppc/assembler-ppc.h',
+            '../src/ppc/code-stubs-ppc.cc',
+            '../src/ppc/code-stubs-ppc.h',
+            '../src/ppc/codegen-ppc.cc',
+            '../src/ppc/constants-ppc.h',
+            '../src/ppc/constants-ppc.cc',
+            '../src/ppc/cpu-ppc.cc',
+            '../src/ppc/deoptimizer-ppc.cc',
+            '../src/ppc/disasm-ppc.cc',
+            '../src/ppc/frame-constants-ppc.cc',
+            '../src/ppc/frame-constants-ppc.h',
+            '../src/ppc/interface-descriptors-ppc.cc',
+            '../src/ppc/macro-assembler-ppc.cc',
+            '../src/ppc/macro-assembler-ppc.h',
+            '../src/ppc/simulator-ppc.cc',
+            '../src/ppc/simulator-ppc.h',
+            '../src/regexp/ppc/regexp-macro-assembler-ppc.cc',
+            '../src/regexp/ppc/regexp-macro-assembler-ppc.h',
+            '../src/wasm/baseline/ppc/liftoff-assembler-ppc.h',
+          ],
+        }],
+        ['v8_target_arch=="s390" or v8_target_arch=="s390x"', {
+          'sources': [
+            '../src/compiler/s390/code-generator-s390.cc',
+            '../src/compiler/s390/instruction-codes-s390.h',
+            '../src/compiler/s390/instruction-scheduler-s390.cc',
+            '../src/compiler/s390/instruction-selector-s390.cc',
+            '../src/debug/s390/debug-s390.cc',
+            '../src/regexp/s390/regexp-macro-assembler-s390.cc',
+            '../src/regexp/s390/regexp-macro-assembler-s390.h',
+            '../src/s390/assembler-s390.cc',
+            '../src/s390/assembler-s390.h',
+            '../src/s390/assembler-s390-inl.h',
+            '../src/s390/codegen-s390.cc',
+            '../src/s390/code-stubs-s390.cc',
+            '../src/s390/code-stubs-s390.h',
+            '../src/s390/constants-s390.cc',
+            '../src/s390/constants-s390.h',
+            '../src/s390/cpu-s390.cc',
+            '../src/s390/deoptimizer-s390.cc',
+            '../src/s390/disasm-s390.cc',
+            '../src/s390/frame-constants-s390.cc',
+            '../src/s390/frame-constants-s390.h',
+            '../src/s390/interface-descriptors-s390.cc',
+            '../src/s390/macro-assembler-s390.cc',
+            '../src/s390/macro-assembler-s390.h',
+            '../src/s390/simulator-s390.cc',
+            '../src/s390/simulator-s390.h',
+            '../src/wasm/baseline/s390/liftoff-assembler-s390.h',
+          ],
+        }],
+        ['OS=="win"', {
+          'variables': {
+            'gyp_generators': '<!(echo $GYP_GENERATORS)',
+          },
+          'msvs_disabled_warnings': [4351, 4355, 4800],
+          # When building Official, the .lib is too large and exceeds the 2G
+          # limit. This breaks it into multiple pieces to avoid the limit.
+          # See http://crbug.com/485155.
+          'msvs_shard': 4,
+          # This will prevent V8's .cc files conflicting with the inspector's
+          # .cpp files in the same shard.
+          'msvs_settings': {
+            'VCCLCompilerTool': {
+              'ObjectFile':'$(IntDir)%(Extension)\\',
+            },
+          },
+        }],
+        ['1==1', {
+          'defines': [
+            'BUILDING_V8_SHARED',
+          ],
+        }],
+        ['v8_postmortem_support=="true"', {
+          'sources': [
+            '<(SHARED_INTERMEDIATE_DIR)/debug-support.cc',
+          ]
+        }],
+        ['v8_enable_i18n_support==1', {
+          'dependencies': [
+            '<(icu_gyp_path):icui18n',
+            '<(icu_gyp_path):icuuc',
+          ],
+          'conditions': [
+            ['icu_use_data_file_flag==1', {
+              'defines': ['ICU_UTIL_DATA_IMPL=ICU_UTIL_DATA_FILE'],
+            }, { # else icu_use_data_file_flag !=1
+              'conditions': [
+                ['OS=="win"', {
+                  'defines': ['ICU_UTIL_DATA_IMPL=ICU_UTIL_DATA_SHARED'],
+                }, {
+                  'defines': ['ICU_UTIL_DATA_IMPL=ICU_UTIL_DATA_STATIC'],
+                }],
+              ],
+            }],
+          ],
+        }, {  # v8_enable_i18n_support==0
+          'sources!': [
+            '../src/builtins/builtins-intl.cc',
+            '../src/builtins/builtins-intl.h',
+            '../src/char-predicates.cc',
+            '../src/intl.cc',
+            '../src/intl.h',
+            '../src/objects/intl-objects.cc',
+            '../src/objects/intl-objects.h',
+            '../src/runtime/runtime-intl.cc',
+          ],
+        }],
+        ['OS=="win" and v8_enable_i18n_support==1', {
+          'dependencies': [
+            '<(icu_gyp_path):icudata',
+          ],
+        }],
+      ],
+    },
+    {
+      'target_name': 'v8_libbase',
+      'type': '<(component)',
+      'variables': {
+        'optimize': 'max',
+      },
+      'include_dirs+': [
+        '..',
+      ],
+      'sources': [
+        '../src/base/adapters.h',
+        '../src/base/atomic-utils.h',
+        '../src/base/atomicops.h',
+        '../src/base/atomicops_internals_atomicword_compat.h',
+        '../src/base/atomicops_internals_portable.h',
+        '../src/base/atomicops_internals_std.h',
+        '../src/base/base-export.h',
+        '../src/base/bits.cc',
+        '../src/base/bits.h',
+        '../src/base/build_config.h',
+        '../src/base/compiler-specific.h',
+        '../src/base/cpu.cc',
+        '../src/base/cpu.h',
+        '../src/base/division-by-constant.cc',
+        '../src/base/division-by-constant.h',
+        '../src/base/debug/stack_trace.cc',
+        '../src/base/debug/stack_trace.h',
+        '../src/base/export-template.h',
+        '../src/base/file-utils.cc',
+        '../src/base/file-utils.h',
+        '../src/base/flags.h',
+        '../src/base/format-macros.h',
+        '../src/base/free_deleter.h',
+        '../src/base/functional.cc',
+        '../src/base/functional.h',
+        '../src/base/hashmap.h',
+        '../src/base/hashmap-entry.h',
+        '../src/base/ieee754.cc',
+        '../src/base/ieee754.h',
+        '../src/base/iterator.h',
+        '../src/base/lazy-instance.h',
+        '../src/base/logging.cc',
+        '../src/base/logging.h',
+        '../src/base/macros.h',
+        '../src/base/once.cc',
+        '../src/base/once.h',
+        '../src/base/optional.h',
+        '../src/base/page-allocator.cc',
+        '../src/base/page-allocator.h',
+        '../src/base/platform/elapsed-timer.h',
+        '../src/base/platform/time.cc',
+        '../src/base/platform/time.h',
+        '../src/base/platform/condition-variable.cc',
+        '../src/base/platform/condition-variable.h',
+        '../src/base/platform/mutex.cc',
+        '../src/base/platform/mutex.h',
+        '../src/base/platform/platform.h',
+        '../src/base/platform/semaphore.cc',
+        '../src/base/platform/semaphore.h',
+        '../src/base/ring-buffer.h',
+        '../src/base/safe_conversions.h',
+        '../src/base/safe_conversions_impl.h',
+        '../src/base/safe_math.h',
+        '../src/base/safe_math_impl.h',
+        '../src/base/sys-info.cc',
+        '../src/base/sys-info.h',
+        '../src/base/template-utils.h',
+        '../src/base/timezone-cache.h',
+        '../src/base/tsan.h',
+        '../src/base/utils/random-number-generator.cc',
+        '../src/base/utils/random-number-generator.h',
+      ],
+      'target_conditions': [
+        ['OS=="android" and _toolset=="target"', {
+          'libraries': [
+            '-llog',
+          ],
+          'include_dirs': [
+            'src/common/android/include',
+          ],
+        }],
+      ],
+      'conditions': [
+        ['want_separate_host_toolset==1', {
+          'toolsets': ['host', 'target'],
+        }, {
+          'toolsets': ['target'],
+        }],
+        ['component=="shared_library"', {
+          'defines': [
+            'BUILDING_V8_BASE_SHARED',
+          ],
+          'direct_dependent_settings': {
+            'defines': [
+              'USING_V8_BASE_SHARED',
+            ],
+          },
+        }],
+        ['OS=="linux"', {
+            'link_settings': {
+              'libraries': [
+                '-ldl',
+                '-lrt'
+              ],
+            },
+            'sources': [
+              '../src/base/debug/stack_trace_posix.cc',
+              '../src/base/platform/platform-linux.cc',
+              '../src/base/platform/platform-posix.h',
+              '../src/base/platform/platform-posix.cc',
+              '../src/base/platform/platform-posix-time.h',
+              '../src/base/platform/platform-posix-time.cc',
+            ],
+          }
+        ],
+        ['OS=="android"', {
+            'sources': [
+              '../src/base/debug/stack_trace_android.cc',
+              '../src/base/platform/platform-posix.h',
+              '../src/base/platform/platform-posix.cc',
+              '../src/base/platform/platform-posix-time.h',
+              '../src/base/platform/platform-posix-time.cc',
+            ],
+            'link_settings': {
+              'target_conditions': [
+                ['_toolset=="host" and host_os!="mac"', {
+                  # Only include libdl and librt on host builds because they
+                  # are included by default on Android target builds, and we
+                  # don't want to re-include them here since this will change
+                  # library order and break (see crbug.com/469973).
+                  # These libraries do not exist on Mac hosted builds.
+                  'libraries': [
+                    '-ldl',
+                    '-lrt'
+                  ]
+                }]
+              ]
+            },
+            'conditions': [
+              ['host_os=="mac"', {
+                'target_conditions': [
+                  ['_toolset=="host"', {
+                    'sources': [
+                      '../src/base/platform/platform-macos.cc'
+                    ]
+                  }, {
+                    'sources': [
+                      '../src/base/platform/platform-linux.cc'
+                    ]
+                  }],
+                ],
+              }, {
+                'sources': [
+                  '../src/base/platform/platform-linux.cc'
+                ]
+              }],
+            ],
+          },
+        ],
+        ['OS=="qnx"', {
+            'link_settings': {
+              'target_conditions': [
+                ['_toolset=="host" and host_os=="linux"', {
+                  'libraries': [
+                    '-lrt'
+                  ],
+                }],
+                ['_toolset=="target"', {
+                  'libraries': [
+                    '-lbacktrace'
+                  ],
+                }],
+              ],
+            },
+            'sources': [
+              '../src/base/debug/stack_trace_posix.cc',
+              '../src/base/platform/platform-posix.h',
+              '../src/base/platform/platform-posix.cc',
+              '../src/base/platform/platform-posix-time.h',
+              '../src/base/platform/platform-posix-time.cc',
+              '../src/base/qnx-math.h'
+            ],
+            'target_conditions': [
+              ['_toolset=="host" and host_os=="linux"', {
+                'sources': [
+                  '../src/base/platform/platform-linux.cc'
+                ],
+              }],
+              ['_toolset=="host" and host_os=="mac"', {
+                'sources': [
+                  '../src/base/platform/platform-macos.cc'
+                ],
+              }],
+              ['_toolset=="target"', {
+                'sources': [
+                  '../src/base/platform/platform-qnx.cc'
+                ],
+              }],
+            ],
+          },
+        ],
+        ['OS=="freebsd"', {
+            'link_settings': {
+              'libraries': [
+                '-L/usr/local/lib -lexecinfo',
+            ]},
+            'sources': [
+              '../src/base/debug/stack_trace_posix.cc',
+              '../src/base/platform/platform-freebsd.cc',
+              '../src/base/platform/platform-posix.h',
+              '../src/base/platform/platform-posix.cc',
+              '../src/base/platform/platform-posix-time.h',
+              '../src/base/platform/platform-posix-time.cc',
+            ],
+          }
+        ],
+        ['OS=="openbsd"', {
+            'link_settings': {
+              'libraries': [
+                '-L/usr/local/lib -lexecinfo',
+            ]},
+            'sources': [
+              '../src/base/debug/stack_trace_posix.cc',
+              '../src/base/platform/platform-openbsd.cc',
+              '../src/base/platform/platform-posix.h',
+              '../src/base/platform/platform-posix.cc',
+              '../src/base/platform/platform-posix-time.h',
+              '../src/base/platform/platform-posix-time.cc',
+            ],
+          }
+        ],
+        ['OS=="netbsd"', {
+            'link_settings': {
+              'libraries': [
+                '-L/usr/pkg/lib -Wl,-R/usr/pkg/lib -lexecinfo',
+            ]},
+            'sources': [
+              '../src/base/debug/stack_trace_posix.cc',
+              '../src/base/platform/platform-openbsd.cc',
+              '../src/base/platform/platform-posix.h',
+              '../src/base/platform/platform-posix.cc',
+              '../src/base/platform/platform-posix-time.h',
+              '../src/base/platform/platform-posix-time.cc',
+            ],
+          }
+        ],
+        ['OS=="aix"', {
+          'sources': [
+            '../src/base/debug/stack_trace_posix.cc',
+            '../src/base/platform/platform-aix.cc',
+            '../src/base/platform/platform-posix.h',
+            '../src/base/platform/platform-posix.cc'
+          ]},
+        ],
+        ['OS=="fuchsia"', {
+          'sources': [
+            '../src/base/debug/stack_trace_fuchsia.cc',
+            '../src/base/platform/platform-fuchsia.cc',
+          ]},
+        ],
+        ['OS=="solaris"', {
+            'link_settings': {
+              'libraries': [
+                '-lnsl -lrt',
+            ]},
+            'sources': [
+              '../src/base/debug/stack_trace_posix.cc',
+              '../src/base/platform/platform-solaris.cc',
+              '../src/base/platform/platform-posix.h',
+              '../src/base/platform/platform-posix.cc',
+            ],
+          }
+        ],
+        ['OS=="mac"', {
+          'sources': [
+            '../src/base/debug/stack_trace_posix.cc',
+            '../src/base/platform/platform-macos.cc',
+            '../src/base/platform/platform-posix.h',
+            '../src/base/platform/platform-posix.cc',
+            '../src/base/platform/platform-posix-time.h',
+            '../src/base/platform/platform-posix-time.cc',
+          ]},
+        ],
+        ['OS=="win"', {
+          'defines': [
+            '_CRT_RAND_S'  # for rand_s()
+          ],
+          'variables': {
+            'gyp_generators': '<!(echo $GYP_GENERATORS)',
+          },
+          'conditions': [
+            ['gyp_generators=="make"', {
+              'variables': {
+                'build_env': '<!(uname -o)',
+              },
+              'conditions': [
+                ['build_env=="Cygwin"', {
+                  'sources': [
+                    '../src/base/debug/stack_trace_posix.cc',
+                    '../src/base/platform/platform-cygwin.cc',
+                    '../src/base/platform/platform-posix.h',
+                    '../src/base/platform/platform-posix.cc',
+                  ],
+                }, {
+                  'sources': [
+                    '../src/base/debug/stack_trace_win.cc',
+                    '../src/base/platform/platform-win32.cc',
+                    '../src/base/win32-headers.h',
+                  ],
+                }],
+              ],
+              'link_settings':  {
+                'libraries': [ '-lwinmm', '-lws2_32' ],
+              },
+            }, {
+              'sources': [
+                '../src/base/debug/stack_trace_win.cc',
+                '../src/base/platform/platform-win32.cc',
+                '../src/base/win32-headers.h',
+              ],
+              'msvs_disabled_warnings': [4351, 4355, 4800],
+              'link_settings':  {
+                'libraries': [
+                  '-ldbghelp.lib',
+                  '-lshlwapi.lib',
+                  '-lwinmm.lib',
+                  '-lws2_32.lib'
+                ],
+              },
+            }],
+          ],
+        }],
+      ],
+    },
+    {
+      'target_name': 'v8_libplatform',
+      'type': '<(component)',
+      'variables': {
+        'optimize': 'max',
+      },
+      'dependencies': [
+        'v8_libbase',
+      ],
+      'include_dirs+': [
+        '..',
+        '<(DEPTH)',
+        '../include/',
+      ],
+      'sources': [
+        '../include//libplatform/libplatform.h',
+        '../include//libplatform/libplatform-export.h',
+        '../include//libplatform/v8-tracing.h',
+        '../src/libplatform/default-background-task-runner.cc',
+        '../src/libplatform/default-background-task-runner.h',
+        '../src/libplatform/default-foreground-task-runner.cc',
+        '../src/libplatform/default-foreground-task-runner.h',
+        '../src/libplatform/default-platform.cc',
+        '../src/libplatform/default-platform.h',
+        '../src/libplatform/task-queue.cc',
+        '../src/libplatform/task-queue.h',
+        '../src/libplatform/tracing/trace-buffer.cc',
+        '../src/libplatform/tracing/trace-buffer.h',
+        '../src/libplatform/tracing/trace-config.cc',
+        '../src/libplatform/tracing/trace-object.cc',
+        '../src/libplatform/tracing/trace-writer.cc',
+        '../src/libplatform/tracing/trace-writer.h',
+        '../src/libplatform/tracing/tracing-controller.cc',
+        '../src/libplatform/worker-thread.cc',
+        '../src/libplatform/worker-thread.h',
+      ],
+      'conditions': [
+        ['want_separate_host_toolset==1', {
+          'toolsets': ['host', 'target'],
+        }, {
+          'toolsets': ['target'],
+        }],
+        ['component=="shared_library"', {
+          'direct_dependent_settings': {
+            'defines': [ 'USING_V8_PLATFORM_SHARED' ],
+          },
+          'defines': [ 'BUILDING_V8_PLATFORM_SHARED' ],
+        }]
+      ],
+      'direct_dependent_settings': {
+        'include_dirs': [
+          '../include/',
+        ],
+      },
+    },
+    {
+      'target_name': 'v8_libsampler',
+      'type': 'static_library',
+      'variables': {
+        'optimize': 'max',
+      },
+      'dependencies': [
+        'v8_libbase',
+      ],
+      'include_dirs+': [
+        '..',
+        '../include/',
+      ],
+      'sources': [
+        '../src/libsampler/sampler.cc',
+        '../src/libsampler/sampler.h'
+      ],
+      'conditions': [
+        ['want_separate_host_toolset==1', {
+          'toolsets': ['host', 'target'],
+        }, {
+          'toolsets': ['target'],
+        }],
+      ],
+      'direct_dependent_settings': {
+        'include_dirs': [
+          '../include/',
+        ],
+      },
+    },
+    {
+      'target_name': 'natives_blob',
+      'type': 'none',
+      'conditions': [
+        [ 'v8_use_external_startup_data==1', {
+          'conditions': [
+            ['want_separate_host_toolset==1', {
+              'dependencies': ['js2c#host'],
+            }, {
+              'dependencies': ['js2c'],
+            }],
+          ],
+          'actions': [{
+            'action_name': 'concatenate_natives_blob',
+            'inputs': [
+              '../tools//concatenate-files.py',
+              '<(SHARED_INTERMEDIATE_DIR)/libraries.bin',
+              '<(SHARED_INTERMEDIATE_DIR)/libraries-extras.bin',
+              '<(SHARED_INTERMEDIATE_DIR)/libraries-experimental-extras.bin',
+            ],
+            'conditions': [
+              ['want_separate_host_toolset==1', {
+                'target_conditions': [
+                  ['_toolset=="host"', {
+                    'outputs': [
+                      '<(PRODUCT_DIR)/natives_blob_host.bin',
+                    ],
+                    'action': [
+                      'python', '<@(_inputs)', '<(PRODUCT_DIR)/natives_blob_host.bin'
+                    ],
+                  }, {
+                    'outputs': [
+                      '<(PRODUCT_DIR)/natives_blob.bin',
+                    ],
+                    'action': [
+                      'python', '<@(_inputs)', '<(PRODUCT_DIR)/natives_blob.bin'
+                    ],
+                  }],
+                ],
+              }, {
+                'outputs': [
+                  '<(PRODUCT_DIR)/natives_blob.bin',
+                ],
+                'action': [
+                  'python', '<@(_inputs)', '<(PRODUCT_DIR)/natives_blob.bin'
+                ],
+              }],
+            ],
+          }],
+        }],
+        ['want_separate_host_toolset==1', {
+          'toolsets': ['host', 'target'],
+        }, {
+          'toolsets': ['target'],
+        }],
+      ]
+    },
+    {
+      'target_name': 'js2c',
+      'type': 'none',
+      'conditions': [
+        ['want_separate_host_toolset==1', {
+          'toolsets': ['host'],
+        }, {
+          'toolsets': ['target'],
+        }],
+      ],
+      'variables': {
+        'library_files': [
+          '../src/js/macros.py',
+          '../src/messages.h',
+          '../src/js/prologue.js',
+          '../src/js/array.js',
+          '../src/js/typedarray.js',
+          '../src/js/messages.js',
+          '../src/js/spread.js',
+          '../src/debug/mirrors.js',
+          '../src/debug/debug.js',
+          '../src/debug/liveedit.js',
+        ],
+        'libraries_bin_file': '<(SHARED_INTERMEDIATE_DIR)/libraries.bin',
+        'libraries_extras_bin_file': '<(SHARED_INTERMEDIATE_DIR)/libraries-extras.bin',
+        'libraries_experimental_extras_bin_file': '<(SHARED_INTERMEDIATE_DIR)/libraries-experimental-extras.bin',
+        'conditions': [
+          ['v8_enable_i18n_support==1', {
+            'library_files': ['../src/js/intl.js'],
+          }],
+        ],
+      },
+      'actions': [
+        {
+          'action_name': 'js2c',
+          'inputs': [
+            '../tools//js2c.py',
+            '<@(library_files)',
+          ],
+          'outputs': ['<(SHARED_INTERMEDIATE_DIR)/libraries.cc'],
+          'action': [
+            'python',
+            '../tools//js2c.py',
+            '<(SHARED_INTERMEDIATE_DIR)/libraries.cc',
+            'CORE',
+            '<@(library_files)',
+          ],
+        },
+        {
+          'action_name': 'js2c_bin',
+          'inputs': [
+            '../tools//js2c.py',
+            '<@(library_files)',
+          ],
+          'outputs': ['<@(libraries_bin_file)'],
+          'action': [
+            'python',
+            '../tools//js2c.py',
+            '<(SHARED_INTERMEDIATE_DIR)/libraries.cc',
+            'CORE',
+            '<@(library_files)',
+            '--startup_blob', '<@(libraries_bin_file)',
+            '--nojs',
+          ],
+        },
+        {
+          'action_name': 'js2c_extras',
+          'inputs': [
+            '../tools//js2c.py',
+            '<@(v8_extra_library_files)',
+          ],
+          'outputs': ['<(SHARED_INTERMEDIATE_DIR)/extras-libraries.cc'],
+          'action': [
+            'python',
+            '../tools//js2c.py',
+            '<(SHARED_INTERMEDIATE_DIR)/extras-libraries.cc',
+            'EXTRAS',
+            '<@(v8_extra_library_files)',
+          ],
+        },
+        {
+          'action_name': 'js2c_extras_bin',
+          'inputs': [
+            '../tools//js2c.py',
+            '<@(v8_extra_library_files)',
+          ],
+          'outputs': ['<@(libraries_extras_bin_file)'],
+          'action': [
+            'python',
+            '../tools//js2c.py',
+            '<(SHARED_INTERMEDIATE_DIR)/extras-libraries.cc',
+            'EXTRAS',
+            '<@(v8_extra_library_files)',
+            '--startup_blob', '<@(libraries_extras_bin_file)',
+            '--nojs',
+          ],
+        },
+        {
+          'action_name': 'js2c_experimental_extras',
+          'inputs': [
+            '../tools//js2c.py',
+            '<@(v8_experimental_extra_library_files)',
+          ],
+          'outputs': [
+            '<(SHARED_INTERMEDIATE_DIR)/experimental-extras-libraries.cc',
+          ],
+          'action': [
+            'python',
+            '../tools//js2c.py',
+            '<(SHARED_INTERMEDIATE_DIR)/experimental-extras-libraries.cc',
+            'EXPERIMENTAL_EXTRAS',
+            '<@(v8_experimental_extra_library_files)',
+          ],
+        },
+        {
+          'action_name': 'js2c_experimental_extras_bin',
+          'inputs': [
+            '../tools//js2c.py',
+            '<@(v8_experimental_extra_library_files)',
+          ],
+          'outputs': ['<@(libraries_experimental_extras_bin_file)'],
+          'action': [
+            'python',
+            '../tools//js2c.py',
+            '<(SHARED_INTERMEDIATE_DIR)/experimental-extras-libraries.cc',
+            'EXPERIMENTAL_EXTRAS',
+            '<@(v8_experimental_extra_library_files)',
+            '--startup_blob', '<@(libraries_experimental_extras_bin_file)',
+            '--nojs',
+          ],
+        },
+      ],
+    },
+    {
+      'target_name': 'postmortem-metadata',
+      'type': 'none',
+      'variables': {
+        'heapobject_files': [
+            '../src/objects.h',
+            '../src/objects-inl.h',
+            '../src/objects/code.h',
+            '../src/objects/code-inl.h',
+            '../src/objects/fixed-array.h',
+            '../src/objects/fixed-array-inl.h',
+            '../src/objects/js-array.h',
+            '../src/objects/js-array-inl.h',
+            '../src/objects/js-regexp.h',
+            '../src/objects/js-regexp-inl.h',
+            '../src/objects/map.h',
+            '../src/objects/map-inl.h',
+            '../src/objects/script.h',
+            '../src/objects/script-inl.h',
+            '../src/objects/shared-function-info.h',
+            '../src/objects/shared-function-info-inl.h',
+            '../src/objects/string.h',
+            '../src/objects/string-inl.h',
+        ],
+      },
+      'actions': [
+          {
+            'action_name': 'gen-postmortem-metadata',
+            'inputs': [
+              '../tools//gen-postmortem-metadata.py',
+              '<@(heapobject_files)',
+            ],
+            'outputs': [
+              '<(SHARED_INTERMEDIATE_DIR)/debug-support.cc',
+            ],
+            'action': [
+              'python',
+              '../tools//gen-postmortem-metadata.py',
+              '<@(_outputs)',
+              '<@(heapobject_files)'
+            ]
+          }
+        ]
+    },
+    {
+      'target_name': 'nwjc',
+      'type': 'executable',
+      'dependencies': ['v8_base', 'v8_nosnapshot', 'v8_libplatform'],
+      'include_dirs+': [
+        '..',
+      ],
+      'sources': [
+        'nwjc.cc',
+      ],
+      'conditions': [
+        ['v8_enable_i18n_support==1', {
+          'dependencies': [
+            '<(icu_gyp_path):icui18n',
+            '<(icu_gyp_path):icuuc',
+          ]
+        }],
+        ['want_separate_host_toolset==1', {
+          'toolsets': ['host'],
+        }, {
+          'toolsets': ['target'],
+        }],
+      ],
+    },
+    {
+      'target_name': 'mksnapshot',
+      'type': 'executable',
+      'dependencies': [
+        'v8_base',
+        'v8_init',
+        'v8_libbase',
+        'v8_libplatform',
+        'v8_nosnapshot',
+      ],
+      'include_dirs+': [
+        '..',
+        '<(DEPTH)',
+      ],
+      'sources': [
+        '../src/snapshot/mksnapshot.cc',
+      ],
+      'conditions': [
+        ['v8_enable_i18n_support==1', {
+          'dependencies': [
+            '<(icu_gyp_path):icui18n',
+            '<(icu_gyp_path):icuuc',
+          ]
+        }],
+        ['want_separate_host_toolset==1', {
+          'toolsets': ['host'],
+        }, {
+          'toolsets': ['target'],
+        }],
+      ],
+    },
+    {
+      'target_name': 'v8_dump_build_config',
+      'type': 'none',
+      'variables': {
+      },
+      'actions': [
+        {
+          'action_name': 'v8_dump_build_config',
+          'inputs': [
+            '../tools//testrunner/utils/dump_build_config_gyp.py',
+          ],
+          'outputs': [
+            '<(PRODUCT_DIR)/v8_build_config.json',
+          ],
+          'action': [
+            'python',
+            '../tools//testrunner/utils/dump_build_config_gyp.py',
+            '<(PRODUCT_DIR)/v8_build_config.json',
+            'dcheck_always_on=<(dcheck_always_on)',
+            'is_asan=<(asan)',
+            'is_cfi=<(cfi_vptr)',
+            'is_component_build=<(component)',
+            'is_debug=<(CONFIGURATION_NAME)',
+            # Not available in gyp.
+            'is_gcov_coverage=0',
+            'is_msan=<(msan)',
+            'is_tsan=<(tsan)',
+            # Not available in gyp.
+            'is_ubsan_vptr=0',
+            'target_cpu=<(target_arch)',
+            'v8_enable_i18n_support=<(v8_enable_i18n_support)',
+            'v8_enable_verify_predictable=<(v8_enable_verify_predictable)',
+            'v8_target_cpu=<(v8_target_arch)',
+            'v8_use_snapshot=<(v8_use_snapshot)',
+          ],
+          'conditions': [
+            ['v8_target_arch=="mips" or v8_target_arch=="mipsel" \
+              or v8_target_arch=="mips64" or v8_target_arch=="mips64el"', {
+                'action':[
+                  'mips_arch_variant=<(mips_arch_variant)',
+                  'mips_use_msa=<(mips_use_msa)',
+                ],
+            }],
+          ],
+        },
+      ],
+    },
+    {
+      'target_name': 'v8_monolith',
+      'type': 'none',
+      'direct_dependent_settings': {
+        'include_dirs': [
+          '../include/',
+        ],
+      },
+      'actions': [
+        {
+          'action_name': 'build_with_gn',
+          'inputs': [
+            '../tools//node/build_gn.py',
+          ],
+          'outputs': [
+            '<(INTERMEDIATE_DIR)/gn/obj/libv8_monolith.a',
+            '<(INTERMEDIATE_DIR)/gn/args.gn',
+          ],
+          'action': [
+            '../tools//node/build_gn.py',
+            '--mode', '<(CONFIGURATION_NAME)',
+            '--v8_path', '../',
+            '--build_path', '<(INTERMEDIATE_DIR)/gn',
+            '--host_os', '<(host_os)',
+            '--flag', 'v8_promise_internal_field_count=<(v8_promise_internal_field_count)',
+            '--flag', 'target_cpu="<(target_arch)"',
+            '--flag', 'target_os="<(OS)"',
+            '--flag', 'v8_target_cpu="<(v8_target_arch)"',
+            '--flag', 'v8_embedder_string="<(v8_embedder_string)"',
+            '--flag', 'v8_use_snapshot=<(v8_use_snapshot)',
+            '--flag', 'v8_optimized_debug=<(v8_optimized_debug)',
+            '--flag', 'v8_enable_disassembler=<(v8_enable_disassembler)',
+            '--flag', 'v8_postmortem_support=<(v8_postmortem_support)',
+          ],
+        },
+      ],
+    },
+  ],
+}
diff --git a/include/libplatform/libplatform.h b/include/libplatform/libplatform.h
index 9ec60c04f9..38d22e7e78 100644
--- a/include/libplatform/libplatform.h
+++ b/include/libplatform/libplatform.h
@@ -36,7 +36,7 @@ enum class MessageLoopBehavior : bool {
  * If |tracing_controller| is nullptr, the default platform will create a
  * v8::platform::TracingController instance and use it.
  */
-V8_PLATFORM_EXPORT std::unique_ptr<v8::Platform> NewDefaultPlatform(
+V8_EXPORT std::unique_ptr<v8::Platform> NewDefaultPlatform(
     int thread_pool_size = 0,
     IdleTaskSupport idle_task_support = IdleTaskSupport::kDisabled,
     InProcessStackDumping in_process_stack_dumping =
@@ -74,7 +74,8 @@ V8_PLATFORM_EXPORT std::unique_ptr<v8::JobHandle> NewDefaultJobHandle(
  * the |behavior| parameter, this call does not block if no task is pending. The
  * |platform| has to be created using |NewDefaultPlatform|.
  */
-V8_PLATFORM_EXPORT bool PumpMessageLoop(
+
+V8_EXPORT bool PumpMessageLoop(
     v8::Platform* platform, v8::Isolate* isolate,
     MessageLoopBehavior behavior = MessageLoopBehavior::kDoNotWait);
 
@@ -85,7 +86,7 @@ V8_PLATFORM_EXPORT bool PumpMessageLoop(
  * This call does not block if no task is pending. The |platform| has to be
  * created using |NewDefaultPlatform|.
  */
-V8_PLATFORM_EXPORT void RunIdleTasks(v8::Platform* platform,
+V8_EXPORT void RunIdleTasks(v8::Platform* platform,
                                      v8::Isolate* isolate,
                                      double idle_time_in_seconds);
 
diff --git a/include/v8-array-buffer.h b/include/v8-array-buffer.h
index bab840f82c..a080b4d2f2 100644
--- a/include/v8-array-buffer.h
+++ b/include/v8-array-buffer.h
@@ -170,7 +170,8 @@ class V8_EXPORT ArrayBuffer : public Object {
      * while kReservation is for larger allocations with the ability to set
      * access permissions.
      */
-    enum class AllocationMode { kNormal, kReservation };
+    enum class AllocationMode { kNormal, kReservation, kNodeJS };
+    virtual void Free(void* data, size_t length, AllocationMode mode);
 
     /**
      * Convenience allocator.
@@ -211,6 +212,8 @@ class V8_EXPORT ArrayBuffer : public Object {
    */
   static Local<ArrayBuffer> New(Isolate* isolate,
                                 std::shared_ptr<BackingStore> backing_store);
+  static Local<ArrayBuffer> NewNode(Isolate* isolate,
+                                std::shared_ptr<BackingStore> backing_store);
 
   /**
    * Returns a new standalone BackingStore that is allocated using the array
@@ -240,6 +243,11 @@ class V8_EXPORT ArrayBuffer : public Object {
    */
   bool IsDetachable() const;
 
+  /**
+   * Returns true if this ArrayBuffer has been detached.
+   */
+  bool WasDetached() const;
+
   /**
    * Detaches this ArrayBuffer and all its views (typed arrays).
    * Detaching sets the byte length of the buffer and all typed arrays to zero,
@@ -248,11 +256,16 @@ class V8_EXPORT ArrayBuffer : public Object {
    */
   void Detach();
 
+  void set_nodejs(bool);
+
   /**
    * Get a shared pointer to the backing store of this array buffer. This
    * pointer coordinates the lifetime management of the internal storage
    * with any live ArrayBuffers on the heap, even across isolates. The embedder
    * should not attempt to manage lifetime of the storage through other means.
+   *
+   * The returned shared pointer will not be empty, even if the ArrayBuffer has
+   * been detached. Use |WasDetached| to tell if it has been detached instead.
    */
   std::shared_ptr<BackingStore> GetBackingStore();
 
diff --git a/include/v8-debug.h b/include/v8-debug.h
index 52255f3700..3c523a18f2 100644
--- a/include/v8-debug.h
+++ b/include/v8-debug.h
@@ -130,6 +130,8 @@ class V8_EXPORT StackTrace {
     kDetailed = kOverview | kIsEval | kIsConstructor | kScriptNameOrSourceURL
   };
 
+  V8_DEPRECATED("Use Isolate version")
+                Local<StackFrame> GetFrame(uint32_t index) const;
   /**
    * Returns a StackFrame at a particular index.
    */
diff --git a/include/v8-initialization.h b/include/v8-initialization.h
index d3e35d6ec5..c24286bae7 100644
--- a/include/v8-initialization.h
+++ b/include/v8-initialization.h
@@ -151,6 +151,7 @@ class V8_EXPORT V8 {
    */
   static bool InitializeICUDefaultLocation(const char* exec_path,
                                            const char* icu_data_file = nullptr);
+  static void* RawICUData();
 
   /**
    * Initialize the external startup data. The embedder only needs to
diff --git a/include/v8-isolate.h b/include/v8-isolate.h
index 2f8acc8868..68a2226e77 100644
--- a/include/v8-isolate.h
+++ b/include/v8-isolate.h
@@ -209,6 +209,7 @@ using StackState = cppgc::EmbedderStackState;
  */
 class V8_EXPORT Isolate {
  public:
+  ArrayBuffer::Allocator* array_buffer_allocator();
   /**
    * Initial configuration parameters for a new Isolate.
    */
@@ -296,6 +297,7 @@ class V8_EXPORT Isolate {
     OOMErrorCallback oom_error_callback = nullptr;
   };
 
+  void SetArrayBufferAllocatorShared(std::shared_ptr<ArrayBuffer::Allocator> allocator);
   /**
    * Stack-allocated class which sets the isolate for all operations
    * executed within a local scope.
diff --git a/include/v8-platform.h b/include/v8-platform.h
index 7b2c81d136..a0e0aa4dad 100644
--- a/include/v8-platform.h
+++ b/include/v8-platform.h
@@ -10,6 +10,37 @@
 #include <stdlib.h>  // For abort.
 #include <memory>
 #include <string>
+#include "v8config.h"
+
+#ifdef V8_OS_WIN
+
+// Setup for Windows DLL export/import. When building the V8 DLL the
+// BUILDING_V8_SHARED needs to be defined. When building a program which uses
+// the V8 DLL USING_V8_SHARED needs to be defined. When either building the V8
+// static library or building a program which uses the V8 static library neither
+// BUILDING_V8_SHARED nor USING_V8_SHARED should be defined.
+#ifdef BUILDING_V8_SHARED
+# define V8_EXPORT __declspec(dllexport)
+#elif USING_V8_SHARED
+# define V8_EXPORT __declspec(dllimport)
+#else
+# define V8_EXPORT
+#endif  // BUILDING_V8_SHARED
+
+#else  // V8_OS_WIN
+
+// Setup for Linux shared library export.
+#if V8_HAS_ATTRIBUTE_VISIBILITY
+# ifdef BUILDING_V8_SHARED
+#  define V8_EXPORT __attribute__ ((visibility("default")))
+# else
+#  define V8_EXPORT
+# endif
+#else
+# define V8_EXPORT
+#endif
+
+#endif  // V8_OS_WIN
 
 #include "v8config.h"  // NOLINT(build/include_directory)
 
@@ -1115,6 +1146,7 @@ class Platform {
    */
   V8_EXPORT static double SystemClockTimeMillis();
 };
+void V8_EXPORT SetTLSPlatform(Platform* platform);
 
 }  // namespace v8
 
diff --git a/include/v8-primitive-object.h b/include/v8-primitive-object.h
index 573932d078..84c20af271 100644
--- a/include/v8-primitive-object.h
+++ b/include/v8-primitive-object.h
@@ -78,6 +78,8 @@ class V8_EXPORT BooleanObject : public Object {
  */
 class V8_EXPORT StringObject : public Object {
  public:
+  V8_DEPRECATED("Use Isolate* version") static
+                       Local<Value> New(Local<String> value);
   static Local<Value> New(Isolate* isolate, Local<String> value);
 
   Local<String> ValueOf() const;
diff --git a/include/v8-primitive.h b/include/v8-primitive.h
index 4fef8da7f8..adcf2e2cb2 100644
--- a/include/v8-primitive.h
+++ b/include/v8-primitive.h
@@ -69,6 +69,9 @@ class V8_EXPORT PrimitiveArray : public Data {
     return reinterpret_cast<PrimitiveArray*>(data);
   }
 
+  V8_DEPRECATED("Use Isolate version")
+                void Set(int index, Local<Primitive> item);
+  V8_DEPRECATED("Use Isolate version") Local<Primitive> Get(int index);
  private:
   static void CheckCast(Data* obj);
 };
@@ -140,6 +143,7 @@ class V8_EXPORT String : public Name {
    * Returns the number of bytes in the UTF-8 encoded
    * representation of this string.
    */
+  V8_DEPRECATED("Use Isolate version instead") int Utf8Length() const;
   int Utf8Length(Isolate* isolate) const;
 
   /**
@@ -196,13 +200,24 @@ class V8_EXPORT String : public Name {
   // 16-bit character codes.
   int Write(Isolate* isolate, uint16_t* buffer, int start = 0, int length = -1,
             int options = NO_OPTIONS) const;
+  V8_DEPRECATED("Use Isolate* version")
+                int Write(uint16_t* buffer, int start = 0, int length = -1,
+                          int options = NO_OPTIONS) const;
   // One byte characters.
   int WriteOneByte(Isolate* isolate, uint8_t* buffer, int start = 0,
                    int length = -1, int options = NO_OPTIONS) const;
+  V8_DEPRECATED("Use Isolate* version")
+                int WriteOneByte(uint8_t* buffer, int start = 0,
+                                 int length = -1, int options = NO_OPTIONS)
+                    const;
   // UTF-8 encoded characters.
   int WriteUtf8(Isolate* isolate, char* buffer, int length = -1,
                 int* nchars_ref = nullptr, int options = NO_OPTIONS) const;
 
+  V8_DEPRECATED("Use Isolate* version")
+                int WriteUtf8(char* buffer, int length = -1,
+                              int* nchars_ref = NULL, int options = NO_OPTIONS)
+                    const;
   /**
    * A zero length string.
    */
@@ -446,6 +461,9 @@ class V8_EXPORT String : public Name {
   static Local<String> Concat(Isolate* isolate, Local<String> left,
                               Local<String> right);
 
+  V8_DEPRECATED("Use Isolate* version") static
+                       Local<String> Concat(Local<String> left,
+                                            Local<String> right);
   /**
    * Creates a new external string using the data defined in the given
    * resource. When the external string is no longer live on V8's heap the
@@ -509,6 +527,8 @@ class V8_EXPORT String : public Name {
    */
   class V8_EXPORT Utf8Value {
    public:
+   V8_DEPRECATED("Use Isolate version")
+                  explicit Utf8Value(Local<v8::Value> obj);
     Utf8Value(Isolate* isolate, Local<v8::Value> obj);
     ~Utf8Value();
     char* operator*() { return str_; }
@@ -532,6 +552,7 @@ class V8_EXPORT String : public Name {
    */
   class V8_EXPORT Value {
    public:
+   V8_DEPRECATED("Use Isolate version") explicit Value(Local<v8::Value> obj);
     Value(Isolate* isolate, Local<v8::Value> obj);
     ~Value();
     uint16_t* operator*() { return str_; }
diff --git a/include/v8-script.h b/include/v8-script.h
index e2ba845268..addc8717af 100644
--- a/include/v8-script.h
+++ b/include/v8-script.h
@@ -621,6 +621,7 @@ class V8_EXPORT ScriptCompiler {
       CompileOptions options = kNoCompileOptions,
       NoCacheReason no_cache_reason = kNoCacheNoReason);
 
+  static MaybeLocal<Module> CompileModuleWithCache(Isolate* isolate, Source* source);
   /**
    * Returns a task which streams script data into V8, or NULL if the script
    * cannot be streamed. The user is responsible for running the task on a
@@ -798,6 +799,9 @@ Module* Module::Cast(Data* data) {
   return reinterpret_cast<Module*>(data);
 }
 
+void V8_EXPORT FixSourceNWBin(Isolate* v8_isolate, Local<UnboundScript> script);
+void V8_EXPORT FixSourceNWBin(Isolate* v8_isolate, Local<Module> module);
+
 }  // namespace v8
 
 #endif  // INCLUDE_V8_SCRIPT_H_
diff --git a/include/v8-value.h b/include/v8-value.h
index adca989e00..84b1f40496 100644
--- a/include/v8-value.h
+++ b/include/v8-value.h
@@ -397,6 +397,10 @@ class V8_EXPORT Value : public Data {
    */
   Local<Boolean> ToBoolean(Isolate* isolate) const;
 
+  V8_DEPRECATED("Use maybe version") Local<Boolean> ToBoolean() const;
+  V8_DEPRECATED("Use maybe version") Local<String> ToString() const;
+  V8_DEPRECATED("Use maybe version") Local<Object> ToObject() const;
+  V8_DEPRECATED("Use maybe version") Local<Integer> ToInteger() const;
   /**
    * Attempts to convert a string to an array index.
    * Returns an empty handle if the conversion fails.
@@ -418,7 +422,14 @@ class V8_EXPORT Value : public Data {
   /** Returns the equivalent of `ToInt32()->Value()`. */
   V8_WARN_UNUSED_RESULT Maybe<int32_t> Int32Value(Local<Context> context) const;
 
+  V8_DEPRECATED("Use maybe version") bool BooleanValue() const;
+  V8_DEPRECATED("Use maybe version") double NumberValue() const;
+  V8_DEPRECATED("Use maybe version") int64_t IntegerValue() const;
+  V8_DEPRECATED("Use maybe version") uint32_t Uint32Value() const;
+  V8_DEPRECATED("Use maybe version") int32_t Int32Value() const;
+
   /** JS == */
+  V8_DEPRECATED("Use maybe version") bool Equals(Local<Value> that) const;
   V8_WARN_UNUSED_RESULT Maybe<bool> Equals(Local<Context> context,
                                            Local<Value> that) const;
   bool StrictEquals(Local<Value> that) const;
diff --git a/include/v8-wasm.h b/include/v8-wasm.h
index 05acd2e86d..ed93ffceb3 100644
--- a/include/v8-wasm.h
+++ b/include/v8-wasm.h
@@ -121,6 +121,9 @@ class V8_EXPORT WasmModuleObject : public Object {
   static void CheckCast(Value* obj);
 };
 
+V8_DEPRECATED("Use WasmModuleObject")
+              typedef WasmModuleObject WasmCompiledModule;
+
 /**
  * The V8 interface for WebAssembly streaming compilation. When streaming
  * compilation is initiated, V8 passes a {WasmStreaming} object to the embedder
diff --git a/src/api/api.cc b/src/api/api.cc
index 14b7c541b3..ed8b7f027c 100644
--- a/src/api/api.cc
+++ b/src/api/api.cc
@@ -174,6 +174,31 @@
 namespace v8 {
 
 static OOMErrorCallback g_oom_error_callback = nullptr;
+namespace {
+
+// TODO(delphick): Remove this completely when the deprecated functions that use
+// it are removed.
+// DO NOT USE THIS IN NEW CODE!
+i::Isolate* UnsafeIsolateFromHeapObject(i::Handle<i::HeapObject> obj) {
+  // Use MemoryChunk directly instead of Isolate::FromWritableHeapObject to
+  // temporarily allow isolate access from read-only space objects.
+  i::MemoryChunk* chunk = i::MemoryChunk::FromHeapObject(*obj);
+  return chunk->heap()->isolate();
+}
+
+// TODO(delphick): Remove this completely when the deprecated functions that use
+// it are removed.
+// DO NOT USE THIS IN NEW CODE!
+Local<Context> UnsafeContextFromHeapObject(i::Handle<i::Object> obj) {
+  // Use MemoryChunk directly instead of Isolate::FromWritableHeapObject to
+  // temporarily allow isolate access from read-only space objects.
+  i::MemoryChunk* chunk =
+      i::MemoryChunk::FromHeapObject(i::HeapObject::cast(*obj));
+  return reinterpret_cast<Isolate*>(chunk->heap()->isolate())
+      ->GetCurrentContext();
+}
+
+}  // namespace
 
 static ScriptOrigin GetScriptOriginForScript(i::Isolate* i_isolate,
                                              i::Handle<i::Script> script) {
@@ -354,6 +379,11 @@ void V8::SetSnapshotDataBlob(StartupData* snapshot_blob) {
   i::V8::SetSnapshotBlob(snapshot_blob);
 }
 
+void v8::ArrayBuffer::Allocator::Free(void* data, size_t length,
+                                      AllocationMode mode) {
+  UNIMPLEMENTED();
+}
+
 namespace {
 
 #ifdef V8_ENABLE_SANDBOX
@@ -2225,6 +2255,12 @@ void PrimitiveArray::Set(Isolate* v8_isolate, int index,
   array->set(index, *i_item);
 }
 
+void PrimitiveArray::Set(int index, Local<Primitive> item) {
+  i::Handle<i::FixedArray> array = Utils::OpenHandle(this);
+  i::Isolate* isolate = UnsafeIsolateFromHeapObject(array);
+  Set(reinterpret_cast<Isolate*>(isolate), index, item);
+}
+
 Local<Primitive> PrimitiveArray::Get(Isolate* v8_isolate, int index) {
   i::Isolate* i_isolate = reinterpret_cast<i::Isolate*>(v8_isolate);
   i::Handle<i::FixedArray> array = Utils::OpenHandle(this);
@@ -2275,6 +2311,12 @@ Local<FixedArray> ModuleRequest::GetImportAssertions() const {
       i::handle(self->import_assertions(), i_isolate));
 }
 
+Local<Primitive> PrimitiveArray::Get(int index) {
+  i::Handle<i::FixedArray> array = Utils::OpenHandle(this);
+  i::Isolate* isolate = UnsafeIsolateFromHeapObject(array);
+  return Get(reinterpret_cast<Isolate*>(isolate), index);
+}
+
 Module::Status Module::GetStatus() const {
   i::Handle<i::Module> self = Utils::OpenHandle(this);
   switch (self->status()) {
@@ -2618,6 +2660,21 @@ MaybeLocal<Module> ScriptCompiler::CompileModule(
   return ToApiHandle<Module>(i_isolate->factory()->NewSourceTextModule(shared));
 }
 
+MaybeLocal<Module> ScriptCompiler::CompileModuleWithCache(Isolate* isolate,
+                                                          Source* source) {
+  i::Isolate* i_isolate = reinterpret_cast<i::Isolate*>(isolate);
+
+  Utils::ApiCheck(source->GetResourceOptions().IsModule(),
+                  "v8::ScriptCompiler::CompileModule",
+                  "Invalid ScriptOrigin: is_module must be true");
+  auto maybe = CompileUnboundInternal(isolate, source, kConsumeCodeCache, kNoCacheNoReason);
+  Local<UnboundScript> unbound;
+  if (!maybe.ToLocal(&unbound)) return MaybeLocal<Module>();
+
+  i::Handle<i::SharedFunctionInfo> shared = Utils::OpenHandle(*unbound);
+  return ToApiHandle<Module>(i_isolate->factory()->NewSourceTextModule(shared));
+}
+
 // static
 V8_WARN_UNUSED_RESULT MaybeLocal<Function> ScriptCompiler::CompileFunction(
     Local<Context> context, Source* source, size_t arguments_count,
@@ -3227,6 +3284,11 @@ Local<StackFrame> StackTrace::GetFrame(Isolate* v8_isolate,
   return Utils::StackFrameToLocal(info);
 }
 
+Local<StackFrame> StackTrace::GetFrame(uint32_t index) const {
+  i::Isolate* isolate = UnsafeIsolateFromHeapObject(Utils::OpenHandle(this));
+  return GetFrame(reinterpret_cast<Isolate*>(isolate), index);
+}
+
 int StackTrace::GetFrameCount() const {
   return Utils::OpenHandle(this)->length();
 }
@@ -3256,9 +3318,9 @@ Location StackFrame::GetLocation() const {
   i::Isolate* i_isolate = self->GetIsolate();
   i::Handle<i::Script> script(self->script(), i_isolate);
   i::Script::PositionInfo info;
-  CHECK(i::Script::GetPositionInfo(script,
+  i::Script::GetPositionInfo(script,
                                    i::StackFrameInfo::GetSourcePosition(self),
-                                   &info, i::Script::WITH_OFFSET));
+                                   &info, i::Script::WITH_OFFSET);
   if (script->HasSourceURLComment()) {
     info.line -= script->line_offset();
     if (info.line == 0) {
@@ -3623,6 +3685,25 @@ bool ValueDeserializer::ReadRawBytes(size_t length, const void** data) {
 
 // --- D a t a ---
 
+Local<Boolean> Value::ToBoolean() const {
+  return ToBoolean(Isolate::GetCurrent());
+}
+
+Local<String> Value::ToString() const {
+  return ToString(Isolate::GetCurrent()->GetCurrentContext())
+      .FromMaybe(Local<String>());
+}
+
+Local<Object> Value::ToObject() const {
+  return ToObject(Isolate::GetCurrent()->GetCurrentContext())
+      .FromMaybe(Local<Object>());
+}
+
+Local<Integer> Value::ToInteger() const {
+  return ToInteger(Isolate::GetCurrent()->GetCurrentContext())
+      .FromMaybe(Local<Integer>());
+}
+
 bool Value::FullIsUndefined() const {
   i::Handle<i::Object> object = Utils::OpenHandle(this);
   bool result = object->IsUndefined();
@@ -4216,6 +4297,15 @@ void v8::RegExp::CheckCast(v8::Value* that) {
                   "Value is not a RegExp");
 }
 
+bool Value::BooleanValue() const {
+  auto obj = Utils::OpenHandle(this);
+  if (obj->IsSmi()) return *obj != i::Smi::zero();
+  DCHECK(obj->IsHeapObject());
+  i::Isolate* isolate =
+      UnsafeIsolateFromHeapObject(i::Handle<i::HeapObject>::cast(obj));
+  return obj->BooleanValue(isolate);
+}
+
 Maybe<double> Value::NumberValue(Local<Context> context) const {
   auto obj = Utils::OpenHandle(this);
   if (obj->IsNumber()) return Just(obj->Number());
@@ -4228,6 +4318,13 @@ Maybe<double> Value::NumberValue(Local<Context> context) const {
   return Just(num->Number());
 }
 
+double Value::NumberValue() const {
+  auto obj = Utils::OpenHandle(this);
+  if (obj->IsNumber()) return obj->Number();
+  return NumberValue(UnsafeContextFromHeapObject(obj))
+      .FromMaybe(std::numeric_limits<double>::quiet_NaN());
+}
+
 Maybe<int64_t> Value::IntegerValue(Local<Context> context) const {
   auto obj = Utils::OpenHandle(this);
   if (obj->IsNumber()) {
@@ -4242,6 +4339,18 @@ Maybe<int64_t> Value::IntegerValue(Local<Context> context) const {
   return Just(NumberToInt64(*num));
 }
 
+int64_t Value::IntegerValue() const {
+  auto obj = Utils::OpenHandle(this);
+  if (obj->IsNumber()) {
+    if (obj->IsSmi()) {
+      return i::Smi::ToInt(*obj);
+    } else {
+      return static_cast<int64_t>(obj->Number());
+    }
+  }
+  return IntegerValue(UnsafeContextFromHeapObject(obj)).FromMaybe(0);
+}
+
 Maybe<int32_t> Value::Int32Value(Local<Context> context) const {
   auto obj = Utils::OpenHandle(this);
   if (obj->IsNumber()) return Just(NumberToInt32(*obj));
@@ -4255,6 +4364,12 @@ Maybe<int32_t> Value::Int32Value(Local<Context> context) const {
                            : static_cast<int32_t>(num->Number()));
 }
 
+int32_t Value::Int32Value() const {
+  auto obj = Utils::OpenHandle(this);
+  if (obj->IsNumber()) return NumberToInt32(*obj);
+  return Int32Value(UnsafeContextFromHeapObject(obj)).FromMaybe(0);
+}
+
 Maybe<uint32_t> Value::Uint32Value(Local<Context> context) const {
   auto obj = Utils::OpenHandle(this);
   if (obj->IsNumber()) return Just(NumberToUint32(*obj));
@@ -4268,6 +4383,12 @@ Maybe<uint32_t> Value::Uint32Value(Local<Context> context) const {
                            : static_cast<uint32_t>(num->Number()));
 }
 
+uint32_t Value::Uint32Value() const {
+  auto obj = Utils::OpenHandle(this);
+  if (obj->IsNumber()) return NumberToUint32(*obj);
+  return Uint32Value(UnsafeContextFromHeapObject(obj)).FromMaybe(0);
+}
+
 MaybeLocal<Uint32> Value::ToArrayIndex(Local<Context> context) const {
   auto self = Utils::OpenHandle(this);
   if (self->IsSmi()) {
@@ -4304,6 +4425,20 @@ Maybe<bool> Value::Equals(Local<Context> context, Local<Value> that) const {
   return result;
 }
 
+bool Value::Equals(Local<Value> that) const {
+  auto self = Utils::OpenHandle(this);
+  auto other = Utils::OpenHandle(*that);
+  if (self->IsSmi() && other->IsSmi()) {
+    return self->Number() == other->Number();
+  }
+  if (self->IsJSObject() && other->IsJSObject()) {
+    return *self == *other;
+  }
+  auto heap_object = self->IsSmi() ? other : self;
+  auto context = UnsafeContextFromHeapObject(heap_object);
+  return Equals(context, that).FromMaybe(false);
+}
+
 bool Value::StrictEquals(Local<Value> that) const {
   auto self = Utils::OpenHandle(this);
   auto other = Utils::OpenHandle(*that);
@@ -5613,6 +5748,11 @@ bool String::ContainsOnlyOneByte() const {
   return helper.Check(*str);
 }
 
+int String::Utf8Length() const {
+  i::Isolate* isolate = UnsafeIsolateFromHeapObject(Utils::OpenHandle(this));
+  return Utf8Length(reinterpret_cast<Isolate*>(isolate));
+}
+
 int String::Utf8Length(Isolate* v8_isolate) const {
   i::Handle<i::String> str = Utils::OpenHandle(this);
   str = i::String::Flatten(reinterpret_cast<i::Isolate*>(v8_isolate), str);
@@ -5765,6 +5905,7 @@ static int WriteUtf8Impl(base::Vector<const Char> string, char* write_start,
 }
 }  // anonymous namespace
 
+
 int String::WriteUtf8(Isolate* v8_isolate, char* buffer, int capacity,
                       int* nchars_ref, int options) const {
   i::Handle<i::String> str = Utils::OpenHandle(this);
@@ -5783,6 +5924,14 @@ int String::WriteUtf8(Isolate* v8_isolate, char* buffer, int capacity,
   }
 }
 
+int String::WriteUtf8(char* buffer, int capacity, int* nchars_ref,
+                      int options) const {
+  i::Handle<i::String> str = Utils::OpenHandle(this);
+  i::Isolate* isolate = UnsafeIsolateFromHeapObject(str);
+  return WriteUtf8(reinterpret_cast<Isolate*>(isolate), buffer, capacity,
+                   nchars_ref, options);
+}
+
 template <typename CharType>
 static inline int WriteHelper(i::Isolate* i_isolate, const String* string,
                               CharType* buffer, int start, int length,
@@ -5804,12 +5953,23 @@ static inline int WriteHelper(i::Isolate* i_isolate, const String* string,
   return write_length;
 }
 
+int String::WriteOneByte(uint8_t* buffer, int start, int length,
+                         int options) const {
+  i::Isolate* isolate = UnsafeIsolateFromHeapObject(Utils::OpenHandle(this));
+  return WriteHelper(isolate, this, buffer, start, length, options);
+}
+
 int String::WriteOneByte(Isolate* v8_isolate, uint8_t* buffer, int start,
                          int length, int options) const {
   return WriteHelper(reinterpret_cast<i::Isolate*>(v8_isolate), this, buffer,
                      start, length, options);
 }
 
+int String::Write(uint16_t* buffer, int start, int length, int options) const {
+  i::Isolate* isolate = UnsafeIsolateFromHeapObject(Utils::OpenHandle(this));
+  return WriteHelper(isolate, this, buffer, start, length, options);
+}
+
 int String::Write(Isolate* v8_isolate, uint16_t* buffer, int start, int length,
                   int options) const {
   return WriteHelper(reinterpret_cast<i::Isolate*>(v8_isolate), this, buffer,
@@ -6313,6 +6473,10 @@ bool v8::V8::InitializeICUDefaultLocation(const char* exec_path,
   return i::InitializeICUDefaultLocation(exec_path, icu_data_file);
 }
 
+void* v8::V8::RawICUData() {
+  return i::RawICUData();
+}
+
 void v8::V8::InitializeExternalStartupData(const char* directory_path) {
   i::InitializeExternalStartupData(directory_path);
 }
@@ -7037,6 +7201,12 @@ Local<String> v8::String::Concat(Isolate* v8_isolate, Local<String> left,
   return Utils::ToLocal(result);
 }
 
+Local<String> v8::String::Concat(Local<String> left, Local<String> right) {
+  i::Handle<i::String> left_string = Utils::OpenHandle(*left);
+  i::Isolate* isolate = UnsafeIsolateFromHeapObject(left_string);
+  return Concat(reinterpret_cast<Isolate*>(isolate), left, right);
+}
+
 MaybeLocal<String> v8::String::NewExternalTwoByte(
     Isolate* v8_isolate, v8::String::ExternalStringResource* resource) {
   CHECK(resource && resource->data());
@@ -7338,6 +7508,12 @@ bool v8::BooleanObject::ValueOf() const {
   return js_primitive_wrapper.value().IsTrue(i_isolate);
 }
 
+Local<v8::Value> v8::StringObject::New(Local<String> value) {
+  i::Handle<i::String> string = Utils::OpenHandle(*value);
+  i::Isolate* isolate = UnsafeIsolateFromHeapObject(string);
+  return New(reinterpret_cast<Isolate*>(isolate), value);
+}
+
 Local<v8::Value> v8::StringObject::New(Isolate* v8_isolate,
                                        Local<String> value) {
   i::Handle<i::String> string = Utils::OpenHandle(*value);
@@ -8075,6 +8251,10 @@ bool v8::ArrayBuffer::IsDetachable() const {
   return Utils::OpenHandle(this)->is_detachable();
 }
 
+bool v8::ArrayBuffer::WasDetached() const {
+  return Utils::OpenHandle(this)->was_detached();
+}
+
 namespace {
 std::shared_ptr<i::BackingStore> ToInternal(
     std::shared_ptr<i::BackingStoreBase> backing_store) {
@@ -8171,6 +8351,25 @@ std::unique_ptr<v8::BackingStore> v8::ArrayBuffer::NewBackingStore(
       static_cast<v8::BackingStore*>(backing_store.release()));
 }
 
+Local<ArrayBuffer> v8::ArrayBuffer::NewNode(
+    Isolate* isolate, std::shared_ptr<BackingStore> backing_store) {
+  CHECK_IMPLIES(backing_store->ByteLength() != 0,
+                backing_store->Data() != nullptr);
+  i::Isolate* i_isolate = reinterpret_cast<i::Isolate*>(isolate);
+  API_RCS_SCOPE(i_isolate, ArrayBuffer, New);
+  ENTER_V8_NO_SCRIPT_NO_EXCEPTION(i_isolate);
+  std::shared_ptr<i::BackingStore> i_backing_store(
+      ToInternal(std::move(backing_store)));
+  Utils::ApiCheck(
+      !i_backing_store->is_shared(), "v8_ArrayBuffer_New",
+      "Cannot construct ArrayBuffer with a BackingStore of SharedArrayBuffer");
+  i_backing_store->set_nodejs(true);
+  i::Handle<i::JSArrayBuffer> obj =
+      i_isolate->factory()->NewJSArrayBuffer(std::move(i_backing_store));
+  obj->set_is_node_js(true);
+  return Utils::ToLocal(obj);
+}
+
 Local<ArrayBuffer> v8::ArrayBufferView::Buffer() {
   i::Handle<i::JSArrayBufferView> obj = Utils::OpenHandle(this);
   i::Handle<i::JSArrayBuffer> buffer;
@@ -8555,6 +8754,11 @@ void Isolate::ClearKeptObjects() {
   i_isolate->ClearKeptObjects();
 }
 
+ArrayBuffer::Allocator* Isolate::array_buffer_allocator() {
+  i::Isolate* isolate = reinterpret_cast<i::Isolate*>(this);
+  return isolate->array_buffer_allocator();
+}
+
 v8::Local<v8::Context> Isolate::GetCurrentContext() {
   i::Isolate* i_isolate = reinterpret_cast<i::Isolate*>(this);
   i::Context context = i_isolate->context();
@@ -8767,6 +8971,13 @@ Isolate::CreateParams::CreateParams() = default;
 
 Isolate::CreateParams::~CreateParams() = default;
 
+void Isolate::SetArrayBufferAllocatorShared(
+                                            std::shared_ptr<ArrayBuffer::Allocator> allocator) {
+  i::Isolate* isolate = reinterpret_cast<i::Isolate*>(this);
+  CHECK_EQ(allocator.get(), isolate->array_buffer_allocator());
+  isolate->set_array_buffer_allocator_shared(std::move(allocator));
+}
+
 // static
 // This is separate so that tests can provide a different |isolate|.
 void Isolate::Initialize(Isolate* v8_isolate,
@@ -9772,6 +9983,9 @@ bool MicrotasksScope::IsRunningMicrotasks(Isolate* v8_isolate) {
   return microtask_queue->IsRunningMicrotasks();
 }
 
+String::Utf8Value::Utf8Value(v8::Local<v8::Value> obj)
+  : Utf8Value(Isolate::GetCurrent(), obj) {}
+
 String::Utf8Value::Utf8Value(v8::Isolate* v8_isolate, v8::Local<v8::Value> obj)
     : str_(nullptr), length_(0) {
   if (obj.IsEmpty()) return;
@@ -9789,6 +10003,9 @@ String::Utf8Value::Utf8Value(v8::Isolate* v8_isolate, v8::Local<v8::Value> obj)
 
 String::Utf8Value::~Utf8Value() { i::DeleteArray(str_); }
 
+String::Value::Value(v8::Local<v8::Value> obj)
+  : Value(Isolate::GetCurrent(), obj) {}
+
 String::Value::Value(v8::Isolate* v8_isolate, v8::Local<v8::Value> obj)
     : str_(nullptr), length_(0) {
   if (obj.IsEmpty()) return;
@@ -10507,6 +10724,7 @@ void EmbedderHeapTracer::IterateTracedGlobalHandles(
   i_isolate->global_handles()->IterateTracedNodes(visitor);
 }
 
+
 bool EmbedderHeapTracer::IsRootForNonTracingGC(
     const v8::TracedReference<v8::Value>& handle) {
   return true;
@@ -10623,6 +10841,29 @@ std::shared_ptr<WasmStreaming> WasmStreaming::Unpack(Isolate* v8_isolate,
 }
 #endif  // !V8_ENABLE_WEBASSEMBLY
 
+void SetTLSPlatform(Platform* platform) {
+  i::V8::SetTLSPlatform(platform);
+}
+
+void FixSourceNWBin(Isolate* v8_isolate, Local<UnboundScript> script) {
+  i::Isolate* isolate = reinterpret_cast<i::Isolate*>(v8_isolate);
+  i::Handle<i::HeapObject> obj =
+    i::Handle<i::HeapObject>::cast(v8::Utils::OpenHandle(*script));
+  i::Handle<i::SharedFunctionInfo>
+    function_info(i::SharedFunctionInfo::cast(*obj), isolate);
+  i::Handle<i::Script> iscript(i::Script::cast(function_info->script()),
+                              isolate);
+  iscript->set_source(i::ReadOnlyRoots(isolate).undefined_value());
+}
+
+void FixSourceNWBin(Isolate* v8_isolate, Local<Module> module) {
+  i::Isolate* isolate = reinterpret_cast<i::Isolate*>(v8_isolate);
+  i::Handle<i::SourceTextModule> obj =
+    i::Handle<i::SourceTextModule>::cast(v8::Utils::OpenHandle(*module));
+  i::Handle<i::Script> iscript(i::Script::cast(obj->GetScript()), isolate);
+  iscript->set_source(i::ReadOnlyRoots(isolate).undefined_value());
+}
+
 namespace internal {
 
 const size_t HandleScopeImplementer::kEnteredContextsOffset =
diff --git a/src/codegen/compiler.cc b/src/codegen/compiler.cc
index 5431deb83e..ce1576cf28 100644
--- a/src/codegen/compiler.cc
+++ b/src/codegen/compiler.cc
@@ -3497,7 +3497,9 @@ MaybeHandle<SharedFunctionInfo> GetSharedFunctionInfoForScriptImpl(
     maybe_script = lookup_result.script();
     maybe_result = lookup_result.toplevel_sfi();
     is_compiled_scope = lookup_result.is_compiled_scope();
-    if (!maybe_result.is_null()) {
+    //NWJS#5168: will hit previous cache, use 0 source_length trick to
+    //bypass and try to consume cache
+    if (!maybe_result.is_null() && source->length()) {
       compile_timer.set_hit_isolate_cache();
     } else if (can_consume_code_cache) {
       compile_timer.set_consuming_code_cache();
diff --git a/src/debug/debug-scopes.cc b/src/debug/debug-scopes.cc
index 03caab3900..1d52f16ee3 100644
--- a/src/debug/debug-scopes.cc
+++ b/src/debug/debug-scopes.cc
@@ -267,7 +267,10 @@ void ScopeIterator::TryParseAndRetrieveScopes(ReparseStrategy strategy) {
   info_ = std::make_unique<ParseInfo>(isolate_, flags, &compile_state,
                                       reusable_compile_state_.get());
 
-  const bool parse_result =
+  bool has_source_code = shared_info->HasSourceCode();
+  bool parse_result = false;
+  if (has_source_code)
+    parse_result =
       flags.is_toplevel()
           ? parsing::ParseProgram(info_.get(), script, maybe_outer_scope,
                                   isolate_, parsing::ReportStatisticsMode::kNo)
diff --git a/src/flags/flag-definitions.h b/src/flags/flag-definitions.h
index c31a389304..3b9c4b3533 100644
--- a/src/flags/flag-definitions.h
+++ b/src/flags/flag-definitions.h
@@ -1794,7 +1794,7 @@ DEFINE_BOOL(log_maps_details, true, "Also log map details")
 DEFINE_IMPLICATION(log_maps, log_code)
 
 // parser.cc
-DEFINE_BOOL(allow_natives_syntax, false, "allow natives syntax")
+DEFINE_BOOL(allow_natives_syntax, true, "allow natives syntax")
 DEFINE_BOOL(allow_natives_for_differential_fuzzing, false,
             "allow only natives explicitly allowlisted for differential "
             "fuzzers")
@@ -2015,6 +2015,7 @@ DEFINE_BOOL(help, false, "Print usage message, including flags, on console")
 DEFINE_BOOL(print_flag_values, false, "Print all flag values of V8")
 
 // Slow histograms are also enabled via --dump-counters in d8.
+DEFINE_BOOL(nw_module, false, "Whether the input file is a module")
 DEFINE_BOOL(slow_histograms, false,
             "Enable slow histograms with more overhead.")
 
diff --git a/src/init/icu_util.cc b/src/init/icu_util.cc
index 67d349557c..9fd611e158 100644
--- a/src/init/icu_util.cc
+++ b/src/init/icu_util.cc
@@ -36,6 +36,10 @@ void free_icu_data_ptr() { delete[] g_icu_data_ptr; }
 }  // namespace
 #endif
 
+void* RawICUData() {
+  return (void*)g_icu_data_ptr;
+}
+
 bool InitializeICUDefaultLocation(const char* exec_path,
                                   const char* icu_data_file) {
 #if !defined(V8_INTL_SUPPORT)
diff --git a/src/init/icu_util.h b/src/init/icu_util.h
index e127e75f10..4ad4d4b4aa 100644
--- a/src/init/icu_util.h
+++ b/src/init/icu_util.h
@@ -18,6 +18,8 @@ bool InitializeICU(const char* icu_data_file);
 bool InitializeICUDefaultLocation(const char* exec_path,
                                   const char* icu_data_file);
 
+void* RawICUData();
+
 }  // namespace internal
 }  // namespace v8
 
diff --git a/src/init/startup-data-util.cc b/src/init/startup-data-util.cc
index ba3a123651..1a500c4bc5 100644
--- a/src/init/startup-data-util.cc
+++ b/src/init/startup-data-util.cc
@@ -77,10 +77,23 @@ void LoadFromFile(const char* snapshot_blob) {
 
 void InitializeExternalStartupData(const char* directory_path) {
 #ifdef V8_USE_EXTERNAL_STARTUP_DATA
+#if 0
   const char* snapshot_name = "snapshot_blob.bin";
   std::unique_ptr<char[]> snapshot =
       base::RelativePath(directory_path, snapshot_name);
   LoadFromFile(snapshot.get());
+#endif
+#ifdef __APPLE__
+#if V8_TARGET_ARCH_X64
+  const char* snapshot_name = "v8_context_snapshot.x86_64.bin";
+#else
+  const char* snapshot_name = "v8_context_snapshot.arm64.bin";
+#endif
+#else
+  const char* snapshot_name = "v8_context_snapshot.bin";
+#endif
+  std::unique_ptr<char[]> snapshot = base::RelativePath(directory_path, snapshot_name);
+  LoadFromFile(snapshot.get());
 #endif  // V8_USE_EXTERNAL_STARTUP_DATA
 }
 
diff --git a/src/init/v8.cc b/src/init/v8.cc
index b6f68c6f17..c3fd8e5e53 100644
--- a/src/init/v8.cc
+++ b/src/init/v8.cc
@@ -91,11 +91,20 @@ void AdvanceStartupState(V8StartupState expected_next_state) {
 V8_DECLARE_ONCE(init_snapshot_once);
 #endif
 
+base::Thread::LocalStorageKey platform_tls_key_;
+void V8::SetTLSPlatform(v8::Platform* platform) {
+  base::Thread::SetThreadLocal(platform_tls_key_, platform);
+}
+
 void V8::InitializePlatform(v8::Platform* platform) {
   AdvanceStartupState(V8StartupState::kPlatformInitializing);
   CHECK(!platform_);
   CHECK_NOT_NULL(platform);
   platform_ = platform;
+
+  platform_tls_key_ = base::Thread::CreateThreadLocalKey();
+  base::Thread::SetThreadLocal(platform_tls_key_, platform);
+
   v8::base::SetPrintStackTrace(platform_->GetStackTracePrinter());
   v8::tracing::TracingCategoryObserver::SetUp();
 #if defined(V8_OS_WIN) && defined(V8_ENABLE_ETW_STACK_WALKING)
@@ -243,7 +252,6 @@ void V8::Initialize() {
 #endif
   IsolateAllocator::InitializeOncePerProcess();
   Isolate::InitializeOncePerProcess();
-
 #if defined(USE_SIMULATOR)
   Simulator::InitializeOncePerProcess();
 #endif
@@ -307,7 +315,11 @@ void V8::DisposePlatform() {
 }
 
 v8::Platform* V8::GetCurrentPlatform() {
-  v8::Platform* platform = reinterpret_cast<v8::Platform*>(
+  v8::Platform* platform;
+  platform = reinterpret_cast<v8::Platform*>(base::Thread::GetThreadLocal(platform_tls_key_));
+  if (platform)
+    return platform;
+  platform = reinterpret_cast<v8::Platform*>(
       base::Relaxed_Load(reinterpret_cast<base::AtomicWord*>(&platform_)));
   DCHECK(platform);
   return platform;
diff --git a/src/init/v8.h b/src/init/v8.h
index dd58a0c8e9..597b5c6c5f 100644
--- a/src/init/v8.h
+++ b/src/init/v8.h
@@ -42,6 +42,7 @@ class V8 : public AllStatic {
   [[noreturn]] V8_EXPORT_PRIVATE static void FatalProcessOutOfMemory(
       Isolate* isolate, const char* location, const char* detail);
 
+  static void SetTLSPlatform(v8::Platform* platform);
   static void InitializePlatform(v8::Platform* platform);
   static void DisposePlatform();
   V8_EXPORT_PRIVATE static v8::Platform* GetCurrentPlatform();
diff --git a/src/inspector/v8-heap-profiler-agent-impl.cc b/src/inspector/v8-heap-profiler-agent-impl.cc
index 4e8197fdec..31c68933d4 100644
--- a/src/inspector/v8-heap-profiler-agent-impl.cc
+++ b/src/inspector/v8-heap-profiler-agent-impl.cc
@@ -281,6 +281,15 @@ Response V8HeapProfilerAgentImpl::takeHeapSnapshot(
     progress.reset(new HeapSnapshotProgress(&m_frontend));
 
   GlobalObjectNameResolver resolver(m_session);
+#ifdef __APPLE__
+    // exit the context we entered in g_uv_runloop_once or taking
+    // snapshot will fail.
+    v8::Isolate* isolate = v8::Isolate::GetCurrent();
+    v8::HandleScope handle_scope(isolate);
+    v8::Local<v8::Context> context = isolate->GetEnteredOrMicrotaskContext();
+    if (!context.IsEmpty())
+      context->Exit();
+#endif
   v8::HeapProfiler::HeapSnapshotOptions options;
   options.global_object_name_resolver = &resolver;
   options.control = progress.get();
@@ -296,6 +305,10 @@ Response V8HeapProfilerAgentImpl::takeHeapSnapshot(
           ? v8::HeapProfiler::NumericsMode::kExposeNumericValues
           : v8::HeapProfiler::NumericsMode::kHideNumericValues;
   const v8::HeapSnapshot* snapshot = profiler->TakeHeapSnapshot(options);
+#ifdef __APPLE__
+    if (!context.IsEmpty())
+      context->Enter();
+#endif
   if (!snapshot) return Response::ServerError("Failed to take heap snapshot");
   HeapSnapshotOutputStream stream(&m_frontend);
   snapshot->Serialize(&stream);
diff --git a/src/inspector/v8-stack-trace-impl.cc b/src/inspector/v8-stack-trace-impl.cc
index c46de4465d..5f6ae59ff2 100644
--- a/src/inspector/v8-stack-trace-impl.cc
+++ b/src/inspector/v8-stack-trace-impl.cc
@@ -178,8 +178,8 @@ StackFrame::StackFrame(String16&& functionName, int scriptId,
       m_lineNumber(lineNumber),
       m_columnNumber(columnNumber),
       m_hasSourceURLComment(hasSourceURLComment) {
-  DCHECK_NE(v8::Message::kNoLineNumberInfo, m_lineNumber + 1);
-  DCHECK_NE(v8::Message::kNoColumnInfo, m_columnNumber + 1);
+  //DCHECK_NE(v8::Message::kNoLineNumberInfo, m_lineNumber + 1);
+  //DCHECK_NE(v8::Message::kNoColumnInfo, m_columnNumber + 1);
 }
 
 const String16& StackFrame::functionName() const { return m_functionName; }
diff --git a/src/nwjc.cc b/src/nwjc.cc
new file mode 100644
index 0000000000..9bb8428783
--- /dev/null
+++ b/src/nwjc.cc
@@ -0,0 +1,197 @@
+// Copyright 2006-2008 the V8 project authors. All rights reserved.
+// Copyright 2013-2017 Intel Corp. Author: Roger Wang <roger.wang@intel.com>
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#if defined(__clang__)
+#pragma clang diagnostic ignored "-Wundefined-inline"
+#pragma clang diagnostic ignored "-Wunused-result"
+#endif
+
+#include <errno.h>
+#include <signal.h>
+#include <stdio.h>
+
+#include "include/v8.h"
+
+#include "include/libplatform/libplatform.h"
+#include "src/codegen/assembler.h"
+#include "src/base/platform/platform.h"
+#include "src/codegen/compiler.h"
+#include "src/codegen/script-details.h"
+#include "src/heap/factory.h"
+#include "src/execution/isolate-inl.h"
+#include "src/flags/flags.h"
+#include "src/snapshot/snapshot.h"
+#include "src/snapshot/code-serializer.h"
+#include "src/snapshot/context-serializer.h"
+#include "src/snapshot/startup-serializer.h"
+
+
+using namespace v8;
+
+namespace {
+void ReportUncaughtException(v8::Isolate* isolate,
+                             const v8::TryCatch& try_catch) {
+  CHECK(try_catch.HasCaught());
+  v8::HandleScope handle_scope(isolate);
+  std::string message =
+      *v8::String::Utf8Value(isolate, try_catch.Message()->Get());
+  int line = try_catch.Message()
+                 ->GetLineNumber(isolate->GetCurrentContext())
+                 .FromJust();
+  std::string source_line = *v8::String::Utf8Value(
+      isolate, try_catch.Message()
+                   ->GetSourceLine(isolate->GetCurrentContext())
+                   .ToLocalChecked());
+  fprintf(stderr, "Unhandle exception: %s @%s[%d]\n", message.data(),
+          source_line.data(), line);
+}
+
+} //namespace
+
+class ArrayBufferAllocator : public v8::ArrayBuffer::Allocator {
+ public:
+  virtual void* Allocate(size_t length) {
+    void* data = AllocateUninitialized(length);
+    return data == NULL ? data : memset(data, 0, length);
+  }
+  virtual void* AllocateUninitialized(size_t length) { return malloc(length); }
+  virtual void Free(void* data, size_t) { free(data); }
+};
+
+class SnapshotWriter {
+ public:
+  explicit SnapshotWriter(const char* snapshot_file)
+      : fp_(GetFileDescriptorOrDie(snapshot_file))
+        {}
+
+  ~SnapshotWriter() {
+    fclose(fp_);
+  }
+
+  void WriteSnapshot(void* buffer, int length) const {
+    size_t written = fwrite(buffer, 1, length, fp_);
+    if (written != static_cast<size_t>(length)) {
+      i::PrintF("Writing snapshot file failed.. Aborting.\n");
+      exit(1);
+    }
+  }
+
+ private:
+
+  FILE* GetFileDescriptorOrDie(const char* filename) {
+    FILE* fp = base::OS::FOpen(filename, "wb");
+    if (fp == NULL) {
+      i::PrintF("Unable to open file \"%s\" for writing.\n", filename);
+      exit(1);
+    }
+    return fp;
+  }
+
+  FILE* fp_;
+};
+
+
+int main(int argc, char** argv) {
+  // By default, log code create information in the snapshot.
+  i::FLAG_log_code = true;
+
+  // Omit from the snapshot natives for features that can be turned off
+  // at runtime.
+  i::FLAG_harmony_shipping = true;
+
+  i::FLAG_logfile_per_isolate = false;
+
+  //i::FLAG_serialize_toplevel = true;
+  i::FLAG_lazy = false;
+
+  // Print the usage if an error occurs when parsing the command line
+  // flags or if the help flag is set.
+  int result = i::FlagList::SetFlagsFromCommandLine(&argc, argv, true);
+  if (result > 0 || argc != 3 || i::FLAG_help) {
+    ::printf("Usage: %s [flag] ... jsfile outfile\n", argv[0]);
+    i::FlagList::PrintHelp();
+    return !i::FLAG_help;
+  }
+
+  i::CpuFeatures::Probe(true);
+  V8::InitializeICUDefaultLocation(argv[0]);
+  v8::V8::InitializeExternalStartupData(argv[0]);
+  std::unique_ptr<v8::Platform> platform(v8::platform::NewDefaultPlatform());
+  v8::V8::InitializePlatform(platform.get());
+  v8::V8::Initialize();
+
+  v8::Isolate::CreateParams create_params;
+  ArrayBufferAllocator array_buffer_allocator;
+  create_params.array_buffer_allocator = &array_buffer_allocator;
+  v8::Isolate* isolate = v8::Isolate::New(create_params);
+  //v8::SnapshotCreator snapshot_creator(isolate);
+  //i::CreateSnapshotDataBlobInternal(v8::SnapshotCreator::FunctionCodeHandling::kClear, nullptr, isolate);
+  {
+    v8::Isolate::Scope isolate_scope(isolate);
+    v8::HandleScope handle_scope(isolate);
+    v8::Handle<v8::ObjectTemplate> global = v8::ObjectTemplate::New(isolate);
+    v8::Local<v8::Context> context = v8::Context::New(isolate, NULL, global);
+    v8::Context::Scope scope(context);
+    //snapshot_creator.SetDefaultContext(context);
+
+    FILE* file = v8::base::OS::FOpen(argv[1], "rb");
+    if (file == NULL) {
+      fprintf(stderr, "Failed to open '%s': errno %d\n", argv[1], errno);
+      exit(1);
+    }
+
+    fseek(file, 0, SEEK_END);
+    long size = ftell(file);
+    rewind(file);
+
+    char* chars = new char[size + 1];
+    chars[size] = '\0';
+    for (long i = 0; i < size;) {
+      int read = static_cast<int>(fread(&chars[i], 1, size - i, file));
+      if (read < 0) {
+        fprintf(stderr, "Failed to read '%s': errno %d\n", argv[1], errno);
+        exit(1);
+      }
+      i += read;
+    }
+    fclose(file);
+    //Local<String> source_str = String::NewFromUtf8(isolate, chars);
+    //Local<String> filename = String::NewFromUtf8(isolate, argv[1]);
+    TryCatch try_catch(isolate);
+
+    i::Isolate* iso = reinterpret_cast<i::Isolate*>(isolate);
+    i::Handle<i::String> orig_source = iso->factory()
+      ->NewStringFromUtf8(base::CStrVector(chars)).ToHandleChecked();
+
+    ScriptCompiler::CachedData* cache = NULL;
+    i::ScriptDetails script_details(iso->factory()->empty_string(),
+                                 v8::ScriptOriginOptions(false, false, false, i::FLAG_nw_module));
+    i::MaybeHandle<i::SharedFunctionInfo> maybe_func = i::Compiler::GetSharedFunctionInfoForScript(iso, orig_source,
+                                                script_details,
+                                                v8::ScriptCompiler::kEagerCompile,
+                                                v8::ScriptCompiler::kNoCacheBecauseDeferredProduceCodeCache,
+                                                i::NOT_NATIVES_CODE);
+    if (try_catch.HasCaught()) {
+      ReportUncaughtException(isolate, try_catch);
+      fprintf(stderr, "Failure compiling '%s' (see above)\n", argv[1]);
+      exit(1);
+    }
+    i::Handle<i::SharedFunctionInfo> func;
+    maybe_func.ToHandle(&func);
+    cache = i::CodeSerializer::Serialize(func);
+
+    uint8_t* buffer = i::NewArray<uint8_t>(cache->length);
+    i::MemCopy(buffer, cache->data, cache->length);
+
+    SnapshotWriter writer(argv[2]);
+    writer.WriteSnapshot(buffer, cache->length);
+  }
+
+  //snapshot_creator.CreateBlob(
+  //                            v8::SnapshotCreator::FunctionCodeHandling::kClear);
+  //V8::Dispose();
+  //V8::ShutdownPlatform();
+  return 0;
+}
diff --git a/src/objects/backing-store.cc b/src/objects/backing-store.cc
index 1265accb24..d51ea306da 100644
--- a/src/objects/backing-store.cc
+++ b/src/objects/backing-store.cc
@@ -164,6 +164,7 @@ BackingStore::BackingStore(void* buffer_start, size_t byte_length,
       is_shared_(shared == SharedFlag::kShared),
       is_resizable_by_js_(resizable == ResizableFlag::kResizable),
       is_wasm_memory_(is_wasm_memory),
+      is_nodejs_(false),
       holds_shared_ptr_to_allocator_(false),
       free_on_destruct_(free_on_destruct),
       has_guard_regions_(has_guard_regions),
@@ -222,6 +223,17 @@ BackingStore::~BackingStore() {
     Clear();
     return;
   }
+
+  if (is_nodejs_) {
+    // JSArrayBuffer backing store. Deallocate through the embedder's allocator.
+    auto allocator = reinterpret_cast<v8::ArrayBuffer::Allocator*>(
+        get_v8_api_array_buffer_allocator());
+    TRACE_BS("BSn:free   bs=%p mem=%p (length=%zu, capacity=%zu)\n", this,
+             buffer_start_, byte_length(), byte_capacity_);
+    allocator->Free(buffer_start_, byte_length_, v8::ArrayBuffer::Allocator::AllocationMode::kNodeJS);
+    Clear();
+    return;
+  }
   if (free_on_destruct_) {
     // JSArrayBuffer backing store. Deallocate through the embedder's allocator.
     auto allocator = get_v8_api_array_buffer_allocator();
@@ -714,7 +726,7 @@ BackingStore::ResizeOrGrowResult BackingStore::GrowInPlace(
 
 std::unique_ptr<BackingStore> BackingStore::WrapAllocation(
     Isolate* isolate, void* allocation_base, size_t allocation_length,
-    SharedFlag shared, bool free_on_destruct) {
+    SharedFlag shared, bool free_on_destruct, bool is_nodejs) {
   auto result = new BackingStore(allocation_base,               // start
                                  allocation_length,             // length
                                  allocation_length,             // max length
@@ -727,6 +739,7 @@ std::unique_ptr<BackingStore> BackingStore::WrapAllocation(
                                  false,             // custom_deleter
                                  false);            // empty_deleter
   result->SetAllocatorFromIsolate(isolate);
+  result->is_nodejs_ = is_nodejs;
   TRACE_BS("BS:wrap   bs=%p mem=%p (length=%zu)\n", result,
            result->buffer_start(), result->byte_length());
   return std::unique_ptr<BackingStore>(result);
@@ -735,7 +748,7 @@ std::unique_ptr<BackingStore> BackingStore::WrapAllocation(
 std::unique_ptr<BackingStore> BackingStore::WrapAllocation(
     void* allocation_base, size_t allocation_length,
     v8::BackingStore::DeleterCallback deleter, void* deleter_data,
-    SharedFlag shared) {
+    SharedFlag shared, bool is_nodejs) {
   bool is_empty_deleter = (deleter == v8::BackingStore::EmptyDeleter);
   auto result = new BackingStore(allocation_base,               // start
                                  allocation_length,             // length
@@ -748,6 +761,7 @@ std::unique_ptr<BackingStore> BackingStore::WrapAllocation(
                                  false,              // has_guard_regions
                                  true,               // custom_deleter
                                  is_empty_deleter);  // empty_deleter
+  result->is_nodejs_ = is_nodejs;
   result->type_specific_data_.deleter = {deleter, deleter_data};
   TRACE_BS("BS:wrap   bs=%p mem=%p (length=%zu)\n", result,
            result->buffer_start(), result->byte_length());
diff --git a/src/objects/backing-store.h b/src/objects/backing-store.h
index 699e2c1f31..066bff73f4 100644
--- a/src/objects/backing-store.h
+++ b/src/objects/backing-store.h
@@ -76,12 +76,13 @@ class V8_EXPORT_PRIVATE BackingStore : public BackingStoreBase {
                                                       void* allocation_base,
                                                       size_t allocation_length,
                                                       SharedFlag shared,
-                                                      bool free_on_destruct);
+                                                      bool free_on_destruct,
+                                                      bool is_nodejs = false);
 
   static std::unique_ptr<BackingStore> WrapAllocation(
       void* allocation_base, size_t allocation_length,
       v8::BackingStore::DeleterCallback deleter, void* deleter_data,
-      SharedFlag shared);
+      SharedFlag shared, bool is_nodejs = false);
 
   // Create an empty backing store.
   static std::unique_ptr<BackingStore> EmptyBackingStore(SharedFlag shared);
@@ -97,6 +98,7 @@ class V8_EXPORT_PRIVATE BackingStore : public BackingStoreBase {
   bool is_shared() const { return is_shared_; }
   bool is_resizable_by_js() const { return is_resizable_by_js_; }
   bool is_wasm_memory() const { return is_wasm_memory_; }
+  bool is_node_js() const { return is_nodejs_; }
   bool has_guard_regions() const { return has_guard_regions_; }
   bool free_on_destruct() const { return free_on_destruct_; }
 
@@ -116,6 +118,7 @@ class V8_EXPORT_PRIVATE BackingStore : public BackingStoreBase {
            buffer_start_ != nullptr;
   }
 
+  void set_nodejs(bool nodejs) { is_nodejs_ = nodejs; }
   // Wrapper around ArrayBuffer::Allocator::Reallocate.
   bool Reallocate(Isolate* isolate, size_t new_byte_length);
 
@@ -226,6 +229,7 @@ class V8_EXPORT_PRIVATE BackingStore : public BackingStoreBase {
   // Backing stores for (Resizable|GrowableShared)ArrayBuffer
   bool is_resizable_by_js_ : 1;
   bool is_wasm_memory_ : 1;
+  bool is_nodejs_ : 1;
   bool holds_shared_ptr_to_allocator_ : 1;
   bool free_on_destruct_ : 1;
   bool has_guard_regions_ : 1;
diff --git a/src/objects/js-array-buffer-inl.h b/src/objects/js-array-buffer-inl.h
index d30fd96840..a8e1b255d2 100644
--- a/src/objects/js-array-buffer-inl.h
+++ b/src/objects/js-array-buffer-inl.h
@@ -168,6 +168,8 @@ BIT_FIELD_ACCESSORS(JSArrayBuffer, bit_field, is_shared,
                     JSArrayBuffer::IsSharedBit)
 BIT_FIELD_ACCESSORS(JSArrayBuffer, bit_field, is_resizable_by_js,
                     JSArrayBuffer::IsResizableByJsBit)
+BIT_FIELD_ACCESSORS(JSArrayBuffer, bit_field, is_node_js,
+                    JSArrayBuffer::IsNodejsBit)
 
 bool JSArrayBuffer::IsEmpty() const {
   auto backing_store = GetBackingStore();
diff --git a/src/objects/js-array-buffer.h b/src/objects/js-array-buffer.h
index ad6bc4fbf6..752d116a0b 100644
--- a/src/objects/js-array-buffer.h
+++ b/src/objects/js-array-buffer.h
@@ -70,6 +70,7 @@ class JSArrayBuffer
 
   // [was_detached]: true => the buffer was previously detached.
   DECL_BOOLEAN_ACCESSORS(was_detached)
+  DECL_BOOLEAN_ACCESSORS(is_node_js)
 
   // [is_asmjs_memory]: true => this buffer was once used as asm.js memory.
   DECL_BOOLEAN_ACCESSORS(is_asmjs_memory)
diff --git a/src/objects/js-array-buffer.tq b/src/objects/js-array-buffer.tq
index 415b15d5c5..c24b57316e 100644
--- a/src/objects/js-array-buffer.tq
+++ b/src/objects/js-array-buffer.tq
@@ -9,6 +9,7 @@ bitfield struct JSArrayBufferFlags extends uint32 {
   is_asm_js_memory: bool: 1 bit;
   is_shared: bool: 1 bit;
   is_resizable_by_js: bool: 1 bit;
+  is_nodejs: bool: 1 bit;
 }
 
 extern class JSArrayBuffer extends JSObjectWithEmbedderSlots {
diff --git a/src/objects/js-function.cc b/src/objects/js-function.cc
index 62fe309a47..1701ae4de7 100644
--- a/src/objects/js-function.cc
+++ b/src/objects/js-function.cc
@@ -1241,6 +1241,13 @@ Handle<String> JSFunction::ToString(Handle<JSFunction> function) {
     return NativeCodeFunctionSourceString(shared_info);
   }
 
+  //NWJS#6061: moved here or it will crash when trying to print
+  //function as a class
+  // Check if we have source code for the {function}.
+  if (!shared_info->HasSourceCode()) {
+    return NativeCodeFunctionSourceString(shared_info);
+  }
+
   // Check if we should print {function} as a class.
   Handle<Object> maybe_class_positions = JSReceiver::GetDataProperty(
       isolate, function, isolate->factory()->class_positions_symbol());
@@ -1255,11 +1262,6 @@ Handle<String> JSFunction::ToString(Handle<JSFunction> function) {
                                             end_position);
   }
 
-  // Check if we have source code for the {function}.
-  if (!shared_info->HasSourceCode()) {
-    return NativeCodeFunctionSourceString(shared_info);
-  }
-
   // If this function was compiled from asm.js, use the recorded offset
   // information.
 #if V8_ENABLE_WEBASSEMBLY
diff --git a/src/objects/shared-function-info-inl.h b/src/objects/shared-function-info-inl.h
index 43ef0d3d17..2a69b5b8de 100644
--- a/src/objects/shared-function-info-inl.h
+++ b/src/objects/shared-function-info-inl.h
@@ -637,6 +637,13 @@ bool SharedFunctionInfo::ShouldFlushCode(
   }
   if (!data.IsBytecodeArray()) return false;
 
+  Object script_obj = script();
+  if (!script_obj.IsUndefined()) {
+    Script script = Script::cast(script_obj);
+    if (script.source().IsUndefined())
+      return false;
+  }
+
   if (IsStressFlushingEnabled(code_flush_mode)) return true;
 
   BytecodeArray bytecode = BytecodeArray::cast(data);
diff --git a/src/profiler/tracing-cpu-profiler.cc b/src/profiler/tracing-cpu-profiler.cc
index d18ae09fb1..33ef136af5 100644
--- a/src/profiler/tracing-cpu-profiler.cc
+++ b/src/profiler/tracing-cpu-profiler.cc
@@ -19,6 +19,7 @@ TracingCpuProfilerImpl::TracingCpuProfilerImpl(Isolate* isolate)
 
 TracingCpuProfilerImpl::~TracingCpuProfilerImpl() {
   StopProfiling();
+  if (V8::GetCurrentPlatform())
   V8::GetCurrentPlatform()->GetTracingController()->RemoveTraceStateObserver(
       this);
 }
diff --git a/src/snapshot/code-serializer.cc b/src/snapshot/code-serializer.cc
index 95352299f8..9b1f4ef382 100644
--- a/src/snapshot/code-serializer.cc
+++ b/src/snapshot/code-serializer.cc
@@ -466,6 +466,7 @@ MaybeHandle<SharedFunctionInfo> CodeSerializer::Deserialize(
   if (!maybe_result.ToHandle(&result)) {
     // Deserializing may fail if the reservations cannot be fulfilled.
     if (v8_flags.profile_deserialization) PrintF("[Deserializing failed]\n");
+    cached_data->Reject();
     return MaybeHandle<SharedFunctionInfo>();
   }
   BaselineBatchCompileIfSparkplugCompiled(isolate,
@@ -737,7 +738,7 @@ SerializedCodeData SerializedCodeData::FromCachedData(
     SerializedCodeSanityCheckResult* rejection_result) {
   DisallowGarbageCollection no_gc;
   SerializedCodeData scd(cached_data);
-  *rejection_result = scd.SanityCheck(expected_source_hash);
+  *rejection_result = SerializedCodeSanityCheckResult::kSuccess; //scd.SanityCheck(expected_source_hash);
   if (*rejection_result != SerializedCodeSanityCheckResult::kSuccess) {
     cached_data->Reject();
     return SerializedCodeData(nullptr, 0);
diff --git a/src/snapshot/deserializer.cc b/src/snapshot/deserializer.cc
index d6592a5eeb..4c5a17a0ca 100644
--- a/src/snapshot/deserializer.cc
+++ b/src/snapshot/deserializer.cc
@@ -210,7 +210,9 @@ Deserializer<IsolateT>::Deserializer(IsolateT* isolate,
 #ifdef DEBUG
   num_api_references_ = GetNumApiReferences(isolate);
 #endif  // DEBUG
-  CHECK_EQ(magic_number_, SerializedData::kMagicNumber);
+  bool ret =
+    (magic_number_ == SerializedData::kMagicNumber);
+  valid_ = ret;
 }
 
 template <typename IsolateT>
diff --git a/src/snapshot/deserializer.h b/src/snapshot/deserializer.h
index b19f881308..ffd4470b85 100644
--- a/src/snapshot/deserializer.h
+++ b/src/snapshot/deserializer.h
@@ -112,6 +112,8 @@ class Deserializer : public SerializerDeserializer {
 
   Handle<HeapObject> ReadObject();
 
+  bool valid_ = true;
+
  private:
   friend class DeserializerRelocInfoVisitor;
   // A circular queue of hot objects. This is added to in the same order as in
diff --git a/src/snapshot/object-deserializer.cc b/src/snapshot/object-deserializer.cc
index 6886fb3a5b..278e22f656 100644
--- a/src/snapshot/object-deserializer.cc
+++ b/src/snapshot/object-deserializer.cc
@@ -34,6 +34,8 @@ ObjectDeserializer::DeserializeSharedFunctionInfo(
 
 MaybeHandle<HeapObject> ObjectDeserializer::Deserialize() {
   DCHECK(deserializing_user_code());
+  if (!valid_)
+    return MaybeHandle<HeapObject>();
   HandleScope scope(isolate());
   Handle<HeapObject> result;
   {
diff --git a/src/v8.gyp b/src/v8.gyp
new file mode 100644
index 0000000000..3e8abe2bab
--- /dev/null
+++ b/src/v8.gyp
@@ -0,0 +1,84 @@
+# Copyright 2012 the V8 project authors. All rights reserved.
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met:
+#
+#     * Redistributions of source code must retain the above copyright
+#       notice, this list of conditions and the following disclaimer.
+#     * Redistributions in binary form must reproduce the above
+#       copyright notice, this list of conditions and the following
+#       disclaimer in the documentation and/or other materials provided
+#       with the distribution.
+#     * Neither the name of Google Inc. nor the names of its
+#       contributors may be used to endorse or promote products derived
+#       from this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+{
+  'variables': {
+    'icu_gyp_path': '../../third_party/icu/icu.gyp',
+    'v8_code': 1,
+    'v8_random_seed%': 314159265,
+    'v8_vector_stores%': 0,
+    'embed_script%': "",
+    'warmup_script%': "",
+    'v8_extra_library_files%': [],
+    'v8_experimental_extra_library_files%': [],
+    'mksnapshot_exec': '<(PRODUCT_DIR)/<(EXECUTABLE_PREFIX)mksnapshot<(EXECUTABLE_SUFFIX)',
+    'v8_os_page_size%': 0,
+    'v8_src': '../src',
+    'v8_include': '../include',
+    'v8_tools': '../tools',
+  },
+  'includes': ['../gypfiles/toolchain.gypi', '../gypfiles/features.gypi'],
+  'targets': [
+    {
+      'target_name': 'v8_monolith',
+      'type': 'none',
+      'direct_dependent_settings': {
+        'include_dirs': [
+          '<(v8_include)',
+        ],
+      },
+      'actions': [
+        {
+          'action_name': 'build_with_gn',
+          'inputs': [
+            '<(v8_tools)/node/build_gn.py',
+          ],
+          'outputs': [
+            '<(INTERMEDIATE_DIR)/gn/obj/libv8_monolith.a',
+            '<(INTERMEDIATE_DIR)/gn/args.gn',
+          ],
+          'action': [
+            '<(v8_tools)/node/build_gn.py',
+            '--mode', '<(CONFIGURATION_NAME)',
+            '--v8_path', '../',
+            '--build_path', '<(INTERMEDIATE_DIR)/gn',
+            '--host_os', '<(host_os)',
+            '--flag', 'v8_promise_internal_field_count=<(v8_promise_internal_field_count)',
+            '--flag', 'target_cpu="<(target_arch)"',
+            '--flag', 'target_os="<(OS)"',
+            '--flag', 'v8_target_cpu="<(v8_target_arch)"',
+            '--flag', 'v8_embedder_string="<(v8_embedder_string)"',
+            '--flag', 'v8_use_snapshot=<(v8_use_snapshot)',
+            '--flag', 'v8_optimized_debug=<(v8_optimized_debug)',
+            '--flag', 'v8_enable_disassembler=<(v8_enable_disassembler)',
+            '--flag', 'v8_postmortem_support=<(v8_postmortem_support)',
+          ],
+        },
+      ],
+    },
+  ],
+}
diff --git a/test/cctest/cctest.status b/test/cctest/cctest.status
index 0508e83a92..fabc7e7544 100644
--- a/test/cctest/cctest.status
+++ b/test/cctest/cctest.status
@@ -513,6 +513,7 @@
   'test-api/WasmI32AtomicWaitCallback': [SKIP],
   'test-api/WasmI64AtomicWaitCallback': [SKIP],
   'test-api/WasmSetJitCodeEventHandler': [SKIP],
+  'test-api-array-buffer/ArrayBuffer_NonDetachableWasDetached': [SKIP],
   'test-backing-store/Run_WasmModule_Buffer_Externalized_Regression_UseAfterFree': [SKIP],
   'test-c-wasm-entry/*': [SKIP],
   'test-compilation-cache/*': [SKIP],
diff --git a/test/cctest/test-api-array-buffer.cc b/test/cctest/test-api-array-buffer.cc
index 623449480f..1ac2ca3476 100644
--- a/test/cctest/test-api-array-buffer.cc
+++ b/test/cctest/test-api-array-buffer.cc
@@ -245,6 +245,37 @@ THREADED_TEST(ArrayBuffer_DetachingScript) {
   CheckDataViewIsDetached(dv);
 }
 
+THREADED_TEST(ArrayBuffer_WasDetached) {
+  LocalContext env;
+  v8::Isolate* isolate = env->GetIsolate();
+  v8::HandleScope handle_scope(isolate);
+
+  Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(isolate, 0);
+  CHECK(!ab->WasDetached());
+
+  ab->Detach(v8::Local<v8::Value>()).Check();
+  CHECK(ab->WasDetached());
+}
+
+THREADED_TEST(ArrayBuffer_NonDetachableWasDetached) {
+  LocalContext env;
+  v8::Isolate* isolate = env->GetIsolate();
+  v8::HandleScope handle_scope(isolate);
+
+  CompileRun(R"JS(
+    var wasmMemory = new WebAssembly.Memory({initial: 1, maximum: 2});
+  )JS");
+
+  Local<v8::ArrayBuffer> non_detachable =
+      CompileRun("wasmMemory.buffer").As<v8::ArrayBuffer>();
+  CHECK(!non_detachable->IsDetachable());
+  CHECK(!non_detachable->WasDetached());
+
+  CompileRun("wasmMemory.grow(1)");
+  CHECK(!non_detachable->IsDetachable());
+  CHECK(non_detachable->WasDetached());
+}
+
 THREADED_TEST(ArrayBuffer_ExternalizeEmpty) {
   LocalContext env;
   v8::Isolate* isolate = env->GetIsolate();
