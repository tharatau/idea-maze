diff -r -u --color up/node/lib/internal/modules/cjs/loader.js nw/node/lib/internal/modules/cjs/loader.js
--- up/node/lib/internal/modules/cjs/loader.js	2023-02-14 22:09:05.000000000 +0000
+++ nw/node/lib/internal/modules/cjs/loader.js	2023-02-19 17:37:33.255599202 +0000
@@ -171,6 +171,19 @@
   }
 }
 
+function extensionUrl(str) {
+  if (typeof str !== 'string') {
+    throw new Error('Expected a string');
+  }
+
+  var pathName = path.resolve(str).replace(/\\/g, '/');
+
+  var relative = path.relative(global.__dirname, pathName);
+
+  var ret = encodeURI('chrome-extension://' + global.__nwjs_ext_id + '/' + relative);
+  return ret;
+};
+
 function stat(filename) {
   filename = path.toNamespacedPath(filename);
   if (statCache !== null) {
@@ -373,6 +386,12 @@
 
 function readPackage(requestPath) {
   const jsonPath = path.resolve(requestPath, 'package.json');
+  if (global.__nwjs_cv) {
+    var url = extensionUrl(jsonPath);
+    var request = new global.XMLHttpRequest();
+    request.open('GET', url, false);
+    request.send(null);
+  }
 
   const existing = packageJsonCache.get(jsonPath);
   if (existing !== undefined) return existing;
@@ -958,6 +977,11 @@
     process.mainModule = module;
     setOwnProperty(module.require, 'main', process.mainModule);
     module.id = '.';
+    if (process.__nwjs) {
+      // require() in DOM needs this module as parent
+      module._compile('global.module = module;\n' +
+                      'global.require = require;\n', 'nw-emulate-node');
+    }
   }
 
   reportModuleToWatchMode(filename);
@@ -1282,6 +1306,12 @@
 
 // Native extension for .js
 Module._extensions['.js'] = function(module, filename) {
+  if (global.__nwjs_cv) {
+    var url = extensionUrl(filename);
+    var request = new global.XMLHttpRequest();
+    request.open('GET', url, false);
+    request.send(null);
+  }
   // If already analyzed the source, then it will be cached.
   const cached = cjsParseCache.get(module);
   let content;
@@ -1340,6 +1370,13 @@
     manifest.assertIntegrity(moduleURL, content);
   }
 
+  if (global.__nwjs_cv) {
+    var url = extensionUrl(filename);
+    var request = new global.XMLHttpRequest();
+    request.open('GET', url, false);
+    request.send(null);
+  }
+
   try {
     setOwnProperty(module, 'exports', JSONParse(stripBOM(content)));
   } catch (err) {
@@ -1358,6 +1395,14 @@
     manifest.assertIntegrity(moduleURL, content);
   }
   // Be aware this doesn't use `content`
+
+  if (global.__nwjs_cv) {
+    var url = extensionUrl(filename);
+    var request = new global.XMLHttpRequest();
+    request.open('GET', url, false);
+    request.send(null);
+  }
+
   return process.dlopen(module, path.toNamespacedPath(filename));
 };
 
@@ -1418,6 +1463,7 @@
     ArrayPrototypeUnshift(paths, path.resolve(homeDir, '.node_libraries'));
     ArrayPrototypeUnshift(paths, path.resolve(homeDir, '.node_modules'));
   }
+  paths.unshift(process.cwd());
 
   if (nodePath) {
     ArrayPrototypeUnshiftApply(paths, ArrayPrototypeFilter(
