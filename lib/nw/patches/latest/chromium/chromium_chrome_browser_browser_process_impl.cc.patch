diff -r -u --color up/chromium/chrome/browser/browser_process_impl.cc nw/chromium/chrome/browser/browser_process_impl.cc
--- up/chromium/chrome/browser/browser_process_impl.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/chrome/browser/browser_process_impl.cc	2023-02-19 17:36:27.475443835 +0000
@@ -1,7 +1,7 @@
 // Copyright 2012 The Chromium Authors
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
-
+#pragma clang diagnostic ignored "-Wunreachable-code"
 #include "chrome/browser/browser_process_impl.h"
 
 #include <stddef.h>
@@ -419,8 +419,10 @@
 
   metrics_services_manager_.reset();
   intranet_redirect_detector_.reset();
+#if 0
   if (safe_browsing_service_.get())
     safe_browsing_service()->ShutDown();
+#endif
   network_time_tracker_.reset();
 
 #if !BUILDFLAG(IS_ANDROID) && !BUILDFLAG(IS_CHROMEOS_ASH)
@@ -1084,6 +1086,7 @@
 }
 #endif
 
+#if 1
 component_updater::ComponentUpdateService*
 BrowserProcessImpl::component_updater() {
   if (component_updater_)
@@ -1105,6 +1108,7 @@
 
   return component_updater_.get();
 }
+#endif
 
 void BrowserProcessImpl::OnKeepAliveStateChanged(bool is_keeping_alive) {
   if (is_keeping_alive)
@@ -1135,8 +1139,11 @@
 #if BUILDFLAG(ENABLE_EXTENSIONS)
   // chrome-extension:// URLs are safe to request anywhere, but may only
   // commit (including in iframes) in extension processes.
-  ChildProcessSecurityPolicy::GetInstance()->RegisterWebSafeIsolatedScheme(
-      extensions::kExtensionScheme, true);
+  // NWJS: Upstream: Remove command line/field trial support for
+  // disabling Isolate
+  // Extensions. https://codereview.chromium.org/2850793005
+  ChildProcessSecurityPolicy::GetInstance()->RegisterWebSafeScheme(
+      extensions::kExtensionScheme);
 #endif
 
   battery_metrics_ = std::make_unique<BatteryMetrics>();
@@ -1306,6 +1313,7 @@
   // Set this flag to true so that we don't retry indefinitely to
   // create the service class if there was an error.
   created_safe_browsing_service_ = true;
+#if 0
 
   // The factory can be overridden in tests.
   if (!safe_browsing::SafeBrowsingServiceInterface::HasFactory()) {
@@ -1319,6 +1327,7 @@
       safe_browsing::SafeBrowsingServiceInterface::CreateSafeBrowsingService());
   if (safe_browsing_service_)
     safe_browsing_service_->Initialize();
+#endif
 }
 
 void BrowserProcessImpl::CreateSubresourceFilterRulesetService() {
@@ -1385,7 +1394,7 @@
 
 void BrowserProcessImpl::Pin() {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-  CHECK(!IsShuttingDown());
+  //CHECK(!IsShuttingDown());
 }
 
 void BrowserProcessImpl::Unpin() {
