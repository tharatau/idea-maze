diff -r -u --color up/chromium/third_party/blink/renderer/bindings/core/v8/v8_initializer.cc nw/chromium/third_party/blink/renderer/bindings/core/v8/v8_initializer.cc
--- up/chromium/third_party/blink/renderer/bindings/core/v8/v8_initializer.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/third_party/blink/renderer/bindings/core/v8/v8_initializer.cc	2023-02-19 17:36:42.211481023 +0000
@@ -27,6 +27,7 @@
 
 #include <algorithm>
 #include <limits>
+#include "third_party/node-nw/src/node_webkit.h"
 #include <memory>
 #include <utility>
 
@@ -104,6 +105,13 @@
 #include "gin/public/v8_snapshot_file_type.h"
 #endif
 
+#if defined(OS_WIN)
+#include <windows.h>
+#endif
+
+extern VoidHookFn g_promise_reject_callback_fn;
+
+
 namespace blink {
 
 static String ExtractMessageForConsole(v8::Isolate* isolate,
@@ -276,6 +284,12 @@
   v8::Isolate* isolate = script_state->GetIsolate();
   ExecutionContext* context = ExecutionContext::From(script_state);
 
+#if 0 //FIXME (#4577)
+  LocalDOMWindow* window = currentDOMWindow(isolate);
+  if (window->frame()->isNodeJS() && g_promise_reject_callback_fn)
+    g_promise_reject_callback_fn(&data);
+#endif
+
   v8::Local<v8::Value> exception = data.GetValue();
   if (V8DOMWrapper::IsWrapper(isolate, exception)) {
     // Try to get the stack & location from a wrapped exception object (e.g.
@@ -743,6 +757,10 @@
 }
 
 namespace {
+#if defined(OS_WIN)
+HANDLE _process_heap;
+#endif
+
 class ArrayBufferAllocator : public v8::ArrayBuffer::Allocator {
  public:
   ArrayBufferAllocator() : total_allocation_(0) {
@@ -794,6 +812,18 @@
     ArrayBufferContents::FreeMemory(data);
   }
 
+  void Free(void* data, size_t length, AllocationMode mode) override {
+    if (mode == AllocationMode::kNodeJS) {
+#if defined(OS_WIN)
+        ::HeapFree(_process_heap, 0, data);
+#else
+        free(data);
+#endif
+        return;
+    } else
+      Free(data, length);
+  }
+
  private:
   // Total memory allocated in bytes.
   std::atomic_size_t total_allocation_;
@@ -822,6 +852,9 @@
   DCHECK(IsMainThread());
 
   DEFINE_STATIC_LOCAL(ArrayBufferAllocator, array_buffer_allocator, ());
+#if defined(OS_WIN)
+  _process_heap = ::GetProcessHeap();
+#endif
   gin::IsolateHolder::Initialize(gin::IsolateHolder::kNonStrictMode,
                                  &array_buffer_allocator, reference_table,
                                  js_command_line_flags, ReportV8FatalError,
