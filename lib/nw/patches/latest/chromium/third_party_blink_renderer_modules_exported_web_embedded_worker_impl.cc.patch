diff -r -u --color up/chromium/third_party/blink/renderer/modules/exported/web_embedded_worker_impl.cc nw/chromium/third_party/blink/renderer/modules/exported/web_embedded_worker_impl.cc
--- up/chromium/third_party/blink/renderer/modules/exported/web_embedded_worker_impl.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/third_party/blink/renderer/modules/exported/web_embedded_worker_impl.cc	2023-02-19 17:36:43.103483258 +0000
@@ -42,6 +42,20 @@
 #include "third_party/blink/public/platform/modules/service_worker/web_service_worker_network_provider.h"
 #include "third_party/blink/public/platform/modules/service_worker/web_service_worker_provider.h"
 #include "third_party/blink/public/platform/platform.h"
+
+#include "third_party/node-nw/src/node_webkit.h"
+#if defined(COMPONENT_BUILD) && defined(WIN32)
+#define NW_HOOK_MAP(type, sym, fn) BASE_EXPORT type fn;
+#define BLINK_HOOK_MAP(type, sym, fn) CORE_EXPORT type fn;
+#else
+#define NW_HOOK_MAP(type, sym, fn) extern type fn;
+#define BLINK_HOOK_MAP(type, sym, fn) extern type fn;
+#endif
+#include "content/nw/src/common/node_hooks.h"
+#undef NW_HOOK_MAP
+
+#include "base/command_line.h"
+
 #include "third_party/blink/public/platform/task_type.h"
 #include "third_party/blink/public/platform/web_url_request.h"
 #include "third_party/blink/public/platform/web_worker_fetch_context.h"
@@ -156,6 +170,10 @@
     scoped_refptr<base::SingleThreadTaskRunner> initiator_thread_task_runner) {
   DCHECK(!asked_to_terminate_);
 
+  //Document* document = shadow_page_->GetDocument();
+  const base::CommandLine& command_line = *base::CommandLine::ForCurrentProcess();
+  bool isNodeJS = command_line.HasSwitch("enable-node-worker");
+
   // For now we don't use global scope name for service workers.
   const String global_scope_name = g_empty_string;
 
@@ -189,6 +207,11 @@
       false /* strictly_block_blockable_mixed_content */,
       GenericFontFamilySettings());
 
+  std::string main_script;
+  KURL script_url = worker_start_data->script_url;
+  if (g_web_worker_start_thread_fn) {
+    (*g_web_worker_start_thread_fn)(nullptr, (void*)script_url.GetPath().Utf8().data(), &main_script, &isNodeJS);
+  }
   std::unique_ptr<GlobalScopeCreationParams> global_scope_creation_params;
   String source_code;
   std::unique_ptr<Vector<uint8_t>> cached_meta_data;
@@ -196,7 +219,7 @@
   // We don't have to set ContentSecurityPolicy and ReferrerPolicy. They're
   // served by the worker script loader or the installed scripts manager on the
   // worker thread.
-  global_scope_creation_params = std::make_unique<GlobalScopeCreationParams>(
+  global_scope_creation_params = std::make_unique<GlobalScopeCreationParams>(isNodeJS, main_script,
       worker_start_data->script_url, worker_start_data->script_type,
       global_scope_name, worker_start_data->user_agent,
       worker_start_data->ua_metadata, std::move(web_worker_fetch_context),
