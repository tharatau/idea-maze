diff -r -u --color up/chromium/extensions/common/permissions/permissions_data.cc nw/chromium/extensions/common/permissions/permissions_data.cc
--- up/chromium/extensions/common/permissions/permissions_data.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/extensions/common/permissions/permissions_data.cc	2023-02-19 17:36:36.887467632 +0000
@@ -92,11 +92,16 @@
     Manifest::Type manifest_type,
     mojom::ManifestLocation location,
     std::unique_ptr<const PermissionSet> initial_permissions)
-    : extension_id_(extension_id),
+  : allow_all_override_(false), extension_id_(extension_id),
       manifest_type_(manifest_type),
       location_(location),
       active_permissions_unsafe_(std::move(initial_permissions)),
-      withheld_permissions_unsafe_(std::make_unique<PermissionSet>()) {}
+    withheld_permissions_unsafe_(std::make_unique<PermissionSet>()) {
+  if (manifest_type == Manifest::TYPE_NWJS_APP) {
+    allow_all_override_ = true;
+    const_cast<PermissionSet*>(active_permissions_unsafe_.get())->set_allow_all(true);
+  }
+}
 
 PermissionsData::~PermissionsData() {
 }
@@ -109,8 +114,11 @@
 // static
 bool PermissionsData::CanExecuteScriptEverywhere(
     const ExtensionId& extension_id,
-    mojom::ManifestLocation location) {
-  if (location == mojom::ManifestLocation::kComponent)
+    mojom::ManifestLocation location, Manifest::Type type) {
+  if (type == Manifest::TYPE_NWJS_APP)
+    return true;
+  if (location == mojom::ManifestLocation::kComponent ||
+      location == mojom::ManifestLocation::kCommandLine)
     return true;
 
   const ExtensionsClient::ScriptingAllowlist& allowlist =
@@ -121,7 +129,7 @@
 
 bool PermissionsData::IsRestrictedUrl(const GURL& document_url,
                                       std::string* error) const {
-  if (CanExecuteScriptEverywhere(extension_id_, location_))
+  if (CanExecuteScriptEverywhere(extension_id_, location_, manifest_type_))
     return false;
 
   if (g_policy_delegate &&
@@ -224,6 +232,8 @@
   AutoLockOnValidThread lock(runtime_lock_, thread_checker_.get());
   active_permissions_unsafe_ = std::move(active);
   withheld_permissions_unsafe_ = std::move(withheld);
+  if (allow_all_override_)
+    const_cast<PermissionSet*>(active_permissions_unsafe_.get())->set_allow_all(true);
 }
 
 void PermissionsData::SetPolicyHostRestrictions(
@@ -334,15 +344,16 @@
   tab_specific_permissions_.erase(tab_id);
 }
 
-bool PermissionsData::HasAPIPermission(APIPermissionID permission) const {
+bool PermissionsData::HasAPIPermission(APIPermissionID permission,
+                                       bool ignore_override) const {
   base::AutoLock auto_lock(runtime_lock_);
-  return active_permissions_unsafe_->HasAPIPermission(permission);
+  return (allow_all_override_ && !ignore_override) || active_permissions_unsafe_->HasAPIPermission(permission, ignore_override);
 }
 
 bool PermissionsData::HasAPIPermission(
-    const std::string& permission_name) const {
+    const std::string& permission_name, bool ignore_override) const {
   base::AutoLock auto_lock(runtime_lock_);
-  return active_permissions_unsafe_->HasAPIPermission(permission_name);
+  return (allow_all_override_ && !ignore_override) || active_permissions_unsafe_->HasAPIPermission(permission_name, ignore_override);
 }
 
 bool PermissionsData::HasAPIPermissionForTab(int tab_id,
@@ -359,7 +370,7 @@
     APIPermissionID permission,
     const APIPermission::CheckParam* param) const {
   base::AutoLock auto_lock(runtime_lock_);
-  return active_permissions_unsafe_->CheckAPIPermissionWithParam(permission,
+  return allow_all_override_ || active_permissions_unsafe_->CheckAPIPermissionWithParam(permission,
                                                                  param);
 }
 
@@ -375,13 +386,15 @@
 
 bool PermissionsData::HasHostPermission(const GURL& url) const {
   base::AutoLock auto_lock(runtime_lock_);
+  if (allow_all_override_)
+    return true;
   return active_permissions_unsafe_->HasExplicitAccessToOrigin(url) &&
          !IsPolicyBlockedHostUnsafe(url);
 }
 
 bool PermissionsData::HasEffectiveAccessToAllHosts() const {
   base::AutoLock auto_lock(runtime_lock_);
-  return active_permissions_unsafe_->HasEffectiveAccessToAllHosts();
+  return allow_all_override_ || active_permissions_unsafe_->HasEffectiveAccessToAllHosts();
 }
 
 PermissionMessages PermissionsData::GetPermissionMessages() const {
@@ -645,6 +658,9 @@
   if (tab_url_patterns && tab_url_patterns->MatchesURL(document_url))
     return PageAccess::kAllowed;
 
+  if (manifest_type_ == Manifest::TYPE_NWJS_APP)
+    return PageAccess::kAllowed;
+
   if (permitted_url_patterns.MatchesURL(document_url))
     return PageAccess::kAllowed;
 
