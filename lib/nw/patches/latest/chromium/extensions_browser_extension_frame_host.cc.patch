diff -r -u --color up/chromium/extensions/browser/extension_frame_host.cc nw/chromium/extensions/browser/extension_frame_host.cc
--- up/chromium/extensions/browser/extension_frame_host.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/extensions/browser/extension_frame_host.cc	2023-02-19 17:36:36.827467481 +0000
@@ -55,4 +55,36 @@
     const StackTrace& stack_trace,
     blink::mojom::ConsoleMessageLevel level) {}
 
+void ExtensionFrameHost::RequestSync(mojom::RequestParamsPtr params,
+                                     RequestSyncCallback callback) {
+  content::RenderFrameHost* render_frame_host =
+      receivers_.GetCurrentTargetFrame();
+  base::Value::List list_value;
+  bool success = false;
+  std::string error;
+  ExtensionWebContentsObserver::GetForWebContents(web_contents_)
+      ->dispatcher()
+    ->DispatchSync(std::move(params), &success, &list_value, &error,
+                   render_frame_host,
+                   render_frame_host->GetProcess()->GetID());
+  std::move(callback).Run(success, std::move(list_value), error);
+}
+
+bool ExtensionFrameHost::RequestSync(mojom::RequestParamsPtr params,
+                                     bool* success,
+                                     base::Value::List* response,
+                                     std::string* error) {
+  base::Value::List* list_value = response;
+  //  if (!response->GetAsList(list_value))
+  //  return false;
+  content::RenderFrameHost* render_frame_host =
+      receivers_.GetCurrentTargetFrame();
+  ExtensionWebContentsObserver::GetForWebContents(web_contents_)
+      ->dispatcher()
+    ->DispatchSync(std::move(params), success, list_value, error,
+                   render_frame_host,
+                   render_frame_host->GetProcess()->GetID());
+  return true;
+}
+
 }  // namespace extensions
