diff -r -u --color up/chromium/components/crash/core/app/crashpad_mac.mm nw/chromium/components/crash/core/app/crashpad_mac.mm
--- up/chromium/components/crash/core/app/crashpad_mac.mm	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/components/crash/core/app/crashpad_mac.mm	2023-02-19 17:36:32.575456738 +0000
@@ -148,11 +148,20 @@
 
       // Is there a way to recover if this fails?
       CrashReporterClient* crash_reporter_client = GetCrashReporterClient();
+      const char* product_name = "";
+      const char* version = "";
+
+      crash_reporter_client->GetProductNameAndVersion(&product_name, &version);
       crash_reporter_client->GetCrashDumpLocation(database_path);
       crash_reporter_client->GetCrashMetricsLocation(&metrics_path);
 
       std::string url = crash_reporter_client->GetUploadUrl();
 
+      std::map<std::string, std::string> process_annotations;
+      process_annotations["prod"] = product_name;
+      process_annotations["ver"] = version;
+      process_annotations["plat"] = std::string("OS X");
+
       std::vector<std::string> arguments;
 
       if (crash_reporter_client->ShouldMonitorCrashHandlerExpensively()) {
@@ -173,9 +182,10 @@
             "--reset-own-crash-exception-port-to-system-default");
       }
 
+      
       bool result = GetCrashpadClient().StartHandler(
           handler_path, *database_path, metrics_path, url,
-          GetProcessSimpleAnnotations(), arguments, true, false);
+          process_annotations, arguments, true, false);
 
       // If this is an initial client that's not the browser process, it's
       // important to sever the connection to any existing handler. If
