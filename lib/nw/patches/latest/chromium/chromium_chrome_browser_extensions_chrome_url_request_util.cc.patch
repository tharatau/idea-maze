diff -r -u --color up/chromium/chrome/browser/extensions/chrome_url_request_util.cc nw/chromium/chrome/browser/extensions/chrome_url_request_util.cc
--- up/chromium/chrome/browser/extensions/chrome_url_request_util.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/chrome_url_request_util.cc	2023-02-19 17:36:27.767444574 +0000
@@ -21,6 +21,7 @@
 #include "extensions/browser/extension_protocols.h"
 #include "extensions/browser/extensions_browser_client.h"
 #include "extensions/browser/url_request_util.h"
+#include "extensions/common/constants.h"
 #include "extensions/common/file_util.h"
 #include "mojo/public/cpp/bindings/receiver.h"
 #include "mojo/public/cpp/bindings/remote.h"
@@ -259,6 +260,23 @@
   *resource_id = 0;
   // |chrome_resources_path| corresponds to src/chrome/browser/resources in
   // source tree.
+  std::string path = request.url.path();
+  if (path.size() > 1 &&
+      (path.substr(1) == extensions::kNWJSDefaultAppJS ||
+       path.substr(1) == "nwjs/newwin.js")) {
+    base::FilePath relative_path;
+    base::FilePath request_path =
+      extensions::file_util::ExtensionURLToRelativeFilePath(request.url);
+    if (ExtensionsBrowserClient::Get()
+        ->GetComponentExtensionResourceManager()
+        ->IsComponentExtensionResource(
+                     extension_resources_path, request_path, resource_id)) {
+      relative_path = relative_path.Append(request_path);
+      relative_path = relative_path.NormalizePathSeparators();
+      return relative_path;
+    } else
+      return base::FilePath();
+  }
   base::FilePath chrome_resources_path;
   if (!base::PathService::Get(chrome::DIR_RESOURCES, &chrome_resources_path))
     return base::FilePath();
