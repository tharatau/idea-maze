diff -r -u --color up/chromium/chrome/browser/file_system_access/chrome_file_system_access_permission_context.cc nw/chromium/chrome/browser/file_system_access/chrome_file_system_access_permission_context.cc
--- up/chromium/chrome/browser/file_system_access/chrome_file_system_access_permission_context.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/chrome/browser/file_system_access/chrome_file_system_access_permission_context.cc	2023-02-19 17:36:27.847444777 +0000
@@ -1,8 +1,11 @@
 // Copyright 2019 The Chromium Authors
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
+#pragma clang diagnostic ignored "-Wunused-function"
 
 #include "chrome/browser/file_system_access/chrome_file_system_access_permission_context.h"
+#include "content/public/common/content_client.h"
+#include "content/public/browser/content_browser_client.h"
 
 #include <memory>
 #include <string>
@@ -485,6 +488,8 @@
 bool FileHasDangerousExtension(const url::Origin& origin,
                                const base::FilePath& path,
                                Profile* profile) {
+  return false;
+#if 0
   safe_browsing::DownloadFileType::DangerLevel danger_level =
       safe_browsing::FileTypePolicies::GetInstance()->GetFileDangerLevel(
           path, origin.GetURL(), profile->GetPrefs());
@@ -492,6 +497,7 @@
   // prompt if `danger_level` is ALLOW_ON_USER_GESTURE as well as DANGEROUS.
   return danger_level == safe_browsing::DownloadFileType::DANGEROUS ||
          danger_level == safe_browsing::DownloadFileType::ALLOW_ON_USER_GESTURE;
+#endif
 }
 
 }  // namespace
@@ -937,6 +943,7 @@
       profile_(context),
       clock_(clock) {
   DETACH_FROM_SEQUENCE(sequence_checker_);
+  browser_context_ = context;
   content_settings_ = base::WrapRefCounted(
       HostContentSettingsMapFactory::GetForProfile(profile_));
 
@@ -1240,6 +1247,8 @@
 ChromeFileSystemAccessPermissionContext::GetWriteGuardContentSetting(
     const url::Origin& origin) const {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
+  if (content::GetContentClient()->browser()->IsNWOrigin(origin, browser_context_))
+    return CONTENT_SETTING_ALLOW;
   return content_settings_->GetContentSetting(
       origin.GetURL(), origin.GetURL(),
       ContentSettingsType::FILE_SYSTEM_WRITE_GUARD);
@@ -1249,6 +1258,8 @@
 ChromeFileSystemAccessPermissionContext::GetReadGuardContentSetting(
     const url::Origin& origin) const {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
+  if (content::GetContentClient()->browser()->IsNWOrigin(origin, browser_context_))
+    return CONTENT_SETTING_ALLOW;
   return content_settings_->GetContentSetting(
       origin.GetURL(), origin.GetURL(),
       ContentSettingsType::FILE_SYSTEM_READ_GUARD);
@@ -1282,11 +1293,12 @@
       &ChromeFileSystemAccessPermissionContext::DidCheckPathAgainstBlocklist,
       GetWeakPtr(), origin, path, handle_type, user_action, frame_id,
       std::move(callback));
-  CheckPathAgainstBlocklist(path_type, path, handle_type,
+  CheckPathAgainstBlocklist(origin, path_type, path, handle_type,
                             std::move(after_blocklist_check_callback));
 }
 
 void ChromeFileSystemAccessPermissionContext::CheckPathAgainstBlocklist(
+    const url::Origin& origin,
     PathType path_type,
     const base::FilePath& path,
     HandleType handle_type,
@@ -1302,6 +1314,11 @@
     return;
   }
 
+  if (content::GetContentClient()->browser()->IsNWOrigin(origin, browser_context_)) {
+    std::move(callback).Run(/*should_block=*/false);
+    return;
+  }
+
   base::ThreadPool::PostTaskAndReplyWithResult(
       FROM_HERE, {base::MayBlock(), base::TaskPriority::USER_VISIBLE},
       base::BindOnce(&ShouldBlockAccessToPath, path, handle_type),
@@ -1313,6 +1330,8 @@
     content::GlobalRenderFrameHostId frame_id,
     base::OnceCallback<void(AfterWriteCheckResult)> callback) {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
+  std::move(callback).Run(AfterWriteCheckResult::kAllow);
+#if 0
   content::GetUIThreadTaskRunner({})->PostTask(
       FROM_HERE,
       base::BindOnce(
@@ -1329,6 +1348,7 @@
               },
               base::SequencedTaskRunner::GetCurrentDefault(),
               std::move(callback))));
+#endif
 }
 
 void ChromeFileSystemAccessPermissionContext::DidCheckPathAgainstBlocklist(
@@ -1348,6 +1368,7 @@
   }
 
   if (should_block) {
+#if 0
     auto result_callback = base::BindPostTask(
         base::SequencedTaskRunner::GetCurrentDefault(), std::move(callback));
     content::GetUIThreadTaskRunner({})->PostTask(
@@ -1355,6 +1376,8 @@
         base::BindOnce(&ShowFileSystemAccessRestrictedDirectoryDialogOnUIThread,
                        frame_id, origin, handle_type,
                        std::move(result_callback)));
+#endif
+    std::move(callback).Run(SensitiveEntryResult::kAllowed);
     return;
   }
 
