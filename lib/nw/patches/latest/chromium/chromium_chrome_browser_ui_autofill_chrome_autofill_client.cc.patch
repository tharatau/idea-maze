diff -r -u --color up/chromium/chrome/browser/ui/autofill/chrome_autofill_client.cc nw/chromium/chrome/browser/ui/autofill/chrome_autofill_client.cc
--- up/chromium/chrome/browser/ui/autofill/chrome_autofill_client.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/chrome/browser/ui/autofill/chrome_autofill_client.cc	2023-02-19 17:36:29.371448634 +0000
@@ -277,22 +277,26 @@
 }
 
 const translate::LanguageState* ChromeAutofillClient::GetLanguageState() {
+#if 0
   // TODO(crbug.com/912597): iOS vs other platforms extracts the language from
   // the top level frame vs whatever frame directly holds the form.
   auto* translate_manager =
       ChromeTranslateClient::GetManagerFromWebContents(web_contents());
   if (translate_manager)
     return translate_manager->GetLanguageState();
+#endif
   return nullptr;
 }
 
 translate::TranslateDriver* ChromeAutofillClient::GetTranslateDriver() {
+#if 0
   // TODO(crbug.com/912597): iOS vs other platforms extracts the language from
   // the top level frame vs whatever frame directly holds the form.
   auto* translate_client =
       ChromeTranslateClient::FromWebContents(web_contents());
   if (translate_client)
     return translate_client->translate_driver();
+#endif
   return nullptr;
 }
 
@@ -1055,6 +1059,13 @@
 }
 
 bool ChromeAutofillClient::IsContextSecure() const {
+
+  content::NavigationEntry* navigation_entry =
+      web_contents()->GetController().GetLastCommittedEntry();
+
+  if (navigation_entry && navigation_entry->GetURL().SchemeIs("chrome-extension"))
+    return true;
+
   SecurityStateTabHelper* helper =
       SecurityStateTabHelper::FromWebContents(web_contents());
   if (!helper)
