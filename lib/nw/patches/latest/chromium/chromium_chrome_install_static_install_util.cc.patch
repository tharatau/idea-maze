diff -r -u --color up/chromium/chrome/install_static/install_util.cc nw/chromium/chrome/install_static/install_util.cc
--- up/chromium/chrome/install_static/install_util.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/chrome/install_static/install_util.cc	2023-02-19 17:36:30.071450406 +0000
@@ -25,6 +25,8 @@
 #include "components/nacl/common/buildflags.h"
 #include "components/version_info/channel.h"
 
+std::wstring g_nwjs_prod_name, g_nwjs_prod_version;
+
 namespace install_static {
 
 enum class ProcessType {
@@ -97,6 +99,7 @@
   va_end(args);
 }
 
+#if 0
 bool GetLanguageAndCodePageFromVersionResource(const char* version_resource,
                                                WORD* language,
                                                WORD* code_page) {
@@ -174,6 +177,7 @@
   }
   return false;
 }
+#endif
 
 bool DirectoryExists(const std::wstring& path) {
   DWORD file_attributes = ::GetFileAttributes(path.c_str());
@@ -474,7 +478,10 @@
     path->append(kCompanyPathName);
     path->push_back(L'\\');
   }
-  path->append(kProductPathName, kProductPathNameLength);
+  if (!g_nwjs_prod_name.empty())
+    path->append(g_nwjs_prod_name);
+  else
+    path->append(kProductPathName, kProductPathNameLength);
   if (!include_suffix)
     return *path;
   return path->append(mode.install_suffix);
@@ -585,10 +592,10 @@
   assert(channel_name);
 
   // Default values in case we don't find a version resource.
-  *product_name = L"Chrome";
-  *version = L"0.0.0.0-devel";
+  *product_name = g_nwjs_prod_name;
+  *version = g_nwjs_prod_version;
   special_build->clear();
-
+#if 0
   DWORD dummy = 0;
   DWORD length = ::GetFileVersionInfoSize(exe_path.c_str(), &dummy);
   if (length) {
@@ -607,6 +614,7 @@
     }
   }
   *channel_name = GetChromeChannelName(/*with_extended_stable=*/true);
+#endif
 }
 
 version_info::Channel GetChromeChannel() {
