Only in nw/chromium: .git
diff -r -u --color up/chromium/.gitignore nw/chromium/.gitignore
--- up/chromium/.gitignore	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/.gitignore	2023-02-21 04:37:19.440125445 +0000
@@ -469,3 +469,5 @@
 /win8/metro_driver/metro_driver_version_resources.xml
 /x86-generic_out/
 /xcodebuild
+/content/nw
+
diff -r -u --color up/chromium/DEPS nw/chromium/DEPS
--- up/chromium/DEPS	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/DEPS	2023-02-21 04:37:19.440125445 +0000
@@ -15,6 +15,8 @@
     'https://android.googlesource.com/platform/external/deqp',
   'freetype_android_revision':
     'a512b0fe7a8d9db0e5aa9c0a4db1e92cb861722d',
+  'nwjs_git':
+    'https://github.com/nwjs',
   'google_toolbox_for_mac_revision':
     '401878398253074c515c03cb3a3f8bb0cc8da6e9',
   'googlecode_url':
@@ -163,8 +165,13 @@
     (Var("chromium_git")) + '/chromium/deps/acid3.git@6be0a66a1ebd7ebc5abc1b2f405a945f6d871521',
   'src/tools/swarming_client':
     (Var("chromium_git")) + '/external/swarming.client.git@a72f46e42dba1335e8001499b4621acad2d26728',
-  'src/v8':
-    (Var("chromium_git")) + '/v8/v8.git@a219ca9f68811c8f8a0d87a56fffcb41e5143c52'
+  #'src/v8':
+  #  #(Var("chromium_git")) + '/v8/v8.git@a219ca9f68811c8f8a0d87a56fffcb41e5143c52'
+  #  (Var("nwjs_git")) + '/v8.git@origin/nw14',
+  #'src/content/nw':
+  #  (Var("nwjs_git")) + '/nw.js.git@origin/nw14',
+  #'src/third_party/node':
+  #  (Var("nwjs_git")) + '/node.git@origin/nw14',
 }
 
 deps_os = {
@@ -689,6 +696,17 @@
   },
   {
     'action': [
+      'python',
+      'src/content/nw/tools/patcher.py',
+      '--patch-config', 'src/content/nw/patch/patch.cfg'
+    ],
+    'pattern':
+      '.',
+    'name':
+      'nw_patch'
+  },
+  {
+    'action': [
       'python',
       'src/build/gyp_chromium'
     ],
diff -r -u --color up/chromium/apps/app_lifetime_monitor.cc nw/chromium/apps/app_lifetime_monitor.cc
--- up/chromium/apps/app_lifetime_monitor.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/apps/app_lifetime_monitor.cc	2023-02-21 04:37:19.476125795 +0000
@@ -86,8 +86,10 @@
 }
 
 void AppLifetimeMonitor::OnAppWindowHidden(AppWindow* app_window) {
+#if 0
   if (!HasOtherVisibleAppWindows(app_window))
     NotifyAppDeactivated(app_window->extension_id());
+#endif
 }
 
 void AppLifetimeMonitor::OnAppWindowShown(AppWindow* app_window,
diff -r -u --color up/chromium/apps/app_load_service.cc nw/chromium/apps/app_load_service.cc
--- up/chromium/apps/app_load_service.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/apps/app_load_service.cc	2023-02-21 04:37:19.476125795 +0000
@@ -4,6 +4,8 @@
 
 #include "apps/app_load_service.h"
 
+#include "content/nw/src/nw_content.h"
+
 #include "apps/app_load_service_factory.h"
 #include "apps/app_restore_service.h"
 #include "apps/launcher.h"
@@ -69,6 +71,8 @@
     return false;
   }
 
+  nw::SetMainExtensionId(extension_id);
+
   // Schedule the app to be launched once loaded.
   PostReloadAction& action = post_reload_actions_[extension_id];
   action.action_type = LAUNCH_FOR_LOAD_AND_LAUNCH;
diff -r -u --color up/chromium/apps/launcher.cc nw/chromium/apps/launcher.cc
--- up/chromium/apps/launcher.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/apps/launcher.cc	2023-02-21 04:37:19.480125834 +0000
@@ -101,7 +101,10 @@
         extension_id(extension->id()),
         entry_paths_(entry_paths),
         mime_type_collector_(profile),
-        is_directory_collector_(profile) {}
+        is_directory_collector_(profile) {
+    if (extension->is_nwjs_app()) //NWJS#5097
+      entry_paths_.clear();
+  }
 
   PlatformAppPathLauncher(Profile* profile,
                           const Extension* extension,
@@ -110,7 +113,7 @@
         extension_id(extension->id()),
         mime_type_collector_(profile),
         is_directory_collector_(profile) {
-    if (!file_path.empty())
+    if (!file_path.empty() && !extension->is_nwjs_app()) //NWJS#5097
       entry_paths_.push_back(file_path);
   }
 
diff -r -u --color up/chromium/base/base.gyp nw/chromium/base/base.gyp
--- up/chromium/base/base.gyp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/base/base.gyp	2023-02-21 04:37:19.560126613 +0000
@@ -180,6 +180,11 @@
               },
             },
           },
+          'dependencies': [
+           'trace_event/etw_manifest/etw_manifest.gyp:etw_manifest',
+          ],
+        }],
+        ['OS == "win" and target_arch=="ia32"', {
           'copies': [
             {
               'destination': '<(PRODUCT_DIR)/',
@@ -188,8 +193,15 @@
               ],
             },
           ],
-          'dependencies': [
-           'trace_event/etw_manifest/etw_manifest.gyp:etw_manifest',
+        }],
+        [ 'OS == "win" and target_arch == "x64"', {
+          'copies': [
+            {
+              'destination': '<(PRODUCT_DIR)/',
+              'files': [
+                '../build/win/dbghelp_xp/x64/dbghelp.dll',
+              ],
+            },
           ],
         }],
         ['OS == "mac" or (OS == "ios" and _toolset == "host")', {
@@ -249,6 +261,8 @@
         'message_loop/message_pump_libevent.h',
         'message_loop/message_pump_mac.h',
         'message_loop/message_pump_mac.mm',
+        #'message_loop/message_pump_uv.cc',
+        #'message_loop/message_pump_uv.h',
         'metrics/field_trial.cc',
         'metrics/field_trial.h',
         'posix/file_descriptor_shuffle.cc',
diff -r -u --color up/chromium/base/base_switches.cc nw/chromium/base/base_switches.cc
--- up/chromium/base/base_switches.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/base/base_switches.cc	2023-02-21 04:37:19.564126652 +0000
@@ -92,4 +92,5 @@
     "enable-crash-reporter-for-testing";
 #endif
 
+const char kNWJS[] = "nwjs";
 }  // namespace switches
diff -r -u --color up/chromium/base/base_switches.h nw/chromium/base/base_switches.h
--- up/chromium/base/base_switches.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/base/base_switches.h	2023-02-21 04:37:19.564126652 +0000
@@ -36,6 +36,7 @@
 extern const char kEnableCrashReporterForTesting[];
 #endif
 
+extern const char kNWJS[];
 }  // namespace switches
 
 #endif  // BASE_BASE_SWITCHES_H_
diff -r -u --color up/chromium/base/command_line.cc nw/chromium/base/command_line.cc
--- up/chromium/base/command_line.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/base/command_line.cc	2023-02-21 04:37:19.564126652 +0000
@@ -151,43 +151,83 @@
 
 CommandLine::CommandLine(NoProgram no_program)
     : argv_(1),
-      begin_args_(1) {
+      begin_args_(1),
+      argc0_(0), argv0_(NULL) {
 }
 
 CommandLine::CommandLine(const FilePath& program)
     : argv_(1),
-      begin_args_(1) {
+      begin_args_(1),
+      argc0_(0), argv0_(NULL) {
   SetProgram(program);
 }
 
 CommandLine::CommandLine(int argc, const CommandLine::CharType* const* argv)
     : argv_(1),
-      begin_args_(1) {
+      begin_args_(1),
+      argc0_(0), argv0_(NULL) {
   InitFromArgv(argc, argv);
 }
 
 CommandLine::CommandLine(const StringVector& argv)
     : argv_(1),
-      begin_args_(1) {
+      begin_args_(1),
+      argc0_(0), argv0_(NULL) {
   InitFromArgv(argv);
 }
 
 CommandLine::CommandLine(const CommandLine& other)
     : argv_(other.argv_),
+      original_argv_(other.original_argv_),
       switches_(other.switches_),
-      begin_args_(other.begin_args_) {
+      begin_args_(other.begin_args_),
+      argc0_(other.argc0_), argv0_(NULL) {
+
+#if defined(OS_WIN)
+  if (other.argv0_) {
+    argv0_ = new char*[argc0_ + 1];
+    for (int i = 0; i < argc0_; ++i) {
+      argv0_[i] = new char[strlen(other.argv0_[i]) + 1];
+      strcpy(argv0_[i], other.argv0_[i]);
+    }
+    argv0_[argc0_] = NULL;
+  }
+#else
+  argv0_ = other.argv0_;
+#endif
   ResetStringPieces();
 }
 
 CommandLine& CommandLine::operator=(const CommandLine& other) {
   argv_ = other.argv_;
+  original_argv_ = other.original_argv_;
   switches_ = other.switches_;
   begin_args_ = other.begin_args_;
+#if defined(OS_WIN)
+  if (other.argv0_) {
+    argv0_ = new char*[argc0_ + 1];
+    for (int i = 0; i < argc0_; ++i) {
+      argv0_[i] = new char[strlen(other.argv0_[i]) + 1];
+      strcpy(argv0_[i], other.argv0_[i]);
+    }
+    argv0_[argc0_] = NULL;
+  }
+#else
+  argv0_ = other.argv0_;
+#endif
   ResetStringPieces();
   return *this;
 }
 
 CommandLine::~CommandLine() {
+#if defined(OS_WIN)
+  if (!argv0_)
+    return;
+  for (int i = 0; i < argc0_; i++) {
+    delete[] argv0_[i];
+  }
+  delete[] argv0_;
+#endif
 }
 
 #if defined(OS_WIN)
@@ -248,12 +288,34 @@
 void CommandLine::InitFromArgv(int argc,
                                const CommandLine::CharType* const* argv) {
   StringVector new_argv;
+  argc0_ = argc;
+#if !defined(OS_WIN)
+  argv0_ = (char**)argv;
+#else
+  argv0_ = new char*[argc + 1];
+  for (int i = 0; i < argc; ++i) {
+    std::string str(base::WideToUTF8(argv[i]));
+    argv0_[i] = new char[str.length() + 1];
+    strcpy(argv0_[i], str.c_str());
+  }
+  argv0_[argc] = NULL;
+#endif
   for (int i = 0; i < argc; ++i)
     new_argv.push_back(argv[i]);
   InitFromArgv(new_argv);
 }
 
 void CommandLine::InitFromArgv(const StringVector& argv) {
+#if !defined(OS_MACOSX)
+  original_argv_ = argv;
+#else
+  for (size_t index = 0; index < argv.size(); ++index) {
+    if (argv[index].compare(0, strlen("--psn_"), "--psn_") != 0 &&
+        argv[index].compare(0, strlen("-psn_"), "-psn_") != 0) {
+      original_argv_.push_back(argv[index]);
+    }
+  }
+#endif
   argv_ = StringVector(1);
   switches_.clear();
   switches_by_stringpiece_.clear();
@@ -390,6 +452,12 @@
   argv_.push_back(value);
 }
 
+#if defined(OS_MACOSX)
+void CommandLine::FixOrigArgv4Finder(const CommandLine::StringType& value) {
+  original_argv_.push_back(value);
+}
+#endif
+
 void CommandLine::AppendArguments(const CommandLine& other,
                                   bool include_program) {
   if (include_program)
diff -r -u --color up/chromium/base/command_line.h nw/chromium/base/command_line.h
--- up/chromium/base/command_line.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/base/command_line.h	2023-02-21 04:37:19.564126652 +0000
@@ -142,6 +142,11 @@
 
   // Returns the original command line string as a vector of strings.
   const StringVector& argv() const { return argv_; }
+  int argc0() { return argc0_; }
+  char** argv0() { return argv0_; }
+
+  // Returns the original command line string as a vector of strings (keeps precedence).
+  const StringVector& original_argv() const { return original_argv_; }
 
   // Get and Set the program part of the command line string (the first item).
   FilePath GetProgram() const;
@@ -192,6 +197,10 @@
   void AppendArgPath(const FilePath& value);
   void AppendArgNative(const StringType& value);
 
+#if defined(OS_MACOSX)
+  void FixOrigArgv4Finder(const StringType& value);
+#endif
+
   // Append the switches and arguments from another command line to this one.
   // If |include_program| is true, include |other|'s program as well.
   void AppendArguments(const CommandLine& other, bool include_program);
@@ -233,6 +242,9 @@
   // The argv array: { program, [(--|-|/)switch[=value]]*, [--], [argument]* }
   StringVector argv_;
 
+  // The argv array (precedence not messed).
+  StringVector original_argv_;
+
   // Parsed-out switch keys and values.
   SwitchMap switches_;
 
@@ -244,6 +256,9 @@
 
   // The index after the program and switches, any arguments start here.
   size_t begin_args_;
+
+  int argc0_;
+  char** argv0_;
 };
 
 }  // namespace base
diff -r -u --color up/chromium/base/files/file_util_posix.cc nw/chromium/base/files/file_util_posix.cc
--- up/chromium/base/files/file_util_posix.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/base/files/file_util_posix.cc	2023-02-21 04:37:19.572126730 +0000
@@ -138,7 +138,7 @@
 #if defined(GOOGLE_CHROME_BUILD)
   return std::string(".com.google.Chrome.XXXXXX");
 #else
-  return std::string(".org.chromium.Chromium.XXXXXX");
+  return std::string(".io.nwjs.XXXXXX");
 #endif
 }
 
diff -r -u --color up/chromium/base/message_loop/message_loop.h nw/chromium/base/message_loop/message_loop.h
--- up/chromium/base/message_loop/message_loop.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/base/message_loop/message_loop.h	2023-02-21 04:37:19.588126886 +0000
@@ -37,6 +37,10 @@
 #include "base/message_loop/message_pump_libevent.h"
 #endif
 
+#if !defined(OS_MACOSX)
+#include "base/message_loop/message_pump_uv.h"
+#endif
+
 namespace base {
 
 class HistogramBase;
@@ -100,6 +104,9 @@
   // TYPE_CUSTOM
   //   MessagePump was supplied to constructor.
   //
+  // TYPE_NODE
+  //   For integration with NodeJS/libuv in the renderer thread
+
   enum Type {
     TYPE_DEFAULT,
     TYPE_UI,
@@ -107,7 +114,8 @@
     TYPE_IO,
 #if defined(OS_ANDROID)
     TYPE_JAVA,
-#endif  // defined(OS_ANDROID)
+#endif // defined(OS_ANDROID)
+    TYPE_NODE
   };
 
   // Normally, it is not necessary to instantiate a MessageLoop.  Instead, it
@@ -695,6 +703,43 @@
 static_assert(sizeof(MessageLoop) == sizeof(MessageLoopForIO),
               "MessageLoopForIO should not have extra member variables");
 
+#if !defined(OS_MACOSX)
+
+//-----------------------------------------------------------------------------
+// MessageLoopForUV extends MessageLoop with methods that are particular to a
+// MessageLoop instantiated with TYPE_NODE.
+//
+// This class is typically used like so:
+//   MessageLoopForUV::current()->...call some method...
+//
+
+class BASE_EXPORT MessageLoopForUV : public MessageLoop {
+ public:
+
+  MessageLoopForUV() : MessageLoop(TYPE_NODE) {
+  }
+
+  // Returns the MessageLoopForUV of the current thread.
+  static MessageLoopForUV* current() {
+    MessageLoop* loop = MessageLoop::current();
+    //DCHECK_EQ(MessageLoop::TYPE_NODE, loop->type());
+    return static_cast<MessageLoopForUV*>(loop);
+  }
+
+  base::MessagePumpUV* pump_uv() {
+    return static_cast<base::MessagePumpUV*>(pump_.get());
+  }
+
+};
+
+// Do not add any member variables to MessageLoopForUV!  This is important b/c
+// MessageLoopForUV is often allocated via MessageLoop(TYPE_IO).  Any extra
+// data that you need should be stored on the MessageLoop's pump_ instance.
+static_assert(sizeof(MessageLoop) == sizeof(MessageLoopForUV),
+              "MessageLoopForUV should not have extra member variables");
+
+#endif
+
 }  // namespace base
 
 #endif  // BASE_MESSAGE_LOOP_MESSAGE_LOOP_H_
diff -r -u --color up/chromium/base/message_loop/message_pump_mac.h nw/chromium/base/message_loop/message_pump_mac.h
--- up/chromium/base/message_loop/message_pump_mac.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/base/message_loop/message_pump_mac.h	2023-02-21 04:37:19.588126886 +0000
@@ -123,7 +123,8 @@
   // the instance method; the instance method returns true if it resignalled
   // work_source_ to be called again from the loop.
   static void RunWorkSource(void* info);
-  bool RunWork();
+ protected:
+  virtual bool RunWork();
 
   // Perform idle-priority work.  This is normally called by PreWaitObserver,
   // but is also associated with idle_work_source_.  When this function
@@ -131,7 +132,8 @@
   // static method calls the instance method; the instance method returns
   // true if idle work was done.
   static void RunIdleWorkSource(void* info);
-  bool RunIdleWork();
+  virtual bool RunIdleWork();
+  virtual void PreWaitObserverHook();
 
   // Perform work that may have been deferred because it was not runnable
   // within a nested run loop.  This is associated with
diff -r -u --color up/chromium/base/message_loop/message_pump_mac.mm nw/chromium/base/message_loop/message_pump_mac.mm
--- up/chromium/base/message_loop/message_pump_mac.mm	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/base/message_loop/message_pump_mac.mm	2023-02-21 04:37:19.588126886 +0000
@@ -458,9 +458,13 @@
     // nesting-deferred work may have accumulated.  Schedule it for processing
     // if appropriate.
     self->MaybeScheduleNestingDeferredWork();
+    self->PreWaitObserverHook();
   });
 }
 
+void MessagePumpCFRunLoopBase::PreWaitObserverHook() {
+}
+
 // Called from the run loop.
 // static
 void MessagePumpCFRunLoopBase::PreSourceObserver(CFRunLoopObserverRef observer,
Only in nw/chromium/base/message_loop: message_pump_uv.cc
Only in nw/chromium/base/message_loop: message_pump_uv.h
Only in nw/chromium/base/message_loop: message_pumpuv_mac.h
Only in nw/chromium/base/message_loop: message_pumpuv_mac.mm
diff -r -u --color up/chromium/base/native_library_posix.cc nw/chromium/base/native_library_posix.cc
--- up/chromium/base/native_library_posix.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/base/native_library_posix.cc	2023-02-21 04:37:19.592126924 +0000
@@ -27,7 +27,7 @@
   // refer to the bug tracker.  Some useful bug reports to read include:
   // http://crbug.com/17943, http://crbug.com/17557, http://crbug.com/36892,
   // and http://crbug.com/40794.
-  void* dl = dlopen(library_path.value().c_str(), RTLD_LAZY);
+  void* dl = dlopen(library_path.value().c_str(), RTLD_LAZY | RTLD_GLOBAL);
   if (!dl && error)
     error->message = dlerror();
 
diff -r -u --color up/chromium/base/process/launch_posix.cc nw/chromium/base/process/launch_posix.cc
--- up/chromium/base/process/launch_posix.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/base/process/launch_posix.cc	2023-02-21 04:37:19.596126963 +0000
@@ -464,6 +464,7 @@
 #ifndef PR_SET_NO_NEW_PRIVS
 #define PR_SET_NO_NEW_PRIVS 38
 #endif
+#if 0
     if (!options.allow_new_privs) {
       if (prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0) && errno != EINVAL) {
         // Only log if the error is not EINVAL (i.e. not supported).
@@ -478,6 +479,7 @@
       }
     }
 #endif
+#endif
 
     if (current_directory != nullptr) {
       RAW_CHECK(chdir(current_directory) == 0);
diff -r -u --color up/chromium/base/threading/thread_restrictions.h nw/chromium/base/threading/thread_restrictions.h
--- up/chromium/base/threading/thread_restrictions.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/base/threading/thread_restrictions.h	2023-02-21 04:37:19.632127314 +0000
@@ -20,6 +20,11 @@
 class NativeBackendKWallet;
 class ScopedAllowWaitForLegacyWebViewApi;
 
+namespace extensions {
+class NwAppSetProxyConfigFunction;
+class ContentVerifier;
+}
+
 namespace cc {
 class CompletionEvent;
 class SingleThreadTaskGraphRunner;
@@ -212,6 +217,9 @@
   friend class mus::CommandBufferLocal;
   friend class mus::GpuState;
 
+  friend class extensions::NwAppSetProxyConfigFunction;
+  friend class extensions::ContentVerifier;
+
   // END ALLOWED USAGE.
   // BEGIN USAGE THAT NEEDS TO BE FIXED.
   friend class ::chromeos::BlockingMethodCaller;  // http://crbug.com/125360
diff -r -u --color up/chromium/base/trace_event/process_memory_dump.cc nw/chromium/base/trace_event/process_memory_dump.cc
--- up/chromium/base/trace_event/process_memory_dump.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/base/trace_event/process_memory_dump.cc	2023-02-21 04:37:19.636127353 +0000
@@ -16,10 +16,6 @@
 #include <sys/mman.h>
 #endif
 
-#if defined(OS_WIN)
-#include <Psapi.h>
-#endif
-
 namespace base {
 namespace trace_event {
 
@@ -79,7 +75,7 @@
         !!mincore(reinterpret_cast<void*>(chunk_start), chunk_size, vec.get());
     for (size_t i = 0; i < page_count; i++)
       resident_page_count += vec[i] & MINCORE_INCORE ? 1 : 0;
-#elif defined(OS_WIN)
+#elif defined(OS_WIN_DISABLE)
     for (size_t i = 0; i < page_count; i++) {
       vec[i].VirtualAddress =
           reinterpret_cast<void*>(chunk_start + i * page_size);
diff -r -u --color up/chromium/base/trace_event/process_memory_dump.h nw/chromium/base/trace_event/process_memory_dump.h
--- up/chromium/base/trace_event/process_memory_dump.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/base/trace_event/process_memory_dump.h	2023-02-21 04:37:19.636127353 +0000
@@ -25,8 +25,7 @@
 // resident memory.
 // TODO(crbug.com/542671): COUNT_RESIDENT_BYTES_SUPPORTED is disabled on iOS
 // as it cause memory corruption on iOS 9.0+ devices.
-#if (defined(OS_POSIX) && !defined(OS_NACL) && !defined(OS_IOS)) || \
-    defined(OS_WIN)
+#if (defined(OS_POSIX) && !defined(OS_NACL) && !defined(OS_IOS))
 #define COUNT_RESIDENT_BYTES_SUPPORTED
 #endif
 
diff -r -u --color up/chromium/breakpad/breakpad.gyp nw/chromium/breakpad/breakpad.gyp
--- up/chromium/breakpad/breakpad.gyp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/breakpad/breakpad.gyp	2023-02-21 04:37:19.660127586 +0000
@@ -447,7 +447,7 @@
           # GN version: //breakpad:dump_syms
           'target_name': 'dump_syms',
           'type': 'executable',
-          'toolsets': ['host'],
+          'toolsets': ['host', 'target'],
 
           # dwarf2reader.cc uses dynamic_cast. Because we don't typically
           # don't support RTTI, we enable it for this single target. Since
diff -r -u --color up/chromium/build/chrome_settings.gypi nw/chromium/build/chrome_settings.gypi
--- up/chromium/build/chrome_settings.gypi	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/build/chrome_settings.gypi	2023-02-21 04:37:19.684127820 +0000
@@ -20,10 +20,10 @@
             # The policy .grd file also needs the bundle id.
             'grit_defines': ['-D', 'mac_bundle_id=com.google.Chrome'],
           }, {  # else: branding!="Chrome"
-            'mac_bundle_id': 'org.chromium.Chromium',
+            'mac_bundle_id': 'io.nwjs.nw',
             'mac_creator': 'Cr24',
             # The policy .grd file also needs the bundle id.
-            'grit_defines': ['-D', 'mac_bundle_id=org.chromium.Chromium'],
+            'grit_defines': ['-D', 'mac_bundle_id=io.nwjs.nw'],
           }],  # branding
         ],  # conditions
       }],  # OS=="mac"
diff -r -u --color up/chromium/build/common.gypi nw/chromium/build/common.gypi
--- up/chromium/build/common.gypi	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/build/common.gypi	2023-02-21 04:37:19.684127820 +0000
@@ -106,6 +106,7 @@
           # based on 'buildtype' (i.e. we don't care about saving symbols for
           # non-Official # builds).
           'buildtype%': 'Dev',
+          'nwjs_sdk%': 0,
 
           # Override branding to select the desired branding flavor.
           'branding%': 'Chromium',
@@ -175,6 +176,7 @@
         'enable_wayland_server%': '<(enable_wayland_server)',
         'enable_wifi_display%': '<(enable_wifi_display)',
         'buildtype%': '<(buildtype)',
+        'nwjs_sdk%': '<(nwjs_sdk)',
         'branding%': '<(branding)',
         'branding_path_component%': '<(branding)',
         'host_arch%': '<(host_arch)',
@@ -372,6 +374,7 @@
       'enable_app_list%': '<(enable_app_list)',
       'use_default_render_theme%': '<(use_default_render_theme)',
       'buildtype%': '<(buildtype)',
+      'nwjs_sdk%': '<(nwjs_sdk)',
       'branding%': '<(branding)',
       'branding_path_component%': '<(branding_path_component)',
       'arm_version%': '<(arm_version)',
@@ -436,7 +439,7 @@
       'use_titlecase_in_grd%': 0,
 
       # Remoting compilation is enabled by default. Set to 0 to disable.
-      'remoting%': 1,
+      'remoting%': 0,
 
       # Configuration policy is enabled by default. Set to 0 to disable.
       'configuration_policy%': 1,
@@ -445,7 +448,7 @@
       # for safe browsing feature. Safe browsing can be compiled in 3 different
       # levels: 0 disables it, 1 enables it fully, and 2 enables mobile
       # protection via an external API.
-      'safe_browsing%': 1,
+      'safe_browsing%': 0,
 
       # Web speech is enabled by default. Set to 0 to disable.
       'enable_web_speech%': 1,
@@ -626,13 +629,13 @@
       # See https://chromium.googlesource.com/chromium/src/+/master/docs/clang.md for details.
       # If this is set, clang is used as both host and target compiler in
       # cross-compile builds.
-      'clang%': 0,
+      'clang%': 1,
 
       # Use experimental lld linker instead of the platform's default linker.
       'use_lld%': 0,
 
       # Enable plugin installation by default.
-      'enable_plugin_installation%': 1,
+      'enable_plugin_installation%': 0,
 
       # Specifies whether to use canvas_skia.cc in place of platform
       # specific implementations of gfx::Canvas. Affects text drawing in the
@@ -839,7 +842,8 @@
         ['OS=="android" or branding=="Chrome" or chromecast==1', {
           'proprietary_codecs%': 1,
         }, {
-          'proprietary_codecs%': 0,
+          # This enables only the interface to proprietary codecs, not the codecs themselves
+          'proprietary_codecs%': 1,
         }],
 
         # Enable autofill dialog when not on iOS.
@@ -902,7 +906,7 @@
         ['chromeos==1 or OS=="android" or OS=="ios" or desktop_linux==1', {
           'enable_plugin_installation%': 0,
         }, {
-          'enable_plugin_installation%': 1,
+          'enable_plugin_installation%': 0,
         }],
 
         # Whether PPAPI is enabled.
@@ -1113,7 +1117,7 @@
       'google_default_client_id%': '',
       'google_default_client_secret%': '',
       # Native Client is enabled by default.
-      'disable_nacl%': '0',
+      'disable_nacl%': '1',
 
       # Native Client toolchains, enabled by default.
       'disable_pnacl%': 0,
@@ -1129,6 +1133,7 @@
     },
 
     # Copy conditionally-set variables out one scope.
+    'nwjs_sdk%': '<(nwjs_sdk)',
     'branding%': '<(branding)',
     'branding_path_component%': '<(branding_path_component)',
     'buildtype%': '<(buildtype)',
@@ -1317,7 +1322,7 @@
 
     # The default value for mac_strip in target_defaults. This cannot be
     # set there, per the comment about variable% in a target_defaults.
-    'mac_strip_release%': 0,
+    'mac_strip_release%': 1,
 
     # Set to 1 to enable java code coverage. Instruments classes during build
     # to produce .ec files during runtime.
@@ -1412,12 +1417,12 @@
     'profiling_full_stack_frames%': '0',
 
     # And if we want to dump symbols for Breakpad-enabled builds.
-    'linux_dump_symbols%': 0,
+    'linux_dump_symbols%': 1,
     # And if we want to strip the binary after dumping symbols.
     'linux_strip_binary%': 0,
     # If we want stack unwind support for backtrace().
     'debug_unwind_tables%': 1,
-    'release_unwind_tables%': 1,
+    'release_unwind_tables%': 0,
 
     # Override where to find binutils
     'binutils_version%': 0,
@@ -1587,6 +1592,9 @@
     'libjpeg_turbo_gyp_path': '<(DEPTH)/third_party/libjpeg_turbo/libjpeg.gyp',
 
     'conditions': [
+      ['nwjs_sdk!=1', {
+        'locales==': [ 'en-US', ],
+      }],
       # Enable the Syzygy optimization step for the official builds.
       ['OS=="win" and buildtype=="Official" and syzyasan!=1 and clang!=1', {
         'syzygy_optimize%': 1,
@@ -1953,7 +1961,7 @@
           ['branding=="Chrome"', {
             'mac_product_name%': 'Google Chrome',
           }, { # else: branding!="Chrome"
-            'mac_product_name%': 'Chromium',
+            'mac_product_name%': 'nwjs',
           }],
           # Official mac builds require a specific OS X SDK, but iOS and
           # non-official mac builds do not.
@@ -1993,7 +2001,7 @@
           }],
           ['component=="static_library"', {
             # Turn on multiple dll by default on Windows when in static_library.
-            'chrome_multiple_dll%': 1,
+            'chrome_multiple_dll%': 0,
           }],
           ['asan==1 or syzyasan==1', {
             'win_use_allocator_shim%': 0,
@@ -2080,6 +2088,9 @@
       }],
 
       # Set up -D and -E flags passed into grit.
+      ['nwjs_sdk==1', {
+        'grit_defines': ['-D', 'nwjs_sdk'],
+      }],
       ['branding=="Chrome"', {
         # TODO(mmoss) The .grd files look for _google_chrome, but for
         # consistency they should look for google_chrome_build like C++.
@@ -2675,6 +2686,9 @@
           '<(DEPTH)/build/win/asan.gyp:asan_dynamic_runtime',
         ],
       }],
+      ['nwjs_sdk==1', {
+        'defines': ['NWJS_SDK'],
+      }],
       ['branding=="Chrome"', {
         'defines': ['GOOGLE_CHROME_BUILD'],
       }, {  # else: branding!="Chrome"
@@ -3120,8 +3134,7 @@
               '_SCL_SECURE_NO_DEPRECATE',
             ],
             'msvs_disabled_warnings': [
-              # forcing value to bool 'true' or 'false' (performance warning)
-              4800,
+              4800, 4275, 4267, 4090, 4146, 4334, 4068
             ],
             'msvs_settings': {
               'VCCLCompilerTool': {
@@ -5229,7 +5242,7 @@
         'configurations': {
           'Release_Base': {
             'conditions': [
-              ['branding=="Chrome" and buildtype=="Official"', {
+              ['mac_breakpad == 1', {
                 'xcode_settings': {
                   'OTHER_CFLAGS': [
                     # The Google Chrome Framework dSYM generated by dsymutil has
diff -r -u --color up/chromium/build/compiler_version.py nw/chromium/build/compiler_version.py
--- up/chromium/build/compiler_version.py	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/build/compiler_version.py	2023-02-21 04:37:19.684127820 +0000
@@ -54,7 +54,7 @@
   try:
     # Note that compiler could be something tricky like "distcc g++".
     if tool == "assembler":
-      compiler = compiler + " -Xassembler --version -x assembler -c /dev/null"
+      compiler = compiler + " --version -Xassembler -x assembler -c /dev/null"
       # Unmodified: GNU assembler (GNU Binutils) 2.24
       # Ubuntu: GNU assembler (GNU Binutils for Ubuntu) 2.22
       # Fedora: GNU assembler version 2.23.2
Only in nw/chromium/build/win/dbghelp_xp: x64
diff -r -u --color up/chromium/build/win/reorder-imports.py nw/chromium/build/win/reorder-imports.py
--- up/chromium/build/win/reorder-imports.py	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/build/win/reorder-imports.py	2023-02-21 04:37:19.720128171 +0000
@@ -16,8 +16,8 @@
   (pdbs, manifests etc.).
   """
 
-  input_image = os.path.join(input_dir, 'chrome.exe')
-  output_image = os.path.join(output_dir, 'chrome.exe')
+  input_image = os.path.join(input_dir, 'nw.exe')
+  output_image = os.path.join(output_dir, 'nw.exe')
 
   swap_exe = os.path.join(
     __file__,
@@ -29,11 +29,11 @@
   if architecture == 'x64':
     args.append('--x64');
 
-  args.append('chrome_elf.dll');
+  args.append('nw_elf.dll');
 
   subprocess.check_call(args)
 
-  for fname in glob.iglob(os.path.join(input_dir, 'chrome.exe.*')):
+  for fname in glob.iglob(os.path.join(input_dir, 'nw.exe.*')):
     shutil.copy(fname, os.path.join(output_dir, os.path.basename(fname)))
   return 0
 
@@ -41,9 +41,9 @@
 def main(argv):
   usage = 'reorder_imports.py -i <input_dir> -o <output_dir> -a <target_arch>'
   parser = optparse.OptionParser(usage=usage)
-  parser.add_option('-i', '--input', help='reorder chrome.exe in DIR',
+  parser.add_option('-i', '--input', help='reorder nw.exe in DIR',
       metavar='DIR')
-  parser.add_option('-o', '--output', help='write new chrome.exe to DIR',
+  parser.add_option('-o', '--output', help='write new nw.exe to DIR',
       metavar='DIR')
   parser.add_option('-a', '--arch', help='architecture of build (optional)',
       default='ia32')
diff -r -u --color up/chromium/chrome/app/app-Info.plist nw/chromium/chrome/app/app-Info.plist
--- up/chromium/chrome/app/app-Info.plist	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/app/app-Info.plist	2023-02-21 04:37:19.940130312 +0000
@@ -319,7 +319,7 @@
 	<key>LSHasLocalizedDisplayName</key>
 	<string>1</string>
 	<key>LSMinimumSystemVersion</key>
-	<string>10.9.0</string>
+	<string>${MACOSX_DEPLOYMENT_TARGET}.0</string>
 	<key>NSPrincipalClass</key>
 	<string>BrowserCrApplication</string>
 	<key>NSSupportsAutomaticGraphicsSwitching</key>
@@ -336,7 +336,7 @@
 				<string>public.data</string>
 			</array>
 			<key>UTTypeDescription</key>
-			<string>Chromium Extra</string>
+			<string>NWJS Extra</string>
 			<key>UTTypeIdentifier</key>
 			<string>org.chromium.extension</string>
 			<key>UTTypeTagSpecification</key>
diff -r -u --color up/chromium/chrome/app/chrome_crash_reporter_client.cc nw/chromium/chrome/app/chrome_crash_reporter_client.cc
--- up/chromium/chrome/app/chrome_crash_reporter_client.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/app/chrome_crash_reporter_client.cc	2023-02-21 04:37:19.940130312 +0000
@@ -264,7 +264,7 @@
   *product_name = "Chrome_ChromeOS";
 #else  // OS_LINUX
 #if !defined(ADDRESS_SANITIZER)
-  *product_name = "Chrome_Linux";
+  *product_name = "NWJS";
 #else
   *product_name = "Chrome_Linux_ASan";
 #endif
@@ -304,8 +304,9 @@
 }
 
 bool ChromeCrashReporterClient::IsRunningUnattended() {
-  scoped_ptr<base::Environment> env(base::Environment::Create());
-  return env->HasVar(env_vars::kHeadless);
+  // scoped_ptr<base::Environment> env(base::Environment::Create());
+  // return env->HasVar(env_vars::kHeadless);
+  return true;
 }
 
 bool ChromeCrashReporterClient::GetCollectStatsConsent() {
diff -r -u --color up/chromium/chrome/app/chrome_dll.ver nw/chromium/chrome/app/chrome_dll.ver
--- up/chromium/chrome/app/chrome_dll.ver	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/app/chrome_dll.ver	2023-02-21 04:37:19.940130312 +0000
@@ -1,2 +1,2 @@
-INTERNAL_NAME=chrome_dll
-ORIGINAL_FILENAME=chrome.dll
+INTERNAL_NAME=nw_dll
+ORIGINAL_FILENAME=nw.dll
diff -r -u --color up/chromium/chrome/app/chrome_exe.ver nw/chromium/chrome/app/chrome_exe.ver
--- up/chromium/chrome/app/chrome_exe.ver	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/app/chrome_exe.ver	2023-02-21 04:37:19.940130312 +0000
@@ -1,2 +1,2 @@
-INTERNAL_NAME=chrome_exe
-ORIGINAL_FILENAME=chrome.exe
+INTERNAL_NAME=nw_exe
+ORIGINAL_FILENAME=nw.exe
diff -r -u --color up/chromium/chrome/app/chrome_exe_main_mac.c nw/chromium/chrome/app/chrome_exe_main_mac.c
--- up/chromium/chrome/app/chrome_exe_main_mac.c	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/app/chrome_exe_main_mac.c	2023-02-21 04:37:19.940130312 +0000
@@ -72,7 +72,7 @@
   }
   snprintf(framework_path, framework_path_size, "%s/%s", parent_dir, rel_path);
 
-  void* library = dlopen(framework_path, RTLD_LAZY | RTLD_LOCAL | RTLD_FIRST);
+  void* library = dlopen(framework_path, RTLD_LAZY | RTLD_FIRST);
   if (!library) {
     fprintf(stderr, "dlopen %s: %s\n", framework_path, dlerror());
     abort();
diff -r -u --color up/chromium/chrome/app/chrome_exe_main_win.cc nw/chromium/chrome/app/chrome_exe_main_win.cc
--- up/chromium/chrome/app/chrome_exe_main_win.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/app/chrome_exe_main_win.cc	2023-02-21 04:37:19.940130312 +0000
@@ -197,6 +197,12 @@
          HasValidWindowsPrefetchArgument(*command_line));
 
   if (process_type == crash_reporter::switches::kCrashpadHandler) {
+    // HACK: Let Windows know that we have started.  This is needed to suppress
+    // the IDC_APPSTARTING cursor from being displayed for a prolonged period
+    // while a subprocess is starting. NWJS#4685
+    PostThreadMessage(GetCurrentThreadId(), WM_NULL, 0, 0);
+    MSG msg;
+    PeekMessage(&msg, NULL, 0, 0, PM_REMOVE);
     return crash_reporter::RunAsCrashpadHandler(
         *base::CommandLine::ForCurrentProcess());
   }
@@ -221,8 +227,10 @@
   if (base::win::GetVersion() >= base::win::VERSION_WIN7)
     EnableHighDPISupport();
 
+#if 0 //FIXME(nwjs)
   if (AttemptFastNotify(*command_line))
     return 0;
+#endif
 
   // Load and launch the chrome dll. *Everything* happens inside.
   VLOG(1) << "About to load main DLL.";
diff -r -u --color up/chromium/chrome/app/chrome_main.cc nw/chromium/chrome/app/chrome_main.cc
--- up/chromium/chrome/app/chrome_main.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/app/chrome_main.cc	2023-02-21 04:37:19.944130351 +0000
@@ -52,7 +52,7 @@
 
 #if defined(OS_WIN)
   // The process should crash when going through abnormal termination.
-  base::win::SetShouldCrashOnProcessDetach(true);
+  base::win::SetShouldCrashOnProcessDetach(false);
   base::win::SetAbortBehaviorForCrashReporting();
   params.instance = instance;
   params.sandbox_info = sandbox_info;
diff -r -u --color up/chromium/chrome/app/chrome_main_delegate.cc nw/chromium/chrome/app/chrome_main_delegate.cc
--- up/chromium/chrome/app/chrome_main_delegate.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/app/chrome_main_delegate.cc	2023-02-21 04:37:19.944130351 +0000
@@ -54,6 +54,7 @@
 #include "ui/base/resource/resource_bundle.h"
 #include "ui/base/ui_base_switches.h"
 
+#include "content/nw/src/nw_base.h"
 #if defined(OS_WIN)
 #include <atlbase.h>
 #include <malloc.h>
@@ -141,6 +142,16 @@
 #if !defined(CHROME_MULTIPLE_DLL_BROWSER)
 #include "chrome/child/pdf_child_init.h"
 
+
+#include "third_party/node/src/node_webkit.h"
+#include "third_party/zlib/google/zip_reader.h"
+#include "base/native_library.h"
+#include "base/strings/utf_string_conversions.h"
+#if defined(OS_MACOSX)
+#include "base/mac/bundle_locations.h"
+#include "base/strings/sys_string_conversions.h"
+#endif
+
 base::LazyInstance<ChromeContentRendererClient>
     g_chrome_content_renderer_client = LAZY_INSTANCE_INITIALIZER;
 base::LazyInstance<ChromeContentUtilityClient>
@@ -162,6 +173,9 @@
 extern int NaClMain(const content::MainFunctionParams&);
 extern int ServiceProcessMain(const content::MainFunctionParams&);
 
+NodeStartFn g_node_start_fn = nullptr;
+SetBlobPathFn g_set_blob_path_fn = nullptr;
+
 namespace {
 
 #if defined(OS_WIN)
@@ -414,7 +428,7 @@
 
   // Append the fallback user data directory to the commandline. Otherwise,
   // child or service processes will attempt to use the invalid directory.
-  if (specified_directory_was_invalid)
+  //if (specified_directory_was_invalid)
     command_line->AppendSwitchPath(switches::kUserDataDir, user_data_dir);
 }
 
@@ -470,7 +484,7 @@
   chromeos::BootTimesRecorder::Get()->SaveChromeMainStats();
 #endif
 
-  const base::CommandLine& command_line =
+  base::CommandLine& command_line =
       *base::CommandLine::ForCurrentProcess();
 
 #if defined(OS_WIN)
@@ -492,6 +506,35 @@
   chrome::common::mac::EnableCFBundleBlocker();
 #endif
 
+  const base::CommandLine::StringVector& args = command_line.GetArgs();
+  if (args.size() > 0) {
+    zip::ZipReader reader;
+    base::FilePath fp(args[0]);
+    if (!command_line.HasSwitch(switches::kProcessType) &&
+        base::PathExists(fp) && !base::DirectoryExists(fp) && !reader.Open(fp)) {
+      base::NativeLibraryLoadError error;
+#if defined(OS_MACOSX)
+      base::FilePath node_dll_path = base::mac::FrameworkBundlePath().Append(base::FilePath::FromUTF16Unsafe(base::GetNativeLibraryName(base::UTF8ToUTF16("libnode"))));
+      base::ScopedCFTypeRef<CFStringRef> natives_file_name(base::SysUTF8ToCFStringRef("natives_blob.bin"));
+      std::string blob_path = base::mac::PathForFrameworkBundleResource(natives_file_name).AsUTF8Unsafe();
+#else
+      base::FilePath node_dll_path = base::FilePath::FromUTF16Unsafe(base::GetNativeLibraryName(base::UTF8ToUTF16("node")));
+#endif
+      base::NativeLibrary node_dll = base::LoadNativeLibrary(node_dll_path, &error);
+      if(!node_dll)
+        LOG(FATAL) << "Failed to load node library (error: " << error.ToString() << ")";
+      else {
+#if defined(OS_MACOSX)
+        g_set_blob_path_fn = (SetBlobPathFn)base::GetFunctionPointerFromNativeLibrary(node_dll, "g_set_blob_path");
+        g_set_blob_path_fn(blob_path.c_str());
+#endif
+        g_node_start_fn = (NodeStartFn)base::GetFunctionPointerFromNativeLibrary(node_dll, "g_node_start");
+        *exit_code = g_node_start_fn(command_line.argc0(), command_line.argv0());
+      }
+      return true;
+    }
+  }
+
   Profiling::ProcessStarted();
 
   base::trace_event::TraceLog::GetInstance()->SetArgumentFilterPredicate(
@@ -697,6 +740,8 @@
   crash_reporter::SetCrashReporterClient(g_chrome_crash_client.Pointer());
 #endif
 
+  if (process_type.empty())
+    nw::InitNWPackage();
 #if defined(OS_MACOSX)
   // On the Mac, the child executable lives at a predefined location within
   // the app bundle's versioned directory.
@@ -719,11 +764,11 @@
   // Initialize the user data dir for any process type that needs it.
   if (chrome::ProcessNeedsProfileDir(process_type))
     InitializeUserDataDir();
-
+#if 0
   // Register component_updater PathProvider after DIR_USER_DATA overidden by
   // command line flags. Maybe move the chrome PathProvider down here also?
   component_updater::RegisterPathProvider(chrome::DIR_USER_DATA);
-
+#endif
   // Enable Message Loop related state asap.
   if (command_line.HasSwitch(switches::kMessageLoopHistogrammer))
     base::MessageLoop::EnableHistogrammer(true);
diff -r -u --color up/chromium/chrome/app/chrome_version.rc.version nw/chromium/chrome/app/chrome_version.rc.version
--- up/chromium/chrome/app/chrome_version.rc.version	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/app/chrome_version.rc.version	2023-02-21 04:37:19.944130351 +0000
@@ -10,8 +10,6 @@
 //
 
 VS_VERSION_INFO VERSIONINFO
- FILEVERSION @MAJOR@,@MINOR@,@BUILD@,@PATCH@
- PRODUCTVERSION @MAJOR@,@MINOR@,@BUILD@,@PATCH@
  FILEFLAGSMASK 0x17L
 #ifdef _DEBUG
  FILEFLAGS 0x1L
@@ -28,16 +26,13 @@
         BEGIN
             VALUE "CompanyName", "@COMPANY_FULLNAME@"
             VALUE "FileDescription", "@PRODUCT_FULLNAME@"
-            VALUE "FileVersion", "@MAJOR@.@MINOR@.@BUILD@.@PATCH@"
             VALUE "InternalName", "@INTERNAL_NAME@"
             VALUE "LegalCopyright", "@COPYRIGHT@"
             VALUE "OriginalFilename", "@ORIGINAL_FILENAME@"
             VALUE "ProductName", "@PRODUCT_FULLNAME@"
-            VALUE "ProductVersion", "@MAJOR@.@MINOR@.@BUILD@.@PATCH@"
             VALUE "CompanyShortName", "@COMPANY_SHORTNAME@"
             VALUE "ProductShortName", "@PRODUCT_SHORTNAME@"
             VALUE "LastChange", "@LASTCHANGE@"
-            VALUE "Official Build", "@OFFICIAL_BUILD@"
         END
     END
     BLOCK "VarFileInfo"
diff -r -u --color up/chromium/chrome/app/chromium_strings.grd nw/chromium/chrome/app/chromium_strings.grd
--- up/chromium/chrome/app/chromium_strings.grd	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/app/chromium_strings.grd	2023-02-21 04:37:19.944130351 +0000
@@ -137,17 +137,17 @@
         Disconnecting <ph name="USERNAME">$1<ex>someone@example.com</ex></ph> will clear your history, bookmarks, settings, and other Chromium data stored on this device. Data stored in your Google Account will not be cleared and can be managed on <ph name="GOOGLE_DASHBOARD_LINK">&lt;a target="_blank" href="$2"&gt;</ph>Google Dashboard<ph name="END_GOOGLE_DASHBOARD_LINK">&lt;/a&gt;</ph>.
       </message>
       <message name="IDS_PRODUCT_NAME" desc="The Chrome application name">
-        Chromium
+        nwjs
       </message>
       <message name="IDS_SHORT_PRODUCT_NAME" desc="The Chrome application short name.">
-        Chromium
+        nwjs
       </message>
       <if expr="is_win">
         <message name="IDS_SXS_SHORTCUT_NAME" desc="The Chrome short cut name for SxS channel">
-          Chromium
+          nwjs
         </message>
         <message name="IDS_PRODUCT_DESCRIPTION" desc="Browser description">
-          Chromium is a web browser that runs webpages and applications with lightning speed. It's fast, stable, and easy to use. Browse the web more safely with malware and phishing protection built into Chromium.
+          nwjs runtime enables writing native application with Web technologies.
         </message>
       </if>
       <if expr="chromeos">
@@ -160,10 +160,10 @@
       </if>
       <if expr="is_win">
         <message name="IDS_PRODUCT_APP_LAUNCHER_NAME" desc="The Chrome App Launcher application name">
-          Chromium App Launcher
+          nwjs App Launcher
         </message>
         <message name="IDS_PRODUCT_BINARIES_NAME" desc="The Chrome Binaries application name">
-          Chromium Binaries
+          nwjs Binaries
         </message>
         <message name="IDS_CHROME_FRAME_TURNDOWN_LEARN_MORE_URL" desc="Link to knowledge-base article about Chromium Frame's turndown">
           https://support.google.com/chrome/?p=ib_chromeframe
@@ -205,7 +205,7 @@
         The Chromium Authors
       </message>
       <message name="IDS_ABOUT_VERSION_COPYRIGHT" desc="Copyright information on the about pages">
-        Copyright <ph name="YEAR">$1</ph> The Chromium Authors. All rights reserved.
+        Copyright <ph name="YEAR">$1</ph> NW.js contributors, Chromium Authors, IO.js. All rights reserved.
       </message>
       <if expr="chromeos">
         <message name="IDS_ABOUT_VERSION_LICENSE_EULA" desc="The label below the copyright message, containing the URLs.">
@@ -712,13 +712,13 @@
 
       <if expr="is_macosx">
         <message name="IDS_APP_MENU_PRODUCT_NAME" desc="The application's short name, used for the Mac's application menu, activity monitor, etc. This should be less than 16 characters. Example: Chrome, not Google Chrome.">
-          Chromium
+          nwjs
         </message>
         <message name="IDS_HELPER_NAME" desc="The helper application's name.  Should contain the Chrome application name (IDS_PRODUCT_NAME). Example: Google Chrome Helper.">
-          Chromium Helper
+          nwjs Helper
         </message>
         <message name="IDS_SHORT_HELPER_NAME" desc="The helper application's short name, used for the Mac's application menu, activity monitor, etc. Example: Chrome Helper, not Google Chrome Helper.">
-          Chromium Helper
+          nwjs Helper
         </message>
       </if>
 
diff -r -u --color up/chromium/chrome/app/framework.order nw/chromium/chrome/app/framework.order
--- up/chromium/chrome/app/framework.order	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/app/framework.order	2023-02-21 04:37:19.944130351 +0000
@@ -24,6 +24,267 @@
 # Provided by build/sanitizers/sanitizer_options.cc in ASan builds.
 ___asan_default_options
 
+__ZN4node14ErrnoExceptionEPN2v87IsolateEiPKcS4_S4_
+__ZN4node11UVExceptionEPN2v87IsolateEiPKcS4_S4_
+__ZN4node11UVExceptionEPN2v87IsolateEiPKcS4_S4_S4_
+__ZN4node16CallTickCallbackEPNS_11EnvironmentEN2v86HandleINS2_5ValueEEE
+__ZN4node12MakeCallbackEPN2v87IsolateENS0_6HandleINS0_6ObjectEEEPKciPNS3_INS0_5ValueEEE
+__ZN4node12MakeCallbackEPN2v87IsolateENS0_6HandleINS0_6ObjectEEENS3_INS0_6StringEEEiPNS3_INS0_5ValueEEE
+__ZN4node12MakeCallbackEPN2v87IsolateENS0_6HandleINS0_6ObjectEEENS3_INS0_8FunctionEEEiPNS3_INS0_5ValueEEE
+__ZN4node6EncodeEPN2v87IsolateEPKcmNS_8encodingE
+__ZN4node6EncodeEPN2v87IsolateEPKtm
+__ZN4node11DecodeBytesEPN2v87IsolateENS0_6HandleINS0_5ValueEEENS_8encodingE
+__ZN4node11DecodeWriteEPN2v87IsolateEPcmNS0_6HandleINS0_5ValueEEENS_8encodingE
+_node_module_register
+__ZN4node14FatalExceptionEPN2v87IsolateERKNS0_8TryCatchE
+__ZN4node9OnMessageEN2v86HandleINS0_7MessageEEENS1_INS0_5ValueEEE
+__ZN4node15LoadEnvironmentEPNS_11EnvironmentE
+__ZN4node4InitEPiPPKcS0_PS3_
+__ZN4node9RunAtExitEPNS_11EnvironmentE
+__ZN4node6AtExitEPFvPvES0_
+__ZN4node14EmitBeforeExitEPNS_11EnvironmentE
+__ZN4node8EmitExitEPNS_11EnvironmentE
+__ZN4node17CreateEnvironmentEPN2v87IsolateENS0_6HandleINS0_7ContextEEEiPKPKciS9_
+__ZN4node17CreateEnvironmentEPN2v87IsolateEP9uv_loop_sNS0_6HandleINS0_7ContextEEEiPKPKciSB_
+__ZN4node5StartEiPPc
+__ZN4node11SetupNWNodeEiPPc
+__ZN4node15StartNWInstanceEiPPcN2v86HandleINS2_7ContextEEE
+__ZN4node17SetNWTickCallbackEPFN2v86HandleINS0_5ValueEEEPNS_11EnvironmentES3_E
+__ZN4node18CallNWTickCallbackEPNS_11EnvironmentEN2v86HandleINS2_5ValueEEE
+__ZN4node6Buffer11HasInstanceEN2v86HandleINS1_5ValueEEE
+__ZN4node6Buffer11HasInstanceEN2v86HandleINS1_6ObjectEEE
+__ZN4node6Buffer4DataEN2v86HandleINS1_5ValueEEE
+__ZN4node6Buffer4DataEN2v86HandleINS1_6ObjectEEE
+__ZN4node6Buffer6LengthEN2v86HandleINS1_5ValueEEE
+__ZN4node6Buffer6LengthEN2v86HandleINS1_6ObjectEEE
+__ZN4node6Buffer3NewEPN2v87IsolateENS1_6HandleINS1_6StringEEENS_8encodingE
+__ZN4node6Buffer3NewEPN2v87IsolateEm
+__ZN4node6Buffer3NewEPN2v87IsolateEPKcm
+__ZN4node6Buffer3NewEPN2v87IsolateEPcmPFvS4_PvES5_
+__ZN4node6Buffer3UseEPN2v87IsolateEPcj
+__ZN4node4i18n22InitializeICUDirectoryEPKc
+__ZN4node7smalloc17ExternalArraySizeEN2v817ExternalArrayTypeE
+__ZN4node7smalloc5AllocEPN2v87IsolateENS1_6HandleINS1_6ObjectEEEmNS1_17ExternalArrayTypeE
+__ZN4node7smalloc5AllocEPN2v87IsolateENS1_6HandleINS1_6ObjectEEEPcmNS1_17ExternalArrayTypeE
+__ZN4node7smalloc5AllocEPN2v87IsolateENS1_6HandleINS1_6ObjectEEEmPFvPcPvES8_NS1_17ExternalArrayTypeE
+__ZN4node7smalloc5AllocEPN2v87IsolateENS1_6HandleINS1_6ObjectEEEPcmPFvS7_PvES8_NS1_17ExternalArrayTypeE
+__ZN4node7smalloc12AllocDisposeEPN2v87IsolateENS1_6HandleINS1_6ObjectEEE
+__ZN4node7smalloc15HasExternalDataEPN2v87IsolateENS1_5LocalINS1_6ObjectEEE
+_uv_fs_poll_init
+_uv_fs_poll_start
+_uv_fs_poll_stop
+_uv_fs_poll_getpath
+_uv_inet_ntop
+_uv_inet_pton
+_uv_queue_work
+_uv_cancel
+_uv_handle_size
+_uv_req_size
+_uv_loop_size
+_uv_buf_init
+_uv_err_name
+_uv_strerror
+_uv_ip4_addr
+_uv_ip6_addr
+_uv_ip4_name
+_uv_ip6_name
+_uv_tcp_bind
+_uv_udp_bind
+_uv_tcp_connect
+_uv_udp_send
+_uv_udp_try_send
+_uv_udp_recv_start
+_uv_udp_recv_stop
+_uv_walk
+_uv_ref
+_uv_unref
+_uv_has_ref
+_uv_stop
+_uv_now
+_uv_recv_buffer_size
+_uv_send_buffer_size
+_uv_fs_event_getpath
+_uv_fs_scandir_next
+_uv_loop_configure
+_uv_default_loop
+_uv_loop_new
+_uv_loop_close
+_uv_loop_delete
+_uv_version
+_uv_version_string
+_uv_async_init
+_uv_async_send
+_uv_hrtime
+_uv_close
+_uv_is_closing
+_uv_backend_fd
+_uv_backend_timeout
+_uv_loop_alive
+_uv_run
+_uv_update_time
+_uv_is_active
+_uv_cwd
+_uv_chdir
+_uv_disable_stdio_inheritance
+_uv_fileno
+_uv_getrusage
+_uv_dlopen
+_uv_dlclose
+_uv_dlsym
+_uv_dlerror
+_uv_fs_access
+_uv_fs_chmod
+_uv_fs_chown
+_uv_fs_close
+_uv_fs_fchmod
+_uv_fs_fchown
+_uv_fs_fdatasync
+_uv_fs_fstat
+_uv_fs_fsync
+_uv_fs_ftruncate
+_uv_fs_futime
+_uv_fs_lstat
+_uv_fs_link
+_uv_fs_mkdir
+_uv_fs_mkdtemp
+_uv_fs_open
+_uv_fs_read
+_uv_fs_scandir
+_uv_fs_readlink
+_uv_fs_rename
+_uv_fs_rmdir
+_uv_fs_sendfile
+_uv_fs_stat
+_uv_fs_symlink
+_uv_fs_unlink
+_uv_fs_utime
+_uv_fs_write
+_uv_fs_req_cleanup
+_uv_getaddrinfo
+_uv_freeaddrinfo
+_uv_getnameinfo
+_uv_loop_init
+_uv_prepare_init
+_uv_prepare_start
+_uv_prepare_stop
+_uv_check_init
+_uv_check_start
+_uv_check_stop
+_uv_idle_init
+_uv_idle_start
+_uv_idle_stop
+_uv_pipe_init
+_uv_pipe_bind
+_uv_pipe_open
+_uv_pipe_connect
+_uv_pipe_getsockname
+_uv_pipe_getpeername
+_uv_pipe_pending_instances
+_uv_pipe_pending_count
+_uv_pipe_pending_type
+_uv_poll_init
+_uv_poll_init_socket
+_uv_poll_stop
+_uv_poll_start
+_uv_spawn
+_uv_process_kill
+_uv_kill
+_uv_signal_init
+_uv_signal_start
+_uv_signal_stop
+_uv_accept
+_uv_listen
+_uv_shutdown
+_uv_write2
+_uv_write
+_uv_try_write
+_uv_read_start
+_uv_read_stop
+_uv_is_readable
+_uv_is_writable
+_uv_stream_set_blocking
+_uv_tcp_init
+_uv_tcp_open
+_uv_tcp_getsockname
+_uv_tcp_getpeername
+_uv_tcp_nodelay
+_uv_tcp_keepalive
+_uv_tcp_simultaneous_accepts
+_uv_thread_create
+_uv_thread_self
+_uv_thread_join
+_uv_thread_equal
+_uv_mutex_init
+_uv_mutex_destroy
+_uv_mutex_lock
+_uv_mutex_trylock
+_uv_mutex_unlock
+_uv_rwlock_init
+_uv_rwlock_destroy
+_uv_rwlock_rdlock
+_uv_rwlock_tryrdlock
+_uv_rwlock_rdunlock
+_uv_rwlock_wrlock
+_uv_rwlock_trywrlock
+_uv_rwlock_wrunlock
+_uv_once
+_uv_sem_init
+_uv_sem_destroy
+_uv_sem_post
+_uv_sem_wait
+_uv_sem_trywait
+_uv_cond_init
+_uv_cond_destroy
+_uv_cond_signal
+_uv_cond_broadcast
+_uv_cond_wait
+_uv_cond_timedwait
+_uv_barrier_init
+_uv_barrier_destroy
+_uv_barrier_wait
+_uv_key_create
+_uv_key_delete
+_uv_key_get
+_uv_key_set
+_uv_timer_init
+_uv_timer_start
+_uv_timer_stop
+_uv_timer_again
+_uv_timer_set_repeat
+_uv_timer_get_repeat
+_uv_tty_init
+_uv_tty_set_mode
+_uv_tty_get_winsize
+_uv_guess_handle
+_uv_tty_reset_mode
+_uv_udp_init
+_uv_udp_open
+_uv_udp_set_membership
+_uv_udp_set_broadcast
+_uv_udp_set_ttl
+_uv_udp_set_multicast_ttl
+_uv_udp_set_multicast_loop
+_uv_udp_set_multicast_interface
+_uv_udp_getsockname
+_uv_setup_args
+_uv_set_process_title
+_uv_get_process_title
+_uv_exepath
+_uv_get_free_memory
+_uv_get_total_memory
+_uv_loadavg
+_uv_resident_set_memory
+_uv_uptime
+_uv_cpu_info
+_uv_free_cpu_info
+_uv_interface_addresses
+_uv_free_interface_addresses
+_uv_fs_event_init
+_uv_fs_event_start
+_uv_fs_event_stop
+
+
+
 # Entry point from the app mode loader.
 _ChromeAppModeStart_v4
 
diff -r -u --color up/chromium/chrome/app/helper-Info.plist nw/chromium/chrome/app/helper-Info.plist
--- up/chromium/chrome/app/helper-Info.plist	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/app/helper-Info.plist	2023-02-21 04:37:19.948130390 +0000
@@ -21,7 +21,7 @@
 	<key>LSFileQuarantineEnabled</key>
 	<true/>
 	<key>LSMinimumSystemVersion</key>
-	<string>10.9.0</string>
+	<string>${MACOSX_DEPLOYMENT_TARGET}.0</string>
 	<key>LSUIElement</key>
 	<string>1</string>
 	<key>NSSupportsAutomaticGraphicsSwitching</key>
diff -r -u --color up/chromium/chrome/app/main_dll_loader_win.cc nw/chromium/chrome/app/main_dll_loader_win.cc
--- up/chromium/chrome/app/main_dll_loader_win.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/app/main_dll_loader_win.cc	2023-02-21 04:37:19.948130390 +0000
@@ -54,9 +54,16 @@
 
 typedef void (*RelaunchChromeBrowserWithNewCommandLineIfNeededFunc)();
 
+#define BUFSIZE MAX_PATH
+
 // Loads |module| after setting the CWD to |module|'s directory. Returns a
 // reference to the loaded module on success, or null on error.
 HMODULE LoadModuleWithDirectory(const base::FilePath& module) {
+  bool restore_directory = false;
+  TCHAR Buffer[BUFSIZE];
+  if (::GetCurrentDirectoryW(BUFSIZE, Buffer)) {
+    restore_directory = true;
+  }
   ::SetCurrentDirectoryW(module.DirName().value().c_str());
 
   const startup_metric_utils::PreReadOptions pre_read_options =
@@ -72,8 +79,12 @@
     PreReadFile(module, pre_read_options);
   }
 
-  return ::LoadLibraryExW(module.value().c_str(), nullptr,
+  HMODULE ret = ::LoadLibraryExW(module.value().c_str(), nullptr,
                           LOAD_WITH_ALTERED_SEARCH_PATH);
+  if (restore_directory)
+    ::SetCurrentDirectory(Buffer);
+
+  return ret;
 }
 
 void RecordDidRun(const base::FilePath& dll_path) {
@@ -120,7 +131,7 @@
   }
   HMODULE dll = LoadModuleWithDirectory(*module);
   if (!dll) {
-    PLOG(ERROR) << "Failed to load Chrome DLL from " << module->value();
+    PLOG(ERROR) << "Failed to load NW DLL from " << module->value();
     return nullptr;
   }
 
diff -r -u --color up/chromium/chrome/app/nibs/MainMenu.xib nw/chromium/chrome/app/nibs/MainMenu.xib
--- up/chromium/chrome/app/nibs/MainMenu.xib	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/app/nibs/MainMenu.xib	2023-02-21 04:37:19.952130429 +0000
@@ -1,565 +1,792 @@
-<?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<document type="com.apple.InterfaceBuilder3.Cocoa.XIB" version="3.0" toolsVersion="5056" systemVersion="13F34" targetRuntime="MacOSX.Cocoa" propertyAccessControl="none">
-    <dependencies>
-        <deployment version="1060" defaultVersion="1060" identifier="macosx"/>
-        <development version="5100" identifier="xcode"/>
-        <plugIn identifier="com.apple.InterfaceBuilder.CocoaPlugin" version="5056"/>
-    </dependencies>
-    <objects>
-        <customObject id="-2" userLabel="File's Owner" customClass="BrowserCrApplication"/>
-        <customObject id="-1" userLabel="First Responder" customClass="FirstResponder"/>
-        <customObject id="-3" userLabel="Application" customClass="BrowserCrApplication">
-            <connections>
-                <outlet property="delegate" destination="483" id="485"/>
-            </connections>
-        </customObject>
-        <customObject id="373" customClass="NSFontManager"/>
-        <menu title="AMainMenu" systemMenu="main" id="29" userLabel="Main Menu">
-            <items>
-                <menuItem title="^IDS_APP_MENU_PRODUCT_NAME" tag="44002" id="56">
-                    <modifierMask key="keyEquivalentModifierMask"/>
-                    <menu key="submenu" title="^IDS_APP_MENU_PRODUCT_NAME" systemMenu="apple" id="57">
-                        <items>
-                            <menuItem title="^IDS_ABOUT_MAC$IDS_PRODUCT_NAME" tag="40018" id="58">
-                                <modifierMask key="keyEquivalentModifierMask"/>
-                                <connections>
-                                    <action selector="orderFrontStandardAboutPanel:" target="483" id="644"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem isSeparatorItem="YES" id="236"/>
-                            <menuItem title="^IDS_PREFERENCES" keyEquivalent="," id="129">
-                                <connections>
-                                    <action selector="showPreferences:" target="483" id="554"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem isSeparatorItem="YES" id="492"/>
-                            <menuItem title="^IDS_SYNC_MENU_PRE_SYNCED_LABEL$IDS_PRODUCT_NAME" tag="40030" hidden="YES" enabled="NO" id="664">
-                                <modifierMask key="keyEquivalentModifierMask"/>
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="666"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_CLEAR_BROWSING_DATA" tag="40013" id="491">
-                                <string key="keyEquivalent" base64-UTF8="YES">
-CA
-</string>
-                                <modifierMask key="keyEquivalentModifierMask" shift="YES" command="YES"/>
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="624"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_IMPORT_SETTINGS_MENU_MAC" tag="40014" id="662">
-                                <modifierMask key="keyEquivalentModifierMask"/>
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="663"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem isSeparatorItem="YES" id="143"/>
-                            <menuItem title="^IDS_SERVICES_MAC" id="131">
-                                <modifierMask key="keyEquivalentModifierMask"/>
-                                <menu key="submenu" title="^IDS_SERVICES_MAC" systemMenu="services" id="130"/>
-                            </menuItem>
-                            <menuItem isSeparatorItem="YES" id="144"/>
-                            <menuItem title="^IDS_HIDE_APP_MAC$IDS_PRODUCT_NAME" tag="44003" keyEquivalent="h" id="134">
-                                <connections>
-                                    <action selector="hide:" target="-1" id="369"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_HIDE_OTHERS_MAC" keyEquivalent="h" id="145">
-                                <modifierMask key="keyEquivalentModifierMask" option="YES" command="YES"/>
-                                <connections>
-                                    <action selector="hideOtherApplications:" target="-1" id="370"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_SHOW_ALL_MAC" id="150">
-                                <modifierMask key="keyEquivalentModifierMask"/>
-                                <connections>
-                                    <action selector="unhideAllApplications:" target="-1" id="372"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem isSeparatorItem="YES" id="149"/>
-                            <menuItem title="^IDS_CONFIRM_TO_QUIT_OPTION" id="687">
-                                <modifierMask key="keyEquivalentModifierMask"/>
-                                <connections>
-                                    <action selector="toggleConfirmToQuit:" target="483" id="688"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem isSeparatorItem="YES" id="686"/>
-                            <menuItem title="^IDS_EXIT_MAC$IDS_PRODUCT_NAME" tag="34031" keyEquivalent="q" id="136">
-                                <connections>
-                                    <action selector="terminate:" target="-3" id="647"/>
-                                </connections>
-                            </menuItem>
-                        </items>
-                    </menu>
-                </menuItem>
-                <menuItem title="^IDS_FILE_MENU_MAC" tag="44001" id="83">
-                    <modifierMask key="keyEquivalentModifierMask"/>
-                    <menu key="submenu" title="^IDS_FILE_MENU_MAC" id="81">
-                        <items>
-                            <menuItem title="^IDS_NEW_TAB_MAC" tag="34014" keyEquivalent="t" id="449">
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="527"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_NEW_WINDOW_MAC" tag="34000" keyEquivalent="n" id="82">
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="490"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_NEW_INCOGNITO_WINDOW_MAC" tag="34001" keyEquivalent="N" id="493">
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="526"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_REOPEN_CLOSED_TABS_MAC" tag="34028" keyEquivalent="T" id="625">
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="626"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_OPEN_FILE_MAC" tag="40000" keyEquivalent="o" id="72">
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="553"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_OPEN_LOCATION_MAC" tag="39001" keyEquivalent="l" id="533">
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="534"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem isSeparatorItem="YES" id="494"/>
-                            <menuItem title="^IDS_CLOSE_WINDOW_MAC" tag="34012" keyEquivalent="w" id="73">
-                                <connections>
-                                    <action selector="performClose:" target="-1" id="193"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_CLOSE_TAB_MAC" tag="34015" id="450">
-                                <modifierMask key="keyEquivalentModifierMask"/>
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="528"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_SAVE_PAGE_MAC" tag="35004" keyEquivalent="s" id="80">
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="629"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem isSeparatorItem="YES" id="452"/>
-                            <menuItem title="^IDS_EMAIL_PAGE_LOCATION_MAC" tag="35006" keyEquivalent="I" id="451">
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="668"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem isSeparatorItem="YES" id="74"/>
-                            <menuItem title="^IDS_PRINT" tag="35003" keyEquivalent="p" id="78">
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="645"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_PRINT_USING_SYSTEM_DIALOG_MAC" tag="35007" alternate="YES" keyEquivalent="p" id="694">
-                                <modifierMask key="keyEquivalentModifierMask" option="YES" command="YES"/>
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="695"/>
-                                </connections>
-                            </menuItem>
-                        </items>
-                    </menu>
-                </menuItem>
-                <menuItem title="^IDS_EDIT_MENU_MAC" tag="36004" id="217">
-                    <modifierMask key="keyEquivalentModifierMask"/>
-                    <menu key="submenu" title="^IDS_EDIT_MENU_MAC" id="205">
-                        <items>
-                            <menuItem title="^IDS_EDIT_UNDO_MAC" tag="50144" keyEquivalent="z" id="207">
-                                <connections>
-                                    <action selector="undo:" target="-1" id="223"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_EDIT_REDO_MAC" tag="50145" keyEquivalent="Z" id="215">
-                                <modifierMask key="keyEquivalentModifierMask" shift="YES" command="YES"/>
-                                <connections>
-                                    <action selector="redo:" target="-1" id="231"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem isSeparatorItem="YES" id="206"/>
-                            <menuItem title="^IDS_CUT_MAC" tag="50141" keyEquivalent="x" id="199">
-                                <connections>
-                                    <action selector="cut:" target="-1" id="228"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_COPY_MAC" tag="50140" keyEquivalent="c" id="197">
-                                <connections>
-                                    <action selector="copy:" target="-1" id="224"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_PASTE_MAC" tag="50142" keyEquivalent="v" id="203">
-                                <connections>
-                                    <action selector="paste:" target="-1" id="226"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_PASTE_MATCH_STYLE_MAC" tag="50147" keyEquivalent="V" id="658">
-                                <connections>
-                                    <action selector="pasteAndMatchStyle:" target="-1" id="696"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_PASTE_MATCH_STYLE_MAC" alternate="YES" keyEquivalent="V" id="689">
-                                <modifierMask key="keyEquivalentModifierMask" option="YES" command="YES"/>
-                                <connections>
-                                    <action selector="pasteAndMatchStyle:" target="-1" id="697"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_EDIT_DELETE_MAC" tag="50143" id="202">
-                                <modifierMask key="keyEquivalentModifierMask"/>
-                                <connections>
-                                    <action selector="delete:" target="-1" id="235"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_EDIT_SELECT_ALL_MAC" tag="50146" keyEquivalent="a" id="198">
-                                <connections>
-                                    <action selector="selectAll:" target="-1" id="232"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem isSeparatorItem="YES" id="214"/>
-                            <menuItem title="^IDS_EDIT_FIND_SUBMENU_MAC" tag="37100" id="218">
-                                <modifierMask key="keyEquivalentModifierMask"/>
-                                <menu key="submenu" title="^IDS_EDIT_FIND_SUBMENU_MAC" id="220">
-                                    <items>
-                                        <menuItem title="^IDS_EDIT_SEARCH_WEB_MAC" tag="39002" keyEquivalent="f" id="670">
-                                            <modifierMask key="keyEquivalentModifierMask" option="YES" command="YES"/>
-                                            <connections>
-                                                <action selector="commandDispatch:" target="-1" id="671"/>
-                                            </connections>
-                                        </menuItem>
-                                        <menuItem isSeparatorItem="YES" id="669"/>
-                                        <menuItem title="^IDS_EDIT_FIND_MAC" tag="37000" keyEquivalent="f" id="209">
-                                            <connections>
-                                                <action selector="commandDispatch:" target="-1" id="535"/>
-                                            </connections>
-                                        </menuItem>
-                                        <menuItem title="^IDS_EDIT_FIND_NEXT_MAC" tag="37001" keyEquivalent="g" id="208">
-                                            <connections>
-                                                <action selector="commandDispatch:" target="-1" id="536"/>
-                                            </connections>
-                                        </menuItem>
-                                        <menuItem title="^IDS_EDIT_FIND_PREVIOUS_MAC" tag="37002" keyEquivalent="G" id="213">
-                                            <modifierMask key="keyEquivalentModifierMask" shift="YES" command="YES"/>
-                                            <connections>
-                                                <action selector="commandDispatch:" target="-1" id="537"/>
-                                            </connections>
-                                        </menuItem>
-                                        <menuItem title="^IDS_EDIT_USE_SELECTION_MAC" keyEquivalent="e" id="221">
-                                            <connections>
-                                                <action selector="copyToFindPboard:" target="-1" id="646"/>
-                                            </connections>
-                                        </menuItem>
-                                        <menuItem title="^IDS_EDIT_JUMP_TO_SELECTION_MAC" keyEquivalent="j" id="210">
-                                            <connections>
-                                                <action selector="centerSelectionInVisibleArea:" target="-1" id="245"/>
-                                            </connections>
-                                        </menuItem>
-                                    </items>
-                                </menu>
-                            </menuItem>
-                            <menuItem title="^IDS_EDIT_SPELLING_GRAMMAR_MAC" tag="41005" id="216">
-                                <modifierMask key="keyEquivalentModifierMask"/>
-                                <menu key="submenu" title="^IDS_EDIT_SPELLING_GRAMMAR_MAC" id="200">
-                                    <items>
-                                        <menuItem title="^IDS_EDIT_SHOW_SPELLING_GRAMMAR_MAC" keyEquivalent=":" id="204">
-                                            <connections>
-                                                <action selector="showGuessPanel:" target="-1" id="230"/>
-                                            </connections>
-                                        </menuItem>
-                                        <menuItem title="^IDS_EDIT_CHECK_DOCUMENT_MAC" keyEquivalent=";" id="201">
-                                            <connections>
-                                                <action selector="checkSpelling:" target="-1" id="225"/>
-                                            </connections>
-                                        </menuItem>
-                                        <menuItem title="^IDS_EDIT_CHECK_SPELLING_TYPING_MAC" id="219">
-                                            <modifierMask key="keyEquivalentModifierMask"/>
-                                            <connections>
-                                                <action selector="toggleContinuousSpellChecking:" target="-1" id="222"/>
-                                            </connections>
-                                        </menuItem>
-                                        <menuItem title="^IDS_EDIT_CHECK_GRAMMAR_MAC" id="346">
-                                            <modifierMask key="keyEquivalentModifierMask"/>
-                                            <connections>
-                                                <action selector="toggleGrammarChecking:" target="-1" id="347"/>
-                                            </connections>
-                                        </menuItem>
-                                    </items>
-                                </menu>
-                            </menuItem>
-                            <menuItem title="^IDS_SPEECH_MAC" tag="50158" id="700">
-                                <modifierMask key="keyEquivalentModifierMask"/>
-                                <menu key="submenu" title="^IDS_SPEECH_MAC" id="701">
-                                    <items>
-                                        <menuItem title="^IDS_SPEECH_START_SPEAKING_MAC" id="705">
-                                            <modifierMask key="keyEquivalentModifierMask"/>
-                                            <connections>
-                                                <action selector="startSpeaking:" target="-1" id="710"/>
-                                            </connections>
-                                        </menuItem>
-                                        <menuItem title="^IDS_SPEECH_STOP_SPEAKING_MAC" id="702">
-                                            <modifierMask key="keyEquivalentModifierMask"/>
-                                            <connections>
-                                                <action selector="stopSpeaking:" target="-1" id="711"/>
-                                            </connections>
-                                        </menuItem>
-                                    </items>
-                                </menu>
-                            </menuItem>
-                        </items>
-                    </menu>
-                </menuItem>
-                <menuItem title="^IDS_VIEW_MENU_MAC" tag="44000" id="295">
-                    <modifierMask key="keyEquivalentModifierMask"/>
-                    <menu key="submenu" title="^IDS_VIEW_MENU_MAC" id="296">
-                        <items>
-                            <menuItem title="^IDS_BOOKMARK_BAR_ALWAYS_SHOW_MAC" tag="40009" keyEquivalent="B" id="297">
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="531"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_TOGGLE_FULLSCREEN_TOOLBAR_MAC" tag="40251" keyEquivalent="F" id="70p-NK-bpU">
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="0A7-Iy-65Q"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem isSeparatorItem="YES" id="538"/>
-                            <menuItem title="^IDS_STOP_MENU_MAC" tag="33006" keyEquivalent="." id="539">
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="542"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_RELOAD_MENU_MAC" tag="33002" keyEquivalent="r" id="540">
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="543"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_RELOAD_IGNORING_CACHE_MENU_MAC" tag="33007" alternate="YES" keyEquivalent="R" id="676">
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="677"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem isSeparatorItem="YES" id="457"/>
-                            <menuItem title="^IDS_ENTER_PRESENTATION_MAC" tag="34039" keyEquivalent="F" id="541">
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="630"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_ENTER_FULLSCREEN_MAC" tag="34030" keyEquivalent="f" id="692">
-                                <modifierMask key="keyEquivalentModifierMask" control="YES" command="YES"/>
-                                <connections>
-                                    <action selector="toggleFullScreen:" target="-1" id="693"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_TEXT_DEFAULT_MAC" tag="38002" keyEquivalent="0" id="460">
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="556"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_TEXT_BIGGER_MAC" tag="38001" keyEquivalent="+" id="458">
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="557"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_TEXT_SMALLER_MAC" tag="38003" keyEquivalent="-" id="459">
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="555"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem isSeparatorItem="YES" id="631"/>
-                            <menuItem title="^IDS_ENCODING_MENU" tag="35005" id="465">
-                                <modifierMask key="keyEquivalentModifierMask"/>
-                                <menu key="submenu" title="^IDS_ENCODING_MENU" id="466"/>
-                            </menuItem>
-                            <menuItem title="^IDS_DEVELOPER_MENU_MAC" id="501">
-                                <modifierMask key="keyEquivalentModifierMask"/>
-                                <menu key="submenu" title="^IDS_DEVELOPER_MENU_MAC" id="502">
-                                    <items>
-                                        <menuItem title="^IDS_VIEW_SOURCE_MAC" tag="35002" keyEquivalent="u" id="503">
-                                            <modifierMask key="keyEquivalentModifierMask" option="YES" command="YES"/>
-                                            <connections>
-                                                <action selector="commandDispatch:" target="-1" id="558"/>
-                                            </connections>
-                                        </menuItem>
-                                        <menuItem title="^IDS_DEV_TOOLS_MAC" tag="40004" keyEquivalent="i" id="634">
-                                            <modifierMask key="keyEquivalentModifierMask" option="YES" command="YES"/>
-                                            <connections>
-                                                <action selector="commandDispatch:" target="-1" id="635"/>
-                                            </connections>
-                                        </menuItem>
-                                        <menuItem title="^IDS_DEV_TOOLS_CONSOLE_MAC" tag="40005" keyEquivalent="j" id="656">
-                                            <modifierMask key="keyEquivalentModifierMask" option="YES" command="YES"/>
-                                            <connections>
-                                                <action selector="commandDispatch:" target="-1" id="657"/>
-                                            </connections>
-                                        </menuItem>
-                                    </items>
-                                </menu>
-                            </menuItem>
-                        </items>
-                    </menu>
-                </menuItem>
-                <menuItem title="^IDS_HISTORY_MENU_MAC" tag="46000" id="514">
-                    <modifierMask key="keyEquivalentModifierMask"/>
-                    <menu key="submenu" title="^IDS_HISTORY_MENU_MAC" id="515">
-                        <items>
-                            <menuItem title="^IDS_HISTORY_HOME_MAC" tag="33003" keyEquivalent="H" id="519">
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="524"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_HISTORY_BACK_MAC" tag="33000" keyEquivalent="[" id="516">
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="522"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_HISTORY_FORWARD_MAC" tag="33001" keyEquivalent="]" id="518">
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="523"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem isSeparatorItem="YES" tag="400" id="639"/>
-                            <menuItem title="^IDS_HISTORY_CLOSED_MAC" tag="401" enabled="NO" id="640">
-                                <modifierMask key="keyEquivalentModifierMask"/>
-                            </menuItem>
-                            <menuItem isSeparatorItem="YES" tag="440" id="520"/>
-                            <menuItem title="^IDS_HISTORY_VISITED_MAC" tag="441" enabled="NO" id="521">
-                                <modifierMask key="keyEquivalentModifierMask"/>
-                            </menuItem>
-                            <menuItem isSeparatorItem="YES" tag="480" id="545"/>
-                            <menuItem title="^IDS_HISTORY_SHOWFULLHISTORY_LINK" tag="40010" keyEquivalent="y" id="544">
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="549"/>
-                                </connections>
-                            </menuItem>
-                        </items>
-                    </menu>
-                </menuItem>
-                <menuItem title="^IDS_BOOKMARKS_MENU" tag="40029" id="473">
-                    <modifierMask key="keyEquivalentModifierMask"/>
-                    <menu key="submenu" title="^IDS_BOOKMARKS_MENU" id="497">
-                        <items>
-                            <menuItem title="^IDS_BOOKMARK_MANAGER" tag="40011" keyEquivalent="b" id="672">
-                                <modifierMask key="keyEquivalentModifierMask" option="YES" command="YES"/>
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="673"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem isSeparatorItem="YES" tag="35000" id="674"/>
-                            <menuItem title="^IDS_BOOKMARK_THIS_PAGE" tag="35000" keyEquivalent="d" id="504">
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="532"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_BOOKMARK_ALL_TABS_MAC" tag="35001" keyEquivalent="D" id="652">
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="653"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem isSeparatorItem="YES" tag="35000" id="505"/>
-                        </items>
-                    </menu>
-                </menuItem>
-                <menuItem title="^IDS_PROFILES_OPTIONS_GROUP_NAME" tag="46100" id="691">
-                    <modifierMask key="keyEquivalentModifierMask"/>
-                </menuItem>
-                <menuItem title="^IDS_WINDOW_MENU_MAC" tag="34045" id="19">
-                    <modifierMask key="keyEquivalentModifierMask"/>
-                    <menu key="submenu" title="^IDS_WINDOW_MENU_MAC" systemMenu="window" id="24">
-                        <items>
-                            <menuItem title="^IDS_MINIMIZE_WINDOW_MAC" tag="34046" keyEquivalent="m" id="23">
-                                <connections>
-                                    <action selector="performMiniaturize:" target="-1" id="37"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_ZOOM_WINDOW_MAC" tag="34047" id="239">
-                                <modifierMask key="keyEquivalentModifierMask"/>
-                                <connections>
-                                    <action selector="performZoom:" target="-1" id="240"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem isSeparatorItem="YES" id="453"/>
-                            <menuItem title="^IDS_NEXT_TAB_MAC" tag="34016" keyEquivalent="" id="455">
-                                <modifierMask key="keyEquivalentModifierMask" option="YES" command="YES"/>
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="529"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_PREV_TAB_MAC" tag="34017" keyEquivalent="" id="454">
-                                <modifierMask key="keyEquivalentModifierMask" option="YES" command="YES"/>
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="530"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_SHOW_AS_TAB" tag="34029" id="470">
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="559"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem isSeparatorItem="YES" id="551"/>
-                            <menuItem title="^IDS_SHOW_DOWNLOADS_MAC" tag="40012" keyEquivalent="J" id="550">
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="552"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_SHOW_EXTENSIONS_MAC" tag="40022" id="660">
-                                <modifierMask key="keyEquivalentModifierMask"/>
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="661"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_TASK_MANAGER_MAC" tag="40006" id="636">
-                                <modifierMask key="keyEquivalentModifierMask"/>
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="675"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem isSeparatorItem="YES" id="92"/>
-                            <menuItem title="^IDS_ALL_WINDOWS_FRONT_MAC" tag="34048" id="5">
-                                <modifierMask key="keyEquivalentModifierMask"/>
-                                <connections>
-                                    <action selector="arrangeInFront:" target="-1" id="39"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem isSeparatorItem="YES" id="456"/>
-                        </items>
-                    </menu>
-                </menuItem>
-                <menuItem title="^IDS_HELP_MENU_MAC" id="103">
-                    <modifierMask key="keyEquivalentModifierMask"/>
-                    <menu key="submenu" title="^IDS_HELP_MENU_MAC" id="106">
-                        <items>
-                            <menuItem title="^IDS_FEEDBACK_MAC" tag="40008" id="111">
-                                <modifierMask key="keyEquivalentModifierMask"/>
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="655"/>
-                                </connections>
-                            </menuItem>
-                            <menuItem title="^IDS_HELP_MAC$IDS_PRODUCT_NAME" tag="40020" keyEquivalent="?" id="648">
-                                <connections>
-                                    <action selector="commandDispatch:" target="-1" id="651"/>
-                                </connections>
-                            </menuItem>
-                        </items>
-                    </menu>
-                </menuItem>
-                <menuItem title="Item" id="PoF-z7-3yH">
-                    <modifierMask key="keyEquivalentModifierMask"/>
-                </menuItem>
-            </items>
-        </menu>
-        <customObject id="641" customClass="ChromeUILocalizer">
-            <connections>
-                <outlet property="owner_" destination="-2" id="642"/>
-            </connections>
-        </customObject>
-        <customObject id="483" customClass="AppController">
-            <connections>
-                <outlet property="closeTabMenuItem_" destination="450" id="623"/>
-                <outlet property="closeWindowMenuItem_" destination="73" id="622"/>
-                <outlet property="helpMenu_" destination="106" id="667"/>
-            </connections>
-        </customObject>
-    </objects>
-</document>
+<?xml version="1.0" encoding="UTF-8"?>
+<archive type="com.apple.InterfaceBuilder3.Cocoa.XIB" version="8.00">
+	<data>
+		<int key="IBDocument.SystemTarget">1050</int>
+		<string key="IBDocument.SystemVersion">14B25</string>
+		<string key="IBDocument.InterfaceBuilderVersion">7702</string>
+		<string key="IBDocument.AppKitVersion">1343.16</string>
+		<string key="IBDocument.HIToolboxVersion">755.00</string>
+		<object class="NSMutableDictionary" key="IBDocument.PluginVersions">
+			<string key="NS.key.0">com.apple.InterfaceBuilder.CocoaPlugin</string>
+			<string key="NS.object.0">7702</string>
+		</object>
+		<array key="IBDocument.IntegratedClassDependencies">
+			<string>NSCustomObject</string>
+			<string>NSMenu</string>
+			<string>NSMenuItem</string>
+		</array>
+		<array key="IBDocument.PluginDependencies">
+			<string>com.apple.InterfaceBuilder.CocoaPlugin</string>
+		</array>
+		<object class="NSMutableDictionary" key="IBDocument.Metadata">
+			<string key="NS.key.0">PluginDependencyRecalculationVersion</string>
+			<integer value="1" key="NS.object.0"/>
+		</object>
+		<array class="NSMutableArray" key="IBDocument.RootObjects" id="836052007">
+			<object class="NSCustomObject" id="798378601">
+				<string key="NSClassName">BrowserCrApplication</string>
+			</object>
+			<object class="NSCustomObject" id="653827613">
+				<string key="NSClassName">FirstResponder</string>
+			</object>
+			<object class="NSCustomObject" id="1064981699">
+				<string key="NSClassName">BrowserCrApplication</string>
+			</object>
+			<object class="NSCustomObject" id="626033371">
+				<string key="NSClassName">NSFontManager</string>
+			</object>
+			<object class="NSMenu" id="6368794">
+				<string key="NSTitle">AMainMenu</string>
+				<array class="NSMutableArray" key="NSMenuItems">
+					<object class="NSMenuItem" id="533732529">
+						<reference key="NSMenu" ref="6368794"/>
+						<string key="NSTitle">^IDS_APP_MENU_PRODUCT_NAME</string>
+						<string key="NSKeyEquiv"/>
+						<int key="NSMnemonicLoc">2147483647</int>
+						<object class="NSCustomResource" key="NSOnImage" id="657443692">
+							<string key="NSClassName">NSImage</string>
+							<string key="NSResourceName">NSMenuCheckmark</string>
+						</object>
+						<object class="NSCustomResource" key="NSMixedImage" id="5855623">
+							<string key="NSClassName">NSImage</string>
+							<string key="NSResourceName">NSMenuMixedState</string>
+						</object>
+						<string key="NSAction">submenuAction:</string>
+						<int key="NSTag">44002</int>
+						<reference key="NSTarget" ref="219856472"/>
+						<object class="NSMenu" key="NSSubmenu" id="219856472">
+							<string key="NSTitle">^IDS_APP_MENU_PRODUCT_NAME</string>
+							<array class="NSMutableArray" key="NSMenuItems">
+								<object class="NSMenuItem" id="29396455">
+									<reference key="NSMenu" ref="219856472"/>
+									<string key="NSTitle">^IDS_ABOUT_MAC$IDS_PRODUCT_NAME</string>
+									<string key="NSKeyEquiv"/>
+									<int key="NSMnemonicLoc">2147483647</int>
+									<reference key="NSOnImage" ref="657443692"/>
+									<reference key="NSMixedImage" ref="5855623"/>
+									<int key="NSTag">40018</int>
+								</object>
+								<object class="NSMenuItem" id="685089149">
+									<reference key="NSMenu" ref="219856472"/>
+									<string key="NSTitle">^IDS_HIDE_APP_MAC$IDS_PRODUCT_NAME</string>
+									<string key="NSKeyEquiv">h</string>
+									<int key="NSKeyEquivModMask">1048576</int>
+									<int key="NSMnemonicLoc">2147483647</int>
+									<reference key="NSOnImage" ref="657443692"/>
+									<reference key="NSMixedImage" ref="5855623"/>
+									<int key="NSTag">44003</int>
+								</object>
+								<object class="NSMenuItem" id="412509637">
+									<reference key="NSMenu" ref="219856472"/>
+									<string key="NSTitle">^IDS_HIDE_OTHERS_MAC</string>
+									<string key="NSKeyEquiv">h</string>
+									<int key="NSKeyEquivModMask">1572864</int>
+									<int key="NSMnemonicLoc">2147483647</int>
+									<reference key="NSOnImage" ref="657443692"/>
+									<reference key="NSMixedImage" ref="5855623"/>
+								</object>
+								<object class="NSMenuItem" id="985962037">
+									<reference key="NSMenu" ref="219856472"/>
+									<string key="NSTitle">^IDS_SHOW_ALL_MAC</string>
+									<string key="NSKeyEquiv"/>
+									<int key="NSMnemonicLoc">2147483647</int>
+									<reference key="NSOnImage" ref="657443692"/>
+									<reference key="NSMixedImage" ref="5855623"/>
+								</object>
+								<object class="NSMenuItem" id="522239686">
+									<reference key="NSMenu" ref="219856472"/>
+									<bool key="NSIsDisabled">YES</bool>
+									<bool key="NSIsSeparator">YES</bool>
+									<string key="NSTitle"/>
+									<string key="NSKeyEquiv"/>
+									<int key="NSMnemonicLoc">2147483647</int>
+									<reference key="NSOnImage" ref="657443692"/>
+									<reference key="NSMixedImage" ref="5855623"/>
+								</object>
+								<object class="NSMenuItem" id="786465503">
+									<reference key="NSMenu" ref="219856472"/>
+									<string key="NSTitle">^IDS_CONFIRM_TO_QUIT_OPTION</string>
+									<string key="NSKeyEquiv"/>
+									<int key="NSMnemonicLoc">2147483647</int>
+									<reference key="NSOnImage" ref="657443692"/>
+									<reference key="NSMixedImage" ref="5855623"/>
+								</object>
+								<object class="NSMenuItem" id="152594902">
+									<reference key="NSMenu" ref="219856472"/>
+									<bool key="NSIsDisabled">YES</bool>
+									<bool key="NSIsSeparator">YES</bool>
+									<string key="NSTitle"/>
+									<string key="NSKeyEquiv"/>
+									<int key="NSMnemonicLoc">2147483647</int>
+									<reference key="NSOnImage" ref="657443692"/>
+									<reference key="NSMixedImage" ref="5855623"/>
+								</object>
+								<object class="NSMenuItem" id="466397262">
+									<reference key="NSMenu" ref="219856472"/>
+									<string key="NSTitle">^IDS_EXIT_MAC$IDS_PRODUCT_NAME</string>
+									<string key="NSKeyEquiv">q</string>
+									<int key="NSKeyEquivModMask">1048576</int>
+									<int key="NSMnemonicLoc">2147483647</int>
+									<reference key="NSOnImage" ref="657443692"/>
+									<reference key="NSMixedImage" ref="5855623"/>
+									<int key="NSTag">34031</int>
+								</object>
+							</array>
+							<string key="NSName">_NSAppleMenu</string>
+						</object>
+					</object>
+					<object class="NSMenuItem" id="334707299">
+						<reference key="NSMenu" ref="6368794"/>
+						<string key="NSTitle">^IDS_EDIT_MENU_MAC</string>
+						<string key="NSKeyEquiv"/>
+						<int key="NSMnemonicLoc">2147483647</int>
+						<reference key="NSOnImage" ref="657443692"/>
+						<reference key="NSMixedImage" ref="5855623"/>
+						<string key="NSAction">submenuAction:</string>
+						<int key="NSTag">36004</int>
+						<reference key="NSTarget" ref="586765401"/>
+						<object class="NSMenu" key="NSSubmenu" id="586765401">
+							<string key="NSTitle">^IDS_EDIT_MENU_MAC</string>
+							<array class="NSMutableArray" key="NSMenuItems">
+								<object class="NSMenuItem" id="739357982">
+									<reference key="NSMenu" ref="586765401"/>
+									<string key="NSTitle">^IDS_EDIT_UNDO_MAC</string>
+									<string key="NSKeyEquiv">z</string>
+									<int key="NSKeyEquivModMask">1048576</int>
+									<int key="NSMnemonicLoc">2147483647</int>
+									<reference key="NSOnImage" ref="657443692"/>
+									<reference key="NSMixedImage" ref="5855623"/>
+									<int key="NSTag">50144</int>
+								</object>
+								<object class="NSMenuItem" id="813269032">
+									<reference key="NSMenu" ref="586765401"/>
+									<string key="NSTitle">^IDS_EDIT_REDO_MAC</string>
+									<string key="NSKeyEquiv">Z</string>
+									<int key="NSKeyEquivModMask">1179648</int>
+									<int key="NSMnemonicLoc">2147483647</int>
+									<reference key="NSOnImage" ref="657443692"/>
+									<reference key="NSMixedImage" ref="5855623"/>
+									<int key="NSTag">50145</int>
+								</object>
+								<object class="NSMenuItem" id="93452865">
+									<reference key="NSMenu" ref="586765401"/>
+									<bool key="NSIsDisabled">YES</bool>
+									<bool key="NSIsSeparator">YES</bool>
+									<string key="NSTitle"/>
+									<string key="NSKeyEquiv"/>
+									<int key="NSMnemonicLoc">2147483647</int>
+									<reference key="NSOnImage" ref="657443692"/>
+									<reference key="NSMixedImage" ref="5855623"/>
+								</object>
+								<object class="NSMenuItem" id="148113284">
+									<reference key="NSMenu" ref="586765401"/>
+									<string key="NSTitle">^IDS_CUT_MAC</string>
+									<string key="NSKeyEquiv">x</string>
+									<int key="NSKeyEquivModMask">1048576</int>
+									<int key="NSMnemonicLoc">2147483647</int>
+									<reference key="NSOnImage" ref="657443692"/>
+									<reference key="NSMixedImage" ref="5855623"/>
+									<int key="NSTag">50141</int>
+								</object>
+								<object class="NSMenuItem" id="705656604">
+									<reference key="NSMenu" ref="586765401"/>
+									<string key="NSTitle">^IDS_COPY_MAC</string>
+									<string key="NSKeyEquiv">c</string>
+									<int key="NSKeyEquivModMask">1048576</int>
+									<int key="NSMnemonicLoc">2147483647</int>
+									<reference key="NSOnImage" ref="657443692"/>
+									<reference key="NSMixedImage" ref="5855623"/>
+									<int key="NSTag">50140</int>
+								</object>
+								<object class="NSMenuItem" id="51469823">
+									<reference key="NSMenu" ref="586765401"/>
+									<string key="NSTitle">^IDS_PASTE_MAC</string>
+									<string key="NSKeyEquiv">v</string>
+									<int key="NSKeyEquivModMask">1048576</int>
+									<int key="NSMnemonicLoc">2147483647</int>
+									<reference key="NSOnImage" ref="657443692"/>
+									<reference key="NSMixedImage" ref="5855623"/>
+									<int key="NSTag">50142</int>
+								</object>
+								<object class="NSMenuItem" id="771439649">
+									<reference key="NSMenu" ref="586765401"/>
+									<string key="NSTitle">^IDS_PASTE_MATCH_STYLE_MAC</string>
+									<string key="NSKeyEquiv">V</string>
+									<int key="NSKeyEquivModMask">1048576</int>
+									<int key="NSMnemonicLoc">2147483647</int>
+									<reference key="NSOnImage" ref="657443692"/>
+									<reference key="NSMixedImage" ref="5855623"/>
+									<int key="NSTag">50147</int>
+								</object>
+								<object class="NSMenuItem" id="461542256">
+									<reference key="NSMenu" ref="586765401"/>
+									<bool key="NSIsAlternate">YES</bool>
+									<string key="NSTitle">^IDS_PASTE_MATCH_STYLE_MAC</string>
+									<string key="NSKeyEquiv">V</string>
+									<int key="NSKeyEquivModMask">1572864</int>
+									<int key="NSMnemonicLoc">2147483647</int>
+									<reference key="NSOnImage" ref="657443692"/>
+									<reference key="NSMixedImage" ref="5855623"/>
+								</object>
+								<object class="NSMenuItem" id="339672244">
+									<reference key="NSMenu" ref="586765401"/>
+									<string key="NSTitle">^IDS_EDIT_DELETE_MAC</string>
+									<string key="NSKeyEquiv"/>
+									<int key="NSMnemonicLoc">2147483647</int>
+									<reference key="NSOnImage" ref="657443692"/>
+									<reference key="NSMixedImage" ref="5855623"/>
+									<int key="NSTag">50143</int>
+								</object>
+								<object class="NSMenuItem" id="820121057">
+									<reference key="NSMenu" ref="586765401"/>
+									<string key="NSTitle">^IDS_EDIT_SELECT_ALL_MAC</string>
+									<string key="NSKeyEquiv">a</string>
+									<int key="NSKeyEquivModMask">1048576</int>
+									<int key="NSMnemonicLoc">2147483647</int>
+									<reference key="NSOnImage" ref="657443692"/>
+									<reference key="NSMixedImage" ref="5855623"/>
+									<int key="NSTag">50146</int>
+								</object>
+							</array>
+						</object>
+					</object>
+					<object class="NSMenuItem" id="772963131">
+						<reference key="NSMenu" ref="6368794"/>
+						<string key="NSTitle">^IDS_WINDOW_MENU_MAC</string>
+						<string key="NSKeyEquiv"/>
+						<int key="NSMnemonicLoc">2147483647</int>
+						<reference key="NSOnImage" ref="657443692"/>
+						<reference key="NSMixedImage" ref="5855623"/>
+						<string key="NSAction">submenuAction:</string>
+						<int key="NSTag">34045</int>
+						<reference key="NSTarget" ref="288203421"/>
+						<object class="NSMenu" key="NSSubmenu" id="288203421">
+							<string key="NSTitle">^IDS_WINDOW_MENU_MAC</string>
+							<array class="NSMutableArray" key="NSMenuItems">
+								<object class="NSMenuItem" id="477060316">
+									<reference key="NSMenu" ref="288203421"/>
+									<string key="NSTitle">^IDS_MINIMIZE_WINDOW_MAC</string>
+									<string key="NSKeyEquiv">m</string>
+									<int key="NSKeyEquivModMask">1048576</int>
+									<int key="NSMnemonicLoc">2147483647</int>
+									<reference key="NSOnImage" ref="657443692"/>
+									<reference key="NSMixedImage" ref="5855623"/>
+									<int key="NSTag">34046</int>
+								</object>
+								<object class="NSMenuItem" id="326590258">
+									<reference key="NSMenu" ref="288203421"/>
+									<string key="NSTitle">^IDS_ZOOM_WINDOW_MAC</string>
+									<string key="NSKeyEquiv"/>
+									<int key="NSMnemonicLoc">2147483647</int>
+									<reference key="NSOnImage" ref="657443692"/>
+									<reference key="NSMixedImage" ref="5855623"/>
+									<int key="NSTag">34047</int>
+								</object>
+								<object class="NSMenuItem" id="549471298">
+									<reference key="NSMenu" ref="288203421"/>
+									<string key="NSTitle">^IDS_ALL_WINDOWS_FRONT_MAC</string>
+									<string key="NSKeyEquiv"/>
+									<int key="NSMnemonicLoc">2147483647</int>
+									<reference key="NSOnImage" ref="657443692"/>
+									<reference key="NSMixedImage" ref="5855623"/>
+									<int key="NSTag">34048</int>
+								</object>
+							</array>
+							<string key="NSName">_NSWindowsMenu</string>
+						</object>
+					</object>
+				</array>
+				<string key="NSName">_NSMainMenu</string>
+			</object>
+			<object class="NSCustomObject" id="97842968">
+				<string key="NSClassName">ChromeUILocalizer</string>
+			</object>
+			<object class="NSCustomObject" id="147583806">
+				<string key="NSClassName">AppController</string>
+			</object>
+		</array>
+		<object class="IBObjectContainer" key="IBDocument.Objects">
+			<bool key="usesAutoincrementingIDs">NO</bool>
+			<array key="connectionRecords">
+				<object class="IBConnectionRecord">
+					<object class="IBOutletConnection" key="connection">
+						<string key="label">delegate</string>
+						<reference key="source" ref="1064981699"/>
+						<reference key="destination" ref="147583806"/>
+					</object>
+					<string key="id">485</string>
+				</object>
+				<object class="IBConnectionRecord">
+					<object class="IBActionConnection" key="connection">
+						<string key="label">terminate:</string>
+						<reference key="source" ref="1064981699"/>
+						<reference key="destination" ref="466397262"/>
+					</object>
+					<string key="id">647</string>
+				</object>
+				<object class="IBConnectionRecord">
+					<object class="IBActionConnection" key="connection">
+						<string key="label">hide:</string>
+						<reference key="source" ref="653827613"/>
+						<reference key="destination" ref="685089149"/>
+					</object>
+					<string key="id">369</string>
+				</object>
+				<object class="IBConnectionRecord">
+					<object class="IBActionConnection" key="connection">
+						<string key="label">hideOtherApplications:</string>
+						<reference key="source" ref="653827613"/>
+						<reference key="destination" ref="412509637"/>
+					</object>
+					<string key="id">370</string>
+				</object>
+				<object class="IBConnectionRecord">
+					<object class="IBActionConnection" key="connection">
+						<string key="label">unhideAllApplications:</string>
+						<reference key="source" ref="653827613"/>
+						<reference key="destination" ref="985962037"/>
+					</object>
+					<string key="id">372</string>
+				</object>
+				<object class="IBConnectionRecord">
+					<object class="IBActionConnection" key="connection">
+						<string key="label">undo:</string>
+						<reference key="source" ref="653827613"/>
+						<reference key="destination" ref="739357982"/>
+					</object>
+					<string key="id">223</string>
+				</object>
+				<object class="IBConnectionRecord">
+					<object class="IBActionConnection" key="connection">
+						<string key="label">redo:</string>
+						<reference key="source" ref="653827613"/>
+						<reference key="destination" ref="813269032"/>
+					</object>
+					<string key="id">231</string>
+				</object>
+				<object class="IBConnectionRecord">
+					<object class="IBActionConnection" key="connection">
+						<string key="label">cut:</string>
+						<reference key="source" ref="653827613"/>
+						<reference key="destination" ref="148113284"/>
+					</object>
+					<string key="id">228</string>
+				</object>
+				<object class="IBConnectionRecord">
+					<object class="IBActionConnection" key="connection">
+						<string key="label">copy:</string>
+						<reference key="source" ref="653827613"/>
+						<reference key="destination" ref="705656604"/>
+					</object>
+					<string key="id">224</string>
+				</object>
+				<object class="IBConnectionRecord">
+					<object class="IBActionConnection" key="connection">
+						<string key="label">paste:</string>
+						<reference key="source" ref="653827613"/>
+						<reference key="destination" ref="51469823"/>
+					</object>
+					<string key="id">226</string>
+				</object>
+				<object class="IBConnectionRecord">
+					<object class="IBActionConnection" key="connection">
+						<string key="label">pasteAndMatchStyle:</string>
+						<reference key="source" ref="653827613"/>
+						<reference key="destination" ref="771439649"/>
+					</object>
+					<string key="id">696</string>
+				</object>
+				<object class="IBConnectionRecord">
+					<object class="IBActionConnection" key="connection">
+						<string key="label">pasteAndMatchStyle:</string>
+						<reference key="source" ref="653827613"/>
+						<reference key="destination" ref="461542256"/>
+					</object>
+					<string key="id">697</string>
+				</object>
+				<object class="IBConnectionRecord">
+					<object class="IBActionConnection" key="connection">
+						<string key="label">delete:</string>
+						<reference key="source" ref="653827613"/>
+						<reference key="destination" ref="339672244"/>
+					</object>
+					<string key="id">235</string>
+				</object>
+				<object class="IBConnectionRecord">
+					<object class="IBActionConnection" key="connection">
+						<string key="label">selectAll:</string>
+						<reference key="source" ref="653827613"/>
+						<reference key="destination" ref="820121057"/>
+					</object>
+					<string key="id">232</string>
+				</object>
+				<object class="IBConnectionRecord">
+					<object class="IBActionConnection" key="connection">
+						<string key="label">performMiniaturize:</string>
+						<reference key="source" ref="653827613"/>
+						<reference key="destination" ref="477060316"/>
+					</object>
+					<string key="id">37</string>
+				</object>
+				<object class="IBConnectionRecord">
+					<object class="IBActionConnection" key="connection">
+						<string key="label">performZoom:</string>
+						<reference key="source" ref="653827613"/>
+						<reference key="destination" ref="326590258"/>
+					</object>
+					<string key="id">240</string>
+				</object>
+				<object class="IBConnectionRecord">
+					<object class="IBActionConnection" key="connection">
+						<string key="label">arrangeInFront:</string>
+						<reference key="source" ref="653827613"/>
+						<reference key="destination" ref="549471298"/>
+					</object>
+					<string key="id">39</string>
+				</object>
+				<object class="IBConnectionRecord">
+					<object class="IBActionConnection" key="connection">
+						<string key="label">orderFrontStandardAboutPanel:</string>
+						<reference key="source" ref="147583806"/>
+						<reference key="destination" ref="29396455"/>
+					</object>
+					<string key="id">644</string>
+				</object>
+				<object class="IBConnectionRecord">
+					<object class="IBActionConnection" key="connection">
+						<string key="label">toggleConfirmToQuit:</string>
+						<reference key="source" ref="147583806"/>
+						<reference key="destination" ref="786465503"/>
+					</object>
+					<string key="id">688</string>
+				</object>
+				<object class="IBConnectionRecord">
+					<object class="IBOutletConnection" key="connection">
+						<string key="label">owner_</string>
+						<reference key="source" ref="97842968"/>
+						<reference key="destination" ref="798378601"/>
+					</object>
+					<string key="id">642</string>
+				</object>
+			</array>
+			<object class="IBMutableOrderedSet" key="objectRecords">
+				<array key="orderedObjects">
+					<object class="IBObjectRecord">
+						<string key="id">0</string>
+						<array key="object" id="0"/>
+						<reference key="children" ref="836052007"/>
+						<nil key="parent"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">-2</string>
+						<reference key="object" ref="798378601"/>
+						<reference key="parent" ref="0"/>
+						<string key="objectName">File's Owner</string>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">-1</string>
+						<reference key="object" ref="653827613"/>
+						<reference key="parent" ref="0"/>
+						<string key="objectName">First Responder</string>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">-3</string>
+						<reference key="object" ref="1064981699"/>
+						<reference key="parent" ref="0"/>
+						<string key="objectName">Application</string>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">373</string>
+						<reference key="object" ref="626033371"/>
+						<reference key="parent" ref="0"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">29</string>
+						<reference key="object" ref="6368794"/>
+						<array class="NSMutableArray" key="children">
+							<reference ref="533732529"/>
+							<reference ref="334707299"/>
+							<reference ref="772963131"/>
+						</array>
+						<reference key="parent" ref="0"/>
+						<string key="objectName">Main Menu</string>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">56</string>
+						<reference key="object" ref="533732529"/>
+						<array class="NSMutableArray" key="children">
+							<reference ref="219856472"/>
+						</array>
+						<reference key="parent" ref="6368794"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">57</string>
+						<reference key="object" ref="219856472"/>
+						<array class="NSMutableArray" key="children">
+							<reference ref="29396455"/>
+							<reference ref="685089149"/>
+							<reference ref="412509637"/>
+							<reference ref="985962037"/>
+							<reference ref="522239686"/>
+							<reference ref="786465503"/>
+							<reference ref="152594902"/>
+							<reference ref="466397262"/>
+						</array>
+						<reference key="parent" ref="533732529"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">58</string>
+						<reference key="object" ref="29396455"/>
+						<reference key="parent" ref="219856472"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">134</string>
+						<reference key="object" ref="685089149"/>
+						<reference key="parent" ref="219856472"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">145</string>
+						<reference key="object" ref="412509637"/>
+						<reference key="parent" ref="219856472"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">150</string>
+						<reference key="object" ref="985962037"/>
+						<reference key="parent" ref="219856472"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">149</string>
+						<reference key="object" ref="522239686"/>
+						<reference key="parent" ref="219856472"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">687</string>
+						<reference key="object" ref="786465503"/>
+						<reference key="parent" ref="219856472"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">686</string>
+						<reference key="object" ref="152594902"/>
+						<reference key="parent" ref="219856472"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">136</string>
+						<reference key="object" ref="466397262"/>
+						<reference key="parent" ref="219856472"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">217</string>
+						<reference key="object" ref="334707299"/>
+						<array class="NSMutableArray" key="children">
+							<reference ref="586765401"/>
+						</array>
+						<reference key="parent" ref="6368794"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">205</string>
+						<reference key="object" ref="586765401"/>
+						<array class="NSMutableArray" key="children">
+							<reference ref="739357982"/>
+							<reference ref="813269032"/>
+							<reference ref="93452865"/>
+							<reference ref="148113284"/>
+							<reference ref="705656604"/>
+							<reference ref="51469823"/>
+							<reference ref="771439649"/>
+							<reference ref="461542256"/>
+							<reference ref="339672244"/>
+							<reference ref="820121057"/>
+						</array>
+						<reference key="parent" ref="334707299"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">207</string>
+						<reference key="object" ref="739357982"/>
+						<reference key="parent" ref="586765401"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">215</string>
+						<reference key="object" ref="813269032"/>
+						<reference key="parent" ref="586765401"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">206</string>
+						<reference key="object" ref="93452865"/>
+						<reference key="parent" ref="586765401"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">199</string>
+						<reference key="object" ref="148113284"/>
+						<reference key="parent" ref="586765401"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">197</string>
+						<reference key="object" ref="705656604"/>
+						<reference key="parent" ref="586765401"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">203</string>
+						<reference key="object" ref="51469823"/>
+						<reference key="parent" ref="586765401"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">658</string>
+						<reference key="object" ref="771439649"/>
+						<reference key="parent" ref="586765401"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">689</string>
+						<reference key="object" ref="461542256"/>
+						<reference key="parent" ref="586765401"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">202</string>
+						<reference key="object" ref="339672244"/>
+						<reference key="parent" ref="586765401"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">198</string>
+						<reference key="object" ref="820121057"/>
+						<reference key="parent" ref="586765401"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">19</string>
+						<reference key="object" ref="772963131"/>
+						<array class="NSMutableArray" key="children">
+							<reference ref="288203421"/>
+						</array>
+						<reference key="parent" ref="6368794"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">24</string>
+						<reference key="object" ref="288203421"/>
+						<array class="NSMutableArray" key="children">
+							<reference ref="477060316"/>
+							<reference ref="326590258"/>
+							<reference ref="549471298"/>
+						</array>
+						<reference key="parent" ref="772963131"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">23</string>
+						<reference key="object" ref="477060316"/>
+						<reference key="parent" ref="288203421"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">239</string>
+						<reference key="object" ref="326590258"/>
+						<reference key="parent" ref="288203421"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">5</string>
+						<reference key="object" ref="549471298"/>
+						<reference key="parent" ref="288203421"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">641</string>
+						<reference key="object" ref="97842968"/>
+						<reference key="parent" ref="0"/>
+					</object>
+					<object class="IBObjectRecord">
+						<string key="id">483</string>
+						<reference key="object" ref="147583806"/>
+						<reference key="parent" ref="0"/>
+					</object>
+				</array>
+			</object>
+			<dictionary class="NSMutableDictionary" key="flattenedProperties">
+				<string key="-1.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="-1.showNotes"/>
+				<string key="-2.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="-2.showNotes"/>
+				<string key="-3.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="-3.showNotes"/>
+				<string key="134.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="134.showNotes"/>
+				<string key="136.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="136.showNotes"/>
+				<string key="145.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="145.showNotes"/>
+				<string key="149.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="149.showNotes"/>
+				<string key="150.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="150.showNotes"/>
+				<string key="19.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="19.showNotes"/>
+				<string key="197.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="197.showNotes"/>
+				<string key="198.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="198.showNotes"/>
+				<string key="199.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="199.showNotes"/>
+				<string key="202.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="202.showNotes"/>
+				<string key="203.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="203.showNotes"/>
+				<string key="205.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="205.showNotes"/>
+				<string key="206.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="206.showNotes"/>
+				<string key="207.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="207.showNotes"/>
+				<string key="215.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="215.showNotes"/>
+				<string key="217.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="217.showNotes"/>
+				<string key="23.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="23.showNotes"/>
+				<string key="239.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="239.showNotes"/>
+				<string key="24.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="24.showNotes"/>
+				<string key="29.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="29.showNotes"/>
+				<string key="373.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="373.showNotes"/>
+				<string key="483.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="483.showNotes"/>
+				<string key="5.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="5.showNotes"/>
+				<string key="56.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="56.showNotes"/>
+				<string key="57.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="57.showNotes"/>
+				<string key="58.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="58.showNotes"/>
+				<string key="641.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="641.showNotes"/>
+				<string key="658.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="658.showNotes"/>
+				<string key="686.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="686.showNotes"/>
+				<string key="687.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="687.showNotes"/>
+				<string key="689.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<boolean value="NO" key="689.showNotes"/>
+			</dictionary>
+			<dictionary class="NSMutableDictionary" key="unlocalizedProperties"/>
+			<nil key="activeLocalization"/>
+			<dictionary class="NSMutableDictionary" key="localizations"/>
+			<nil key="sourceID"/>
+		</object>
+		<object class="IBClassDescriber" key="IBDocument.Classes"/>
+		<int key="IBDocument.localizationMode">0</int>
+		<string key="IBDocument.TargetRuntimeIdentifier">IBCocoaFramework</string>
+		<bool key="IBDocument.previouslyAttemptedUpgradeToXcode5">NO</bool>
+		<object class="NSMutableDictionary" key="IBDocument.PluginDeclaredDependencies">
+			<string key="NS.key.0">com.apple.InterfaceBuilder.CocoaPlugin.macosx</string>
+			<real value="1050" key="NS.object.0"/>
+		</object>
+		<object class="NSMutableDictionary" key="IBDocument.PluginDeclaredDevelopmentDependencies">
+			<string key="NS.key.0">com.apple.InterfaceBuilder.CocoaPlugin.InterfaceBuilder3</string>
+			<integer value="4600" key="NS.object.0"/>
+		</object>
+		<bool key="IBDocument.PluginDeclaredDependenciesTrackSystemTargetVersion">YES</bool>
+		<int key="IBDocument.defaultPropertyAccessControl">3</int>
+		<dictionary class="NSMutableDictionary" key="IBDocument.LastKnownImageSizes">
+			<string key="NSMenuCheckmark">{12, 12}</string>
+			<string key="NSMenuMixedState">{10, 2}</string>
+		</dictionary>
+	</data>
+</archive>
+
Only in nw/chromium/chrome/app: nw.dll.manifest
Only in nw/chromium/chrome/app: nw.exe.manifest
diff -r -u --color up/chromium/chrome/app/theme/chromium/BRANDING nw/chromium/chrome/app/theme/chromium/BRANDING
--- up/chromium/chrome/app/theme/chromium/BRANDING	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/app/theme/chromium/BRANDING	2023-02-21 04:37:20.152132376 +0000
@@ -1,7 +1,7 @@
-COMPANY_FULLNAME=The Chromium Authors
-COMPANY_SHORTNAME=The Chromium Authors
-PRODUCT_FULLNAME=Chromium
-PRODUCT_SHORTNAME=Chromium
-PRODUCT_INSTALLER_FULLNAME=Chromium Installer
-PRODUCT_INSTALLER_SHORTNAME=Chromium Installer
+COMPANY_FULLNAME=The NWJS Community
+COMPANY_SHORTNAME=nwjs.io
+PRODUCT_FULLNAME=nwjs
+PRODUCT_SHORTNAME=nwjs
+PRODUCT_INSTALLER_FULLNAME=NWJS Installer
+PRODUCT_INSTALLER_SHORTNAME=NWJS Installer
 COPYRIGHT=Copyright 2015 The Chromium Authors. All rights reserved.
Binary files up/chromium/chrome/app/theme/chromium/mac/app.icns and nw/chromium/chrome/app/theme/chromium/mac/app.icns differ
Binary files up/chromium/chrome/app/theme/chromium/mac/document.icns and nw/chromium/chrome/app/theme/chromium/mac/document.icns differ
Binary files up/chromium/chrome/app/theme/chromium/product_logo_128.png and nw/chromium/chrome/app/theme/chromium/product_logo_128.png differ
Binary files up/chromium/chrome/app/theme/chromium/product_logo_22.png and nw/chromium/chrome/app/theme/chromium/product_logo_22.png differ
Binary files up/chromium/chrome/app/theme/chromium/product_logo_22_mono.png and nw/chromium/chrome/app/theme/chromium/product_logo_22_mono.png differ
Binary files up/chromium/chrome/app/theme/chromium/product_logo_24.png and nw/chromium/chrome/app/theme/chromium/product_logo_24.png differ
Binary files up/chromium/chrome/app/theme/chromium/product_logo_256.png and nw/chromium/chrome/app/theme/chromium/product_logo_256.png differ
Only in nw/chromium/chrome/app/theme/chromium: product_logo_32.xpm
Binary files up/chromium/chrome/app/theme/chromium/product_logo_64.png and nw/chromium/chrome/app/theme/chromium/product_logo_64.png differ
Binary files up/chromium/chrome/app/theme/chromium/win/chromium.ico and nw/chromium/chrome/app/theme/chromium/win/chromium.ico differ
diff -r -u --color up/chromium/chrome/app/theme/theme_resources.grd nw/chromium/chrome/app/theme/theme_resources.grd
--- up/chromium/chrome/app/theme/theme_resources.grd	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/app/theme/theme_resources.grd	2023-02-21 04:37:20.192132766 +0000
@@ -549,7 +549,6 @@
       <if expr="not _google_chrome">
         <structure type="chrome_scaled_image" name="IDR_PRODUCT_LOGO_16" file="chromium/product_logo_16.png" />
         <structure type="chrome_scaled_image" name="IDR_PRODUCT_LOGO_32" file="chromium/product_logo_32.png" />
-        <structure type="chrome_scaled_image" name="IDR_PRODUCT_LOGO_NAME_48" file="chromium/product_logo_name_48.png" />
         <structure type="chrome_scaled_image" name="IDR_PRODUCT_LOGO_WHITE" file="chromium/product_logo_white.png" />
       </if>
       <if expr="_google_chrome">
diff -r -u --color up/chromium/chrome/app/version_assembly/version_assembly_manifest.template nw/chromium/chrome/app/version_assembly/version_assembly_manifest.template
--- up/chromium/chrome/app/version_assembly/version_assembly_manifest.template	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/app/version_assembly/version_assembly_manifest.template	2023-02-21 04:37:20.196132805 +0000
@@ -4,6 +4,6 @@
       name='@MAJOR@.@MINOR@.@BUILD@.@PATCH@'
       version='@MAJOR@.@MINOR@.@BUILD@.@PATCH@'
       type='win32'/>
-  <file name='chrome_elf.dll'/>
+  <file name='nw_elf.dll'/>
   <file name='kasko.dll'/>
-</assembly>
\ No newline at end of file
+</assembly>
diff -r -u --color up/chromium/chrome/app_shim/app_mode-Info.plist nw/chromium/chrome/app_shim/app_mode-Info.plist
--- up/chromium/chrome/app_shim/app_mode-Info.plist	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/app_shim/app_mode-Info.plist	2023-02-21 04:37:20.196132805 +0000
@@ -27,7 +27,7 @@
        <key>CrBundleIdentifier</key>
        <string>@APP_MODE_BROWSER_BUNDLE_ID@</string>
        <key>LSMinimumSystemVersion</key>
-       <string>10.9.0</string>
+       <string>${MACOSX_DEPLOYMENT_TARGET}.0</string>
        <key>NSAppleScriptEnabled</key>
        <true/>
 </dict>
diff -r -u --color up/chromium/chrome/browser/app_controller_mac.mm nw/chromium/chrome/browser/app_controller_mac.mm
--- up/chromium/chrome/browser/app_controller_mac.mm	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/app_controller_mac.mm	2023-02-21 04:37:20.216132999 +0000
@@ -102,6 +102,8 @@
 #include "ui/base/l10n/l10n_util.h"
 #include "ui/base/l10n/l10n_util_mac.h"
 
+#include "content/nw/src/nw_content.h"
+
 using apps::AppShimHandler;
 using apps::ExtensionAppShimHandler;
 using base::UserMetricsAction;
@@ -143,7 +145,7 @@
   }
 
   Browser* browser = chrome::GetLastActiveBrowser();
-  CHECK(browser);
+  //CHECK(browser);
   return browser;
 }
 
@@ -388,7 +390,7 @@
   [self initMenuState];
 
   // Initialize the Profile menu.
-  [self initProfileMenu];
+  //[self initProfileMenu];
 }
 
 - (void)unregisterEventHandlers {
@@ -494,6 +496,9 @@
     return NSTerminateNow;
   }
 
+  if (!AppWindowRegistryUtil::CloseAllAppWindows(true))
+    return NSTerminateCancel;
+
   // Check if the preference is turned on.
   const PrefService* prefs = g_browser_process->local_state();
   if (!prefs->GetBoolean(prefs::kConfirmToQuitEnabled)) {
@@ -676,7 +681,11 @@
 
 - (void)openStartupUrls {
   DCHECK(startupComplete_);
-  [self openUrlsReplacingNTP:startupUrls_];
+  if (startupUrls_.size()) {
+    base::CommandLine::ForCurrentProcess()->AppendArg(startupUrls_[0].spec());
+    base::CommandLine::ForCurrentProcess()->FixOrigArgv4Finder(startupUrls_[0].spec());
+  }
+  //[self openUrlsReplacingNTP:startupUrls_];
   startupUrls_.clear();
 }
 
@@ -738,7 +747,7 @@
 
   // If enabled, keep Chrome alive when apps are open instead of quitting all
   // apps.
-  quitWithAppsController_ = new QuitWithAppsController();
+  // quitWithAppsController_ = new QuitWithAppsController();
 
   // Dynamically update shortcuts for "Close Window" and "Close Tab" menu items.
   [[closeTabMenuItem_ menu] setDelegate:self];
@@ -1178,6 +1187,8 @@
 // browser windows.
 - (BOOL)applicationShouldHandleReopen:(NSApplication*)theApplication
                     hasVisibleWindows:(BOOL)hasVisibleWindows {
+  return nw::ApplicationShouldHandleReopenHook(hasVisibleWindows) ? YES : NO;
+#if 0
   // If the browser is currently trying to quit, don't do anything and return NO
   // to prevent AppKit from doing anything.
   // TODO(rohitrao): Remove this code when http://crbug.com/40861 is resolved.
@@ -1267,6 +1278,7 @@
   // We've handled the reopen event, so return NO to tell AppKit not
   // to do anything.
   return NO;
+#endif
 }
 
 - (void)initMenuState {
@@ -1376,6 +1388,9 @@
     return;
   }
 
+  nw::OSXOpenURLsHook(urls);
+
+#if 0
   Browser* browser = chrome::GetLastActiveBrowser();
   // if no browser window exists then create one with no tabs to be filled in
   if (!browser) {
@@ -1388,6 +1403,7 @@
       chrome::startup::IS_FIRST_RUN : chrome::startup::IS_NOT_FIRST_RUN;
   StartupBrowserCreatorImpl launch(base::FilePath(), dummy, first_run);
   launch.OpenURLsInBrowser(browser, false, urls);
+#endif
 }
 
 - (void)getUrl:(NSAppleEventDescriptor*)event
@@ -1471,6 +1487,7 @@
   if (profilesAdded)
     [dockMenu addItem:[NSMenuItem separatorItem]];
 
+#if 0
   NSString* titleStr = l10n_util::GetNSStringWithFixup(IDS_NEW_WINDOW_MAC);
   base::scoped_nsobject<NSMenuItem> item(
       [[NSMenuItem alloc] initWithTitle:titleStr
@@ -1495,6 +1512,7 @@
     [item setEnabled:[self validateUserInterfaceItem:item]];
     [dockMenu addItem:item];
   }
+#endif
 
   // TODO(rickcam): Mock out BackgroundApplicationListModel, then add unit
   // tests which use the mock in place of the profile-initialized model.
diff -r -u --color up/chromium/chrome/browser/app_icon_win.cc nw/chromium/chrome/browser/app_icon_win.cc
--- up/chromium/chrome/browser/app_icon_win.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/app_icon_win.cc	2023-02-21 04:37:20.216132999 +0000
@@ -4,6 +4,8 @@
 
 #include "chrome/browser/app_icon_win.h"
 
+#include "content/nw/src/nw_content.h"
+
 #include "chrome/app/chrome_dll_resource.h"
 #include "chrome/common/chrome_constants.h"
 #include "third_party/skia/include/core/SkBitmap.h"
@@ -30,6 +32,9 @@
 }  // namespace
 
 HICON GetAppIcon() {
+  HICON ret = nw::GetWindowHIcon();
+  if (ret)
+    return ret;
   // TODO(mgiuca): Use GetAppIconImageFamily/CreateExact instead of LoadIcon, to
   // get correct scaling. (See http://crbug.com/551256)
   const int icon_id = GetAppIconResourceId();
@@ -39,6 +44,9 @@
 }
 
 HICON GetSmallAppIcon() {
+  HICON ret = nw::GetAppHIcon();
+  if (ret)
+    return ret;
   // TODO(mgiuca): Use GetAppIconImageFamily/CreateExact instead of LoadIcon, to
   // get correct scaling. (See http://crbug.com/551256)
   const int icon_id = GetAppIconResourceId();
diff -r -u --color up/chromium/chrome/browser/apps/app_shim/app_shim_handler_mac.cc nw/chromium/chrome/browser/apps/app_shim/app_shim_handler_mac.cc
--- up/chromium/chrome/browser/apps/app_shim/app_shim_handler_mac.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/apps/app_shim/app_shim_handler_mac.cc	2023-02-21 04:37:20.216132999 +0000
@@ -19,13 +19,15 @@
 #include "content/public/browser/notification_registrar.h"
 #include "content/public/browser/notification_service.h"
 
+#include "content/nw/src/nw_content.h"
+
 namespace apps {
 
 namespace {
 
 void TerminateIfNoAppWindows() {
   bool app_windows_left =
-      AppWindowRegistryUtil::IsAppWindowVisibleInAnyProfile(0);
+    AppWindowRegistryUtil::IsAppWindowVisibleInAnyProfile(0, false);
   if (!app_windows_left && !AppListService::Get()->IsAppListVisible()) {
     chrome::AttemptExit();
   }
@@ -61,7 +63,8 @@
   }
 
   void MaybeTerminate() {
-    if (!browser_session_running_) {
+    if (!nw::IsReloadingApp()) {
+      //NW: #4164. browser_session_running_ never set to false
       // Post this to give AppWindows a chance to remove themselves from the
       // registry.
       base::MessageLoop::current()->PostTask(
diff -r -u --color up/chromium/chrome/browser/apps/app_shim/extension_app_shim_handler_mac.cc nw/chromium/chrome/browser/apps/app_shim/extension_app_shim_handler_mac.cc
--- up/chromium/chrome/browser/apps/app_shim/extension_app_shim_handler_mac.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/apps/app_shim/extension_app_shim_handler_mac.cc	2023-02-21 04:37:20.216132999 +0000
@@ -322,7 +322,7 @@
 }
 
 // static
-void ExtensionAppShimHandler::QuitAppForWindow(AppWindow* app_window) {
+void ExtensionAppShimHandler::QuitAppForWindow(AppWindow* app_window, bool user_force) {
   ExtensionAppShimHandler* handler = GetInstance();
   Host* host = handler->FindHost(
       Profile::FromBrowserContext(app_window->browser_context()),
@@ -333,7 +333,7 @@
     // App shims might be disabled or the shim is still starting up.
     AppWindowRegistry::Get(
         Profile::FromBrowserContext(app_window->browser_context()))
-        ->CloseAllAppWindowsForApp(app_window->extension_id());
+      ->CloseAllAppWindowsForApp(app_window->extension_id(), user_force);
   }
 }
 
@@ -638,7 +638,8 @@
     const AppWindowList windows = delegate_->GetWindows(profile, app_id);
     for (AppWindowRegistry::const_iterator it = windows.begin();
          it != windows.end(); ++it) {
-      (*it)->GetBaseWindow()->Close();
+      if ((*it)->NWCanClose())
+        (*it)->GetBaseWindow()->Close();
     }
   }
   // Once the last window closes, flow will end up in OnAppDeactivated via
diff -r -u --color up/chromium/chrome/browser/apps/app_shim/extension_app_shim_handler_mac.h nw/chromium/chrome/browser/apps/app_shim/extension_app_shim_handler_mac.h
--- up/chromium/chrome/browser/apps/app_shim/extension_app_shim_handler_mac.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/apps/app_shim/extension_app_shim_handler_mac.h	2023-02-21 04:37:20.216132999 +0000
@@ -93,7 +93,7 @@
 
   static const extensions::Extension* MaybeGetAppForBrowser(Browser* browser);
 
-  static void QuitAppForWindow(extensions::AppWindow* app_window);
+  static void QuitAppForWindow(extensions::AppWindow* app_window, bool user_force = false);
 
   static void QuitHostedAppForWindow(Profile* profile,
                                      const std::string& app_id);
diff -r -u --color up/chromium/chrome/browser/apps/app_window_registry_util.cc nw/chromium/chrome/browser/apps/app_window_registry_util.cc
--- up/chromium/chrome/browser/apps/app_window_registry_util.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/apps/app_window_registry_util.cc	2023-02-21 04:37:20.216132999 +0000
@@ -42,7 +42,7 @@
 
 // static
 bool AppWindowRegistryUtil::IsAppWindowVisibleInAnyProfile(
-    int window_type_mask) {
+                                                           int window_type_mask, bool check_visible) {
   std::vector<Profile*> profiles =
       g_browser_process->profile_manager()->GetLoadedProfiles();
   for (std::vector<Profile*>::const_iterator i = profiles.begin();
@@ -58,7 +58,7 @@
       continue;
 
     for (const AppWindow* window : app_windows) {
-      if (!window->is_hidden() &&
+      if ((!window->is_hidden() || !check_visible )&&
           (window_type_mask == 0 ||
            (window->window_type() & window_type_mask)))
         return true;
@@ -69,7 +69,7 @@
 }
 
 // static
-void AppWindowRegistryUtil::CloseAllAppWindows() {
+bool AppWindowRegistryUtil::CloseAllAppWindows(bool user_force) {
   std::vector<Profile*> profiles =
       g_browser_process->profile_manager()->GetLoadedProfiles();
   for (std::vector<Profile*>::const_iterator i = profiles.begin();
@@ -87,8 +87,13 @@
       // Ensure window is still valid.
       if (std::find(registry->app_windows().begin(),
                     registry->app_windows().end(),
-                    window) != registry->app_windows().end())
-        window->GetBaseWindow()->Close();
+                    window) != registry->app_windows().end()) {
+        if (window->NWCanClose(user_force))
+          window->GetBaseWindow()->Close();
+        else
+          return false;
+      }
     }
   }
+  return true;
 }
diff -r -u --color up/chromium/chrome/browser/apps/app_window_registry_util.h nw/chromium/chrome/browser/apps/app_window_registry_util.h
--- up/chromium/chrome/browser/apps/app_window_registry_util.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/apps/app_window_registry_util.h	2023-02-21 04:37:20.216132999 +0000
@@ -21,10 +21,10 @@
   // Returns true if the number of visible app windows registered across all
   // browser contexts is non-zero. |window_type_mask| is a bitwise OR filter of
   // AppWindow::WindowType, or 0 for any window type.
-  static bool IsAppWindowVisibleInAnyProfile(int window_type_mask);
+  static bool IsAppWindowVisibleInAnyProfile(int window_type_mask, bool check_visible = true);
 
   // Close all app windows in all profiles.
-  static void CloseAllAppWindows();
+  static bool CloseAllAppWindows(bool user_force = false);
 };
 
 #endif  // CHROME_BROWSER_APPS_APP_WINDOW_REGISTRY_UTIL_H_
diff -r -u --color up/chromium/chrome/browser/apps/guest_view/web_view_browsertest.cc nw/chromium/chrome/browser/apps/guest_view/web_view_browsertest.cc
--- up/chromium/chrome/browser/apps/guest_view/web_view_browsertest.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/apps/guest_view/web_view_browsertest.cc	2023-02-21 04:37:20.220133038 +0000
@@ -2240,6 +2240,14 @@
           << message_;
 }
 
+// Regression test for https://crbug.com/615429.
+IN_PROC_BROWSER_TEST_P(WebViewTest, ClearDataTwice) {
+  ASSERT_TRUE(StartEmbeddedTestServer());  // For serving guest pages.
+  ASSERT_TRUE(RunPlatformAppTestWithArg("platform_apps/web_view/common",
+                                        "cleardata_twice"))
+      << message_;
+}
+
 #if defined(OS_WIN)
 // Test is disabled on Windows because it fails often (~9% time)
 // http://crbug.com/489088
diff -r -u --color up/chromium/chrome/browser/background/background_application_list_model.cc nw/chromium/chrome/browser/background/background_application_list_model.cc
--- up/chromium/chrome/browser/background/background_application_list_model.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/background/background_application_list_model.cc	2023-02-21 04:37:20.220133038 +0000
@@ -264,8 +264,10 @@
   //    manifest.
 
   // Not a background app if we don't have the background permission.
+  // NWJS: nwjs_default_app is listed as background app and prevents
+  // quit so we need to disable it here
   if (!extension.permissions_data()->HasAPIPermission(
-          APIPermission::kBackground)) {
+       APIPermission::kBackground, true)) {
     return false;
   }
 
diff -r -u --color up/chromium/chrome/browser/browser_process.h nw/chromium/chrome/browser/browser_process.h
--- up/chromium/chrome/browser/browser_process.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/browser_process.h	2023-02-21 04:37:20.228133116 +0000
@@ -237,6 +237,7 @@
 
   virtual net_log::ChromeNetLog* net_log() = 0;
 
+#if 0
   virtual component_updater::ComponentUpdateService* component_updater() = 0;
 
   virtual CRLSetFetcher* crl_set_fetcher() = 0;
@@ -246,7 +247,7 @@
 
   virtual component_updater::SupervisedUserWhitelistInstaller*
   supervised_user_whitelist_installer() = 0;
-
+#endif
   virtual MediaFileSystemRegistry* media_file_system_registry() = 0;
 
   virtual bool created_local_state() const = 0;
diff -r -u --color up/chromium/chrome/browser/browser_process_impl.cc nw/chromium/chrome/browser/browser_process_impl.cc
--- up/chromium/chrome/browser/browser_process_impl.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/browser_process_impl.cc	2023-02-21 04:37:20.228133116 +0000
@@ -270,8 +270,10 @@
   // URLFetcher operation before going away.)
   metrics_services_manager_.reset();
   intranet_redirect_detector_.reset();
+#if 0
   if (safe_browsing_service_.get())
     safe_browsing_service()->ShutDown();
+#endif
 #if defined(ENABLE_PLUGIN_INSTALLATION)
   plugins_resource_service_.reset();
 #endif
@@ -923,6 +925,7 @@
   return net_log_.get();
 }
 
+#if 0
 component_updater::ComponentUpdateService*
 BrowserProcessImpl::component_updater() {
   if (!component_updater_.get()) {
@@ -939,13 +942,16 @@
   }
   return component_updater_.get();
 }
+#endif
 
+#if 0
 CRLSetFetcher* BrowserProcessImpl::crl_set_fetcher() {
   if (!crl_set_fetcher_)
     crl_set_fetcher_ = new CRLSetFetcher();
   return crl_set_fetcher_.get();
 }
 
+
 component_updater::PnaclComponentInstaller*
 BrowserProcessImpl::pnacl_component_installer() {
 #if !defined(DISABLE_NACL)
@@ -969,6 +975,7 @@
   }
   return supervised_user_whitelist_installer_.get();
 }
+#endif
 
 void BrowserProcessImpl::ResourceDispatcherHostCreated() {
   resource_dispatcher_host_delegate_.reset(
@@ -1168,9 +1175,11 @@
   // Set this flag to true so that we don't retry indefinitely to
   // create the service class if there was an error.
   created_safe_browsing_service_ = true;
+#if 0
   safe_browsing_service_ =
       safe_browsing::SafeBrowsingService::CreateSafeBrowsingService();
   safe_browsing_service_->Initialize();
+#endif
 }
 
 void BrowserProcessImpl::CreateGCMDriver() {
@@ -1239,11 +1248,13 @@
 }
 
 void BrowserProcessImpl::CacheDefaultWebClientState() {
+#if 0
 #if defined(OS_CHROMEOS)
   cached_default_web_client_state_ = shell_integration::IS_DEFAULT;
 #elif !defined(OS_ANDROID)
   cached_default_web_client_state_ = shell_integration::GetDefaultBrowser();
 #endif
+#endif
 }
 
 // Mac is currently not supported.
diff -r -u --color up/chromium/chrome/browser/browser_process_impl.h nw/chromium/chrome/browser/browser_process_impl.h
--- up/chromium/chrome/browser/browser_process_impl.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/browser_process_impl.h	2023-02-21 04:37:20.228133116 +0000
@@ -139,12 +139,14 @@
 #endif
 
   net_log::ChromeNetLog* net_log() override;
+#if 0
   component_updater::ComponentUpdateService* component_updater() override;
   CRLSetFetcher* crl_set_fetcher() override;
   component_updater::PnaclComponentInstaller* pnacl_component_installer()
       override;
   component_updater::SupervisedUserWhitelistInstaller*
   supervised_user_whitelist_installer() override;
+#endif
   MediaFileSystemRegistry* media_file_system_registry() override;
   bool created_local_state() const override;
 #if defined(ENABLE_WEBRTC)
diff -r -u --color up/chromium/chrome/browser/browser_resources.grd nw/chromium/chrome/browser/browser_resources.grd
--- up/chromium/chrome/browser/browser_resources.grd	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/browser_resources.grd	2023-02-21 04:37:20.228133116 +0000
@@ -76,6 +76,7 @@
       <structure name="IDR_READER_OUT_OF_DATE_HTML" file="resources\reader_out_of_date.html" flattenhtml="true" type="chrome_html" />
     </structures>
     <includes>
+      <include name="IDR_NWJS_DEFAPP_MANIFEST" file="resources\nwjs_default_app\manifest.json" type="BINDATA" />
       <if expr="is_win">
         <include name="IDR_ABOUT_CONFLICTS_HTML" file="resources\about_conflicts.html" flattenhtml="true" allowexternalscript="true" type="BINDATA" />
         <include name="IDR_ABOUT_CONFLICTS_JS" file="resources\about_conflicts.js" type="BINDATA" />
diff -r -u --color up/chromium/chrome/browser/browsing_data/browsing_data_remover.cc nw/chromium/chrome/browser/browsing_data/browsing_data_remover.cc
--- up/chromium/chrome/browser/browsing_data/browsing_data_remover.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/browsing_data/browsing_data_remover.cc	2023-02-21 04:37:20.228133116 +0000
@@ -130,6 +130,7 @@
   return g_on_browsing_data_removed_callbacks;
 }
 
+#if !defined(DISABLE_NACL)
 void UIThreadTrampolineHelper(const base::Closure& callback) {
   BrowserThread::PostTask(BrowserThread::UI, FROM_HERE, callback);
 }
@@ -142,6 +143,7 @@
   // task is actually posted.
   return base::Bind(&UIThreadTrampolineHelper, callback);
 }
+#endif
 
 template <typename T>
 void IgnoreArgumentHelper(const base::Closure& callback, T unused_argument) {
@@ -195,6 +197,7 @@
 }
 #endif
 
+#if 0
 void ClearCookiesOnIOThread(base::Time delete_begin,
                             base::Time delete_end,
                             net::URLRequestContextGetter* rq_context,
@@ -205,6 +208,7 @@
   cookie_store->DeleteAllCreatedBetweenAsync(delete_begin, delete_end,
                                              IgnoreArgument<int>(callback));
 }
+#endif
 
 void OnClearedChannelIDsOnIOThread(net::URLRequestContextGetter* rq_context,
                                    const base::Closure& callback) {
@@ -603,6 +607,7 @@
     // doesn't make sense to apply the time period of deleting in the last X
     // hours/days to the safebrowsing cookies since they aren't the result of
     // any user action.
+#if 0
     if (delete_begin_ == base::Time()) {
       safe_browsing::SafeBrowsingService* sb_service =
           g_browser_process->safe_browsing_service();
@@ -619,7 +624,7 @@
                                       weak_ptr_factory_.GetWeakPtr()))));
       }
     }
-
+#endif
     MediaDeviceIDSalt::Reset(profile_->GetPrefs());
   }
 
diff -r -u --color up/chromium/chrome/browser/chrome_browser_main.cc nw/chromium/chrome/browser/chrome_browser_main.cc
--- up/chromium/chrome/browser/chrome_browser_main.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/chrome_browser_main.cc	2023-02-21 04:37:20.236133194 +0000
@@ -6,6 +6,9 @@
 
 #include <stddef.h>
 #include <stdint.h>
+
+#include "content/nw/src/nw_content.h"
+
 #include <set>
 #include <string>
 #include <utility>
@@ -435,6 +438,7 @@
 }
 #endif  // defined(OS_MACOSX)
 
+#if 0
 void RegisterComponentsForUpdate() {
   component_updater::ComponentUpdateService* cus =
       g_browser_process->component_updater();
@@ -492,6 +496,7 @@
   RegisterCAPSComponent(cus);
 #endif  // defined(OS_WIN)
 }
+#endif // disable component updater
 
 #if !defined(OS_ANDROID)
 bool ProcessSingletonNotificationCallback(
@@ -501,6 +506,9 @@
   if (!g_browser_process || g_browser_process->IsShuttingDown())
     return false;
 
+  if (!nw::ProcessSingletonNotificationCallbackHook(command_line, current_directory))
+    return false;
+  
   if (command_line.HasSwitch(switches::kOriginalProcessStartTime)) {
     std::string start_time_string =
         command_line.GetSwitchValueASCII(switches::kOriginalProcessStartTime);
@@ -856,9 +864,13 @@
 
 int ChromeBrowserMainParts::PreCreateThreads() {
   TRACE_EVENT0("startup", "ChromeBrowserMainParts::PreCreateThreads");
+
   result_code_ = PreCreateThreadsImpl();
 
   if (result_code_ == content::RESULT_CODE_NORMAL_EXIT) {
+    result_code_ = nw::MainPartsPreCreateThreadsHook();
+    if (result_code_ != content::RESULT_CODE_NORMAL_EXIT)
+      return result_code_;
 #if !defined(OS_ANDROID)
     // These members must be initialized before exiting this function normally.
     DCHECK(master_prefs_.get());
@@ -1132,6 +1144,8 @@
 
   result_code_ = PreMainMessageLoopRunImpl();
 
+  nw::MainPartsPreMainMessageLoopRunHook();
+
   for (size_t i = 0; i < chrome_extra_parts_.size(); ++i)
     chrome_extra_parts_[i]->PreMainMessageLoopRun();
 }
@@ -1476,7 +1490,7 @@
 #endif  // BUILDFLAG(ENABLE_BACKGROUND)
   // Post-profile init ---------------------------------------------------------
 
-  TranslateService::Initialize();
+  //TranslateService::Initialize();
 
   // Needs to be done before PostProfileInit, since login manager on CrOS is
   // called inside PostProfileInit.
@@ -1657,11 +1671,11 @@
 
   // This must be called prior to RegisterComponentsForUpdate, in case the CLD
   // data source is based on the Component Updater.
-  translate::BrowserCldUtils::ConfigureDefaultDataProvider();
-
+  //translate::BrowserCldUtils::ConfigureDefaultDataProvider();
+#if 0
   if (!parsed_command_line().HasSwitch(switches::kDisableComponentUpdate))
     RegisterComponentsForUpdate();
-
+#endif
 #if defined(OS_ANDROID)
   variations::VariationsService* variations_service =
       browser_process_->variations_service();
@@ -1842,7 +1856,7 @@
   // Some tests don't set parameters.ui_task, so they started translate
   // language fetch that was never completed so we need to cleanup here
   // otherwise it will be done by the destructor in a wrong thread.
-  TranslateService::Shutdown(parameters().ui_task == NULL);
+  //TranslateService::Shutdown(parameters().ui_task == NULL);
 
   if (notify_result_ == ProcessSingleton::PROCESS_NONE)
     process_singleton_->Cleanup();
@@ -1872,6 +1886,7 @@
   process_singleton_.reset();
   device_event_log::Shutdown();
 
+  nw::MainPartsPostDestroyThreadsHook();
   // We need to do this check as late as possible, but due to modularity, this
   // may be the last point in Chrome.  This would be more effective if done at
   // a higher level on the stack, so that it is impossible for an early return
diff -r -u --color up/chromium/chrome/browser/chrome_browser_main_mac.mm nw/chromium/chrome/browser/chrome_browser_main_mac.mm
--- up/chromium/chrome/browser/chrome_browser_main_mac.mm	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/chrome_browser_main_mac.mm	2023-02-21 04:37:20.236133194 +0000
@@ -142,6 +142,7 @@
     }
   }
 
+#if 1
   // Now load the nib (from the right bundle).
   base::scoped_nsobject<NSNib> nib(
       [[NSNib alloc] initWithNibNamed:@"MainMenu"
@@ -149,6 +150,11 @@
   // TODO(viettrungluu): crbug.com/20504 - This currently leaks, so if you
   // change this, you'll probably need to change the Valgrind suppression.
   [nib instantiateNibWithOwner:NSApp topLevelObjects:nil];
+#else
+  AppController* delegate = [AppController alloc];
+  [NSApp setDelegate:delegate];
+#endif
+
   // Make sure the app controller has been created.
   DCHECK([NSApp delegate]);
 
diff -r -u --color up/chromium/chrome/browser/chrome_content_browser_client.cc nw/chromium/chrome/browser/chrome_content_browser_client.cc
--- up/chromium/chrome/browser/chrome_content_browser_client.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/chrome_content_browser_client.cc	2023-02-21 04:37:20.236133194 +0000
@@ -9,6 +9,9 @@
 #include <utility>
 #include <vector>
 
+#include "content/nw/src/common/shell_switches.h"
+#include "content/nw/src/nw_content.h"
+
 #include "base/base_switches.h"
 #include "base/bind.h"
 #include "base/bind_helpers.h"
@@ -509,7 +512,7 @@
   PathService::Get(chrome::DIR_CRASH_DUMPS, &dumps_path);
   {
     ANNOTATE_SCOPED_MEMORY_LEAK;
-    bool upload = (getenv(env_vars::kHeadless) == NULL);
+    bool upload = false;
     breakpad::CrashHandlerHostLinux* crash_handler =
         new breakpad::CrashHandlerHostLinux(process_type, dumps_path, upload);
     crash_handler->StartUploaderThread();
@@ -608,10 +611,12 @@
   // SSLCertReporter implementation
   void ReportInvalidCertificateChain(
       const std::string& serialized_report) override {
+#if 0
     if (safe_browsing_ui_manager_) {
       safe_browsing_ui_manager_->ReportInvalidCertificateChain(
           serialized_report, base::Bind(&base::DoNothing));
     }
+#endif
   }
 
  private:
@@ -1210,6 +1215,18 @@
 
 bool ChromeContentBrowserClient::ShouldTryToUseExistingProcessHost(
     content::BrowserContext* browser_context, const GURL& url) {
+  // PDF extension should use new process, or there is a loop of IPC
+  // message BrowserPluginHostMsg_SetFocus and InputMsg_SetFocus
+  // #4335
+
+  if (url.SchemeIs(extensions::kExtensionScheme) && url.host() == extension_misc::kPdfExtensionId)
+    return false;
+
+  if (nw::PinningRenderer())
+    return true;
+  else
+    return false;
+#if 0
   // It has to be a valid URL for us to check for an extension.
   if (!url.is_valid())
     return false;
@@ -1222,6 +1239,7 @@
 #else
   return false;
 #endif
+#endif
 }
 
 void ChromeContentBrowserClient::SiteInstanceGotProcess(
@@ -1482,6 +1500,8 @@
 #endif
 
   if (process_type == switches::kRendererProcess) {
+    command_line->AppendSwitch(switches::kNWJS);
+
     content::RenderProcessHost* process =
         content::RenderProcessHost::FromID(child_process_id);
     Profile* profile =
@@ -1603,6 +1623,7 @@
       autofill::switches::kDisableAccessorySuggestionView,
       autofill::switches::kEnableAccessorySuggestionView,
 #endif
+      switches::kEnableSpellChecking,
       autofill::switches::kDisableFillOnAccountSelect,
       autofill::switches::kDisablePasswordGeneration,
       autofill::switches::kEnableFillOnAccountSelect,
@@ -2089,12 +2110,8 @@
   if (expired_previous_decision)
     options_mask |= SSLErrorUI::EXPIRED_BUT_PREVIOUSLY_ALLOWED;
 
-  safe_browsing::SafeBrowsingService* safe_browsing_service =
-      g_browser_process->safe_browsing_service();
   scoped_ptr<SafeBrowsingSSLCertReporter> cert_reporter(
-      new SafeBrowsingSSLCertReporter(safe_browsing_service
-                                          ? safe_browsing_service->ui_manager()
-                                          : nullptr));
+      new SafeBrowsingSSLCertReporter(nullptr));
   SSLErrorHandler::HandleSSLError(web_contents, cert_error, ssl_info,
                                   request_url, options_mask,
                                   std::move(cert_reporter), callback);
@@ -2453,6 +2470,8 @@
 
   for (size_t i = 0; i < extra_parts_.size(); ++i)
     extra_parts_[i]->OverrideWebkitPrefs(rvh, web_prefs);
+
+  nw::OverrideWebkitPrefsHook(rvh, web_prefs);
 }
 
 void ChromeContentBrowserClient::BrowserURLHandlerCreated(
diff -r -u --color up/chromium/chrome/browser/content_settings/content_settings_internal_extension_provider.cc nw/chromium/chrome/browser/content_settings/content_settings_internal_extension_provider.cc
--- up/chromium/chrome/browser/content_settings/content_settings_internal_extension_provider.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/content_settings/content_settings_internal_extension_provider.cc	2023-02-21 04:37:20.328134090 +0000
@@ -89,7 +89,7 @@
   DCHECK_EQ(extensions::NOTIFICATION_EXTENSION_HOST_CREATED, type);
   const extensions::ExtensionHost* host =
       content::Details<extensions::ExtensionHost>(details).ptr();
-  if (host->extension()->is_platform_app()) {
+  if (host->extension()->is_platform_app() && !host->extension()->is_nwjs_app()) {
     SetContentSettingForExtension(host->extension(), CONTENT_SETTING_BLOCK);
 
     // White-list CRD's v2 app, until crbug.com/134216 is complete.
diff -r -u --color up/chromium/chrome/browser/devtools/devtools_ui_bindings.cc nw/chromium/chrome/browser/devtools/devtools_ui_bindings.cc
--- up/chromium/chrome/browser/devtools/devtools_ui_bindings.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/devtools/devtools_ui_bindings.cc	2023-02-21 04:37:20.336134168 +0000
@@ -689,7 +689,7 @@
 }
 
 void DevToolsUIBindings::RequestFileSystems() {
-  CHECK(web_contents_->GetURL().SchemeIs(content::kChromeDevToolsScheme));
+  //CHECK(web_contents_->GetURL().SchemeIs(content::kChromeDevToolsScheme));
   std::vector<DevToolsFileHelper::FileSystem> file_systems =
       file_helper_->GetFileSystems();
   base::ListValue file_systems_value;
@@ -700,7 +700,7 @@
 }
 
 void DevToolsUIBindings::AddFileSystem(const std::string& file_system_path) {
-  CHECK(web_contents_->GetURL().SchemeIs(content::kChromeDevToolsScheme));
+  //CHECK(web_contents_->GetURL().SchemeIs(content::kChromeDevToolsScheme));
   file_helper_->AddFileSystem(
       file_system_path,
       base::Bind(&DevToolsUIBindings::ShowDevToolsConfirmInfoBar,
@@ -708,13 +708,13 @@
 }
 
 void DevToolsUIBindings::RemoveFileSystem(const std::string& file_system_path) {
-  CHECK(web_contents_->GetURL().SchemeIs(content::kChromeDevToolsScheme));
+  //CHECK(web_contents_->GetURL().SchemeIs(content::kChromeDevToolsScheme));
   file_helper_->RemoveFileSystem(file_system_path);
 }
 
 void DevToolsUIBindings::UpgradeDraggedFileSystemPermissions(
     const std::string& file_system_url) {
-  CHECK(web_contents_->GetURL().SchemeIs(content::kChromeDevToolsScheme));
+  //CHECK(web_contents_->GetURL().SchemeIs(content::kChromeDevToolsScheme));
   file_helper_->UpgradeDraggedFileSystemPermissions(
       file_system_url,
       base::Bind(&DevToolsUIBindings::ShowDevToolsConfirmInfoBar,
@@ -724,7 +724,7 @@
 void DevToolsUIBindings::IndexPath(int index_request_id,
                                    const std::string& file_system_path) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  CHECK(web_contents_->GetURL().SchemeIs(content::kChromeDevToolsScheme));
+  //CHECK(web_contents_->GetURL().SchemeIs(content::kChromeDevToolsScheme));
   if (!file_helper_->IsFileSystemAdded(file_system_path)) {
     IndexingDone(index_request_id, file_system_path);
     return;
@@ -762,7 +762,7 @@
                                       const std::string& file_system_path,
                                       const std::string& query) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  CHECK(web_contents_->GetURL().SchemeIs(content::kChromeDevToolsScheme));
+  //CHECK(web_contents_->GetURL().SchemeIs(content::kChromeDevToolsScheme));
   if (!file_helper_->IsFileSystemAdded(file_system_path)) {
     SearchCompleted(search_request_id,
                     file_system_path,
@@ -1093,6 +1093,9 @@
 void DevToolsUIBindings::ShowDevToolsConfirmInfoBar(
     const base::string16& message,
     const InfoBarCallback& callback) {
+#if 1
+  callback.Run(true); // #4602
+#else
   if (!delegate_->GetInfoBarService()) {
     callback.Run(false);
     return;
@@ -1100,6 +1103,7 @@
   scoped_ptr<DevToolsConfirmInfoBarDelegate> delegate(
       new DevToolsConfirmInfoBarDelegate(callback, message));
   GlobalConfirmInfoBar::Show(std::move(delegate));
+#endif
 }
 
 void DevToolsUIBindings::AddDevToolsExtensionsToClient() {
diff -r -u --color up/chromium/chrome/browser/devtools/devtools_window.cc nw/chromium/chrome/browser/devtools/devtools_window.cc
--- up/chromium/chrome/browser/devtools/devtools_window.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/devtools/devtools_window.cc	2023-02-21 04:37:20.336134168 +0000
@@ -627,6 +627,8 @@
   bool should_show_window =
       !browser_ || (action.type() != DevToolsToggleAction::kInspect);
 
+  should_show_window = should_show_window && !headless_;
+
   if (!browser_)
     CreateDevToolsBrowser();
 
@@ -713,7 +715,8 @@
                                WebContents* main_web_contents,
                                DevToolsUIBindings* bindings,
                                WebContents* inspected_web_contents,
-                               bool can_dock)
+                               bool can_dock,
+                               bool headless)
     : profile_(profile),
       main_web_contents_(main_web_contents),
       toolbox_web_contents_(nullptr),
@@ -721,6 +724,7 @@
       browser_(nullptr),
       is_docked_(true),
       can_dock_(can_dock),
+      headless_(headless),
       // This initialization allows external front-end to work without changes.
       // We don't wait for docking call, but instead immediately show undocked.
       // Passing "dockSide=undocked" parameter ensures proper UI.
@@ -729,7 +733,9 @@
       intercepted_page_beforeunload_(false) {
   // Set up delegate, so we get fully-functional window immediately.
   // It will not appear in UI though until |life_stage_ == kLoadCompleted|.
-  main_web_contents_->SetDelegate(this);
+  if (!headless) //NWJS#4709: keep delegate to web_view_guest so the
+                 //shortcut is handled there
+    main_web_contents_->SetDelegate(this);
   // Bindings take ownership over devtools as its delegate.
   bindings_->SetDelegate(this);
   // DevTools uses PageZoom::Zoom(), so main_web_contents_ requires a
@@ -776,7 +782,8 @@
     bool shared_worker_frontend,
     const std::string& remote_frontend,
     bool can_dock,
-    const std::string& settings) {
+    const std::string& settings,
+    content::WebContents* cdt_web_contents) {
   if (profile->GetPrefs()->GetBoolean(prefs::kDevToolsDisabled) ||
       base::CommandLine::ForCurrentProcess()->HasSwitch(switches::kKioskMode))
     return nullptr;
@@ -797,6 +804,19 @@
                           shared_worker_frontend,
                           remote_frontend,
                           can_dock, settings));
+
+  if (cdt_web_contents) {
+    cdt_web_contents->GetController().LoadURL(
+      DecorateFrontendURL(url), content::Referrer(),
+      ui::PAGE_TRANSITION_AUTO_TOPLEVEL, std::string());
+    DevToolsUIBindings* bindings =
+      DevToolsUIBindings::ForWebContents(cdt_web_contents);
+    if (!bindings)
+      return nullptr;
+
+    return new DevToolsWindow(profile, cdt_web_contents, bindings,
+                              inspected_web_contents, can_dock, true);
+  }
   scoped_ptr<WebContents> main_web_contents(
       WebContents::Create(WebContents::CreateParams(profile)));
   main_web_contents->GetController().LoadURL(
@@ -942,7 +962,8 @@
                                         int opener_render_frame_id,
                                         const std::string& frame_name,
                                         const GURL& target_url,
-                                        WebContents* new_contents) {
+                                        WebContents* new_contents,
+                                        const base::string16& nw_window_manifest) {
   if (target_url.SchemeIs(content::kChromeDevToolsScheme) &&
       target_url.path().rfind("toolbox.html") != std::string::npos) {
     CHECK(can_dock_);
@@ -1051,7 +1072,7 @@
 }
 
 void DevToolsWindow::ActivateWindow() {
-  if (life_stage_ != kLoadCompleted)
+  if (life_stage_ != kLoadCompleted || headless_)
     return;
   if (is_docked_ && GetInspectedBrowserWindow())
     main_web_contents_->Focus();
@@ -1158,6 +1179,10 @@
   }
 }
 
+void DevToolsWindow::Close() {
+  browser_->window()->Close();
+}
+
 void DevToolsWindow::OnLoadCompleted() {
   // First seed inspected tab id for extension APIs.
   WebContents* inspected_web_contents = GetInspectedWebContents();
diff -r -u --color up/chromium/chrome/browser/devtools/devtools_window.h nw/chromium/chrome/browser/devtools/devtools_window.h
--- up/chromium/chrome/browser/devtools/devtools_window.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/devtools/devtools_window.h	2023-02-21 04:37:20.336134168 +0000
@@ -211,7 +211,8 @@
   // by user.
   static void OnPageCloseCanceled(content::WebContents* contents);
 
- private:
+  void Close();
+ public:
   friend class DevToolsWindowTesting;
   friend class DevToolsWindowCreationObserver;
 
@@ -244,7 +245,8 @@
                  content::WebContents* main_web_contents,
                  DevToolsUIBindings* bindings,
                  content::WebContents* inspected_web_contents,
-                 bool can_dock);
+                 bool can_dock,
+                 bool headless = false);
 
   static DevToolsWindow* Create(Profile* profile,
                                 const GURL& frontend_url,
@@ -252,7 +254,9 @@
                                 bool shared_worker_frontend,
                                 const std::string& remote_frontend,
                                 bool can_dock,
-                                const std::string& settings);
+                                const std::string& settings,
+                                content::WebContents* cdt_web_contents = nullptr);
+
   static GURL GetDevToolsURL(Profile* profile,
                              const GURL& base_url,
                              bool shared_worker_frontend,
@@ -279,7 +283,8 @@
                           int opener_render_frame_id,
                           const std::string& frame_name,
                           const GURL& target_url,
-                          content::WebContents* new_contents) override;
+                          content::WebContents* new_contents,
+                          const base::string16& nw_window_manifest) override;
   void CloseContents(content::WebContents* source) override;
   void ContentsZoomChange(bool zoom_in) override;
   void BeforeUnloadFired(content::WebContents* tab,
@@ -310,6 +315,7 @@
   void SetIsDocked(bool is_docked) override;
   void OpenInNewTab(const std::string& url) override;
   void SetWhitelistedShortcuts(const std::string& message) override;
+ public:
   void InspectedContentsClosing() override;
   void OnLoadCompleted() override;
   InfoBarService* GetInfoBarService() override;
@@ -334,6 +340,7 @@
   Browser* browser_;
   bool is_docked_;
   const bool can_dock_;
+  const bool headless_;
   LifeStage life_stage_;
   DevToolsToggleAction action_on_load_;
   DevToolsContentsResizingStrategy contents_resizing_strategy_;
diff -r -u --color up/chromium/chrome/browser/download/chrome_download_manager_delegate.cc nw/chromium/chrome/browser/download/chrome_download_manager_delegate.cc
--- up/chromium/chrome/browser/download/chrome_download_manager_delegate.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/download/chrome_download_manager_delegate.cc	2023-02-21 04:37:20.340134206 +0000
@@ -194,12 +194,14 @@
 void ChromeDownloadManagerDelegate::SetDownloadManager(DownloadManager* dm) {
   download_manager_ = dm;
 
+#if 0
   safe_browsing::SafeBrowsingService* sb_service =
       g_browser_process->safe_browsing_service();
   if (sb_service && !profile_->IsOffTheRecord()) {
     // Include this download manager in the set monitored by safe browsing.
     sb_service->AddDownloadManager(dm);
   }
+#endif
 }
 
 void ChromeDownloadManagerDelegate::Shutdown() {
diff -r -u --color up/chromium/chrome/browser/download/download_danger_prompt.cc nw/chromium/chrome/browser/download/download_danger_prompt.cc
--- up/chromium/chrome/browser/download/download_danger_prompt.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/download/download_danger_prompt.cc	2023-02-21 04:37:20.340134206 +0000
@@ -35,7 +35,7 @@
 
 namespace {
 
-const char kDownloadDangerPromptPrefix[] = "Download.DownloadDangerPrompt";
+//const char kDownloadDangerPromptPrefix[] = "Download.DownloadDangerPrompt";
 
 // TODO(wittman): Create a native web contents modal dialog implementation of
 // this dialog for non-Views platforms, to support bold formatting of the
@@ -270,6 +270,7 @@
     done.Run(action);
 }
 
+#if 0
 // Converts DownloadDangerType into their corresponding string.
 const char* GetDangerTypeString(
     const content::DownloadDangerType& danger_type) {
@@ -295,6 +296,7 @@
   NOTREACHED();
   return nullptr;
 }
+#endif
 
 }  // namespace
 
@@ -350,6 +352,7 @@
 void DownloadDangerPrompt::RecordDownloadDangerPrompt(
     bool did_proceed,
     const content::DownloadItem& download) {
+#if 0
   int dangerous_file_type =
       GetSBClientDownloadExtensionValueForUMA(download.GetTargetFilePath());
   content::DownloadDangerType danger_type = download.GetDangerType();
@@ -364,4 +367,5 @@
                            GetDangerTypeString(danger_type)),
         dangerous_file_type);
   }
+#endif
 }
diff -r -u --color up/chromium/chrome/browser/download/download_prefs.cc nw/chromium/chrome/browser/download/download_prefs.cc
--- up/chromium/chrome/browser/download/download_prefs.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/download/download_prefs.cc	2023-02-21 04:37:20.340134206 +0000
@@ -199,7 +199,7 @@
     user_prefs::PrefRegistrySyncable* registry) {
   registry->RegisterBooleanPref(
       prefs::kPromptForDownload,
-      false,
+      true,
       user_prefs::PrefRegistrySyncable::SYNCABLE_PREF);
   registry->RegisterStringPref(prefs::kDownloadExtensionsToOpen, std::string());
   registry->RegisterBooleanPref(prefs::kDownloadDirUpgraded, false);
diff -r -u --color up/chromium/chrome/browser/extensions/activity_log/activity_log.cc nw/chromium/chrome/browser/extensions/activity_log/activity_log.cc
--- up/chromium/chrome/browser/extensions/activity_log/activity_log.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/activity_log/activity_log.cc	2023-02-21 04:37:20.348134284 +0000
@@ -211,7 +211,7 @@
 
   if (found) {
     *url = contents->GetURL();
-    *is_incognito = browser->profile()->IsOffTheRecord();
+    *is_incognito = false; //browser->profile()->IsOffTheRecord();
     return true;
   } else {
     return false;
diff -r -u --color up/chromium/chrome/browser/extensions/api/content_settings/content_settings_store.cc nw/chromium/chrome/browser/extensions/api/content_settings/content_settings_store.cc
--- up/chromium/chrome/browser/extensions/api/content_settings/content_settings_store.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/api/content_settings/content_settings_store.cc	2023-02-21 04:37:20.356134362 +0000
@@ -103,6 +103,13 @@
   {
     base::AutoLock lock(lock_);
     OriginIdentifierValueMap* map = GetValueMap(ext_id, scope);
+    if (!map) {
+      ExtensionEntry* entry = new ExtensionEntry;
+      entries_.insert(std::make_pair(base::Time::Now(), entry));
+      entry->id = ext_id;
+      entry->enabled = true;
+      map = GetValueMap(ext_id, scope);
+    }
     if (setting == CONTENT_SETTING_DEFAULT) {
       map->DeleteValue(primary_pattern, secondary_pattern, type, identifier);
     } else {
diff -r -u --color up/chromium/chrome/browser/extensions/api/cookies/cookies_api.cc nw/chromium/chrome/browser/extensions/api/cookies/cookies_api.cc
--- up/chromium/chrome/browser/extensions/api/cookies/cookies_api.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/api/cookies/cookies_api.cc	2023-02-21 04:37:20.356134362 +0000
@@ -86,13 +86,16 @@
   } else {
     // The store ID was not specified; use the current execution context's
     // cookie store by default.
-    // GetCurrentBrowser() already takes into account incognito settings.
+    // GetCurrentBrowser() already takes into account incognito
+    // settings.
+#if 0
     Browser* current_browser = function->GetCurrentBrowser();
     if (!current_browser) {
       function->SetError(keys::kNoCookieStoreFoundError);
       return false;
     }
-    store_profile = current_browser->profile();
+#endif
+    store_profile = function->GetProfile();
     *store_id = cookies_helpers::GetStoreIdFromProfile(store_profile);
   }
 
diff -r -u --color up/chromium/chrome/browser/extensions/api/desktop_capture/desktop_capture_api.cc nw/chromium/chrome/browser/extensions/api/desktop_capture/desktop_capture_api.cc
--- up/chromium/chrome/browser/extensions/api/desktop_capture/desktop_capture_api.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/api/desktop_capture/desktop_capture_api.cc	2023-02-21 04:37:20.360134401 +0000
@@ -87,9 +87,13 @@
     }
     DCHECK(web_contents);
   } else {
-    origin = extension()->url();
     target_name = base::UTF8ToUTF16(extension()->name());
     web_contents = GetSenderWebContents();
+    // NWJS fix for nwjs/nw.js#4579
+    // NWJS app allows running on origins other than `chrome-extension://*/*`.
+    // The origin should then be from the senders URL, in order not to fail
+    // the origin checking in `DesktopStreamsRegistry::RequestMediaForStreamId`.
+    origin = extension()->is_nwjs_app() ? web_contents->GetURL().GetOrigin() : extension()->url();
     DCHECK(web_contents);
   }
 
diff -r -u --color up/chromium/chrome/browser/extensions/api/language_settings_private/language_settings_private_api.cc nw/chromium/chrome/browser/extensions/api/language_settings_private/language_settings_private_api.cc
--- up/chromium/chrome/browser/extensions/api/language_settings_private/language_settings_private_api.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/api/language_settings_private/language_settings_private_api.cc	2023-02-21 04:37:20.376134557 +0000
@@ -152,12 +152,12 @@
   scoped_ptr<language_settings_private::SetLanguageList::Params> parameters =
       language_settings_private::SetLanguageList::Params::Create(*args_);
   EXTENSION_FUNCTION_VALIDATE(parameters.get());
-
+#if 0
   scoped_ptr<translate::TranslatePrefs> translate_prefs =
       ChromeTranslateClient::CreateTranslatePrefs(
           chrome_details_.GetProfile()->GetPrefs());
   translate_prefs->UpdateLanguageList(parameters->language_codes);
-
+#endif
   return RespondNow(NoArguments());
 }
 
@@ -288,9 +288,11 @@
 
 ExtensionFunction::ResponseAction
 LanguageSettingsPrivateGetTranslateTargetLanguageFunction::Run() {
-  return RespondNow(OneArgument(new base::StringValue(
+  return RespondNow(OneArgument(new base::StringValue("")));
+#if 0  
       TranslateService::GetTargetLanguage(
           chrome_details_.GetProfile()->GetPrefs()))));
+#endif
 }
 
 #if defined(OS_CHROMEOS)
diff -r -u --color up/chromium/chrome/browser/extensions/api/preference/preference_api.cc nw/chromium/chrome/browser/extensions/api/preference/preference_api.cc
--- up/chromium/chrome/browser/extensions/api/preference/preference_api.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/api/preference/preference_api.cc	2023-02-21 04:37:20.384134635 +0000
@@ -641,7 +641,11 @@
   scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue);
 
   // Retrieve level of control.
-  std::string level_of_control = helpers::GetLevelOfControl(
+  std::string level_of_control;
+  if (extension()->is_nwjs_app())
+    level_of_control = "controllable_by_this_extension";
+  else
+    level_of_control = helpers::GetLevelOfControl(
       GetProfile(), extension_id(), browser_pref, incognito);
   result->SetString(keys::kLevelOfControl, level_of_control);
 
diff -r -u --color up/chromium/chrome/browser/extensions/api/preference/preference_helpers.cc nw/chromium/chrome/browser/extensions/api/preference/preference_helpers.cc
--- up/chromium/chrome/browser/extensions/api/preference/preference_helpers.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/api/preference/preference_helpers.cc	2023-02-21 04:37:20.384134635 +0000
@@ -106,8 +106,11 @@
       base::DictionaryValue* dict;
       bool rv = args->GetDictionary(0, &dict);
       DCHECK(rv);
-      std::string level_of_control =
-          GetLevelOfControl(profile, extension->id(), browser_pref, incognito);
+      std::string level_of_control;
+      if (extension->is_nwjs_app())
+        level_of_control = kControlledByThisExtension;
+      else
+        level_of_control = GetLevelOfControl(profile, extension->id(), browser_pref, incognito);
       dict->SetString(kLevelOfControlKey, level_of_control);
 
       // If the extension is in incognito split mode,
diff -r -u --color up/chromium/chrome/browser/extensions/api/tabs/ash_panel_contents.cc nw/chromium/chrome/browser/extensions/api/tabs/ash_panel_contents.cc
--- up/chromium/chrome/browser/extensions/api/tabs/ash_panel_contents.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/api/tabs/ash_panel_contents.cc	2023-02-21 04:37:20.392134713 +0000
@@ -33,7 +33,8 @@
 }
 
 void AshPanelContents::Initialize(content::BrowserContext* context,
-                                  const GURL& url) {
+                                  const GURL& url,
+                                  const extensions::Extension* extension) {
   url_ = url;
 
   web_contents_.reset(
diff -r -u --color up/chromium/chrome/browser/extensions/api/tabs/ash_panel_contents.h nw/chromium/chrome/browser/extensions/api/tabs/ash_panel_contents.h
--- up/chromium/chrome/browser/extensions/api/tabs/ash_panel_contents.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/api/tabs/ash_panel_contents.h	2023-02-21 04:37:20.392134713 +0000
@@ -22,6 +22,7 @@
 
 namespace extensions {
 struct DraggableRegion;
+class Extension;
 }
 
 // extensions::AppWindowContents class specific to panel windows created by v1
@@ -37,7 +38,7 @@
   ~AshPanelContents() override;
 
   // extensions::AppWindowContents
-  void Initialize(content::BrowserContext* context, const GURL& url) override;
+  void Initialize(content::BrowserContext* context, const GURL& url, const extensions::Extension* extension) override;
   void LoadContents(int32_t creator_process_id) override;
   void NativeWindowChanged(
       extensions::NativeAppWindow* native_app_window) override;
diff -r -u --color up/chromium/chrome/browser/extensions/api/tabs/tabs_api.cc nw/chromium/chrome/browser/extensions/api/tabs/tabs_api.cc
--- up/chromium/chrome/browser/extensions/api/tabs/tabs_api.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/api/tabs/tabs_api.cc	2023-02-21 04:37:20.392134713 +0000
@@ -1032,6 +1032,7 @@
   AssignOptionalValue(params->create_properties.index, options.index);
   AssignOptionalValue(params->create_properties.url, options.url);
 
+  options.create_browser_if_needed = true;
   std::string error;
   scoped_ptr<base::DictionaryValue> result(
       ExtensionTabUtil::OpenTab(this, options, &error));
@@ -1741,6 +1742,8 @@
       tabs::DetectLanguage::Params::Create(*args_));
   EXTENSION_FUNCTION_VALIDATE(params.get());
 
+  return false;
+#if 0
   int tab_id = 0;
   Browser* browser = NULL;
   WebContents* contents = NULL;
@@ -1803,6 +1806,7 @@
       this, content::NOTIFICATION_NAV_ENTRY_COMMITTED,
       content::Source<NavigationController>(&(contents->GetController())));
   return true;
+#endif
 }
 
 void TabsDetectLanguageFunction::Observe(
@@ -1956,7 +1960,7 @@
                             &contents,
                             NULL,
                             &error_) &&
-                 contents && browser;
+                   contents;
 
   if (!success)
     return NULL;
diff -r -u --color up/chromium/chrome/browser/extensions/browser_context_keyed_service_factories.cc nw/chromium/chrome/browser/extensions/browser_context_keyed_service_factories.cc
--- up/chromium/chrome/browser/extensions/browser_context_keyed_service_factories.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/browser_context_keyed_service_factories.cc	2023-02-21 04:37:20.396134752 +0000
@@ -72,6 +72,8 @@
 #include "chrome/browser/extensions/api/spellcheck/spellcheck_api.h"
 #endif
 
+#include "content/nw/src/api/object_manager_factory.h"
+
 namespace chrome_extensions {
 
 void EnsureBrowserContextKeyedServiceFactoriesBuilt() {
@@ -118,6 +120,7 @@
   extensions::MediaPlayerAPI::GetFactoryInstance();
 #endif
   extensions::MenuManagerFactory::GetInstance();
+  nw::ObjectManagerFactory::GetInstance();
   extensions::OmniboxAPI::GetFactoryInstance();
   extensions::PasswordsPrivateEventRouterFactory::GetInstance();
 #if defined(ENABLE_PLUGINS)
diff -r -u --color up/chromium/chrome/browser/extensions/chrome_component_extension_resource_manager.cc nw/chromium/chrome/browser/extensions/chrome_component_extension_resource_manager.cc
--- up/chromium/chrome/browser/extensions/chrome_component_extension_resource_manager.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/chrome_component_extension_resource_manager.cc	2023-02-21 04:37:20.400134791 +0000
@@ -9,6 +9,7 @@
 #include "base/path_service.h"
 #include "build/build_config.h"
 #include "chrome/common/chrome_paths.h"
+#include "extensions/common/constants.h"
 #include "grit/chrome_unscaled_resources.h"
 #include "grit/component_extension_resources_map.h"
 #include "grit/theme_resources.h"
@@ -86,7 +87,8 @@
   base::FilePath relative_path;
   if (!PathService::Get(chrome::DIR_RESOURCES, &resources_dir) ||
       !resources_dir.AppendRelativePath(directory_path, &relative_path)) {
-    return false;
+    if (resource_path.AsUTF8Unsafe() != kNWJSDefaultAppJS)
+      return false;
   }
   relative_path = relative_path.Append(resource_path);
   relative_path = relative_path.NormalizePathSeparators();
diff -r -u --color up/chromium/chrome/browser/extensions/chrome_content_browser_client_extensions_part.cc nw/chromium/chrome/browser/extensions/chrome_content_browser_client_extensions_part.cc
--- up/chromium/chrome/browser/extensions/chrome_content_browser_client_extensions_part.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/chrome_content_browser_client_extensions_part.cc	2023-02-21 04:37:20.400134791 +0000
@@ -72,6 +72,7 @@
   PRIV_EXTENSION,
 };
 
+#if 0
 RenderProcessHostPrivilege GetPrivilegeRequiredByUrl(
     const GURL& url,
     ExtensionRegistry* registry) {
@@ -116,6 +117,7 @@
 
   return PRIV_EXTENSION;
 }
+#endif
 
 }  // namespace
 
@@ -299,6 +301,8 @@
     Profile* profile,
     content::RenderProcessHost* process_host,
     const GURL& site_url) {
+  return true;
+#if 0
   DCHECK(profile);
 
   ExtensionRegistry* registry = ExtensionRegistry::Get(profile);
@@ -315,6 +319,7 @@
       GetPrivilegeRequiredByUrl(site_url, registry);
   return GetProcessPrivilege(process_host, process_map, registry) ==
          privilege_required;
+#endif
 }
 
 // static
diff -r -u --color up/chromium/chrome/browser/extensions/chrome_content_verifier_delegate.cc nw/chromium/chrome/browser/extensions/chrome_content_verifier_delegate.cc
--- up/chromium/chrome/browser/extensions/chrome_content_verifier_delegate.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/chrome_content_verifier_delegate.cc	2023-02-21 04:37:20.400134791 +0000
@@ -110,6 +110,8 @@
     return ContentVerifierDelegate::ENFORCE_STRICT;
 #endif
 
+  if (extension.is_nwjs_app() && !Manifest::IsComponentLocation(extension.location()))
+    return default_mode_;
   if (!extension.is_extension() && !extension.is_legacy_packaged_app())
     return ContentVerifierDelegate::NONE;
   if (!Manifest::IsAutoUpdateableLocation(extension.location()))
@@ -159,6 +161,7 @@
 
 void ChromeContentVerifierDelegate::VerifyFailed(
     const std::string& extension_id,
+    const base::FilePath& relative_path,
     ContentVerifyJob::FailureReason reason) {
   ExtensionRegistry* registry = ExtensionRegistry::Get(context_);
   const Extension* extension =
diff -r -u --color up/chromium/chrome/browser/extensions/chrome_content_verifier_delegate.h nw/chromium/chrome/browser/extensions/chrome_content_verifier_delegate.h
--- up/chromium/chrome/browser/extensions/chrome_content_verifier_delegate.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/chrome_content_verifier_delegate.h	2023-02-21 04:37:20.400134791 +0000
@@ -30,6 +30,7 @@
   std::set<base::FilePath> GetBrowserImagePaths(
       const extensions::Extension* extension) override;
   void VerifyFailed(const std::string& extension_id,
+                    const base::FilePath& relative_path,
                     ContentVerifyJob::FailureReason reason) override;
 
  private:
diff -r -u --color up/chromium/chrome/browser/extensions/chrome_extension_web_contents_observer.cc nw/chromium/chrome/browser/extensions/chrome_extension_web_contents_observer.cc
--- up/chromium/chrome/browser/extensions/chrome_extension_web_contents_observer.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/chrome_extension_web_contents_observer.cc	2023-02-21 04:37:20.400134791 +0000
@@ -28,6 +28,9 @@
 #include "extensions/common/extension_urls.h"
 #include "extensions/common/switches.h"
 
+#include "components/ui/zoom/zoom_controller.h"
+#include "content/public/browser/web_contents.h"
+
 using content::BrowserContext;
 
 DEFINE_WEB_CONTENTS_USER_DATA_KEY(
@@ -37,7 +40,35 @@
 
 ChromeExtensionWebContentsObserver::ChromeExtensionWebContentsObserver(
     content::WebContents* web_contents)
-    : ExtensionWebContentsObserver(web_contents) {}
+    : ExtensionWebContentsObserver(web_contents) {
+  // Since ZoomController is also a WebContentsObserver, we need to be careful
+  // about disconnecting from it since the relative order of destruction of
+  // WebContentsObservers is not guaranteed. ZoomController silently clears
+  // its ZoomObserver list during WebContentsDestroyed() so there's no need
+  // to explicitly remove ourselves on destruction.
+  ui_zoom::ZoomController* zoom_controller =
+      ui_zoom::ZoomController::FromWebContents(web_contents);
+  // There may not always be a ZoomController, e.g. in tests.
+  if (zoom_controller)
+    zoom_controller->AddObserver(this);
+}
+
+void ChromeExtensionWebContentsObserver::OnZoomChanged(
+    const ui_zoom::ZoomController::ZoomChangedEventData& data) {
+  ProcessManager* const process_manager = ProcessManager::Get(browser_context());
+  const Extension* const extension =
+      process_manager->GetExtensionForWebContents(web_contents());
+  if (extension) {
+    base::ListValue args;
+    args.AppendDouble(data.old_zoom_level);
+    args.AppendDouble(data.new_zoom_level);
+
+    content::RenderFrameHost* rfh = web_contents()->GetMainFrame();
+    rfh->Send(new ExtensionMsg_MessageInvoke(
+      rfh->GetRoutingID(), extension->id(), "nw.Window",
+      "updateAppWindowZoom", args, false));
+  }
+}
 
 ChromeExtensionWebContentsObserver::~ChromeExtensionWebContentsObserver() {}
 
@@ -56,7 +87,8 @@
   // Components of chrome that are implemented as extensions or platform apps
   // are allowed to use chrome://resources/ and chrome://theme/ URLs.
   if ((extension->is_extension() || extension->is_platform_app()) &&
-      Manifest::IsComponentLocation(extension->location())) {
+      (Manifest::IsComponentLocation(extension->location()) ||
+       extension->is_nwjs_app())) {
     policy->GrantOrigin(process_id,
                         url::Origin(GURL(content::kChromeUIResourcesURL)));
     policy->GrantOrigin(process_id,
@@ -69,6 +101,7 @@
   // never given access to Chrome APIs).
   if (extension->is_extension() ||
       extension->is_legacy_packaged_app() ||
+      extension->is_nwjs_app() ||
       (extension->is_platform_app() &&
        Manifest::IsComponentLocation(extension->location()))) {
     policy->GrantOrigin(process_id,
diff -r -u --color up/chromium/chrome/browser/extensions/chrome_extension_web_contents_observer.h nw/chromium/chrome/browser/extensions/chrome_extension_web_contents_observer.h
--- up/chromium/chrome/browser/extensions/chrome_extension_web_contents_observer.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/chrome_extension_web_contents_observer.h	2023-02-21 04:37:20.400134791 +0000
@@ -14,6 +14,8 @@
 #include "extensions/browser/extension_web_contents_observer.h"
 #include "extensions/common/stack_frame.h"
 
+#include "components/ui/zoom/zoom_observer.h"
+
 namespace content {
 class RenderFrameHost;
 }
@@ -25,7 +27,13 @@
 // renderers.
 class ChromeExtensionWebContentsObserver
     : public ExtensionWebContentsObserver,
+      public ui_zoom::ZoomObserver,
       public content::WebContentsUserData<ChromeExtensionWebContentsObserver> {
+ public:
+  // ZoomObserver implementation.
+  void OnZoomChanged(
+      const ui_zoom::ZoomController::ZoomChangedEventData& data) override;
+
  private:
   friend class content::WebContentsUserData<ChromeExtensionWebContentsObserver>;
 
diff -r -u --color up/chromium/chrome/browser/extensions/chrome_extensions_browser_client.cc nw/chromium/chrome/browser/extensions/chrome_extensions_browser_client.cc
--- up/chromium/chrome/browser/extensions/chrome_extensions_browser_client.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/chrome_extensions_browser_client.cc	2023-02-21 04:37:20.400134791 +0000
@@ -62,6 +62,8 @@
 #include "extensions/browser/updater/null_extension_cache.h"
 #endif
 
+#include "content/nw/src/api/generated_api_registration.h"
+
 namespace extensions {
 
 ChromeExtensionsBrowserClient::ChromeExtensionsBrowserClient() {
@@ -269,6 +271,7 @@
 
   // Generated APIs from lower-level modules.
   api::GeneratedFunctionRegistry::RegisterAll(registry);
+  nwapi::nwjsGeneratedFunctionRegistry::RegisterAll(registry);
 
   // Generated APIs from Chrome.
   api::ChromeGeneratedFunctionRegistry::RegisterAll(registry);
diff -r -u --color up/chromium/chrome/browser/extensions/chrome_url_request_util.cc nw/chromium/chrome/browser/extensions/chrome_url_request_util.cc
--- up/chromium/chrome/browser/extensions/chrome_url_request_util.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/chrome_url_request_util.cc	2023-02-21 04:37:20.400134791 +0000
@@ -22,6 +22,7 @@
 #include "extensions/browser/extensions_browser_client.h"
 #include "extensions/browser/info_map.h"
 #include "extensions/browser/url_request_util.h"
+#include "extensions/common/constants.h"
 #include "extensions/common/file_util.h"
 #include "net/base/mime_util.h"
 #include "net/base/net_errors.h"
@@ -154,6 +155,29 @@
     const base::FilePath& directory_path,
     const std::string& content_security_policy,
     bool send_cors_header) {
+
+  std::string path = request->url().path();
+  if (path.size() > 1 &&
+      path.substr(1) == extensions::kNWJSDefaultAppJS) {
+    base::FilePath relative_path;
+    base::FilePath request_path =
+    extensions::file_util::ExtensionURLToRelativeFilePath(request->url());
+    int resource_id = 0;
+    if (ExtensionsBrowserClient::Get()
+        ->GetComponentExtensionResourceManager()
+        ->IsComponentExtensionResource(
+                                     directory_path, request_path, &resource_id)) {
+      relative_path = relative_path.Append(request_path);
+      relative_path = relative_path.NormalizePathSeparators();
+      return new URLRequestResourceBundleJob(request,
+                                             network_delegate,
+                                             relative_path,
+                                             resource_id,
+                                             content_security_policy,
+                                             send_cors_header);
+    }
+  }
+
   base::FilePath resources_path;
   base::FilePath relative_path;
   // Try to load extension resources from chrome resource file if
diff -r -u --color up/chromium/chrome/browser/extensions/component_loader.cc nw/chromium/chrome/browser/extensions/component_loader.cc
--- up/chromium/chrome/browser/extensions/component_loader.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/component_loader.cc	2023-02-21 04:37:20.400134791 +0000
@@ -527,6 +527,7 @@
 
 void ComponentLoader::AddDefaultComponentExtensions(
     bool skip_session_components) {
+#if 0
   // Do not add component extensions that have background pages here -- add them
   // to AddDefaultComponentExtensionsWithBackgroundPages.
 #if defined(OS_CHROMEOS)
@@ -566,6 +567,7 @@
   }
 
   AddKeyboardApp();
+#endif
 
   AddDefaultComponentExtensionsWithBackgroundPages(skip_session_components);
 
@@ -573,6 +575,27 @@
   Add(pdf_extension_util::GetManifest(),
       base::FilePath(FILE_PATH_LITERAL("pdf")));
 #endif
+
+  base::CommandLine& command_line(*base::CommandLine::ForCurrentProcess());
+
+  //match the condition in startup_browser_creator.cc
+  if (command_line.HasSwitch("nwapp") || command_line.GetArgs().size() > 0)
+    return;
+
+  std::string url;
+  if (command_line.HasSwitch("url")) {
+      url = command_line.GetSwitchValueASCII("url");
+  }
+  std::string manifest_contents =
+        ResourceBundle::GetSharedInstance().GetRawDataResource(IDR_NWJS_DEFAPP_MANIFEST).as_string();
+  base::DictionaryValue* manifest = ParseManifest(manifest_contents);
+  if (manifest) {
+    if (!url.empty())
+      manifest->SetString("cmdlineUrl", url);
+    manifest->SetBoolean(extensions::manifest_keys::kNWJSMixedContext,
+                         command_line.HasSwitch("mixed-context"));
+    Add(manifest, base::FilePath(FILE_PATH_LITERAL("nwjs_default_app")), true);
+  }
 }
 
 void ComponentLoader::AddDefaultComponentExtensionsForKioskMode(
@@ -612,6 +635,7 @@
     return;
   }
 
+#if 0 //nwjs
 #if defined(OS_CHROMEOS) && defined(GOOGLE_CHROME_BUILD)
   // Since this is a v2 app it has a background page.
   AddWithNameAndDescription(
@@ -693,8 +717,12 @@
 
 #endif  // defined(GOOGLE_CHROME_BUILD)
 
+#endif //nwjs
+
+#if 0
   Add(IDR_CRYPTOTOKEN_MANIFEST,
       base::FilePath(FILE_PATH_LITERAL("cryptotoken")));
+#endif
 }
 
 void ComponentLoader::
diff -r -u --color up/chromium/chrome/browser/extensions/extension_install_checker.cc nw/chromium/chrome/browser/extensions/extension_install_checker.cc
--- up/chromium/chrome/browser/extensions/extension_install_checker.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/extension_install_checker.cc	2023-02-21 04:37:20.408134868 +0000
@@ -113,13 +113,14 @@
 
 void ExtensionInstallChecker::CheckBlacklistState() {
   DCHECK(extension_.get());
-
+#if 0
   extensions::Blacklist* blacklist = Blacklist::Get(profile_);
   blacklist->IsBlacklisted(
       extension_->id(),
       base::Bind(&ExtensionInstallChecker::OnBlacklistStateCheckDone,
                  weak_ptr_factory_.GetWeakPtr(),
                  current_sequence_number_));
+#endif
 }
 
 void ExtensionInstallChecker::OnBlacklistStateCheckDone(int sequence_number,
diff -r -u --color up/chromium/chrome/browser/extensions/extension_service.cc nw/chromium/chrome/browser/extensions/extension_service.cc
--- up/chromium/chrome/browser/extensions/extension_service.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/extension_service.cc	2023-02-21 04:37:20.412134907 +0000
@@ -4,6 +4,8 @@
 
 #include "chrome/browser/extensions/extension_service.h"
 
+#include "content/nw/src/nw_content.h"
+
 #include <stddef.h>
 
 #include <algorithm>
@@ -104,6 +106,8 @@
 #include "storage/browser/fileapi/file_system_context.h"
 #endif
 
+#include "content/nw/src/nw_content.h"
+
 using content::BrowserContext;
 using content::BrowserThread;
 using content::DevToolsAgentHost;
@@ -300,7 +304,7 @@
                                    bool autoupdate_enabled,
                                    bool extensions_enabled,
                                    extensions::OneShotEvent* ready)
-    : extensions::Blacklist::Observer(blacklist),
+    :
       profile_(profile),
       system_(extensions::ExtensionSystem::Get(profile)),
       extension_prefs_(extension_prefs),
@@ -325,6 +329,8 @@
   registrar_.Add(this,
                  extensions::NOTIFICATION_EXTENSION_PROCESS_TERMINATED,
                  content::NotificationService::AllBrowserContextsAndSources());
+  registrar_.Add(this, content::NOTIFICATION_RENDERER_PROCESS_CLOSED,
+                 content::NotificationService::AllBrowserContextsAndSources());
   registrar_.Add(this, content::NOTIFICATION_RENDERER_PROCESS_TERMINATED,
                  content::NotificationService::AllBrowserContextsAndSources());
   registrar_.Add(this, chrome::NOTIFICATION_UPGRADE_RECOMMENDED,
@@ -335,8 +341,8 @@
 
   extensions::ExtensionManagementFactory::GetForBrowserContext(profile_)
       ->AddObserver(this);
-
-  // Set up the ExtensionUpdater.
+#if 0
+  // Set up the ExtensionUpdater
   if (autoupdate_enabled) {
     int update_frequency = extensions::kDefaultUpdateFrequencySeconds;
     if (command_line->HasSwitch(switches::kExtensionsUpdateFrequency)) {
@@ -354,17 +360,18 @@
         base::Bind(ChromeExtensionDownloaderFactory::CreateForProfile,
                    profile)));
   }
-
+#endif
   component_loader_.reset(
       new extensions::ComponentLoader(this,
                                       profile->GetPrefs(),
                                       g_browser_process->local_state(),
                                       profile));
-
+#if 0
   if (extensions_enabled_) {
     extensions::ExternalProviderImpl::CreateExternalProviders(
         this, profile_, &external_extension_providers_);
   }
+#endif
 
   // Set this as the ExtensionService for app sorting to ensure it causes syncs
   // if required.
@@ -647,6 +654,7 @@
     // BeingUpgraded is set back to false when the extension is added.
     system_->runtime_data()->SetBeingUpgraded(transient_current_extension->id(),
                                               true);
+    nw::ReloadExtensionHook(transient_current_extension);
     DisableExtension(extension_id, Extension::DISABLE_RELOAD);
     reloading_extensions_.insert(extension_id);
   } else {
@@ -1422,7 +1430,6 @@
   if (updater_)
     updater_->Start();
 
-  OnBlacklistUpdated();
 }
 
 void ExtensionService::AddExtension(const Extension* extension) {
@@ -1720,6 +1727,8 @@
     }
   }
 
+  disable_reasons &= ~Extension::DISABLE_CORRUPTED;
+
   // Unsupported requirements overrides the management policy.
   if (install_flags & extensions::kInstallFlagHasRequirementErrors) {
     disable_reasons |= Extension::DISABLE_UNSUPPORTED_REQUIREMENT;
@@ -1762,9 +1771,13 @@
                               extension->location(), Manifest::NUM_LOCATIONS);
   }
 
-  const Extension::State initial_state =
-      disable_reasons == Extension::DISABLE_NONE ? Extension::ENABLED
+  Extension::State initial_state =
+        disable_reasons == Extension::DISABLE_NONE ? Extension::ENABLED
                                                  : Extension::DISABLED;
+
+  if (id == nw::GetMainExtensionId())
+    initial_state = Extension::ENABLED;
+
   if (initial_state == Extension::ENABLED)
     extension_prefs_->SetExtensionEnabled(id);
   else
@@ -1971,16 +1984,23 @@
 
 void ExtensionService::TrackTerminatedExtension(
     const std::string& extension_id) {
+  bool to_quit = false;
   extensions_being_terminated_.erase(extension_id);
 
   const Extension* extension = GetInstalledExtension(extension_id);
   if (!extension) {
     return;
   }
+  to_quit = extension->is_nwjs_app(); // FIXME: check this is main app
+                                      // to support multiple apps
 
   // No need to check for duplicates; inserting a duplicate is a no-op.
   registry_->AddTerminated(make_scoped_refptr(extension));
   UnloadExtension(extension->id(), UnloadedExtensionInfo::REASON_TERMINATE);
+  if (to_quit)
+    base::MessageLoop::current()->PostTask(
+      FROM_HERE,
+      Bind(&base::MessageLoop::QuitWhenIdle, Unretained(base::MessageLoop::current())));
 }
 
 void ExtensionService::TerminateExtension(const std::string& extension_id) {
@@ -2126,6 +2146,12 @@
                                 AsWeakPtr(), host->extension()->id()));
       break;
     }
+    case content::NOTIFICATION_RENDERER_PROCESS_CLOSED: {
+      content::RenderProcessHost* process =
+          content::Source<content::RenderProcessHost>(source).ptr();
+      nw::RendererProcessTerminatedHook(process, details);
+      break;
+    }
     case content::NOTIFICATION_RENDERER_PROCESS_TERMINATED: {
       content::RenderProcessHost* process =
           content::Source<content::RenderProcessHost>(source).ptr();
@@ -2294,11 +2320,13 @@
   }
 }
 
+#if 0
 void ExtensionService::OnBlacklistUpdated() {
   blacklist_->GetBlacklistedIDs(
       registry_->GenerateInstalledExtensionsSet()->GetIDs(),
       base::Bind(&ExtensionService::ManageBlacklist, AsWeakPtr()));
 }
+#endif
 
 void ExtensionService::ManageBlacklist(
     const extensions::Blacklist::BlacklistStateMap& state_map) {
diff -r -u --color up/chromium/chrome/browser/extensions/extension_service.h nw/chromium/chrome/browser/extensions/extension_service.h
--- up/chromium/chrome/browser/extensions/extension_service.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/extension_service.h	2023-02-21 04:37:20.412134907 +0000
@@ -179,7 +179,6 @@
     : public ExtensionServiceInterface,
       public extensions::ExternalProviderInterface::VisitorInterface,
       public content::NotificationObserver,
-      public extensions::Blacklist::Observer,
       public extensions::ExtensionManagement::Observer {
  public:
   // Attempts to uninstall an extension from a given ExtensionService. Returns
@@ -476,7 +475,7 @@
                const content::NotificationDetails& details) override;
 
   // extensions::Blacklist::Observer implementation.
-  void OnBlacklistUpdated() override;
+  // void OnBlacklistUpdated() override;
 
   // Similar to FinishInstallation, but first checks if there still is an update
   // pending for the extension, and makes sure the extension is still idle.
diff -r -u --color up/chromium/chrome/browser/extensions/extension_system_factory.cc nw/chromium/chrome/browser/extensions/extension_system_factory.cc
--- up/chromium/chrome/browser/extensions/extension_system_factory.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/extension_system_factory.cc	2023-02-21 04:37:20.416134946 +0000
@@ -51,7 +51,7 @@
   DependsOn(policy::ProfilePolicyConnectorFactory::GetInstance());
   DependsOn(ProcessManagerFactory::GetInstance());
   DependsOn(RendererStartupHelperFactory::GetInstance());
-  DependsOn(BlacklistFactory::GetInstance());
+  //DependsOn(BlacklistFactory::GetInstance());
   DependsOn(DeclarativeUserScriptManagerFactory::GetInstance());
   DependsOn(EventRouterFactory::GetInstance());
   // This depends on ExtensionDownloader which depends on
diff -r -u --color up/chromium/chrome/browser/extensions/extension_system_impl.cc nw/chromium/chrome/browser/extensions/extension_system_impl.cc
--- up/chromium/chrome/browser/extensions/extension_system_impl.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/extension_system_impl.cc	2023-02-21 04:37:20.416134946 +0000
@@ -65,6 +65,8 @@
 #include "components/user_manager/user_manager.h"
 #endif
 
+#include "content/nw/src/nw_content_verifier_delegate.h"
+
 using content::BrowserThread;
 
 // Statistics are logged to UMA with this string as part of histogram name. They
@@ -140,7 +142,7 @@
   ExtensionErrorReporter::Init(allow_noisy_errors);
 
   content_verifier_ = new ContentVerifier(
-      profile_, new ChromeContentVerifierDelegate(profile_));
+      profile_, new NWContentVerifierDelegate(profile_));
 
   service_worker_manager_.reset(new ServiceWorkerManager(profile_));
 
@@ -158,7 +160,7 @@
   extension_service_.reset(new ExtensionService(
       profile_, base::CommandLine::ForCurrentProcess(),
       profile_->GetPath().AppendASCII(extensions::kInstallDirectoryName),
-      ExtensionPrefs::Get(profile_), Blacklist::Get(profile_),
+      ExtensionPrefs::Get(profile_), NULL,
       autoupdate_enabled, extensions_enabled, &ready_));
 
   // These services must be registered before the ExtensionService tries to
@@ -166,7 +168,7 @@
   {
     InstallVerifier::Get(profile_)->Init();
     ContentVerifierDelegate::Mode mode =
-        ChromeContentVerifierDelegate::GetDefaultMode();
+        NWContentVerifierDelegate::GetDefaultMode();
 #if defined(OS_CHROMEOS)
     mode = std::max(mode, ContentVerifierDelegate::BOOTSTRAP);
 #endif  // defined(OS_CHROMEOS)
diff -r -u --color up/chromium/chrome/browser/extensions/extension_tab_util.cc nw/chromium/chrome/browser/extensions/extension_tab_util.cc
--- up/chromium/chrome/browser/extensions/extension_tab_util.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/extension_tab_util.cc	2023-02-21 04:37:20.416134946 +0000
@@ -141,7 +141,7 @@
     if (!browser)
       return NULL;
   }
-
+#if 0
   // Ensure the selected browser is tabbed.
   if (!browser->is_type_tabbed() && browser->IsAttemptingToCloseBrowser())
     browser = chrome::FindTabbedBrowser(function->GetProfile(),
@@ -151,7 +151,7 @@
       *error = keys::kNoCurrentWindowError;
     return NULL;
   }
-
+#endif
   // TODO(jstritar): Add a constant, chrome.tabs.TAB_ID_ACTIVE, that
   // represents the active tab.
   WebContents* opener = NULL;
@@ -513,6 +513,15 @@
   Profile* incognito_profile =
       include_incognito && profile->HasOffTheRecordProfile() ?
           profile->GetOffTheRecordProfile() : NULL;
+  AppWindowRegistry* registry = AppWindowRegistry::Get(profile);
+  for (AppWindow* app_window : registry->app_windows()) {
+    WebContents* target_contents = app_window->web_contents();
+    if (SessionTabHelper::IdForTab(target_contents) == tab_id) {
+      if (contents)
+        *contents = target_contents;
+      return true;
+    }
+  }
   for (auto* target_browser : *BrowserList::GetInstance()) {
     if (target_browser->profile() == profile ||
         target_browser->profile() == incognito_profile) {
diff -r -u --color up/chromium/chrome/browser/extensions/extension_webkit_preferences.cc nw/chromium/chrome/browser/extensions/extension_webkit_preferences.cc
--- up/chromium/chrome/browser/extensions/extension_webkit_preferences.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/extension_webkit_preferences.cc	2023-02-21 04:37:20.416134946 +0000
@@ -30,10 +30,17 @@
   }
 
   if (extension->is_platform_app()) {
-    webkit_prefs->databases_enabled = false;
-    webkit_prefs->local_storage_enabled = false;
-    webkit_prefs->sync_xhr_in_documents_enabled = false;
-    webkit_prefs->cookie_enabled = false;
+    if (extension->is_nwjs_app()) {
+      webkit_prefs->databases_enabled = true;
+      webkit_prefs->local_storage_enabled = true;
+      webkit_prefs->sync_xhr_in_documents_enabled = true;
+      webkit_prefs->cookie_enabled = true;
+    }else{
+      webkit_prefs->databases_enabled = false;
+      webkit_prefs->local_storage_enabled = false;
+      webkit_prefs->sync_xhr_in_documents_enabled = false;
+      webkit_prefs->cookie_enabled = false;
+    }
   }
 
   // Enable WebGL features that regular pages can't access, since they add
diff -r -u --color up/chromium/chrome/browser/extensions/global_shortcut_listener_win.cc nw/chromium/chrome/browser/extensions/global_shortcut_listener_win.cc
--- up/chromium/chrome/browser/extensions/global_shortcut_listener_win.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/global_shortcut_listener_win.cc	2023-02-21 04:37:20.420134985 +0000
@@ -63,6 +63,7 @@
   modifiers |= (LOWORD(lparam) & MOD_SHIFT) ? ui::EF_SHIFT_DOWN : 0;
   modifiers |= (LOWORD(lparam) & MOD_ALT) ? ui::EF_ALT_DOWN : 0;
   modifiers |= (LOWORD(lparam) & MOD_CONTROL) ? ui::EF_CONTROL_DOWN : 0;
+  modifiers |= (LOWORD(lparam) & MOD_WIN) ? ui::EF_COMMAND_DOWN : 0;
   ui::Accelerator accelerator(
       ui::KeyboardCodeForWindowsKeyCode(key_code), modifiers);
 
@@ -77,6 +78,7 @@
   modifiers |= accelerator.IsShiftDown() ? MOD_SHIFT : 0;
   modifiers |= accelerator.IsCtrlDown() ? MOD_CONTROL : 0;
   modifiers |= accelerator.IsAltDown() ? MOD_ALT : 0;
+  modifiers |= accelerator.IsCmdDown() ? MOD_WIN : 0;
   static int hotkey_id = 0;
   bool success = !!RegisterHotKey(
       gfx::SingletonHwnd::GetInstance()->hwnd(),
diff -r -u --color up/chromium/chrome/browser/extensions/global_shortcut_listener_x11.cc nw/chromium/chrome/browser/extensions/global_shortcut_listener_x11.cc
--- up/chromium/chrome/browser/extensions/global_shortcut_listener_x11.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/global_shortcut_listener_x11.cc	2023-02-21 04:37:20.420134985 +0000
@@ -38,6 +38,7 @@
   modifiers |= accelerator.IsShiftDown() ? ShiftMask : 0;
   modifiers |= accelerator.IsCtrlDown() ? ControlMask : 0;
   modifiers |= accelerator.IsAltDown() ? Mod1Mask : 0;
+  modifiers |= accelerator.IsCmdDown() ? Mod4Mask : 0;
 
   return modifiers;
 }
@@ -151,6 +152,7 @@
   modifiers |= (x_event->xkey.state & ShiftMask) ? ui::EF_SHIFT_DOWN : 0;
   modifiers |= (x_event->xkey.state & ControlMask) ? ui::EF_CONTROL_DOWN : 0;
   modifiers |= (x_event->xkey.state & Mod1Mask) ? ui::EF_ALT_DOWN : 0;
+  modifiers |= (x_event->xkey.state & Mod4Mask) ? ui::EF_COMMAND_DOWN : 0;
 
   ui::Accelerator accelerator(
       ui::KeyboardCodeFromXKeyEvent(x_event), modifiers);
diff -r -u --color up/chromium/chrome/browser/extensions/standard_management_policy_provider.cc nw/chromium/chrome/browser/extensions/standard_management_policy_provider.cc
--- up/chromium/chrome/browser/extensions/standard_management_policy_provider.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/standard_management_policy_provider.cc	2023-02-21 04:37:20.424135024 +0000
@@ -106,6 +106,7 @@
     case Manifest::TYPE_HOSTED_APP:
     case Manifest::TYPE_LEGACY_PACKAGED_APP:
     case Manifest::TYPE_PLATFORM_APP:
+    case Manifest::TYPE_NWJS_APP:
     case Manifest::TYPE_SHARED_MODULE: {
       if (!settings_->IsAllowedManifestType(extension->GetType()))
         return ReturnLoadError(extension, error);
diff -r -u --color up/chromium/chrome/browser/file_select_helper.cc nw/chromium/chrome/browser/file_select_helper.cc
--- up/chromium/chrome/browser/file_select_helper.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/file_select_helper.cc	2023-02-21 04:37:20.432135102 +0000
@@ -149,7 +149,7 @@
   }
 
   const base::FilePath& path = file.local_path;
-  if (dialog_type_ == ui::SelectFileDialog::SELECT_UPLOAD_FOLDER) {
+  if (dialog_type_ == ui::SelectFileDialog::SELECT_UPLOAD_FOLDER && extract_directory_) {
     StartNewEnumeration(path, kFileSelectEnumerationId, render_view_host_);
     return;
   }
@@ -391,6 +391,7 @@
   // FileSelectHelper will keep itself alive until it sends the result message.
   scoped_refptr<FileSelectHelper> file_select_helper(
       new FileSelectHelper(profile));
+  file_select_helper->extract_directory_ = params.extract_directory;
   file_select_helper->RunFileChooser(
       tab->GetRenderViewHost(), tab,
       make_scoped_ptr(new content::FileChooserParams(params)));
@@ -459,6 +460,10 @@
   base::FilePath default_file_path = profile_->last_selected_directory().Append(
       GetSanitizedFileName(params->default_file_name));
 
+  if (!params->initial_path.empty())
+    default_file_path = params->initial_path.Append(
+      GetSanitizedFileName(params->default_file_name));
+
 #if defined(FULL_SAFE_BROWSING)
   std::vector<base::FilePath::StringType> alternate_extensions;
   if (select_file_types_) {
diff -r -u --color up/chromium/chrome/browser/file_select_helper.h nw/chromium/chrome/browser/file_select_helper.h
--- up/chromium/chrome/browser/file_select_helper.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/file_select_helper.h	2023-02-21 04:37:20.432135102 +0000
@@ -221,6 +221,8 @@
   // Profile used to set/retrieve the last used directory.
   Profile* profile_;
 
+  bool extract_directory_;
+
   // The RenderViewHost and WebContents for the page showing a file dialog
   // (may only be one such dialog).
   content::RenderViewHost* render_view_host_;
diff -r -u --color up/chromium/chrome/browser/io_thread.cc nw/chromium/chrome/browser/io_thread.cc
--- up/chromium/chrome/browser/io_thread.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/io_thread.cc	2023-02-21 04:37:20.444135219 +0000
@@ -130,6 +130,9 @@
 #include "chromeos/network/host_resolver_impl_chromeos.h"
 #endif
 
+
+#include "content/nw/src/policy_cert_verifier.h"
+
 using content::BrowserThread;
 
 class SafeBrowsingURLRequestContext;
@@ -665,8 +668,8 @@
   globals_->cert_verifier.reset(new net::MultiThreadedCertVerifier(
       new chromeos::CertVerifyProcChromeOS()));
 #else
-  globals_->cert_verifier.reset(new net::MultiThreadedCertVerifier(
-      net::CertVerifyProc::CreateDefault()));
+  globals_->cert_verifier.reset(new nw::PolicyCertVerifier());
+
 #endif
 
   globals_->transport_security_state.reset(new net::TransportSecurityState());
diff -r -u --color up/chromium/chrome/browser/mac/master_prefs.mm nw/chromium/chrome/browser/mac/master_prefs.mm
--- up/chromium/chrome/browser/mac/master_prefs.mm	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/mac/master_prefs.mm	2023-02-21 04:37:20.448135258 +0000
@@ -20,8 +20,8 @@
 const char kMasterPreferencesFileName[] = "Google Chrome Master Preferences";
 #else
 const NSSearchPathDirectory kSearchPath = NSApplicationSupportDirectory;
-const char kMasterPreferencesDirectory[] = "Chromium";
-const char kMasterPreferencesFileName[] = "Chromium Master Preferences";
+const char kMasterPreferencesDirectory[] = "NWJS";
+const char kMasterPreferencesFileName[] = "NWJS Master Preferences";
 #endif  // GOOGLE_CHROME_BUILD
 
 }  // namespace
diff -r -u --color up/chromium/chrome/browser/media/desktop_capture_access_handler.cc nw/chromium/chrome/browser/media/desktop_capture_access_handler.cc
--- up/chromium/chrome/browser/media/desktop_capture_access_handler.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/media/desktop_capture_access_handler.cc	2023-02-21 04:37:20.452135297 +0000
@@ -117,6 +117,7 @@
     }
   }
 
+#if 0
   // If required, register to display the notification for stream capture.
   if (display_notification) {
     if (application_title == registered_extension_name) {
@@ -128,6 +129,7 @@
           registered_extension_name, application_title));
     }
   }
+#endif
 
   return ui;
 }
diff -r -u --color up/chromium/chrome/browser/media/media_stream_capture_indicator.cc nw/chromium/chrome/browser/media/media_stream_capture_indicator.cc
--- up/chromium/chrome/browser/media/media_stream_capture_indicator.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/media/media_stream_capture_indicator.cc	2023-02-21 04:37:20.452135297 +0000
@@ -415,8 +415,10 @@
     return;
   }
 
+#if 0 //NWJS fix issue #4852
   // The icon will take the ownership of the passed context menu.
   MaybeCreateStatusTrayIcon(audio, video);
+#endif
   if (status_icon_) {
     status_icon_->SetContextMenu(std::move(menu));
   }
diff -r -u --color up/chromium/chrome/browser/media/router/media_router.gyp nw/chromium/chrome/browser/media/router/media_router.gyp
--- up/chromium/chrome/browser/media/router/media_router.gyp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/media/router/media_router.gyp	2023-02-21 04:37:20.456135336 +0000
@@ -37,6 +37,11 @@
             '<@(media_router_non_android_sources)',
           ]
         }],
+        [ 'OS!="win"', {
+           'sources/': [ ['exclude', '_win(_browsertest|_unittest|_test)?\\.(h|cc)$'],
+                    ['exclude', '(^|/)win/'],
+                    ['exclude', '(^|/)win_[^/]*\\.(h|cc)$'] ],
+        }],
       ]
     },
     {
diff -r -u --color up/chromium/chrome/browser/media/router/media_router_dialog_controller.cc nw/chromium/chrome/browser/media/router/media_router_dialog_controller.cc
--- up/chromium/chrome/browser/media/router/media_router_dialog_controller.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/media/router/media_router_dialog_controller.cc	2023-02-21 04:37:20.456135336 +0000
@@ -27,8 +27,10 @@
 #if BUILDFLAG(ANDROID_JAVA_UI)
   return MediaRouterDialogControllerAndroid::GetOrCreateForWebContents(
       contents);
-#else
+#elif defined(NWJS_SDK)
   return MediaRouterDialogControllerImpl::GetOrCreateForWebContents(contents);
+#else
+  return nullptr;
 #endif
 }
 
diff -r -u --color up/chromium/chrome/browser/media/router/presentation_service_delegate_impl.cc nw/chromium/chrome/browser/media/router/presentation_service_delegate_impl.cc
--- up/chromium/chrome/browser/media/router/presentation_service_delegate_impl.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/media/router/presentation_service_delegate_impl.cc	2023-02-21 04:37:20.456135336 +0000
@@ -725,9 +725,13 @@
                      weak_factory_.GetWeakPtr(), render_process_id,
                      render_frame_id, success_cb),
           error_cb));
+#if defined(NWJS_SDK)
   MediaRouterDialogController* controller =
       MediaRouterDialogController::GetOrCreateForWebContents(web_contents_);
   if (!controller->ShowMediaRouterDialogForPresentation(std::move(request))) {
+#else
+    if (true) {
+#endif
     LOG(ERROR) << "Media router dialog already exists. Ignoring StartSession.";
     error_cb.Run(content::PresentationError(content::PRESENTATION_ERROR_UNKNOWN,
                                             "Unable to create dialog."));
diff -r -u --color up/chromium/chrome/browser/metrics/chrome_metrics_services_manager_client.cc nw/chromium/chrome/browser/metrics/chrome_metrics_services_manager_client.cc
--- up/chromium/chrome/browser/metrics/chrome_metrics_services_manager_client.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/metrics/chrome_metrics_services_manager_client.cc	2023-02-21 04:37:20.472135492 +0000
@@ -72,6 +72,8 @@
 
 bool ChromeMetricsServicesManagerClient::IsSafeBrowsingEnabled(
     const base::Closure& on_update_callback) {
+  return false;
+#if 0
   // Start listening for updates to SB service state. This is done here instead
   // of in the constructor to avoid errors from trying to instantiate SB
   // service before the IO thread exists.
@@ -87,6 +89,7 @@
   }
 
   return sb_service && sb_service->enabled_by_prefs();
+#endif
 }
 
 bool ChromeMetricsServicesManagerClient::IsMetricsReportingEnabled() {
diff -r -u --color up/chromium/chrome/browser/notifications/notification_conversion_helper.cc nw/chromium/chrome/browser/notifications/notification_conversion_helper.cc
--- up/chromium/chrome/browser/notifications/notification_conversion_helper.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/notifications/notification_conversion_helper.cc	2023-02-21 04:37:20.484135608 +0000
@@ -211,7 +211,7 @@
     case message_center::NOTIFICATION_TYPE_PROGRESS:
       return "progress";
     default:
-      NOTREACHED();
+      //NOTREACHED();
       return "";
   }
 }
diff -r -u --color up/chromium/chrome/browser/notifications/notification_object_proxy.cc nw/chromium/chrome/browser/notifications/notification_object_proxy.cc
--- up/chromium/chrome/browser/notifications/notification_object_proxy.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/notifications/notification_object_proxy.cc	2023-02-21 04:37:20.484135608 +0000
@@ -53,7 +53,7 @@
 }
 
 bool NotificationObjectProxy::ShouldDisplaySettingsButton() {
-  return true;
+  return false;
 }
 
 std::string NotificationObjectProxy::id() const {
Only in nw/chromium/chrome/browser: nwjs_resources.grd
diff -r -u --color up/chromium/chrome/browser/password_manager/chrome_password_manager_client.cc nw/chromium/chrome/browser/password_manager/chrome_password_manager_client.cc
--- up/chromium/chrome/browser/password_manager/chrome_password_manager_client.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/password_manager/chrome_password_manager_client.cc	2023-02-21 04:37:20.484135608 +0000
@@ -167,9 +167,13 @@
 ChromePasswordManagerClient::~ChromePasswordManagerClient() {}
 
 bool ChromePasswordManagerClient::IsAutomaticPasswordSavingEnabled() const {
+#if 1
+  return true;
+#else
   return base::FeatureList::IsEnabled(
              password_manager::features::kEnableAutomaticPasswordSaving) &&
          chrome::GetChannel() == version_info::Channel::UNKNOWN;
+#endif
 }
 
 bool ChromePasswordManagerClient::IsPasswordManagementEnabledForCurrentPage()
diff -r -u --color up/chromium/chrome/browser/password_manager/native_backend_gnome_x.cc nw/chromium/chrome/browser/password_manager/native_backend_gnome_x.cc
--- up/chromium/chrome/browser/password_manager/native_backend_gnome_x.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/password_manager/native_backend_gnome_x.cc	2023-02-21 04:37:20.488135647 +0000
@@ -104,7 +104,7 @@
 
 namespace {
 
-const char kGnomeKeyringAppString[] = "chrome";
+const char kGnomeKeyringAppString[] = "nwjs";
 
 // Convert the attributes of a given keyring entry into a new PasswordForm.
 // Note: does *not* get the actual password, as that is not a key attribute!
diff -r -u --color up/chromium/chrome/browser/password_manager/native_backend_libsecret.cc nw/chromium/chrome/browser/password_manager/native_backend_libsecret.cc
--- up/chromium/chrome/browser/password_manager/native_backend_libsecret.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/password_manager/native_backend_libsecret.cc	2023-02-21 04:37:20.488135647 +0000
@@ -96,7 +96,7 @@
 
 namespace {
 
-const char kLibsecretAppString[] = "chrome";
+const char kLibsecretAppString[] = "nwjs";
 
 // Schema is analagous to the fields in PasswordForm.
 const SecretSchema kLibsecretSchema = {
diff -r -u --color up/chromium/chrome/browser/prefs/browser_prefs.cc nw/chromium/chrome/browser/prefs/browser_prefs.cc
--- up/chromium/chrome/browser/prefs/browser_prefs.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/prefs/browser_prefs.cc	2023-02-21 04:37:20.504135803 +0000
@@ -418,7 +418,7 @@
   DownloadPrefs::RegisterProfilePrefs(registry);
   HostContentSettingsMap::RegisterProfilePrefs(registry);
   IncognitoModePrefs::RegisterProfilePrefs(registry);
-  InstantUI::RegisterProfilePrefs(registry);
+  //InstantUI::RegisterProfilePrefs(registry);
   NavigationCorrectionTabObserver::RegisterProfilePrefs(registry);
   MediaCaptureDevicesDispatcher::RegisterProfilePrefs(registry);
   MediaDeviceIDSalt::RegisterProfilePrefs(registry);
diff -r -u --color up/chromium/chrome/browser/process_singleton_posix.cc nw/chromium/chrome/browser/process_singleton_posix.cc
--- up/chromium/chrome/browser/process_singleton_posix.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/process_singleton_posix.cc	2023-02-21 04:37:20.516135920 +0000
@@ -99,12 +99,43 @@
 
 namespace {
 
+// XXX:
+class SanitizedSocketPath {
+ public:
+  explicit SanitizedSocketPath(const base::FilePath& socket_path)
+      : socket_path_(socket_path) {
+    if (socket_path.value().length() >= arraysize(sockaddr_un::sun_path)) {
+      bool found_current_dir = GetCurrentDirectory(&old_path_);
+      CHECK(found_current_dir) << "Failed to determine the current directory.";
+      changed_directory_ = SetCurrentDirectory(socket_path.DirName());
+      CHECK(changed_directory_) << "Failed to change directory: " <<
+          socket_path.DirName().value();
+    }
+  }
+
+  ~SanitizedSocketPath() {
+    if (changed_directory_)
+      SetCurrentDirectory(old_path_);
+  }
+
+  base::FilePath SocketPath() const {
+    return changed_directory_ ? socket_path_.BaseName() : socket_path_;
+  }
+
+ private:
+  bool changed_directory_ = false;
+  base::FilePath socket_path_;
+  base::FilePath old_path_;
+
+  DISALLOW_COPY_AND_ASSIGN(SanitizedSocketPath);
+};
+
 // Timeout for the current browser process to respond. 20 seconds should be
 // enough.
-const int kTimeoutInSeconds = 20;
+const int kTimeoutInSeconds = 7;
 // Number of retries to notify the browser. 20 retries over 20 seconds = 1 try
 // per second.
-const int kRetryAttempts = 20;
+const int kRetryAttempts = 7;
 static bool g_disable_prompt;
 const char kStartToken[] = "START";
 const char kACKToken[] = "ACK";
@@ -379,13 +410,16 @@
       return false;
     // Now we know the directory was (at that point) created by the profile
     // owner. Try to connect.
-    sockaddr_un addr;
-    SetupSockAddr(socket_target.value(), &addr);
-    int ret = HANDLE_EINTR(connect(socket->fd(),
-                                   reinterpret_cast<sockaddr*>(&addr),
-                                   sizeof(addr)));
-    if (ret != 0)
-      return false;
+    {
+      SanitizedSocketPath sanitized_socket_target(socket_target);
+      sockaddr_un addr;
+      SetupSockAddr(sanitized_socket_target.SocketPath().value(), &addr);
+      int ret = HANDLE_EINTR(connect(socket->fd(),
+                                     reinterpret_cast<sockaddr*>(&addr),
+                                     sizeof(addr)));
+      if (ret != 0)
+        return false;
+    }
     // Check the cookie again. We only link in /tmp, which is sticky, so, if the
     // directory is still correct, it must have been correct in-between when we
     // connected. POSIX, sadly, lacks a connectat().
@@ -398,8 +432,9 @@
   } else if (errno == EINVAL) {
     // It exists, but is not a symlink (or some other error we detect
     // later). Just connect to it directly; this is an older version of Chrome.
+    SanitizedSocketPath sanitized_socket_path(socket_path);
     sockaddr_un addr;
-    SetupSockAddr(socket_path.value(), &addr);
+    SetupSockAddr(sanitized_socket_path.SocketPath().value(), &addr);
     int ret = HANDLE_EINTR(connect(socket->fd(),
                                    reinterpret_cast<sockaddr*>(&addr),
                                    sizeof(addr)));
@@ -992,12 +1027,15 @@
     return false;
   }
 
-  SetupSocket(socket_target_path.value(), &sock, &addr);
-
-  if (bind(sock, reinterpret_cast<sockaddr*>(&addr), sizeof(addr)) < 0) {
-    PLOG(ERROR) << "Failed to bind() " << socket_target_path.value();
-    CloseSocket(sock);
-    return false;
+  {
+    SanitizedSocketPath sanitized_socket_target(socket_target_path);
+    SetupSocket(sanitized_socket_target.SocketPath().value(), &sock, &addr);
+
+    if (bind(sock, reinterpret_cast<sockaddr*>(&addr), sizeof(addr)) < 0) {
+      PLOG(ERROR) << "Failed to bind() " << socket_target_path.value();
+      CloseSocket(sock);
+      return false;
+    }
   }
 
   if (listen(sock, 5) < 0)
diff -r -u --color up/chromium/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc nw/chromium/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
--- up/chromium/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc	2023-02-21 04:37:20.516135920 +0000
@@ -174,7 +174,7 @@
   extensions::EnsureBrowserContextKeyedServiceFactoriesBuilt();
   extensions::ExtensionManagementFactory::GetInstance();
   chrome_extensions::EnsureBrowserContextKeyedServiceFactoriesBuilt();
-  AppShortcutManagerFactory::GetInstance();
+  //AppShortcutManagerFactory::GetInstance();
 #endif
 
 #if defined(ENABLE_APP_LIST)
diff -r -u --color up/chromium/chrome/browser/profiles/profile_impl.cc nw/chromium/chrome/browser/profiles/profile_impl.cc
--- up/chromium/chrome/browser/profiles/profile_impl.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/profiles/profile_impl.cc	2023-02-21 04:37:20.520135959 +0000
@@ -453,13 +453,14 @@
       path_, sequenced_task_runner, create_mode == CREATE_MODE_SYNCHRONOUS);
 #endif
 
+#if 0
   scoped_refptr<safe_browsing::SafeBrowsingService> safe_browsing_service(
       g_browser_process->safe_browsing_service());
   if (safe_browsing_service.get()) {
     pref_validation_delegate_ =
         safe_browsing_service->CreatePreferenceValidationDelegate(this);
   }
-
+#endif
   {
     prefs_ = chrome_prefs::CreateProfilePrefs(
         path_, sequenced_task_runner, pref_validation_delegate_.get(),
diff -r -u --color up/chromium/chrome/browser/profiles/profile_impl_io_data.cc nw/chromium/chrome/browser/profiles/profile_impl_io_data.cc
--- up/chromium/chrome/browser/profiles/profile_impl_io_data.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/profiles/profile_impl_io_data.cc	2023-02-21 04:37:20.520135959 +0000
@@ -4,6 +4,9 @@
 
 #include "chrome/browser/profiles/profile_impl_io_data.h"
 
+#include "content/nw/src/nw_base.h"
+#include "extensions/common/manifest_constants.h"
+
 #include <set>
 #include <string>
 #include <utility>
@@ -584,6 +587,10 @@
 
   extensions_context->set_net_log(io_thread->net_log());
 
+  std::string domain;
+  if (nw::package()->root()->GetString(extensions::manifest_keys::kNWJSDomain, &domain)) {
+    extensions_context->set_cookie_store(main_request_context()->cookie_store());
+  } else {
   content::CookieStoreConfig cookie_config(
       lazy_params_->extensions_cookie_path,
       lazy_params_->session_cookie_mode,
@@ -594,7 +601,7 @@
   net::CookieStore* extensions_cookie_store =
       content::CreateCookieStore(cookie_config);
   extensions_context->set_cookie_store(extensions_cookie_store);
-
+  }
   scoped_ptr<net::URLRequestJobFactoryImpl> extensions_job_factory(
       new net::URLRequestJobFactoryImpl());
   // TODO(shalev): The extensions_job_factory has a NULL NetworkDelegate.
diff -r -u --color up/chromium/chrome/browser/profiles/profile_info_cache.cc nw/chromium/chrome/browser/profiles/profile_info_cache.cc
--- up/chromium/chrome/browser/profiles/profile_info_cache.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/profiles/profile_info_cache.cc	2023-02-21 04:37:20.520135959 +0000
@@ -1044,7 +1044,7 @@
     size_t icon_index,
     const base::FilePath& profile_path) {
   // Downloading is only supported on desktop.
-#if defined(OS_ANDROID) || defined(OS_CHROMEOS)
+#if 1
   return;
 #endif
   DCHECK(!disable_avatar_download_for_testing_);
diff -r -u --color up/chromium/chrome/browser/renderer_context_menu/context_menu_content_type_platform_app.cc nw/chromium/chrome/browser/renderer_context_menu/context_menu_content_type_platform_app.cc
--- up/chromium/chrome/browser/renderer_context_menu/context_menu_content_type_platform_app.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/renderer_context_menu/context_menu_content_type_platform_app.cc	2023-02-21 04:37:20.524135998 +0000
@@ -11,6 +11,8 @@
 #include "extensions/common/extension.h"
 #include "extensions/common/manifest.h"
 
+#include "content/nw/src/common/shell_switches.h"
+
 using extensions::Extension;
 using extensions::ProcessManager;
 
@@ -39,6 +41,14 @@
 
   DCHECK(platform_app->is_platform_app());
 
+#if defined(NWJS_SDK)
+  bool enable_devtools = true;
+  const base::CommandLine* command_line =
+      base::CommandLine::ForCurrentProcess();
+  if (command_line->HasSwitch(switches::kDisableDevTools))
+    enable_devtools = false;
+#endif
+
   switch (group) {
     // Add undo/redo, cut/copy/paste etc for text fields.
     case ITEM_GROUP_EDITABLE:
@@ -46,12 +56,10 @@
       return ContextMenuContentType::SupportsGroup(group);
     case ITEM_GROUP_CURRENT_EXTENSION:
       return true;
+#if defined(NWJS_SDK)
     case ITEM_GROUP_DEVTOOLS_UNPACKED_EXT:
-      // Add dev tools for unpacked extensions.
-      return extensions::Manifest::IsUnpackedLocation(
-                 platform_app->location()) ||
-             base::CommandLine::ForCurrentProcess()->HasSwitch(
-                 switches::kDebugPackedApps);
+      return enable_devtools;
+#endif
     default:
       return false;
   }
diff -r -u --color up/chromium/chrome/browser/renderer_context_menu/render_view_context_menu.cc nw/chromium/chrome/browser/renderer_context_menu/render_view_context_menu.cc
--- up/chromium/chrome/browser/renderer_context_menu/render_view_context_menu.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/renderer_context_menu/render_view_context_menu.cc	2023-02-21 04:37:20.524135998 +0000
@@ -6,6 +6,8 @@
 
 #include <stddef.h>
 
+#include "content/nw/src/common/shell_switches.h"
+
 #include <algorithm>
 #include <set>
 #include <utility>
@@ -752,15 +754,25 @@
     AppendCurrentExtensionItems();
   }
 
+#if defined(NWJS_SDK)
+  bool enable_devtools = true;
+  const base::CommandLine* command_line =
+      base::CommandLine::ForCurrentProcess();
+  if (command_line->HasSwitch(switches::kDisableDevTools))
+    enable_devtools = false;
+
   if (content_type_->SupportsGroup(
           ContextMenuContentType::ITEM_GROUP_DEVELOPER)) {
+    if (enable_devtools)
     AppendDeveloperItems();
   }
 
   if (content_type_->SupportsGroup(
           ContextMenuContentType::ITEM_GROUP_DEVTOOLS_UNPACKED_EXT)) {
+    if (enable_devtools)
     AppendDevtoolsForUnpackedExtensions();
   }
+#endif
 
   if (content_type_->SupportsGroup(
           ContextMenuContentType::ITEM_GROUP_PRINT_PREVIEW)) {
@@ -1093,6 +1105,7 @@
   menu_model_.AddItemWithStringId(IDC_PRINT, IDS_CONTENT_CONTEXT_PRINT);
   AppendMediaRouterItem();
 
+#if 0
   if (TranslateService::IsTranslatableURL(params_.page_url)) {
     std::string locale = g_browser_process->GetApplicationLocale();
     locale = translate::TranslateDownloadManager::GetLanguageCode(locale);
@@ -1102,6 +1115,7 @@
         IDC_CONTENT_CONTEXT_TRANSLATE,
         l10n_util::GetStringFUTF16(IDS_CONTENT_CONTEXT_TRANSLATE, language));
   }
+#endif
 }
 
 void RenderViewContextMenu::AppendCopyItem() {
@@ -1187,7 +1201,11 @@
 }
 
 void RenderViewContextMenu::AppendEditableItems() {
-  const bool use_spelling = !chrome::IsRunningInForcedAppMode();
+  bool use_spelling = !chrome::IsRunningInForcedAppMode();
+  const base::CommandLine* command_line =
+      base::CommandLine::ForCurrentProcess();
+  if (!command_line->HasSwitch(switches::kEnableSpellChecking))
+    use_spelling = false;
   if (use_spelling)
     AppendSpellingSuggestionItems();
 
@@ -1226,6 +1244,7 @@
 }
 
 void RenderViewContextMenu::AppendLanguageSettings() {
+#if 0
   const bool use_spelling = !chrome::IsRunningInForcedAppMode();
   if (!use_spelling)
     return;
@@ -1243,6 +1262,7 @@
   spelling_options_submenu_observer_->InitMenu(params_);
   observers_.AddObserver(spelling_options_submenu_observer_.get());
 #endif
+#endif
 }
 
 void RenderViewContextMenu::AppendSpellingSuggestionItems() {
@@ -1379,6 +1399,8 @@
       return true;
 
     case IDC_CONTENT_CONTEXT_TRANSLATE: {
+      return false;
+#if 0
       ChromeTranslateClient* chrome_translate_client =
           ChromeTranslateClient::FromWebContents(embedder_web_contents_);
       // If no |chrome_translate_client| attached with this WebContents or we're
@@ -1407,6 +1429,7 @@
                  target_lang) &&
              // Disable on the Instant Extended NTP.
              !search::IsInstantNTP(embedder_web_contents_);
+#endif
     }
 
     case IDC_CONTENT_CONTEXT_OPENLINKNEWTAB:
@@ -1992,8 +2015,8 @@
                                   security_model_client->GetSecurityInfo());
       break;
     }
-
     case IDC_CONTENT_CONTEXT_TRANSLATE: {
+#if 0
       // A translation might have been triggered by the time the menu got
       // selected, do nothing in that case.
       ChromeTranslateClient* chrome_translate_client =
@@ -2019,9 +2042,9 @@
           chrome_translate_client->GetTranslateManager();
       DCHECK(manager);
       manager->TranslatePage(original_lang, target_lang, true);
+#endif
       break;
     }
-
     case IDC_CONTENT_CONTEXT_RELOADFRAME:
       // We always obey the cache here.
       // TODO(evanm): Perhaps we could allow shift-clicking the menu item to do
diff -r -u --color up/chromium/chrome/browser/renderer_host/chrome_resource_dispatcher_host_delegate.cc nw/chromium/chrome/browser/renderer_host/chrome_resource_dispatcher_host_delegate.cc
--- up/chromium/chrome/browser/renderer_host/chrome_resource_dispatcher_host_delegate.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/renderer_host/chrome_resource_dispatcher_host_delegate.cc	2023-02-21 04:37:20.528136037 +0000
@@ -243,6 +243,7 @@
     content::ResourceContext* resource_context,
     ResourceType resource_type,
     ScopedVector<content::ResourceThrottle>* throttles) {
+#if 0
   const char* crx_id = NULL;
   component_updater::ComponentUpdateService* cus =
       g_browser_process->component_updater();
@@ -265,6 +266,7 @@
     throttles->push_back(
         component_updater::GetOnDemandResourceThrottle(cus, crx_id));
   }
+#endif
 }
 #endif  // !defined(DISABLE_NACL)
 
@@ -317,8 +319,10 @@
     content::AppCacheService* appcache_service,
     ResourceType resource_type,
     ScopedVector<content::ResourceThrottle>* throttles) {
+#if defined(FULL_SAFE_BROWSING) || defined(MOBILE_SAFE_BROWSING)
   if (safe_browsing_.get())
     safe_browsing_->OnResourceRequest(request);
+#endif
 
   const ResourceRequestInfo* info = ResourceRequestInfo::ForRequest(request);
   bool is_prerendering =
diff -r -u --color up/chromium/chrome/browser/renderer_preferences_util.cc nw/chromium/chrome/browser/renderer_preferences_util.cc
--- up/chromium/chrome/browser/renderer_preferences_util.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/renderer_preferences_util.cc	2023-02-21 04:37:20.528136037 +0000
@@ -33,6 +33,8 @@
 #include "ui/views/linux_ui/linux_ui.h"
 #endif
 
+#include "content/nw/src/nw_content.h"
+
 namespace renderer_preferences_util {
 
 void UpdateFromSystemSettings(content::RendererPreferences* prefs,
@@ -132,6 +134,9 @@
   prefs->plugin_fullscreen_allowed =
       pref_service->GetBoolean(prefs::kFullscreenAllowed);
 #endif
+  std::string user_agent;
+  if (nw::GetUserAgentFromManifest(&user_agent))
+    prefs->user_agent_override = user_agent;
 }
 
 }  // namespace renderer_preferences_util
diff -r -u --color up/chromium/chrome/browser/resources/component_extension_resources.grd nw/chromium/chrome/browser/resources/component_extension_resources.grd
--- up/chromium/chrome/browser/resources/component_extension_resources.grd	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/resources/component_extension_resources.grd	2023-02-21 04:37:20.604136777 +0000
@@ -25,6 +25,7 @@
       </if>
     </structures>
     <includes>
+      <include name="IDR_NWJS_DEFAULT_JS" file="nwjs/default.js" type="BINDATA" />
       <include name="IDR_NETWORK_SPEECH_SYNTHESIS_JS" file="network_speech_synthesis/tts_extension.js" type="BINDATA" />
 
       <if expr="chromeos">
@@ -32,6 +33,7 @@
         <include name="IDR_BRAILLE_IME_MAIN_JS" file="chromeos/braille_ime/main.js" type="BINDATA" />
       </if>
 
+      <if expr="nwjs_sdk">
       <include name="IDR_BOOKMARK_MANAGER_BOOKMARK_MANAGER_SEARCH" file="bookmark_manager/images/bookmark_manager_search.png" type="BINDATA" />
       <include name="IDR_BOOKMARK_MANAGER_BOOKMARK_MANAGER_SEARCH_RTL" file="bookmark_manager/images/bookmark_manager_search_rtl.png" type="BINDATA" />
       <include name="IDR_BOOKMARK_MANAGER_BOOKMARK_MAIN_JS" file="bookmark_manager/js/main.js" type="BINDATA" />
@@ -150,6 +152,9 @@
       <if expr="enable_settings_app">
         <include name="IDR_SETTINGS_APP_JS" file="settings_app/settings_app.js" type="BINDATA" />
       </if>
+      </if> <!-- nwjs sdk -->
+      <include name="IDR_NWJS_DEFAPP_INDEX_HTML" file="nwjs_default_app/nw_blank.html" allowexternalscript="true" type="BINDATA" />
+      <include name="IDR_NWJS_DEFAPP_MAIN_JS"    file="nwjs_default_app/main.js" type="BINDATA" />
       <if expr="enable_plugins">
         <include name="IDR_PDF_INDEX_CSS" file="pdf/index.css" allowexternalscript="true" type="BINDATA" />
         <include name="IDR_PDF_INDEX_HTML" file="pdf/index.html" allowexternalscript="true" type="BINDATA" />
@@ -195,6 +200,8 @@
         <include name="IDR_PDF_VIEWER_ZOOM_SELECTOR_HTML" file="pdf/elements/viewer-zoom-toolbar/viewer-zoom-toolbar.html" type="BINDATA" />
         <include name="IDR_PDF_VIEWER_ZOOM_SELECTOR_JS" file="pdf/elements/viewer-zoom-toolbar/viewer-zoom-toolbar.js" type="BINDATA" />
       </if>
+      
+      <if expr="nwjs_sdk">
       <include name="IDR_CRYPTOTOKEN_UTIL_JS" file="cryptotoken/util.js" type="BINDATA" />
       <include name="IDR_CRYPTOTOKEN_B64_JS" file="cryptotoken/b64.js" type="BINDATA" />
       <include name="IDR_CRYPTOTOKEN_CLOSEABLE_JS" file="cryptotoken/closeable.js" type="BINDATA" />
@@ -251,6 +258,7 @@
            to be the only viable option at the moment. -->
       <include name="IDR_WHISPERNET_PROXY_WHISPERNET_PROXY_PROXY_NMF" file="whispernet_proxy/whispernet_proxy.nmf.png" type="BINDATA" />
       <include name="IDR_WHISPERNET_PROXY_WHISPERNET_PROXY_PROXY_PEXE" file="whispernet_proxy/whispernet_proxy_pnacl.pexe.png" type="BINDATA" />
+      </if> <!-- nwjs_sdk -->
     </includes>
   </release>
 </grit>
Only in nw/chromium/chrome/browser/resources: empty.css
Only in nw/chromium/chrome/browser/resources: empty.html
Only in nw/chromium/chrome/browser/resources: empty.js
Only in nw/chromium/chrome/browser/resources: empty.json
Only in nw/chromium/chrome/browser/resources: empty.png
Only in nw/chromium/chrome/browser/resources: nwjs
Only in nw/chromium/chrome/browser/resources: nwjs_default_app
diff -r -u --color up/chromium/chrome/browser/resources/pdf/pdf.js nw/chromium/chrome/browser/resources/pdf/pdf.js
--- up/chromium/chrome/browser/resources/pdf/pdf.js	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/resources/pdf/pdf.js	2023-02-21 04:37:20.648137205 +0000
@@ -629,7 +629,7 @@
         if (this.isPrintPreview_)
           this.navigator_.navigate(message.data.url, true);
         else
-          this.navigator_.navigate(message.data.url, message.data.newTab);
+          this.navigator_.navigate(message.data.url, true); //message.data.newTab);
         break;
       case 'setScrollPosition':
         var position = this.viewport_.position;
diff -r -u --color up/chromium/chrome/browser/resources/print_preview/data/destination_store.js nw/chromium/chrome/browser/resources/print_preview/data/destination_store.js
--- up/chromium/chrome/browser/resources/print_preview/data/destination_store.js	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/resources/print_preview/data/destination_store.js	2023-02-21 04:37:20.648137205 +0000
@@ -429,8 +429,10 @@
     init: function(
         isInAppKioskMode,
         systemDefaultDestinationId,
-        serializedDefaultDestinationSelectionRulesStr) {
+        serializedDefaultDestinationSelectionRulesStr,
+        isInNWPrintMode) {
       this.pdfPrinterEnabled_ = !isInAppKioskMode;
+      this.isInNWPrintMode_ = isInNWPrintMode;
       this.systemDefaultDestinationId_ = systemDefaultDestinationId;
       this.createLocalPdfPrintDestination_();
 
@@ -458,7 +460,7 @@
       var capabilities = null;
       var extensionId = '';
       var extensionName = '';
-      if (this.appState_.selectedDestinationId &&
+      if (this.appState_.selectedDestinationId && !this.isInNWPrintMode_ &&
           this.appState_.selectedDestinationOrigin) {
         origin = this.appState_.selectedDestinationOrigin;
         id = this.appState_.selectedDestinationId;
@@ -672,7 +674,7 @@
      * @private
      */
     convertPreselectedToDestinationMatch_: function() {
-      if (this.appState_.selectedDestinationId &&
+      if (this.appState_.selectedDestinationId && !this.isInNWPrintMode_ &&
           this.appState_.selectedDestinationOrigin) {
         return this.createExactDestinationMatch_(
             this.appState_.selectedDestinationOrigin,
diff -r -u --color up/chromium/chrome/browser/resources/print_preview/native_layer.js nw/chromium/chrome/browser/resources/print_preview/native_layer.js
--- up/chromium/chrome/browser/resources/print_preview/native_layer.js	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/resources/print_preview/native_layer.js	2023-02-21 04:37:20.652137244 +0000
@@ -491,7 +491,8 @@
           initialSettings['shouldPrintSelectionOnly'] || false,
           initialSettings['printerName'] || null,
           initialSettings['appState'] || null,
-          initialSettings['defaultDestinationSelectionRules'] || null);
+          initialSettings['defaultDestinationSelectionRules'] || null,
+          initialSettings['nwPrintMode'] || false);
 
       var initialSettingsSetEvent = new Event(
           NativeLayer.EventType.INITIAL_SETTINGS_SET);
@@ -948,8 +949,10 @@
       selectionOnly,
       systemDefaultDestinationId,
       serializedAppStateStr,
-      serializedDefaultDestinationSelectionRulesStr) {
+      serializedDefaultDestinationSelectionRulesStr,
+      nwPrintMode) {
 
+    this.isNWPrintMode_ = nwPrintMode;
     /**
      * Whether the print preview should be in auto-print mode.
      * @type {boolean}
@@ -1044,6 +1047,9 @@
   };
 
   NativeInitialSettings.prototype = {
+    get isInNWPrintMode() {
+      return this.isNWPrintMode_;
+    },
     /**
      * @return {boolean} Whether the print preview should be in auto-print mode.
      */
diff -r -u --color up/chromium/chrome/browser/resources/print_preview/print_preview.js nw/chromium/chrome/browser/resources/print_preview/print_preview.js
--- up/chromium/chrome/browser/resources/print_preview/print_preview.js	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/resources/print_preview/print_preview.js	2023-02-21 04:37:20.652137244 +0000
@@ -647,7 +647,8 @@
       this.destinationStore_.init(
           settings.isInAppKioskMode,
           settings.systemDefaultDestinationId,
-          settings.serializedDefaultDestinationSelectionRulesStr);
+          settings.serializedDefaultDestinationSelectionRulesStr,
+          settings.isInNWPrintMode);
       this.appState_.setInitialized();
 
       $('document-title').innerText = settings.documentTitle;
diff -r -u --color up/chromium/chrome/browser/shell_integration_linux.cc nw/chromium/chrome/browser/shell_integration_linux.cc
--- up/chromium/chrome/browser/shell_integration_linux.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/shell_integration_linux.cc	2023-02-21 04:37:20.700137711 +0000
@@ -48,6 +48,8 @@
 #include "chrome/common/chrome_switches.h"
 #include "components/version_info/version_info.h"
 #include "content/public/browser/browser_thread.h"
+#include "content/nw/src/nw_base.h"
+#include "content/nw/src/nw_package.h"
 #include "grit/chrome_unscaled_resources.h"
 #include "ui/base/resource/resource_bundle.h"
 #include "ui/gfx/image/image_family.h"
@@ -570,12 +572,15 @@
 }
 
 std::string GetProgramClassName() {
+  return nw::package()->GetName();
+#if 0
   scoped_ptr<base::Environment> env(base::Environment::Create());
   std::string desktop_file(GetDesktopName(env.get()));
   std::size_t last = desktop_file.find(".desktop");
   if (last != std::string::npos)
     return desktop_file.substr(0, last);
   return desktop_file;
+#endif
 }
 
 std::string GetDesktopName(base::Environment* env) {
diff -r -u --color up/chromium/chrome/browser/spellchecker/feedback.cc nw/chromium/chrome/browser/spellchecker/feedback.cc
--- up/chromium/chrome/browser/spellchecker/feedback.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/spellchecker/feedback.cc	2023-02-21 04:37:20.708137789 +0000
@@ -26,7 +26,7 @@
 namespace spellcheck {
 
 Feedback::Feedback(size_t max_total_text_size)
-    : max_total_text_size_(max_total_text_size), total_text_size_(0) {
+    : empty_hash_collection_(), max_total_text_size_(max_total_text_size), total_text_size_(0) {
   DCHECK_GE(max_total_text_size, 1024U);
 }
 
diff -r -u --color up/chromium/chrome/browser/spellchecker/spellcheck_factory.cc nw/chromium/chrome/browser/spellchecker/spellcheck_factory.cc
--- up/chromium/chrome/browser/spellchecker/spellcheck_factory.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/spellchecker/spellcheck_factory.cc	2023-02-21 04:37:20.708137789 +0000
@@ -75,7 +75,7 @@
   user_prefs->RegisterStringPref(
       prefs::kSpellCheckDictionary,
       l10n_util::GetStringUTF8(IDS_SPELLCHECK_DICTIONARY));
-  user_prefs->RegisterBooleanPref(prefs::kSpellCheckUseSpellingService, false);
+  user_prefs->RegisterBooleanPref(prefs::kSpellCheckUseSpellingService, true);
   user_prefs->RegisterBooleanPref(
       prefs::kEnableContinuousSpellcheck,
       true,
diff -r -u --color up/chromium/chrome/browser/status_icons/status_icon.h nw/chromium/chrome/browser/status_icons/status_icon.h
--- up/chromium/chrome/browser/status_icons/status_icon.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/status_icons/status_icon.h	2023-02-21 04:37:20.712137828 +0000
@@ -71,11 +71,11 @@
   // thread to do it.  Use sparingly.
   virtual void ForceVisible();
 
- protected:
+ public:
   // Invoked after a call to SetContextMenu() to let the platform-specific
   // subclass update the native context menu based on the new model. If NULL is
   // passed, subclass should destroy the native context menu.
-  virtual void UpdatePlatformContextMenu(StatusIconMenuModel* model) = 0;
+  virtual void UpdatePlatformContextMenu(ui::MenuModel* model) = 0;
 
  private:
   base::ObserverList<StatusIconObserver> observers_;
diff -r -u --color up/chromium/chrome/browser/supervised_user/supervised_user_service.cc nw/chromium/chrome/browser/supervised_user/supervised_user_service.cc
--- up/chromium/chrome/browser/supervised_user/supervised_user_service.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/supervised_user/supervised_user_service.cc	2023-02-21 04:37:20.716137867 +0000
@@ -205,6 +205,7 @@
   if (sync_service)
     sync_service->AddPreferenceProvider(this);
 
+#if 0
   std::string client_id = component_updater::SupervisedUserWhitelistInstaller::
       ClientIdForProfilePath(profile_->GetPath());
   whitelist_service_.reset(new SupervisedUserWhitelistService(
@@ -213,6 +214,7 @@
   whitelist_service_->AddSiteListsChangedCallback(
       base::Bind(&SupervisedUserService::OnSiteListsChanged,
                  weak_ptr_factory_.GetWeakPtr()));
+#endif
 
   SetActive(ProfileIsSupervised());
 }
diff -r -u --color up/chromium/chrome/browser/ui/apps/chrome_app_delegate.cc nw/chromium/chrome/browser/ui/apps/chrome_app_delegate.cc
--- up/chromium/chrome/browser/ui/apps/chrome_app_delegate.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/apps/chrome_app_delegate.cc	2023-02-21 04:37:20.764138334 +0000
@@ -7,6 +7,12 @@
 #include <utility>
 
 #include "base/macros.h"
+
+#include "chrome/browser/sessions/session_tab_helper.h"
+#include "chrome/browser/extensions/tab_helper.h"
+#include "chrome/browser/password_manager/chrome_password_manager_client.h"
+#include "chrome/browser/ui/passwords/manage_passwords_ui_controller.h"
+
 #include "base/memory/scoped_ptr.h"
 #include "base/strings/stringprintf.h"
 #include "chrome/browser/app_mode/app_mode_utils.h"
@@ -51,10 +57,16 @@
 #endif  // defined(ENABLE_PRINT_PREVIEW)
 #endif  // defined(ENABLE_PRINTING)
 
+#include "chrome/browser/browser_process.h"
+#include "chrome/browser/ui/autofill/chrome_autofill_client.h"
+#include "components/autofill/content/browser/content_autofill_driver_factory.h"
+#include "components/autofill/core/browser/autofill_manager.h"
+#include "chrome/browser/ui/prefs/prefs_tab_helper.h"
+
 namespace {
 
 // Time to wait for an app window to show before allowing Chrome to quit.
-int kAppWindowFirstShowTimeoutSeconds = 10;
+//int kAppWindowFirstShowTimeoutSeconds = 10;
 
 bool disable_external_open_for_testing_ = false;
 
@@ -69,7 +81,7 @@
   if (params.disposition == NEW_BACKGROUND_TAB) {
     new_tab_params.disposition = NEW_BACKGROUND_TAB;
   } else {
-    new_tab_params.disposition = NEW_FOREGROUND_TAB;
+    new_tab_params.disposition = NEW_POPUP;
     new_tab_params.window_action = chrome::NavigateParams::SHOW_WINDOW;
   }
 
@@ -172,6 +184,7 @@
     : has_been_shown_(false),
       is_hidden_(true),
       new_window_contents_delegate_(new NewWindowContentsDelegate()),
+      web_contents_(nullptr),
       weak_factory_(this) {
   if (keep_alive) {
     keep_alive_.reset(
@@ -192,6 +205,8 @@
 }
 
 void ChromeAppDelegate::InitWebContents(content::WebContents* web_contents) {
+  web_contents_ = web_contents;
+
   favicon::CreateContentFaviconDriverForWebContents(web_contents);
 
 #if defined(ENABLE_PRINTING)
@@ -202,12 +217,31 @@
   printing::PrintViewManagerBasic::CreateForWebContents(web_contents);
 #endif  // defined(ENABLE_PRINT_PREVIEW)
 #endif  // defined(ENABLE_PRINTING)
+  // Kiosk app supports zooming.
+  //if (chrome::IsRunningInForcedAppMode())
+  // ZoomController comes before common tab helpers since ChromeExtensionWebContentsObserver
+  // may want to register as a ZoomObserver with it.
+  ui_zoom::ZoomController::CreateForWebContents(web_contents);
+
+#if 1
+  extensions::TabHelper::CreateForWebContents(web_contents);
+#else
+  SessionTabHelper::CreateForWebContents(web_contents);
+  
   extensions::ChromeExtensionWebContentsObserver::CreateForWebContents(
       web_contents);
-
-  // Kiosk app supports zooming.
-  if (chrome::IsRunningInForcedAppMode())
-    ui_zoom::ZoomController::CreateForWebContents(web_contents);
+#endif
+  autofill::ChromeAutofillClient::CreateForWebContents(web_contents);
+  autofill::ContentAutofillDriverFactory::CreateForWebContentsAndDelegate(
+      web_contents,
+      autofill::ChromeAutofillClient::FromWebContents(web_contents),
+      g_browser_process->GetApplicationLocale(),
+      autofill::AutofillManager::ENABLE_AUTOFILL_DOWNLOAD_MANAGER);
+  ChromePasswordManagerClient::CreateForWebContentsWithAutofillClient(
+      web_contents,
+      autofill::ChromeAutofillClient::FromWebContents(web_contents));
+  ManagePasswordsUIController::CreateForWebContents(web_contents);
+  PrefsTabHelper::CreateForWebContents(web_contents);
 }
 
 void ChromeAppDelegate::RenderViewCreated(
@@ -247,11 +281,13 @@
                                        bool user_gesture,
                                        bool* was_blocked) {
   if (!disable_external_open_for_testing_) {
+#if 0
     // We don't really want to open a window for |new_contents|, but we need to
     // capture its intended navigation. Here we give ownership to the
     // NewWindowContentsDelegate, which will dispose of the contents once
     // a navigation is captured.
     new_contents->SetDelegate(new_window_contents_delegate_.get());
+#endif
     return;
   }
   chrome::ScopedTabbedBrowserDisplayer displayer(
@@ -332,6 +368,7 @@
 
 void ChromeAppDelegate::OnHide() {
   is_hidden_ = true;
+#if 0
   if (has_been_shown_) {
     keep_alive_.reset();
     return;
@@ -344,12 +381,15 @@
       base::Bind(&ChromeAppDelegate::RelinquishKeepAliveAfterTimeout,
                  weak_factory_.GetWeakPtr()),
       base::TimeDelta::FromSeconds(kAppWindowFirstShowTimeoutSeconds));
+#endif
 }
 
 void ChromeAppDelegate::OnShow() {
   has_been_shown_ = true;
   is_hidden_ = false;
+#if 0
   keep_alive_.reset(new ScopedKeepAlive(KeepAliveOrigin::CHROME_APP_DELEGATE));
+#endif
 }
 
 void ChromeAppDelegate::Observe(int type,
diff -r -u --color up/chromium/chrome/browser/ui/apps/chrome_app_delegate.h nw/chromium/chrome/browser/ui/apps/chrome_app_delegate.h
--- up/chromium/chrome/browser/ui/apps/chrome_app_delegate.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/apps/chrome_app_delegate.h	2023-02-21 04:37:20.764138334 +0000
@@ -69,7 +69,6 @@
   void SetTerminatingCallback(const base::Closure& callback) override;
   void OnHide() override;
   void OnShow() override;
-
   // content::NotificationObserver:
   void Observe(int type,
                const content::NotificationSource& source,
@@ -81,6 +80,7 @@
   scoped_ptr<NewWindowContentsDelegate> new_window_contents_delegate_;
   base::Closure terminating_callback_;
   content::NotificationRegistrar registrar_;
+  content::WebContents* web_contents_;
   base::WeakPtrFactory<ChromeAppDelegate> weak_factory_;
 
   DISALLOW_COPY_AND_ASSIGN(ChromeAppDelegate);
diff -r -u --color up/chromium/chrome/browser/ui/apps/chrome_app_window_client.cc nw/chromium/chrome/browser/ui/apps/chrome_app_window_client.cc
--- up/chromium/chrome/browser/ui/apps/chrome_app_window_client.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/apps/chrome_app_window_client.cc	2023-02-21 04:37:20.764138334 +0000
@@ -13,6 +13,8 @@
 #include "extensions/browser/app_window/app_window.h"
 #include "extensions/common/extension.h"
 
+#include "content/nw/src/nw_content.h"
+
 // TODO(jamescook): We probably shouldn't compile this class at all on Android.
 // See http://crbug.com/343612
 #if !defined(OS_ANDROID)
@@ -38,8 +40,10 @@
 #if defined(OS_ANDROID)
   return NULL;
 #else
-  return new extensions::AppWindow(context, new ChromeAppDelegate(true),
+  extensions::AppWindow* ret = new extensions::AppWindow(context, new ChromeAppDelegate(true),
                                    extension);
+  nw::CreateAppWindowHook(ret);
+  return ret;
 #endif
 }
 
diff -r -u --color up/chromium/chrome/browser/ui/browser.cc nw/chromium/chrome/browser/ui/browser.cc
--- up/chromium/chrome/browser/ui/browser.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/browser.cc	2023-02-21 04:37:20.780138490 +0000
@@ -294,7 +294,7 @@
 // Browser, CreateParams:
 
 Browser::CreateParams::CreateParams(Profile* profile)
-    : type(TYPE_TABBED),
+    : type(TYPE_POPUP),
       profile(profile),
       trusted_source(false),
       initial_show_state(ui::SHOW_STATE_DEFAULT),
@@ -302,7 +302,7 @@
       window(NULL) {}
 
 Browser::CreateParams::CreateParams(Type type, Profile* profile)
-    : type(type),
+    : type(TYPE_POPUP),
       profile(profile),
       trusted_source(false),
       initial_show_state(ui::SHOW_STATE_DEFAULT),
@@ -1735,7 +1735,8 @@
                                  int opener_render_frame_id,
                                  const std::string& frame_name,
                                  const GURL& target_url,
-                                 WebContents* new_contents) {
+                                 WebContents* new_contents,
+                                 const base::string16& nw_window_manifest) {
   // Adopt the WebContents now, so all observers are in place, as the network
   // requests for its initial navigation will start immediately. The WebContents
   // will later be inserted into this browser using Browser::Navigate via
@@ -2211,11 +2212,13 @@
 
 void Browser::OnIsPageTranslatedChanged(content::WebContents* source) {
   DCHECK(source);
+#if 0
   if (tab_strip_model_->GetActiveWebContents() == source) {
     window_->SetTranslateIconToggled(
         ChromeTranslateClient::FromWebContents(
             source)->GetLanguageState().IsPageTranslated());
   }
+#endif
 }
 
 void Browser::OnTranslateEnabledChanged(content::WebContents* source) {
@@ -2481,15 +2484,15 @@
   CoreTabHelper::FromWebContents(web_contents)->set_delegate(delegate);
   SearchEngineTabHelper::FromWebContents(web_contents)->set_delegate(delegate);
   SearchTabHelper::FromWebContents(web_contents)->set_delegate(delegate);
-  translate::ContentTranslateDriver& content_translate_driver =
-      ChromeTranslateClient::FromWebContents(web_contents)->translate_driver();
+  // translate::ContentTranslateDriver& content_translate_driver =
+  //     ChromeTranslateClient::FromWebContents(web_contents)->translate_driver();
   if (delegate) {
     ui_zoom::ZoomController::FromWebContents(web_contents)->AddObserver(this);
-    content_translate_driver.AddObserver(this);
+    //content_translate_driver.AddObserver(this);
   } else {
     ui_zoom::ZoomController::FromWebContents(web_contents)->RemoveObserver(
         this);
-    content_translate_driver.RemoveObserver(this);
+    //content_translate_driver.RemoveObserver(this);
   }
 }
 
diff -r -u --color up/chromium/chrome/browser/ui/browser.h nw/chromium/chrome/browser/ui/browser.h
--- up/chromium/chrome/browser/ui/browser.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/browser.h	2023-02-21 04:37:20.780138490 +0000
@@ -614,7 +614,8 @@
                           int opener_render_frame_id,
                           const std::string& frame_name,
                           const GURL& target_url,
-                          content::WebContents* new_contents) override;
+                          content::WebContents* new_contents,
+                          const base::string16& nw_window_manifest) override;
   void RendererUnresponsive(content::WebContents* source) override;
   void RendererResponsive(content::WebContents* source) override;
   void DidNavigateMainFramePostCommit(
diff -r -u --color up/chromium/chrome/browser/ui/browser_commands.cc nw/chromium/chrome/browser/ui/browser_commands.cc
--- up/chromium/chrome/browser/ui/browser_commands.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/browser_commands.cc	2023-02-21 04:37:20.780138490 +0000
@@ -327,6 +327,7 @@
 }
 
 void NewEmptyWindow(Profile* profile) {
+#if 0
   bool incognito = profile->IsOffTheRecord();
   PrefService* prefs = profile->GetPrefs();
   if (incognito) {
@@ -354,6 +355,7 @@
       OpenEmptyWindow(profile->GetOriginalProfile());
     }
   }
+#endif
 }
 
 Browser* OpenEmptyWindow(Profile* profile) {
@@ -805,6 +807,7 @@
 }
 
 void Translate(Browser* browser) {
+#if 0
   if (!browser->window()->IsActive())
     return;
 
@@ -822,6 +825,7 @@
   }
   browser->window()->ShowTranslateBubble(
       web_contents, step, translate::TranslateErrors::NONE, true);
+#endif
 }
 
 void ManagePasswordsForPage(Browser* browser) {
diff -r -u --color up/chromium/chrome/browser/ui/chrome_pages.cc nw/chromium/chrome/browser/ui/chrome_pages.cc
--- up/chromium/chrome/browser/ui/chrome_pages.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/chrome_pages.cc	2023-02-21 04:37:20.784138529 +0000
@@ -55,7 +55,7 @@
 namespace chrome {
 namespace {
 
-const char kHashMark[] = "#";
+//const char kHashMark[] = "#";
 
 void OpenBookmarkManagerWithHash(Browser* browser,
                                  const std::string& action,
@@ -131,10 +131,12 @@
 #endif
 }
 
+#if 0
 std::string GenerateContentSettingsExceptionsSubPage(ContentSettingsType type) {
   return kContentSettingsExceptionsSubPage + std::string(kHashMark) +
          options::ContentSettingsHandler::ContentSettingsTypeToGroupName(type);
 }
+#endif
 
 }  // namespace
 
@@ -299,25 +301,31 @@
 
 void ShowContentSettingsExceptions(Browser* browser,
                                    ContentSettingsType content_settings_type) {
+#if 0
   ShowSettingsSubPage(
       browser, GenerateContentSettingsExceptionsSubPage(content_settings_type));
+#endif
 }
 
 void ShowContentSettingsExceptionsInWindow(
     Profile* profile,
     ContentSettingsType content_settings_type) {
+#if 0
   DCHECK(switches::SettingsWindowEnabled());
   ShowSettingsSubPageForProfile(
       profile, GenerateContentSettingsExceptionsSubPage(content_settings_type));
+#endif
 }
 
 void ShowContentSettings(Browser* browser,
                          ContentSettingsType content_settings_type) {
+#if 0
   ShowSettingsSubPage(
       browser,
       kContentSettingsSubPage + std::string(kHashMark) +
           options::ContentSettingsHandler::ContentSettingsTypeToGroupName(
               content_settings_type));
+#endif
 }
 
 void ShowClearBrowsingDataDialog(Browser* browser) {
diff -r -u --color up/chromium/chrome/browser/ui/cocoa/apps/app_shim_menu_controller_mac.mm nw/chromium/chrome/browser/ui/cocoa/apps/app_shim_menu_controller_mac.mm
--- up/chromium/chrome/browser/ui/cocoa/apps/app_shim_menu_controller_mac.mm	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/cocoa/apps/app_shim_menu_controller_mac.mm	2023-02-21 04:37:20.788138568 +0000
@@ -24,6 +24,11 @@
 
 using extensions::Extension;
 
+#include "chrome/browser/devtools/devtools_window.h"
+
+#include "content/nw/src/api/menu/menu.h"
+#include "content/nw/src/common/shell_switches.h"
+
 namespace {
 
 // When an app window loses main status, AppKit may make another app window main
@@ -75,6 +80,7 @@
   [[top_level_item submenu] addItem:item];
 }
 
+#if 0
 // Finds an item with |item_tag| and removes it from the submenu of
 // |top_level_item|.
 void RemoveMenuItemWithTag(NSMenuItem* top_level_item,
@@ -132,6 +138,7 @@
   [alternate_item setHidden:!visible];
   [menu_item setHidden:!visible];
 }
+#endif
 
 // Return the Extension (if any) associated with the given window. If it is not
 // a platform app nor hosted app, but it is a browser, |is_browser| will be set
@@ -211,6 +218,7 @@
     [[NSApp keyWindow] makeKeyAndOrderFront:nil];
 }
 
+#if 0
 // Sets the window cycle list to Chrome browser windows only.
 void SetChromeCyclesWindows(int sequence_number) {
   if (g_window_cycle_sequence_number != sequence_number)
@@ -226,6 +234,7 @@
   if (any_change)
     [[NSApp keyWindow] makeKeyAndOrderFront:nil];
 }
+#endif
 
 }  // namespace
 
@@ -354,6 +363,7 @@
 - (void)hideCurrentPlatformApp;
 // If the currently focused window belongs to a platform app, focus the app.
 - (void)focusCurrentPlatformApp;
+- (void)showDevtools;
 @end
 
 @implementation AppShimMenuController
@@ -393,6 +403,7 @@
               resourceId:IDS_EXIT_MAC
                   action:@selector(quitCurrentPlatformApp)
            keyEquivalent:@"q"]);
+#if 0
   newDoppelganger_.reset([[DoppelgangerMenuItem alloc]
       initWithController:self
                  menuTag:IDC_FILE_MENU
@@ -417,6 +428,7 @@
               resourceId:0
                   action:nil
            keyEquivalent:@"o"]);
+#endif
   allToFrontDoppelganger_.reset([[DoppelgangerMenuItem alloc]
       initWithController:self
                  menuTag:IDC_WINDOW_MENU
@@ -440,18 +452,21 @@
   [appMenu addItem:[NSMenuItem separatorItem]];
   [appMenu addItem:[quitDoppelganger_ menuItem]];
 
+#if 0
   // File menu.
   fileMenuItem_.reset([NewTopLevelItemFrom(IDC_FILE_MENU) retain]);
   [[fileMenuItem_ submenu] addItem:[newDoppelganger_ menuItem]];
   [[fileMenuItem_ submenu] addItem:[openDoppelganger_ menuItem]];
   [[fileMenuItem_ submenu] addItem:[NSMenuItem separatorItem]];
   [[fileMenuItem_ submenu] addItem:[closeWindowDoppelganger_ menuItem]];
+#endif
 
   // Edit menu. We copy the menu because the last two items, "Start Dictation"
   // and "Special Characters" are added by OSX, so we can't copy them
   // explicitly.
   editMenuItem_.reset([[[NSApp mainMenu] itemWithTag:IDC_EDIT_MENU] copy]);
 
+#if 0
   // View menu. Remove "Always Show Bookmark Bar" and separator.
   viewMenuItem_.reset([[[NSApp mainMenu] itemWithTag:IDC_VIEW_MENU] copy]);
   RemoveMenuItemWithTag(viewMenuItem_, IDC_SHOW_BOOKMARK_BAR, YES);
@@ -461,12 +476,33 @@
   AddDuplicateItem(historyMenuItem_, IDC_HISTORY_MENU, IDC_BACK);
   AddDuplicateItem(historyMenuItem_, IDC_HISTORY_MENU, IDC_FORWARD);
 
+#endif
   // Window menu.
   windowMenuItem_.reset([NewTopLevelItemFrom(IDC_WINDOW_MENU) retain]);
   AddDuplicateItem(windowMenuItem_, IDC_WINDOW_MENU, IDC_MINIMIZE_WINDOW);
   AddDuplicateItem(windowMenuItem_, IDC_WINDOW_MENU, IDC_MAXIMIZE_WINDOW);
   [[windowMenuItem_ submenu] addItem:[NSMenuItem separatorItem]];
   [[windowMenuItem_ submenu] addItem:[allToFrontDoppelganger_ menuItem]];
+#if defined(NWJS_SDK)
+  bool enable_devtools = true;
+  const base::CommandLine* command_line =
+      base::CommandLine::ForCurrentProcess();
+  if (command_line->HasSwitch(switches::kDisableDevTools))
+    enable_devtools = false;
+
+  if (enable_devtools) {
+  [[windowMenuItem_ submenu] setAutoenablesItems:NO];
+  NSMenuItem* item = [[NSMenuItem alloc]
+		      initWithTitle:@"Devtools"
+		      action:@selector(showDevtools)
+                      keyEquivalent:@"i"];
+  [item setTag:IDC_DEV_TOOLS_CONSOLE];
+  [item setTarget:self];
+  [item setEnabled:YES];
+  [item setKeyEquivalentModifierMask:NSCommandKeyMask | NSAlternateKeyMask];
+  [[windowMenuItem_ submenu] addItem:item];
+  }
+#endif
 }
 
 - (void)registerEventHandlers {
@@ -498,8 +534,17 @@
     const Extension* extension = GetExtensionForNSWindow(window, &is_browser);
     // Ignore is_browser: if a window becomes main that does not belong to an
     // extension or browser, treat it the same as switching to a browser.
-    if (extension)
+
+    extensions::AppWindow* appWindow =
+        AppWindowRegistryUtil::GetAppWindowForNativeWindowAnyProfile(
+            window);
+    if (extension) {
+      if (appWindow->menu_) {
+        [NSApp setMainMenu:appWindow->menu_->menu_];
+        return;
+      }
       [self appBecameMain:extension];
+    }
     else
       [self chromeBecameMain];
   } else if ([name isEqualToString:NSWindowDidResignMainNotification]) {
@@ -530,7 +575,12 @@
     return;
 
   if (!appId_.empty())
-    [self removeMenuItems];
+    return;
+    // #4591: when app sets menubar and launch another chrome app,
+    // removeMenuItems will try to remove appmenuitem which isn't
+    // in the main menu; then app will crash.
+    // so after this function runs once, we just do nothing and return here
+    //[self removeMenuItems];
 
   appId_ = app->id();
   [self addMenuItems:app];
@@ -542,6 +592,7 @@
 }
 
 - (void)chromeBecameMain {
+#if 0
   if (appId_.empty())
     return;
 
@@ -552,6 +603,7 @@
         FROM_HERE,
         base::Bind(&SetChromeCyclesWindows, ++g_window_cycle_sequence_number));
   }
+#endif
 }
 
 - (void)addMenuItems:(const Extension*)app {
@@ -566,14 +618,15 @@
   [aboutDoppelganger_ enableForApp:app];
   [hideDoppelganger_ enableForApp:app];
   [quitDoppelganger_ enableForApp:app];
-  [newDoppelganger_ enableForApp:app];
-  [openDoppelganger_ enableForApp:app];
-  [closeWindowDoppelganger_ enableForApp:app];
+  //[newDoppelganger_ enableForApp:app];
+  //[openDoppelganger_ enableForApp:app];
+  //[closeWindowDoppelganger_ enableForApp:app];
 
   [appMenuItem_ setTitle:base::SysUTF8ToNSString(appId_)];
   [[appMenuItem_ submenu] setTitle:title];
 
   [mainMenu addItem:appMenuItem_];
+#if 0
   [mainMenu addItem:fileMenuItem_];
 
   SetItemWithTagVisible(editMenuItem_,
@@ -581,23 +634,28 @@
                         app->is_hosted_app(), true);
   SetItemWithTagVisible(editMenuItem_, IDC_FIND_MENU, app->is_hosted_app(),
                         false);
+#endif
   [mainMenu addItem:editMenuItem_];
 
+#if 0
   if (app->is_hosted_app()) {
     [mainMenu addItem:viewMenuItem_];
     [mainMenu addItem:historyMenuItem_];
   }
+#endif
   [mainMenu addItem:windowMenuItem_];
 }
 
 - (void)removeMenuItems {
   NSMenu* mainMenu = [NSApp mainMenu];
   [mainMenu removeItem:appMenuItem_];
-  [mainMenu removeItem:fileMenuItem_];
+  //[mainMenu removeItem:fileMenuItem_];
+#if 0
   if ([mainMenu indexOfItem:viewMenuItem_] >= 0)
     [mainMenu removeItem:viewMenuItem_];
   if ([mainMenu indexOfItem:historyMenuItem_] >= 0)
     [mainMenu removeItem:historyMenuItem_];
+#endif
   [mainMenu removeItem:editMenuItem_];
   [mainMenu removeItem:windowMenuItem_];
 
@@ -608,9 +666,9 @@
   [aboutDoppelganger_ disable];
   [hideDoppelganger_ disable];
   [quitDoppelganger_ disable];
-  [newDoppelganger_ disable];
-  [openDoppelganger_ disable];
-  [closeWindowDoppelganger_ disable];
+  //[newDoppelganger_ disable];
+  //[openDoppelganger_ disable];
+  //[closeWindowDoppelganger_ disable];
 }
 
 - (void)quitCurrentPlatformApp {
@@ -618,7 +676,7 @@
       AppWindowRegistryUtil::GetAppWindowForNativeWindowAnyProfile(
           [NSApp keyWindow]);
   if (appWindow) {
-    apps::ExtensionAppShimHandler::QuitAppForWindow(appWindow);
+    apps::ExtensionAppShimHandler::QuitAppForWindow(appWindow, true);
   } else {
     Browser* browser = chrome::FindBrowserWithWindow([NSApp keyWindow]);
     const Extension* extension =
@@ -653,4 +711,12 @@
     apps::ExtensionAppShimHandler::FocusAppForWindow(appWindow);
 }
 
+- (void)showDevtools {
+  extensions::AppWindow* appWindow =
+      AppWindowRegistryUtil::GetAppWindowForNativeWindowAnyProfile(
+          [NSApp keyWindow]);
+  if (appWindow)
+    DevToolsWindow::OpenDevToolsWindow(appWindow->web_contents());
+}
+
 @end
diff -r -u --color up/chromium/chrome/browser/ui/cocoa/apps/native_app_window_cocoa.h nw/chromium/chrome/browser/ui/cocoa/apps/native_app_window_cocoa.h
--- up/chromium/chrome/browser/ui/cocoa/apps/native_app_window_cocoa.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/cocoa/apps/native_app_window_cocoa.h	2023-02-21 04:37:20.788138568 +0000
@@ -45,6 +45,7 @@
 - (BOOL)handledByExtensionCommand:(NSEvent*)event
     priority:(ui::AcceleratorManager::HandlerPriority)priority;
 
+- (void)closeAllWindowsQuit:(id)sender;
 @end
 
 // Cocoa bridge to AppWindow.
@@ -75,10 +76,13 @@
   void SetBounds(const gfx::Rect& bounds) override;
   void FlashFrame(bool flash) override;
   bool IsAlwaysOnTop() const override;
+  void SetShowInTaskbar(bool show) override;
 
   // Called when the window is about to be closed.
   void WindowWillClose();
 
+  bool NWCanClose(bool user_force = false);
+
   // Called when the window is focused.
   void WindowDidBecomeKey();
 
@@ -125,6 +129,8 @@
  protected:
   // NativeAppWindow implementation.
   void SetFullscreen(int fullscreen_types) override;
+  void SetResizable(bool flag) override;
+  bool IsResizable() const override;
   bool IsFullscreenOrPending() const override;
   void UpdateWindowIcon() override;
   void UpdateWindowTitle() override;
@@ -184,7 +190,9 @@
   // Hides the window unconditionally. Used by Hide and HideWithApp.
   void HideWithoutMarkingHidden();
 
+public:
   extensions::AppWindow* app_window_;  // weak - AppWindow owns NativeAppWindow.
+private:
 
   bool has_frame_;
 
diff -r -u --color up/chromium/chrome/browser/ui/cocoa/apps/native_app_window_cocoa.mm nw/chromium/chrome/browser/ui/cocoa/apps/native_app_window_cocoa.mm
--- up/chromium/chrome/browser/ui/cocoa/apps/native_app_window_cocoa.mm	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/cocoa/apps/native_app_window_cocoa.mm	2023-02-21 04:37:20.788138568 +0000
@@ -18,6 +18,8 @@
 #include "chrome/browser/ui/cocoa/extensions/extension_view_mac.h"
 #include "chrome/common/chrome_switches.h"
 #include "content/public/browser/native_web_keyboard_event.h"
+#include "content/public/browser/render_view_host.h"
+#include "content/public/browser/render_widget_host.h"
 #include "content/public/browser/render_widget_host_view.h"
 #include "content/public/browser/web_contents.h"
 #include "extensions/common/extension.h"
@@ -26,6 +28,9 @@
 #import "ui/gfx/mac/nswindow_frame_controls.h"
 #include "ui/gfx/skia_util.h"
 
+#include "ui/gfx/screen.h"
+#include "content/nw/src/nw_content_mac.h"
+
 // NOTE: State Before Update.
 //
 // Internal state, such as |is_maximized_|, must be set before the window
@@ -44,12 +49,18 @@
 // desired size.
 
 using extensions::AppWindow;
+using extensions::AppWindowRegistry;
 
 @interface NSWindow (NSPrivateApis)
 - (void)setBottomCornerRounded:(BOOL)rounded;
 - (BOOL)_isTitleHidden;
 @end
 
+namespace content {
+  extern bool g_support_transparency;
+  extern bool g_force_cpu_draw;
+}
+
 namespace {
 
 const int kActivateThrottlePeriodSeconds = 2;
@@ -103,6 +114,12 @@
   titlebar_background_view_.reset([view retain]);
 }
 
+- (BOOL)windowShouldClose:(id)sender {
+  if (appWindow_ && !appWindow_->NWCanClose())
+    return NO;
+  return YES;
+}
+
 - (void)windowWillClose:(NSNotification*)notification {
   if (appWindow_)
     appWindow_->WindowWillClose();
@@ -182,6 +199,24 @@
   return NO;
 }
 
+// this function is for createMacBuiltin only
+- (void)closeAllWindowsQuit:(id)sender {
+  if (!appWindow_)
+    return;
+  AppWindowRegistry* registry = AppWindowRegistry::Get(appWindow_->app_window_->browser_context());
+  if (!registry)
+    return;
+
+  AppWindowRegistry::AppWindowList windows =
+    registry->GetAppWindowsForApp(appWindow_->app_window_->GetExtension()->id());
+
+  for (AppWindow* window : windows) {
+  // passing true for createMacBuiltin: https://github.com/nwjs/nw.js/issues/4580#issuecomment-199236153
+    if (window->NWCanClose(true))
+      window->GetBaseWindow()->Close();
+  }
+}
+
 @end
 
 @interface AppNSWindow : ChromeEventProcessingWindow
@@ -192,7 +227,7 @@
 // Similar to ChromeBrowserWindow, don't draw the title, but allow it to be seen
 // in menus, Expose, etc.
 - (BOOL)_isTitleHidden {
-  return YES;
+  return NO;
 }
 
 @end
@@ -220,6 +255,10 @@
   return frameRect;
 }
 
+- (BOOL)_isTitleHidden {
+  return YES;
+}
+
 @end
 
 @interface ControlRegionView : NSView
@@ -275,7 +314,7 @@
   if (extension)
     name = extension->name();
   [window setTitle:base::SysUTF8ToNSString(name)];
-  [[window contentView] setWantsLayer:YES];
+  [[window contentView] setWantsLayer:!content::g_force_cpu_draw];
 
   if (base::mac::IsOSSnowLeopard() &&
       [window respondsToSelector:@selector(setBottomCornerRounded:)])
@@ -289,6 +328,12 @@
 
   window_controller_.reset(
       [[NativeAppWindowController alloc] initWithWindow:window]);
+        
+  if (content::g_support_transparency && params.alpha_enabled) {
+    [window setHasShadow: NO];
+    [window setOpaque: NO];
+    [window setBackgroundColor: [NSColor clearColor]];
+  }
 
   if (has_frame_ && has_frame_color_) {
     TitlebarBackgroundView* view =
@@ -308,7 +353,12 @@
 
   // We can now compute the precise window bounds and constraints.
   gfx::Insets insets = GetFrameInsets();
-  SetBounds(params.GetInitialWindowBounds(insets));
+  gfx::Rect bounds = params.GetInitialWindowBounds(insets);
+  if (params.position == AppWindow::POS_MOUSE) {
+      gfx::Point cursor_pos(gfx::Screen::GetScreen()->GetCursorScreenPoint());
+      bounds.set_origin(cursor_pos);
+  }
+  SetBounds(bounds);
   SetContentSizeConstraints(params.GetContentMinimumSize(insets),
                             params.GetContentMaximumSize(insets));
 
@@ -385,6 +435,10 @@
   return is_fullscreen_;
 }
 
+void NativeAppWindowCocoa::SetShowInTaskbar(bool show) {
+  NWSetNSWindowShowInTaskbar(this, show);
+}
+
 void NativeAppWindowCocoa::SetFullscreen(int fullscreen_types) {
   bool fullscreen = (fullscreen_types != AppWindow::FULLSCREEN_TYPE_NONE);
   if (fullscreen == is_fullscreen_)
@@ -604,6 +658,16 @@
       event.type == content::NativeWebKeyboardEvent::Char) {
     return;
   }
+
+  // NW fix
+  // Simple key press events without modifiers should be sent to the menu.
+  // See https://github.com/nwjs/nw.js/issues/4837
+  NSEvent* nsEvent = event.os_event;
+  if ([nsEvent type] == NSKeyDown) {
+    if ([[NSApp mainMenu] performKeyEquivalent:nsEvent])
+      return;
+  }
+
   [window() redispatchKeyEvent:event.os_event];
 }
 
@@ -663,6 +727,12 @@
 void NativeAppWindowCocoa::RenderViewCreated(content::RenderViewHost* rvh) {
   if (IsActive())
     WebContents()->RestoreFocus();
+  if (content::g_support_transparency &&
+      app_window_->requested_alpha_enabled() && CanHaveAlphaEnabled()) {
+    content::RenderWidgetHostView* view = rvh->GetWidget()->GetView();
+    DCHECK(view);
+    view->SetBackgroundColor(SK_ColorTRANSPARENT);
+  }
 }
 
 bool NativeAppWindowCocoa::IsFrameless() const {
@@ -701,7 +771,7 @@
 }
 
 bool NativeAppWindowCocoa::CanHaveAlphaEnabled() const {
-  return false;
+  return content::g_support_transparency ? [window() isOpaque] == NO : false;
 }
 
 gfx::NativeView NativeAppWindowCocoa::GetHostView() const {
@@ -734,6 +804,10 @@
   app_window_->OnNativeClose();
 }
 
+bool NativeAppWindowCocoa::NWCanClose(bool user_force) {
+  return app_window_->NWCanClose(user_force);
+}
+
 void NativeAppWindowCocoa::WindowDidBecomeKey() {
   content::RenderWidgetHostView* rwhv =
       WebContents()->GetRenderWidgetHostView();
@@ -832,7 +906,8 @@
 
 void NativeAppWindowCocoa::HideWithApp() {
   is_hidden_with_app_ = true;
-  HideWithoutMarkingHidden();
+  [NSApp hide:nil];
+//  HideWithoutMarkingHidden();
 }
 
 gfx::Size NativeAppWindowCocoa::GetContentMinimumSize() const {
@@ -843,6 +918,25 @@
   return size_constraints_.GetMaximumSize();
 }
 
+void NativeAppWindowCocoa::SetResizable(bool flag) {
+  is_resizable_ = flag;
+  gfx::Size min_size = size_constraints_.GetMinimumSize();
+  gfx::Size max_size = size_constraints_.GetMaximumSize();
+
+  shows_resize_controls_ =
+      is_resizable_ && !size_constraints_.HasFixedSize();
+  shows_fullscreen_controls_ =
+      is_resizable_ && !size_constraints_.HasMaximumSize() && has_frame_;
+
+  gfx::ApplyNSWindowSizeConstraints(window(), min_size, max_size,
+                                    shows_resize_controls_,
+                                    shows_fullscreen_controls_);
+}
+
+bool NativeAppWindowCocoa::IsResizable() const {
+  return is_resizable_;
+}
+
 void NativeAppWindowCocoa::SetContentSizeConstraints(
     const gfx::Size& min_size, const gfx::Size& max_size) {
   // Update the size constraints.
diff -r -u --color up/chromium/chrome/browser/ui/cocoa/browser_window_cocoa.mm nw/chromium/chrome/browser/ui/cocoa/browser_window_cocoa.mm
--- up/chromium/chrome/browser/ui/cocoa/browser_window_cocoa.mm	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/cocoa/browser_window_cocoa.mm	2023-02-21 04:37:20.800138685 +0000
@@ -139,6 +139,8 @@
     initial_show_state_(ui::SHOW_STATE_DEFAULT),
     attention_request_id_(0) {
 
+  CHECK(browser->is_type_popup()) << "opening browser window.";
+
   gfx::Rect bounds;
   chrome::GetSavedWindowBoundsAndShowState(browser_,
                                            &bounds,
@@ -631,6 +633,7 @@
     translate::TranslateStep step,
     translate::TranslateErrors::Type error_type,
     bool is_user_gesture) {
+#if 0
   ChromeTranslateClient* chrome_translate_client =
       ChromeTranslateClient::FromWebContents(contents);
   translate::LanguageState& language_state =
@@ -640,6 +643,7 @@
   [controller_ showTranslateBubbleForWebContents:contents
                                             step:step
                                        errorType:error_type];
+#endif
 }
 
 #if BUILDFLAG(ENABLE_ONE_CLICK_SIGNIN)
diff -r -u --color up/chromium/chrome/browser/ui/cocoa/browser_window_controller.mm nw/chromium/chrome/browser/ui/cocoa/browser_window_controller.mm
--- up/chromium/chrome/browser/ui/cocoa/browser_window_controller.mm	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/cocoa/browser_window_controller.mm	2023-02-21 04:37:20.800138685 +0000
@@ -1659,6 +1659,7 @@
                                      step:(translate::TranslateStep)step
                                 errorType:(translate::TranslateErrors::Type)
                                 errorType {
+#if 0
   // TODO(hajimehoshi): The similar logic exists at TranslateBubbleView::
   // ShowBubble. This should be unified.
   if (translateBubbleController_) {
@@ -1703,6 +1704,7 @@
              selector:@selector(translateBubbleWindowWillClose:)
                  name:NSWindowWillCloseNotification
                object:[translateBubbleController_ window]];
+#endif
 }
 
 - (void)dismissPermissionBubble {
diff -r -u --color up/chromium/chrome/browser/ui/cocoa/location_bar/location_bar_view_mac.mm nw/chromium/chrome/browser/ui/cocoa/location_bar/location_bar_view_mac.mm
--- up/chromium/chrome/browser/ui/cocoa/location_bar/location_bar_view_mac.mm	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/cocoa/location_bar/location_bar_view_mac.mm	2023-02-21 04:37:20.816138840 +0000
@@ -696,6 +696,7 @@
 }
 
 void LocationBarViewMac::UpdateTranslateDecoration() {
+#if 0
   if (!TranslateService::IsTranslateBubbleEnabled())
     return;
 
@@ -708,6 +709,7 @@
   command_updater()->UpdateCommandEnabled(IDC_TRANSLATE_PAGE, enabled);
   translate_decoration_->SetVisible(enabled);
   translate_decoration_->SetLit(language_state.IsPageTranslated());
+#endif
 }
 
 bool LocationBarViewMac::UpdateZoomDecoration(bool default_zoom_changed) {
diff -r -u --color up/chromium/chrome/browser/ui/cocoa/status_icons/status_icon_mac.h nw/chromium/chrome/browser/ui/cocoa/status_icons/status_icon_mac.h
--- up/chromium/chrome/browser/ui/cocoa/status_icons/status_icon_mac.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/cocoa/status_icons/status_icon_mac.h	2023-02-21 04:37:20.828138957 +0000
@@ -36,7 +36,7 @@
 
  protected:
   // Overridden from StatusIcon.
-  void UpdatePlatformContextMenu(StatusIconMenuModel* model) override;
+  void UpdatePlatformContextMenu(ui::MenuModel* model) override;
 
  private:
   FRIEND_TEST_ALL_PREFIXES(StatusIconMacTest, CreateMenu);
diff -r -u --color up/chromium/chrome/browser/ui/cocoa/status_icons/status_icon_mac.mm nw/chromium/chrome/browser/ui/cocoa/status_icons/status_icon_mac.mm
--- up/chromium/chrome/browser/ui/cocoa/status_icons/status_icon_mac.mm	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/cocoa/status_icons/status_icon_mac.mm	2023-02-21 04:37:20.828138957 +0000
@@ -96,7 +96,7 @@
   return menu_.get() != nil;
 }
 
-void StatusIconMac::UpdatePlatformContextMenu(StatusIconMenuModel* model) {
+void StatusIconMac::UpdatePlatformContextMenu(ui::MenuModel* model) {
   if (!model) {
     menu_.reset();
   } else {
diff -r -u --color up/chromium/chrome/browser/ui/cocoa/tabs/tab_window_controller.mm nw/chromium/chrome/browser/ui/cocoa/tabs/tab_window_controller.mm
--- up/chromium/chrome/browser/ui/cocoa/tabs/tab_window_controller.mm	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/cocoa/tabs/tab_window_controller.mm	2023-02-21 04:37:20.832138996 +0000
@@ -93,7 +93,10 @@
                                  kBrowserFrameViewPaintHeight)]);
     [tabStripBackgroundView_
         setAutoresizingMask:NSViewWidthSizable | NSViewMinYMargin];
-    [self insertTabStripBackgroundViewIntoWindow:window];
+
+    //fix warning when opening devtools: #4312
+    if (hasTabStrip)
+      [self insertTabStripBackgroundViewIntoWindow:window];
 
     tabStripView_.reset([[TabStripView alloc]
         initWithFrame:NSMakeRect(
diff -r -u --color up/chromium/chrome/browser/ui/libgtk2ui/app_indicator_icon.cc nw/chromium/chrome/browser/ui/libgtk2ui/app_indicator_icon.cc
--- up/chromium/chrome/browser/ui/libgtk2ui/app_indicator_icon.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/libgtk2ui/app_indicator_icon.cc	2023-02-21 04:37:20.844139113 +0000
@@ -237,7 +237,6 @@
 }
 
 void AppIndicatorIcon::SetToolTip(const base::string16& tool_tip) {
-  DCHECK(!tool_tip_.empty());
   tool_tip_ = base::UTF16ToUTF8(tool_tip);
   UpdateClickActionReplacementMenuItem();
 }
@@ -382,8 +381,8 @@
   if (!delegate()->HasClickAction() && menu_model_)
     return;
 
-  DCHECK(!tool_tip_.empty());
-  menu_->UpdateClickActionReplacementMenuItem(
+  if(!tool_tip_.empty())
+    menu_->UpdateClickActionReplacementMenuItem(
       tool_tip_.c_str(),
       base::Bind(&AppIndicatorIcon::OnClickActionReplacementMenuItemActivated,
                  base::Unretained(this)));
diff -r -u --color up/chromium/chrome/browser/ui/libgtk2ui/select_file_dialog_impl_gtk2.cc nw/chromium/chrome/browser/ui/libgtk2ui/select_file_dialog_impl_gtk2.cc
--- up/chromium/chrome/browser/ui/libgtk2ui/select_file_dialog_impl_gtk2.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/libgtk2ui/select_file_dialog_impl_gtk2.cc	2023-02-21 04:37:20.844139113 +0000
@@ -307,11 +307,11 @@
     gfx::NativeWindow parent) {
   std::string title_string = title;
   if (title_string.empty()) {
-    title_string = (type == SELECT_UPLOAD_FOLDER) ?
+    title_string = 0 ?
         l10n_util::GetStringUTF8(IDS_SELECT_UPLOAD_FOLDER_DIALOG_TITLE) :
         l10n_util::GetStringUTF8(IDS_SELECT_FOLDER_DIALOG_TITLE);
   }
-  std::string accept_button_label = (type == SELECT_UPLOAD_FOLDER) ?
+  std::string accept_button_label = 0 ?
       l10n_util::GetStringUTF8(IDS_SELECT_UPLOAD_FOLDER_DIALOG_UPLOAD_BUTTON) :
       "_Open";
 
diff -r -u --color up/chromium/chrome/browser/ui/passwords/manage_passwords_ui_controller.cc nw/chromium/chrome/browser/ui/passwords/manage_passwords_ui_controller.cc
--- up/chromium/chrome/browser/ui/passwords/manage_passwords_ui_controller.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/passwords/manage_passwords_ui_controller.cc	2023-02-21 04:37:20.852139191 +0000
@@ -407,7 +407,8 @@
 }
 
 void ManagePasswordsUIController::WasHidden() {
-  TabDialogs::FromWebContents(web_contents())->HideManagePasswordsBubble();
+  if (TabDialogs::FromWebContents(web_contents()))
+    TabDialogs::FromWebContents(web_contents())->HideManagePasswordsBubble();
 }
 
 void ManagePasswordsUIController::ShowBubbleWithoutUserInteraction() {
diff -r -u --color up/chromium/chrome/browser/ui/scoped_tabbed_browser_displayer.cc nw/chromium/chrome/browser/ui/scoped_tabbed_browser_displayer.cc
--- up/chromium/chrome/browser/ui/scoped_tabbed_browser_displayer.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/scoped_tabbed_browser_displayer.cc	2023-02-21 04:37:20.856139230 +0000
@@ -13,7 +13,7 @@
 ScopedTabbedBrowserDisplayer::ScopedTabbedBrowserDisplayer(Profile* profile) {
   browser_ = FindTabbedBrowser(profile, false);
   if (!browser_)
-    browser_ = new Browser(Browser::CreateParams(profile));
+    browser_ = new Browser(Browser::CreateParams(Browser::TYPE_POPUP, profile));
 }
 
 ScopedTabbedBrowserDisplayer::~ScopedTabbedBrowserDisplayer() {
diff -r -u --color up/chromium/chrome/browser/ui/startup/startup_browser_creator.cc nw/chromium/chrome/browser/ui/startup/startup_browser_creator.cc
--- up/chromium/chrome/browser/ui/startup/startup_browser_creator.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/startup/startup_browser_creator.cc	2023-02-21 04:37:20.860139269 +0000
@@ -75,6 +75,15 @@
 #include "extensions/common/switches.h"
 #include "net/base/port_util.h"
 
+#include "extensions/browser/extension_system.h"
+#include "chrome/browser/extensions/component_loader.h"
+#include "chrome/browser/extensions/extension_service.h"
+#include "chrome/common/extensions/extension_constants.h"
+#include "grit/browser_resources.h"
+#include "extensions/common/constants.h"
+#include "chrome/browser/ui/extensions/app_launch_params.h"
+#include "chrome/browser/ui/extensions/application_launch.h"
+
 #if defined(USE_ASH)
 #include "ash/shell.h"
 #endif
@@ -709,7 +718,7 @@
     // chrome to shut down.
     // TODO(jackhou): Do this properly once keep-alive is handled by the
     // background page of apps. Tracked at http://crbug.com/175381
-    if (chrome::GetBrowserCount(last_used_profile) != 0)
+    // if (chrome::GetBrowserCount(last_used_profile) != 0)
       return true;
   }
 
@@ -734,6 +743,42 @@
       return true;
   }
 
+  if (!process_startup)
+    return true;
+
+  const base::CommandLine::StringVector& params = command_line.GetArgs();
+  if (command_line.HasSwitch("nwapp")) {
+	  if (!apps::AppLoadService::Get(last_used_profile)->LoadAndLaunch(
+		  base::FilePath(command_line.GetSwitchValueNative("nwapp")), command_line, cur_dir)) {
+		  return false;
+	  }
+	  return true;
+  }  
+  if (params.size() > 0) {
+    if (!apps::AppLoadService::Get(last_used_profile)->LoadAndLaunch(
+            base::FilePath(params[0]), command_line, cur_dir)) {
+      return false;
+    }
+    return true;
+  } else {
+    ExtensionService* extension_service =
+      extensions::ExtensionSystem::Get(last_used_profile)->extension_service();
+    extensions::ComponentLoader* component_loader = extension_service->component_loader();
+    std::string id =  component_loader->GetExtensionID(IDR_NWJS_DEFAPP_MANIFEST,
+                                                       base::FilePath(FILE_PATH_LITERAL("nwjs_default_app")));
+
+    LOG(INFO) << "loading default app: " << id;
+    const extensions::Extension* extension = extension_service->GetExtensionById(id, true);
+    if (!extension) {
+      LOG(FATAL) << "Failed to load default app";
+      return false;
+    }
+    OpenApplication(
+      AppLaunchParams(last_used_profile, extension, extensions::LAUNCH_CONTAINER_WINDOW,
+                      NEW_WINDOW, extensions::SOURCE_CHROME_INTERNAL));
+    return true;
+  }
+
 #if defined(OS_WIN)
   // Intercept a specific url when setting the default browser asynchronously.
   // This only happens on Windows 10+.
diff -r -u --color up/chromium/chrome/browser/ui/tab_helpers.cc nw/chromium/chrome/browser/ui/tab_helpers.cc
--- up/chromium/chrome/browser/ui/tab_helpers.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/tab_helpers.cc	2023-02-21 04:37:20.860139269 +0000
@@ -150,7 +150,7 @@
   ChromePasswordManagerClient::CreateForWebContentsWithAutofillClient(
       web_contents,
       autofill::ChromeAutofillClient::FromWebContents(web_contents));
-  ChromeTranslateClient::CreateForWebContents(web_contents);
+  //ChromeTranslateClient::CreateForWebContents(web_contents);
   CoreTabHelper::CreateForWebContents(web_contents);
   ExternalProtocolObserver::CreateForWebContents(web_contents);
   favicon::CreateContentFaviconDriverForWebContents(web_contents);
diff -r -u --color up/chromium/chrome/browser/ui/toolbar/component_toolbar_actions_factory.cc nw/chromium/chrome/browser/ui/toolbar/component_toolbar_actions_factory.cc
--- up/chromium/chrome/browser/ui/toolbar/component_toolbar_actions_factory.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/toolbar/component_toolbar_actions_factory.cc	2023-02-21 04:37:20.864139308 +0000
@@ -63,9 +63,11 @@
   // should be okay. If this changes, we should rethink this design to have,
   // e.g., RegisterChromeAction().
 #if defined(ENABLE_MEDIA_ROUTER)
+#if defined(NWJS_SDK)
   if (id == kMediaRouterActionId)
     return scoped_ptr<ToolbarActionViewController>(
         new MediaRouterAction(browser, bar));
+#endif
 #endif  // defined(ENABLE_MEDIA_ROUTER)
 
   NOTREACHED();
diff -r -u --color up/chromium/chrome/browser/ui/views/apps/app_window_desktop_window_tree_host_win.cc nw/chromium/chrome/browser/ui/views/apps/app_window_desktop_window_tree_host_win.cc
--- up/chromium/chrome/browser/ui/views/apps/app_window_desktop_window_tree_host_win.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/views/apps/app_window_desktop_window_tree_host_win.cc	2023-02-21 04:37:20.872139386 +0000
@@ -28,6 +28,9 @@
 
 bool AppWindowDesktopWindowTreeHostWin::GetClientAreaInsets(
     gfx::Insets* insets) const {
+#if 1
+  return false;
+#else
   // The inset added below is only necessary for the native glass frame, i.e.
   // not for colored frames drawn by Chrome, or when DWM is disabled.
   // In fullscreen the frame is not visible.
@@ -38,6 +41,7 @@
   *insets = app_window_->glass_frame_view()->GetClientAreaInsets();
 
   return true;
+#endif
 }
 
 void AppWindowDesktopWindowTreeHostWin::HandleFrameChanged() {
@@ -60,6 +64,9 @@
 }
 
 void AppWindowDesktopWindowTreeHostWin::UpdateDWMFrame() {
+#if 1
+  return;
+#else
   if (!GetWidget()->client_view() || !app_window_->glass_frame_view())
     return;
 
@@ -79,4 +86,5 @@
   }
 
   DwmExtendFrameIntoClientArea(GetHWND(), &margins);
+#endif
 }
diff -r -u --color up/chromium/chrome/browser/ui/views/apps/chrome_native_app_window_views.cc nw/chromium/chrome/browser/ui/views/apps/chrome_native_app_window_views.cc
--- up/chromium/chrome/browser/ui/views/apps/chrome_native_app_window_views.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/views/apps/chrome_native_app_window_views.cc	2023-02-21 04:37:20.872139386 +0000
@@ -21,6 +21,14 @@
 #include "ui/views/controls/webview/webview.h"
 #include "ui/views/widget/widget.h"
 
+#if defined(NWJS_SDK)
+#include "base/command_line.h"
+#include "chrome/browser/devtools/devtools_window.h"
+#include "content/nw/src/common/shell_switches.h"
+#endif
+
+#include "ui/gfx/screen.h"
+
 using extensions::AppWindow;
 
 namespace {
@@ -37,9 +45,12 @@
 };
 
 const AcceleratorMapping kAppWindowAcceleratorMap[] = {
-  { ui::VKEY_W, ui::EF_CONTROL_DOWN, IDC_CLOSE_WINDOW },
-  { ui::VKEY_W, ui::EF_SHIFT_DOWN | ui::EF_CONTROL_DOWN, IDC_CLOSE_WINDOW },
+  //  { ui::VKEY_W, ui::EF_CONTROL_DOWN, IDC_CLOSE_WINDOW },
+  //  { ui::VKEY_W, ui::EF_SHIFT_DOWN | ui::EF_CONTROL_DOWN, IDC_CLOSE_WINDOW },
   { ui::VKEY_F4, ui::EF_ALT_DOWN, IDC_CLOSE_WINDOW },
+#if defined(NWJS_SDK)
+  { ui::VKEY_F12, ui::EF_NONE, IDC_DEV_TOOLS_TOGGLE },
+#endif
 };
 
 // These accelerators will only be available in kiosk mode. These allow the
@@ -110,6 +121,10 @@
     views::Widget* widget) {
 }
 
+bool ChromeNativeAppWindowViews::NWCanClose(bool user_force) const {
+  return app_window()->NWCanClose(user_force);
+}
+
 void ChromeNativeAppWindowViews::OnBeforePanelWidgetInit(
     bool use_default_bounds,
     views::Widget::InitParams* init_params,
@@ -150,10 +165,23 @@
     bool position_specified =
         window_bounds.x() != BoundsSpecification::kUnspecifiedPosition &&
         window_bounds.y() != BoundsSpecification::kUnspecifiedPosition;
+    position_specified |= create_params.position == AppWindow::POS_MOUSE;
     if (!position_specified)
       widget()->CenterWindow(window_bounds.size());
-    else
+    else if (create_params.position == AppWindow::POS_MOUSE) {
+      gfx::Point cursor_pos(gfx::Screen::GetScreen()->GetCursorScreenPoint());
+      window_bounds.set_origin(cursor_pos);
       widget()->SetBounds(window_bounds);
+    }else
+      widget()->SetBounds(window_bounds);
+  } else {
+    if (create_params.position == AppWindow::POS_CENTER)
+      widget()->CenterWindow(gfx::Size(640, 480));
+    else if (create_params.position == extensions::AppWindow::POS_MOUSE) {
+      gfx::Point cursor_pos(gfx::Screen::GetScreen()->GetCursorScreenPoint());
+      gfx::Rect bounds(cursor_pos, gfx::Size(640, 480));
+      widget()->SetBounds(bounds);
+    }
   }
 
 #if defined(OS_CHROMEOS)
@@ -307,6 +335,14 @@
       accelerator_table.find(accelerator);
   DCHECK(iter != accelerator_table.end());
   int command_id = iter->second;
+#if defined(NWJS_SDK)
+  content::WebContents* web_contents;
+  bool enable_devtools = true;
+  const base::CommandLine* command_line =
+      base::CommandLine::ForCurrentProcess();
+  if (command_line->HasSwitch(switches::kDisableDevTools))
+    enable_devtools = false;
+#endif
   switch (command_id) {
     case IDC_CLOSE_WINDOW:
       Close();
@@ -323,7 +359,25 @@
       ui_zoom::PageZoom::Zoom(web_view()->GetWebContents(),
                               content::PAGE_ZOOM_IN);
       return true;
-    default:
+#if defined(NWJS_SDK)
+    case IDC_DEV_TOOLS:
+      if (!enable_devtools)
+        return true;
+      web_contents = app_window()->web_contents();
+      if (web_contents) {
+        DevToolsWindow::OpenDevToolsWindow(web_contents);
+      }
+      return true;
+    case IDC_DEV_TOOLS_TOGGLE:
+      if (!enable_devtools)
+        return true;
+      web_contents = app_window()->web_contents();
+      if (web_contents) {
+        DevToolsWindow::OpenDevToolsWindow(web_contents, DevToolsToggleAction::Toggle());
+      }
+      return true;
+#endif
+  default:
       NOTREACHED() << "Unknown accelerator sent to app window.";
   }
   return NativeAppWindowViews::AcceleratorPressed(accelerator);
diff -r -u --color up/chromium/chrome/browser/ui/views/apps/chrome_native_app_window_views.h nw/chromium/chrome/browser/ui/views/apps/chrome_native_app_window_views.h
--- up/chromium/chrome/browser/ui/views/apps/chrome_native_app_window_views.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/views/apps/chrome_native_app_window_views.h	2023-02-21 04:37:20.872139386 +0000
@@ -55,6 +55,7 @@
       views::Widget* widget) override;
   bool WidgetHasHitTestMask() const override;
   void GetWidgetHitTestMask(gfx::Path* mask) const override;
+  bool NWCanClose(bool user_force = false) const override;
 
   // views::View implementation.
   gfx::Size GetPreferredSize() const override;
diff -r -u --color up/chromium/chrome/browser/ui/views/apps/glass_app_window_frame_view_win.cc nw/chromium/chrome/browser/ui/views/apps/glass_app_window_frame_view_win.cc
--- up/chromium/chrome/browser/ui/views/apps/glass_app_window_frame_view_win.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/views/apps/glass_app_window_frame_view_win.cc	2023-02-21 04:37:20.872139386 +0000
@@ -30,14 +30,16 @@
 }
 
 gfx::Insets GlassAppWindowFrameViewWin::GetGlassInsets() const {
+#if 0
+  return gfx::Insets();
+#else
   int caption_height = gfx::win::GetSystemMetricsInDIP(SM_CYSIZEFRAME) +
                        gfx::win::GetSystemMetricsInDIP(SM_CYCAPTION);
 
-  int frame_size = base::win::GetVersion() < base::win::VERSION_WIN10
-                       ? gfx::win::GetSystemMetricsInDIP(SM_CXSIZEFRAME)
-                       : 0;
+  int frame_size = gfx::win::GetSystemMetricsInDIP(SM_CXSIZEFRAME);
 
   return gfx::Insets(caption_height, frame_size, frame_size, frame_size);
+#endif
 }
 
 gfx::Insets GlassAppWindowFrameViewWin::GetClientAreaInsets() const {
@@ -62,6 +64,9 @@
 }
 
 gfx::Rect GlassAppWindowFrameViewWin::GetBoundsForClientView() const {
+#if 1
+  return bounds();
+#else
   if (widget_->IsFullscreen())
     return bounds();
 
@@ -70,6 +75,7 @@
                    insets.top(),
                    std::max(0, width() - insets.left() - insets.right()),
                    std::max(0, height() - insets.top() - insets.bottom()));
+#endif
 }
 
 gfx::Rect GlassAppWindowFrameViewWin::GetWindowBoundsForClientBounds(
@@ -96,6 +102,11 @@
   if (!bounds().Contains(point))
     return HTNOWHERE;
 
+  int client_component = widget_->client_view()->NonClientHitTest(point);
+  if (client_component != HTNOWHERE)
+    return client_component;
+
+
   // Check the frame first, as we allow a small area overlapping the contents
   // to be used for resize handles.
   bool can_ever_resize = widget_->widget_delegate()
@@ -114,10 +125,6 @@
   if (frame_component != HTNOWHERE)
     return frame_component;
 
-  int client_component = widget_->client_view()->NonClientHitTest(point);
-  if (client_component != HTNOWHERE)
-    return client_component;
-
   // Caption is a safe default.
   return HTCAPTION;
 }
diff -r -u --color up/chromium/chrome/browser/ui/views/chrome_views_delegate.cc nw/chromium/chrome/browser/ui/views/chrome_views_delegate.cc
--- up/chromium/chrome/browser/ui/views/chrome_views_delegate.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/views/chrome_views_delegate.cc	2023-02-21 04:37:20.880139464 +0000
@@ -4,6 +4,8 @@
 
 #include "chrome/browser/ui/views/chrome_views_delegate.h"
 
+#include "content/nw/src/nw_content.h"
+
 #include "base/memory/scoped_ptr.h"
 #include "base/strings/string_util.h"
 #include "base/strings/utf_string_conversions.h"
@@ -297,6 +299,9 @@
 
 #elif defined(OS_LINUX) && !defined(OS_CHROMEOS)
 gfx::ImageSkia* ChromeViewsDelegate::GetDefaultWindowIcon() const {
+  gfx::ImageSkia* ret = nw::GetAppIcon();
+  if (ret)
+    return ret;
   ui::ResourceBundle& rb = ui::ResourceBundle::GetSharedInstance();
   return rb.GetImageSkiaNamed(IDR_PRODUCT_LOGO_64);
 }
diff -r -u --color up/chromium/chrome/browser/ui/views/frame/browser_view.cc nw/chromium/chrome/browser/ui/views/frame/browser_view.cc
--- up/chromium/chrome/browser/ui/views/frame/browser_view.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/views/frame/browser_view.cc	2023-02-21 04:37:20.888139541 +0000
@@ -155,6 +155,10 @@
 #include "ui/views/widget/widget.h"
 #include "ui/views/window/dialog_delegate.h"
 
+
+#include "extensions/browser/app_window/app_window.h"
+#include "extensions/browser/app_window/app_window_registry.h"
+
 #if defined(USE_ASH)
 #include "chrome/browser/ui/ash/ash_util.h"
 #endif
@@ -523,6 +527,8 @@
 }
 
 void BrowserView::Init(Browser* browser) {
+  // type popup is for devtools window. that's what we want
+  CHECK(browser->is_type_popup()) << "opening browser window.";
   browser_.reset(browser);
   browser_->tab_strip_model()->AddObserver(this);
   immersive_mode_controller_.reset(chrome::CreateImmersiveModeController());
@@ -1319,13 +1325,13 @@
     if (rvh->IsFocusedElementEditable())
       return;
   }
-
+#if 0
   ChromeTranslateClient* chrome_translate_client =
       ChromeTranslateClient::FromWebContents(web_contents);
   translate::LanguageState& language_state =
       chrome_translate_client->GetLanguageState();
   language_state.SetTranslateEnabled(true);
-
+#endif
   if (IsMinimized())
     return;
 
@@ -1732,6 +1738,22 @@
 }
 
 gfx::ImageSkia BrowserView::GetWindowAppIcon() {
+#if 0
+  if (browser_->is_devtools()) {
+    WebContents* contents = browser_->tab_strip_model()->GetActiveWebContents();
+    DevToolsWindow* devtools_window = DevToolsWindow::AsDevToolsWindow(contents);
+    if (devtools_window) {
+      WebContents* inspected_contents = devtools_window->GetInspectedWebContents();
+      Profile* profile = Profile::FromBrowserContext(contents->GetBrowserContext());
+      extensions::AppWindowRegistry* registry = extensions::AppWindowRegistry::Get(profile);
+      if (registry) {
+        extensions::AppWindow* app_window = registry->GetAppWindowForWebContents(inspected_contents);
+        if (app_window)
+          return app_window->app_icon().AsImageSkia();
+      }
+    }
+  }
+#endif
   if (browser_->is_app()) {
     WebContents* contents = browser_->tab_strip_model()->GetActiveWebContents();
     extensions::TabHelper* extensions_tab_helper =
diff -r -u --color up/chromium/chrome/browser/ui/views/location_bar/location_bar_view.cc nw/chromium/chrome/browser/ui/views/location_bar/location_bar_view.cc
--- up/chromium/chrome/browser/ui/views/location_bar/location_bar_view.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/views/location_bar/location_bar_view.cc	2023-02-21 04:37:20.896139619 +0000
@@ -1006,6 +1006,7 @@
 }
 
 void LocationBarView::RefreshTranslateIcon() {
+#if 0
   WebContents* web_contents = GetWebContents();
   if (!web_contents)
     return;
@@ -1016,6 +1017,7 @@
   translate_icon_view_->SetVisible(enabled);
   if (!enabled)
     TranslateBubbleView::CloseBubble();
+#endif
 }
 
 bool LocationBarView::RefreshManagePasswordsIconView() {
diff -r -u --color up/chromium/chrome/browser/ui/views/status_icons/status_icon_linux_wrapper.cc nw/chromium/chrome/browser/ui/views/status_icons/status_icon_linux_wrapper.cc
--- up/chromium/chrome/browser/ui/views/status_icons/status_icon_linux_wrapper.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/views/status_icons/status_icon_linux_wrapper.cc	2023-02-21 04:37:20.904139697 +0000
@@ -8,15 +8,12 @@
 #include "ui/views/linux_ui/linux_ui.h"
 
 StatusIconLinuxWrapper::StatusIconLinuxWrapper(
-    views::StatusIconLinux* status_icon)
-    : menu_model_(NULL) {
+    views::StatusIconLinux* status_icon) {
   status_icon_.reset(status_icon);
   status_icon_->set_delegate(this);
 }
 
 StatusIconLinuxWrapper::~StatusIconLinuxWrapper() {
-  if (menu_model_)
-    menu_model_->RemoveObserver(this);
 }
 
 void StatusIconLinuxWrapper::SetImage(const gfx::ImageSkia& image) {
@@ -61,14 +58,6 @@
 }
 
 void StatusIconLinuxWrapper::UpdatePlatformContextMenu(
-    StatusIconMenuModel* model) {
-  // If a menu already exists, remove ourself from its oberver list.
-  if (menu_model_)
-    menu_model_->RemoveObserver(this);
-
+    ui::MenuModel* model) {
   status_icon_->UpdatePlatformContextMenu(model);
-  menu_model_ = model;
-
-  if (model)
-    model->AddObserver(this);
 }
diff -r -u --color up/chromium/chrome/browser/ui/views/status_icons/status_icon_linux_wrapper.h nw/chromium/chrome/browser/ui/views/status_icons/status_icon_linux_wrapper.h
--- up/chromium/chrome/browser/ui/views/status_icons/status_icon_linux_wrapper.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/views/status_icons/status_icon_linux_wrapper.h	2023-02-21 04:37:20.904139697 +0000
@@ -43,7 +43,7 @@
   // Invoked after a call to SetContextMenu() to let the platform-specific
   // subclass update the native context menu based on the new model. If NULL is
   // passed, subclass should destroy the native context menu.
-  void UpdatePlatformContextMenu(StatusIconMenuModel* model) override;
+  void UpdatePlatformContextMenu(ui::MenuModel* model) override;
 
  private:
   // A status icon wrapper should only be created by calling
@@ -55,8 +55,6 @@
 
   scoped_ptr<views::StatusIconLinux> status_icon_;
 
-  StatusIconMenuModel* menu_model_;
-
   DISALLOW_COPY_AND_ASSIGN(StatusIconLinuxWrapper);
 };
 
diff -r -u --color up/chromium/chrome/browser/ui/views/status_icons/status_icon_win.cc nw/chromium/chrome/browser/ui/views/status_icons/status_icon_win.cc
--- up/chromium/chrome/browser/ui/views/status_icons/status_icon_win.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/views/status_icons/status_icon_win.cc	2023-02-21 04:37:20.904139697 +0000
@@ -156,7 +156,7 @@
 ////////////////////////////////////////////////////////////////////////////////
 // StatusIconWin, private:
 
-void StatusIconWin::UpdatePlatformContextMenu(StatusIconMenuModel* menu) {
+void StatusIconWin::UpdatePlatformContextMenu(ui::MenuModel* menu) {
   // |menu_model_| is about to be destroyed. Destroy the menu (which closes it)
   // so that it doesn't attempt to continue using |menu_model_|.
   menu_runner_.reset();
diff -r -u --color up/chromium/chrome/browser/ui/views/status_icons/status_icon_win.h nw/chromium/chrome/browser/ui/views/status_icons/status_icon_win.h
--- up/chromium/chrome/browser/ui/views/status_icons/status_icon_win.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/views/status_icons/status_icon_win.h	2023-02-21 04:37:20.904139697 +0000
@@ -56,7 +56,7 @@
 
  protected:
   // Overridden from StatusIcon:
-  void UpdatePlatformContextMenu(StatusIconMenuModel* menu) override;
+  void UpdatePlatformContextMenu(ui::MenuModel* menu) override;
 
  private:
   void InitIconData(NOTIFYICONDATA* icon_data);
diff -r -u --color up/chromium/chrome/browser/ui/views/translate/translate_bubble_view.cc nw/chromium/chrome/browser/ui/views/translate/translate_bubble_view.cc
--- up/chromium/chrome/browser/ui/views/translate/translate_bubble_view.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/views/translate/translate_bubble_view.cc	2023-02-21 04:37:20.912139775 +0000
@@ -82,6 +82,7 @@
     translate::TranslateStep step,
     translate::TranslateErrors::Type error_type,
     DisplayReason reason) {
+#if 0
   if (translate_bubble_view_) {
     // When the user reads the advanced setting panel, the bubble should not be
     // changed because they are focusing on the bubble.
@@ -107,6 +108,7 @@
 
   std::string source_language;
   std::string target_language;
+
   ChromeTranslateClient::GetTranslateLanguages(
       web_contents, &source_language, &target_language);
 
@@ -122,7 +124,8 @@
       anchor_view, std::move(model), error_type, web_contents);
   views::Widget* bubble_widget = views::BubbleDelegateView::CreateBubble(view);
   view->ShowForReason(reason);
-  return bubble_widget;
+#endif
+  return nullptr;
 }
 
 // static
diff -r -u --color up/chromium/chrome/browser/ui/webui/chrome_web_contents_handler.cc nw/chromium/chrome/browser/ui/webui/chrome_web_contents_handler.cc
--- up/chromium/chrome/browser/ui/webui/chrome_web_contents_handler.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/webui/chrome_web_contents_handler.cc	2023-02-21 04:37:20.916139814 +0000
@@ -83,7 +83,7 @@
   Browser* browser = chrome::FindTabbedBrowser(profile, false);
   const bool browser_created = !browser;
   if (!browser)
-    browser = new Browser(Browser::CreateParams(Browser::TYPE_TABBED, profile));
+    browser = new Browser(Browser::CreateParams(Browser::TYPE_POPUP, profile));
   chrome::NavigateParams params(browser, new_contents);
   params.source_contents = source;
   params.disposition = disposition;
diff -r -u --color up/chromium/chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc nw/chromium/chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc
--- up/chromium/chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc	2023-02-21 04:37:20.916139814 +0000
@@ -210,11 +210,13 @@
 }
 #endif  // defined(ENABLE_EXTENSIONS)
 
+#if defined(NWJS_SDK)
 // Special case for older about: handlers.
 template<>
 WebUIController* NewWebUI<AboutUI>(WebUI* web_ui, const GURL& url) {
   return new AboutUI(web_ui, url.host());
 }
+#endif
 
 #if defined(OS_CHROMEOS)
 template<>
@@ -266,6 +268,7 @@
 }
 #endif
 
+#if defined(NWJS_SDK)
 bool IsAboutUI(const GURL& url) {
   return (url.host() == chrome::kChromeUIChromeURLsHost ||
           url.host() == chrome::kChromeUICreditsHost ||
@@ -287,6 +290,7 @@
 #endif
           );  // NOLINT
 }
+#endif
 
 // Returns a function that can be used to create the right type of WebUI for a
 // tab, based on its URL. Returns NULL if the URL doesn't have WebUI associated
@@ -315,8 +319,10 @@
   // All platform builds of Chrome will need to have a cloud printing
   // dialog as backup.  It's just that on Chrome OS, it's the only
   // print dialog.
+#if 0
   if (url.host() == chrome::kChromeUIComponentsHost)
     return &NewWebUI<ComponentsUI>;
+#endif
   if (url.spec() == chrome::kChromeUIConstrainedHTMLTestURL)
     return &NewWebUI<ConstrainedWebDialogUI>;
   if (url.host() == chrome::kChromeUICrashesHost)
@@ -331,6 +337,7 @@
     return &NewWebUI<GCMInternalsUI>;
   if (url.host() == chrome::kChromeUIHistoryFrameHost)
     return &NewWebUI<HistoryUI>;
+#if 0
   if (url.host() == chrome::kChromeUIInstantHost)
     return &NewWebUI<InstantUI>;
   if (url.host() == chrome::kChromeUIInterstitialHost)
@@ -363,6 +370,7 @@
     return &NewWebUI<WebDialogUI>;
   if (url.host() == chrome::kChromeUITranslateInternalsHost)
     return &NewWebUI<TranslateInternalsUI>;
+#endif
   if (url.host() == chrome::kChromeUIUserActionsHost)
     return &NewWebUI<UserActionsUI>;
   if (url.host() == chrome::kChromeUIVersionHost)
@@ -385,8 +393,10 @@
   if (url.host() == chrome::kChromeUIBookmarksHost)
     return &NewWebUI<BookmarksUI>;
   // Downloads list on Android uses the built-in download manager.
+#if 0
   if (url.host() == chrome::kChromeUIDownloadsHost)
     return &NewWebUI<MdDownloadsUI>;
+#endif
   // Help is implemented with native UI elements on Android.
   if (url.host() == chrome::kChromeUIHelpFrameHost)
     return &NewWebUI<HelpUI>;
@@ -399,6 +409,7 @@
     return &NewWebUI<settings::MdSettingsUI>;
   // If the material design extensions page is enabled, it gets its own host.
   // Otherwise, it's handled by the uber settings page.
+#if 0
   if (url.host() == chrome::kChromeUIExtensionsHost &&
       ::switches::MdExtensionsEnabled()) {
     return &NewWebUI<extensions::ExtensionsUI>;
@@ -408,20 +419,19 @@
       url.host() == chrome::kChromeUIHistoryHost) {
     return &NewWebUI<MdHistoryUI>;
   }
+#endif
   if (url.host() == chrome::kChromeUIQuotaInternalsHost)
     return &NewWebUI<QuotaInternalsUI>;
   // Settings are implemented with native UI elements on Android.
   // Handle chrome://settings if settings in a window and about in settings
   // are enabled.
+#if 0
   if (url.host() == chrome::kChromeUISettingsFrameHost ||
       (url.host() == chrome::kChromeUISettingsHost &&
        ::switches::AboutInSettingsEnabled())) {
     return &NewWebUI<options::OptionsUI>;
   }
-  if (SiteEngagementService::IsEnabled() &&
-      url.host() == chrome::kChromeUISiteEngagementHost) {
-    return &NewWebUI<SiteEngagementUI>;
-  }
+#endif
   if (url.host() == chrome::kChromeUISyncFileSystemInternalsHost)
     return &NewWebUI<SyncFileSystemInternalsUI>;
   if (url.host() == chrome::kChromeUISystemInfoHost)
@@ -502,7 +512,7 @@
   if (url.host() == chrome::kChromeUIInspectHost)
     return &NewWebUI<InspectUI>;
 #endif
-#if !defined(OS_CHROMEOS) && !defined(OS_ANDROID)
+#if 0
   if (url.host() == chrome::kChromeUIChromeSigninHost)
     return &NewWebUI<InlineLoginUI>;
   if (url.host() == chrome::kChromeUIUserManagerHost)
@@ -547,7 +557,7 @@
   if (url.host() == chrome::kChromeUIAppListStartPageHost)
     return &NewWebUI<app_list::StartPageUI>;
 #endif
-#if defined(ENABLE_EXTENSIONS)
+#if 0
   if (url.host() == chrome::kChromeUIExtensionsFrameHost)
     return &NewWebUI<extensions::ExtensionsUI>;
 #endif
@@ -573,13 +583,18 @@
     return &NewWebUI<WebRtcLogsUI>;
 #endif
 #if defined(ENABLE_MEDIA_ROUTER) && !defined(OS_ANDROID)
+#if defined(NWJS_SDK)
   if (url.host() == chrome::kChromeUIMediaRouterHost &&
       media_router::MediaRouterEnabled(profile)) {
     return &NewWebUI<media_router::MediaRouterUI>;
   }
 #endif
+#endif
+
+#if defined(NWJS_SDK)
   if (IsAboutUI(url))
     return &NewWebUI<AboutUI>;
+#endif
 
   if (dom_distiller::IsEnableDomDistillerSet() &&
       url.host() == dom_distiller::kChromeUIDomDistillerHost) {
@@ -730,8 +745,10 @@
   if (!content::HasWebUIScheme(page_url))
     return NULL;
 
+#if 0
   if (page_url.host() == chrome::kChromeUIComponentsHost)
     return ComponentsUI::GetFaviconResourceBytes(scale_factor);
+#endif
 
 #if defined(OS_WIN)
   if (page_url.host() == chrome::kChromeUIConflictsHost)
@@ -758,6 +775,7 @@
   if (page_url.host() == chrome::kChromeUIFlashHost)
     return FlashUI::GetFaviconResourceBytes(scale_factor);
 
+#if 0
   // Android uses the native download manager.
   if (page_url.host() == chrome::kChromeUIDownloadsHost)
     return MdDownloadsUI::GetFaviconResourceBytes(scale_factor);
@@ -766,8 +784,6 @@
   if (page_url.host() == chrome::kChromeUISettingsHost ||
       page_url.host() == chrome::kChromeUISettingsFrameHost)
     return options::OptionsUI::GetFaviconResourceBytes(scale_factor);
-
-#if defined(ENABLE_EXTENSIONS)
   if (page_url.host() == chrome::kChromeUIExtensionsHost ||
       page_url.host() == chrome::kChromeUIExtensionsFrameHost)
     return extensions::ExtensionsUI::GetFaviconResourceBytes(scale_factor);
diff -r -u --color up/chromium/chrome/browser/ui/webui/print_preview/print_preview_handler.cc nw/chromium/chrome/browser/ui/webui/print_preview/print_preview_handler.cc
--- up/chromium/chrome/browser/ui/webui/print_preview/print_preview_handler.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/webui/print_preview/print_preview_handler.cc	2023-02-21 04:37:20.948140126 +0000
@@ -103,6 +103,12 @@
 
 namespace {
 
+CR_DEFINE_STATIC_LOCAL(std::string, g_nw_printer_name, ());
+CR_DEFINE_STATIC_LOCAL(base::FilePath, g_nw_print_to_pdf_path, ());
+CR_DEFINE_STATIC_LOCAL(scoped_ptr<base::DictionaryValue>, g_nw_print_options, ());
+
+bool g_nw_custom_printing = false;
+
 enum UserActionBuckets {
   PRINT_TO_PRINTER,
   PRINT_TO_PDF,
@@ -430,6 +436,25 @@
   return description;
 }
 
+} //namespace
+
+namespace chrome {
+void NWPrintSetCustomPrinting(bool value) {
+  g_nw_custom_printing = value;
+}
+
+void NWPrintSetOptions(const base::DictionaryValue* dict) {
+  g_nw_print_options = dict->CreateDeepCopy();
+}
+
+void NWPrintSetPDFPath(const base::FilePath& path) {
+  g_nw_print_to_pdf_path = path;
+}
+
+void NWPrintSetDefaultPrinter(const std::string& printer_name) {
+  g_nw_printer_name = printer_name;
+}
+
 void EnumeratePrintersOnFileThread(base::ListValue* printers) {
   DCHECK_CURRENTLY_ON(BrowserThread::FILE);
 
@@ -478,6 +503,9 @@
           << " printers";
 }
 
+} // namespace chrome
+
+namespace {
 typedef base::Callback<void(const base::DictionaryValue*)>
     GetPrinterCapabilitiesSuccessCallback;
 typedef base::Callback<void(const std::string&)>
@@ -717,7 +745,7 @@
   base::ListValue* results = new base::ListValue;
   BrowserThread::PostTaskAndReply(
       BrowserThread::FILE, FROM_HERE,
-      base::Bind(&EnumeratePrintersOnFileThread,
+      base::Bind(&chrome::EnumeratePrintersOnFileThread,
                  base::Unretained(results)),
       base::Bind(&PrintPreviewHandler::SetupPrinterList,
                  weak_factory_.GetWeakPtr(),
@@ -826,6 +854,26 @@
                             &display_header_footer)) {
     NOTREACHED();
   }
+  if (g_nw_print_options) {
+    bool landscape, backgrounds;
+    int margins_type;
+    base::DictionaryValue* media_size_value = nullptr;
+    base::DictionaryValue* custom_margins = nullptr;
+
+    if (g_nw_print_options->GetDictionary(printing::kSettingMediaSize, &media_size_value) && !media_size_value->empty())
+      settings->Set(printing::kSettingMediaSize, media_size_value->CreateDeepCopy());
+    if (g_nw_print_options->GetBoolean(printing::kSettingHeaderFooterEnabled, &display_header_footer))
+      settings->SetBoolean(printing::kSettingHeaderFooterEnabled, display_header_footer);
+    if (g_nw_print_options->GetBoolean(printing::kSettingLandscape, &landscape))
+      settings->SetBoolean(printing::kSettingLandscape, landscape);
+    if (g_nw_print_options->GetBoolean(printing::kSettingShouldPrintBackgrounds, &backgrounds))
+      settings->SetBoolean(printing::kSettingShouldPrintBackgrounds, backgrounds);
+    if (g_nw_print_options->GetInteger(printing::kSettingMarginsType, &margins_type))
+      settings->SetInteger(printing::kSettingMarginsType, margins_type);
+    if (g_nw_print_options->GetDictionary(printing::kSettingMarginsCustom, &custom_margins) && !custom_margins->empty())
+      settings->Set(printing::kSettingMarginsCustom, custom_margins->CreateDeepCopy());
+  }
+
   if (display_header_footer) {
     settings->SetString(printing::kSettingHeaderFooterTitle,
                         initiator->GetTitle());
@@ -896,6 +944,12 @@
     return;
 
   ReportPrintSettingsStats(*settings);
+  if (g_nw_print_options) {
+    base::ListValue* page_range_array = nullptr;
+
+    if (g_nw_print_options->GetList(printing::kSettingPageRange, &page_range_array) && !page_range_array->empty())
+      settings->Set(printing::kSettingPageRange, page_range_array->CreateDeepCopy());
+  }
 
   // Never try to add headers/footers here. It's already in the generated PDF.
   settings->SetBoolean(printing::kSettingHeaderFooterEnabled, false);
@@ -925,9 +979,12 @@
     UMA_HISTOGRAM_COUNTS("PrintPreview.PageCount.PrintToPDF", page_count);
     ReportUserActionHistogram(PRINT_TO_PDF);
     PrintToPdf();
+    chrome::NWPrintSetCustomPrinting(false);
     return;
   }
 
+  chrome::NWPrintSetCustomPrinting(false);
+
 #if defined(ENABLE_SERVICE_DISCOVERY)
   if (print_with_privet && PrivetPrintingEnabled()) {
     std::string printer_name;
@@ -1065,6 +1122,8 @@
 }
 
 void PrintPreviewHandler::PrintToPdf() {
+  if (!g_nw_print_to_pdf_path.empty() && g_nw_custom_printing)
+    print_to_pdf_path_ = g_nw_print_to_pdf_path;
   if (!print_to_pdf_path_.empty()) {
     // User has already selected a path, no need to show the dialog again.
     PostPrintToPdfTask();
@@ -1274,7 +1333,7 @@
                              print_preview_ui()->initiator_title());
   initial_settings.SetBoolean(printing::kSettingPreviewModifiable,
                               print_preview_ui()->source_is_modifiable());
-  initial_settings.SetString(printing::kSettingPrinterName, default_printer);
+  initial_settings.SetString(printing::kSettingPrinterName, g_nw_printer_name.empty() ? default_printer : g_nw_printer_name);
   initial_settings.SetBoolean(kDocumentHasSelection,
                               print_preview_ui()->source_has_selection());
   initial_settings.SetBoolean(printing::kSettingShouldPrintSelectionOnly,
@@ -1290,9 +1349,12 @@
 
   base::CommandLine* cmdline = base::CommandLine::ForCurrentProcess();
   initial_settings.SetBoolean(kPrintAutomaticallyInKioskMode,
-                              cmdline->HasSwitch(switches::kKioskModePrinting));
+                              cmdline->HasSwitch(switches::kKioskModePrinting) || g_nw_custom_printing);
   initial_settings.SetBoolean(kAppKioskMode,
                               chrome::IsRunningInForcedAppMode());
+  if (g_nw_custom_printing)
+    initial_settings.SetBoolean("nwPrintMode", true);
+
 #if defined(OS_WIN)
   // In Win8 metro, the system print dialog can only open on the desktop.  Doing
   // so will cause the browser to appear hung, so we don't show the link in
diff -r -u --color up/chromium/chrome/browser/ui/webui/print_preview/print_preview_handler.h nw/chromium/chrome/browser/ui/webui/print_preview/print_preview_handler.h
--- up/chromium/chrome/browser/ui/webui/print_preview/print_preview_handler.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/webui/print_preview/print_preview_handler.h	2023-02-21 04:37:20.948140126 +0000
@@ -30,6 +30,15 @@
 namespace base {
 class DictionaryValue;
 class RefCountedBytes;
+class ListValue;
+}
+
+namespace chrome {
+  void EnumeratePrintersOnFileThread(base::ListValue* printers);
+  void NWPrintSetCustomPrinting(bool value);
+  void NWPrintSetDefaultPrinter(const std::string& printer_name);
+  void NWPrintSetPDFPath(const base::FilePath& path);
+  void NWPrintSetOptions(const base::DictionaryValue* dict);
 }
 
 namespace content {
diff -r -u --color up/chromium/chrome/browser/ui/webui/settings/font_handler.cc nw/chromium/chrome/browser/ui/webui/settings/font_handler.cc
--- up/chromium/chrome/browser/ui/webui/settings/font_handler.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/webui/settings/font_handler.cc	2023-02-21 04:37:20.948140126 +0000
@@ -23,8 +23,10 @@
 FontHandler::FontHandler(content::WebUI* webui)
     : weak_ptr_factory_(this) {
   // Perform validation for saved fonts.
+#if 0
   PrefService* pref_service = Profile::FromWebUI(webui)->GetPrefs();
   options::FontSettingsUtilities::ValidateSavedFonts(pref_service);
+#endif
 }
 
 FontHandler::~FontHandler() {}
diff -r -u --color up/chromium/chrome/browser/ui/webui/settings/md_settings_ui.cc nw/chromium/chrome/browser/ui/webui/settings/md_settings_ui.cc
--- up/chromium/chrome/browser/ui/webui/settings/md_settings_ui.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/webui/settings/md_settings_ui.cc	2023-02-21 04:37:20.948140126 +0000
@@ -52,6 +52,7 @@
 MdSettingsUI::MdSettingsUI(content::WebUI* web_ui)
     : content::WebUIController(web_ui),
       WebContentsObserver(web_ui->GetWebContents()) {
+#if 0
   Profile* profile = Profile::FromWebUI(web_ui);
   AddSettingsPageUIHandler(new AppearanceHandler(web_ui));
   AddSettingsPageUIHandler(new ClearBrowsingDataHandler(web_ui));
@@ -86,6 +87,7 @@
 
   content::WebUIDataSource::Add(web_ui->GetWebContents()->GetBrowserContext(),
                                 html_source);
+#endif
 }
 
 MdSettingsUI::~MdSettingsUI() {
diff -r -u --color up/chromium/chrome/browser/ui/webui/settings/people_handler.cc nw/chromium/chrome/browser/ui/webui/settings/people_handler.cc
--- up/chromium/chrome/browser/ui/webui/settings/people_handler.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/webui/settings/people_handler.cc	2023-02-21 04:37:20.948140126 +0000
@@ -635,6 +635,7 @@
   if (GetSyncService())
     ProfileSyncService::SyncEvent(ProfileSyncService::STOP_FROM_OPTIONS);
 
+#if 0
   bool delete_profile = false;
   args->GetBoolean(0, &delete_profile);
   signin_metrics::SignoutDelete delete_metric =
@@ -647,6 +648,7 @@
     // Do as BrowserOptionsHandler::DeleteProfile().
     options::helper::DeleteProfileAtPath(profile_->GetPath(), web_ui());
   }
+#endif
 }
 #endif
 
diff -r -u --color up/chromium/chrome/browser/ui/webui/translate_internals/translate_internals_handler.cc nw/chromium/chrome/browser/ui/webui/translate_internals/translate_internals_handler.cc
--- up/chromium/chrome/browser/ui/webui/translate_internals/translate_internals_handler.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/webui/translate_internals/translate_internals_handler.cc	2023-02-21 04:37:20.952140164 +0000
@@ -127,6 +127,7 @@
 }
 
 void TranslateInternalsHandler::OnRemovePrefItem(const base::ListValue* args) {
+#if 0
   content::WebContents* web_contents = web_ui()->GetWebContents();
   Profile* profile =
       Profile::FromBrowserContext(web_contents->GetBrowserContext());
@@ -167,6 +168,7 @@
   }
 
   SendPrefsToJs();
+#endif
 }
 
 void TranslateInternalsHandler::OnRequestInfo(const base::ListValue* /*args*/) {
diff -r -u --color up/chromium/chrome/browser/ui/webui/translate_internals/translate_internals_ui.cc nw/chromium/chrome/browser/ui/webui/translate_internals/translate_internals_ui.cc
--- up/chromium/chrome/browser/ui/webui/translate_internals/translate_internals_ui.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/browser/ui/webui/translate_internals/translate_internals_ui.cc	2023-02-21 04:37:20.952140164 +0000
@@ -69,7 +69,7 @@
   cld_data_source = "static"; // CLD1.x does not support dynamic data loading
 #elif CLD_VERSION==2
   cld_version = "2";
-  cld_data_source = translate::CldDataSource::Get()->GetName();
+  //cld_data_source = translate::CldDataSource::Get()->GetName();
 #else
   NOTREACHED();
 #endif
diff -r -u --color up/chromium/chrome/chrome.gyp nw/chromium/chrome/chrome.gyp
--- up/chromium/chrome/chrome.gyp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/chrome.gyp	2023-02-21 04:37:20.960140242 +0000
@@ -21,6 +21,8 @@
     'chromium_child_dependencies': [
       'common',
       '../sync/sync.gyp:sync',
+      #'../v8/tools/gyp/v8.gyp:v8_libplatform',
+      #'../third_party/node/node.gyp:node',
     ],
     'grit_out_dir': '<(SHARED_INTERMEDIATE_DIR)/chrome',
     'protoc_out_dir': '<(SHARED_INTERMEDIATE_DIR)/protoc_out',
@@ -44,7 +46,8 @@
             'chromium_child_dependencies': [
               # Use whatever CLD2 data access mode that the application
               # embedder is using.
-              '<(DEPTH)/third_party/cld_2/cld_2.gyp:cld2_platform_impl', ],
+              #'<(DEPTH)/third_party/cld_2/cld_2.gyp:cld2_platform_impl', 
+             ],
           }],
           ['enable_plugins==1 and disable_nacl==0', {
             'chromium_child_dependencies': [
@@ -90,6 +93,7 @@
     ],  # conditions
   },  # variables
   'includes': [
+    '../content/nw/nw.gypi',
     # Place some targets in gypi files to reduce contention on this file.
     # By using an include, we keep everything in a single xcodeproj file.
     # Note on Win64 targets: targets that end with win64 be used
@@ -352,7 +356,7 @@
                   'inputs': [
                     '<(DEPTH)/build/linux/dump_app_syms.py',
                     '<(PRODUCT_DIR)/dump_syms',
-                    '<(PRODUCT_DIR)/chrome',
+                    '<(PRODUCT_DIR)/nw',
                   ],
                   'outputs': [
                     '<(PRODUCT_DIR)/chrome.breakpad.<(target_arch)',
@@ -361,7 +365,7 @@
                              '<(DEPTH)/build/linux/dump_app_syms.py',
                              '<(PRODUCT_DIR)/dump_syms',
                              '<(linux_strip_binary)',
-                             '<(PRODUCT_DIR)/chrome',
+                             '<(PRODUCT_DIR)/nw',
                              '<@(_outputs)'],
                   'message': 'Dumping breakpad symbols to <(_outputs)',
                   'process_outputs_as_sources': 1,
diff -r -u --color up/chromium/chrome/chrome.isolate nw/chromium/chrome/chrome.isolate
--- up/chromium/chrome/chrome.isolate	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/chrome.isolate	2023-02-21 04:37:20.960140242 +0000
@@ -35,11 +35,11 @@
     ['OS=="linux" or OS=="win"', {
       'variables': {
         'command': [
-          '<(PRODUCT_DIR)/chrome<(EXECUTABLE_SUFFIX)',
+          '<(PRODUCT_DIR)/nw<(EXECUTABLE_SUFFIX)',
         ],
         'files': [
-          '<(PRODUCT_DIR)/chrome<(EXECUTABLE_SUFFIX)',
-          '<(PRODUCT_DIR)/chrome_100_percent.pak',
+          '<(PRODUCT_DIR)/nw<(EXECUTABLE_SUFFIX)',
+          '<(PRODUCT_DIR)/nw_100_percent.pak',
           '<(PRODUCT_DIR)/locales/en-US.pak',
           '<(PRODUCT_DIR)/locales/fr.pak',
           '<(PRODUCT_DIR)/resources/extension/',
@@ -87,9 +87,9 @@
       'variables': {
         'files': [
           '<(PRODUCT_DIR)/<(version_full).manifest',
-          '<(PRODUCT_DIR)/chrome_200_percent.pak',
-          '<(PRODUCT_DIR)/chrome.dll',
-          '<(PRODUCT_DIR)/chrome_elf.dll',
+          '<(PRODUCT_DIR)/nw_200_percent.pak',
+          '<(PRODUCT_DIR)/nw.dll',
+          '<(PRODUCT_DIR)/nw_elf.dll',
           '<(PRODUCT_DIR)/libexif.dll',
           '<(PRODUCT_DIR)/osmesa.dll',
         ],
@@ -113,7 +113,7 @@
     ['OS=="win" and component=="static_library"', {
       'variables': {
         'files': [
-          '<(PRODUCT_DIR)/chrome_child.dll',
+          '<(PRODUCT_DIR)/nw_child.dll',
         ],
       },
     }],
diff -r -u --color up/chromium/chrome/chrome_browser.gypi nw/chromium/chrome/chrome_browser.gypi
--- up/chromium/chrome/chrome_browser.gypi	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/chrome_browser.gypi	2023-02-21 04:37:20.960140242 +0000
@@ -154,8 +154,8 @@
       'browser/component_updater/caps_installer_win.h',
       'browser/component_updater/chrome_component_updater_configurator.cc',
       'browser/component_updater/chrome_component_updater_configurator.h',
-      'browser/component_updater/cld_component_installer.cc',
-      'browser/component_updater/cld_component_installer.h',
+      #'browser/component_updater/cld_component_installer.cc',
+      #'browser/component_updater/cld_component_installer.h',
       'browser/component_updater/component_patcher_operation_out_of_process.cc',
       'browser/component_updater/component_patcher_operation_out_of_process.h',
       'browser/component_updater/component_updater_resource_throttle.cc',
@@ -606,12 +606,12 @@
       'browser/tracing/crash_service_uploader.h',
       'browser/tracing/navigation_tracing.cc',
       'browser/tracing/navigation_tracing.h',
-      'browser/translate/chrome_translate_client.cc',
-      'browser/translate/chrome_translate_client.h',
-      'browser/translate/translate_accept_languages_factory.cc',
-      'browser/translate/translate_accept_languages_factory.h',
-      'browser/translate/translate_service.cc',
-      'browser/translate/translate_service.h',
+#      'browser/translate/chrome_translate_client.cc',
+#      'browser/translate/chrome_translate_client.h',
+#      'browser/translate/translate_accept_languages_factory.cc',
+#      'browser/translate/translate_accept_languages_factory.h',
+#      'browser/translate/translate_service.cc',
+#      'browser/translate/translate_service.h',
       'browser/update_client/chrome_update_query_params_delegate.cc',
       'browser/update_client/chrome_update_query_params_delegate.h',
       'browser/usb/usb_chooser_context.cc',
@@ -3160,6 +3160,7 @@
       'dependencies': [
         # NOTE: New dependencies should generally be added in the OS!="ios"
         # dependencies block below, rather than here.
+        'nw_base',
         'browser_ui',
         'chrome_features.gyp:chrome_common_features',
         'chrome_resources.gyp:chrome_extra_resources',
@@ -3179,7 +3180,7 @@
         '../components/components.gyp:captive_portal',
         '../components/components.gyp:cloud_devices_common',
         '../components/components.gyp:component_metrics_proto',
-        '../components/components.gyp:component_updater',
+        #'../components/components.gyp:component_updater',
         '../components/components.gyp:content_settings_content_common',
         '../components/components.gyp:content_settings_core_browser',
         '../components/components.gyp:content_settings_core_common',
@@ -3211,7 +3212,7 @@
         '../components/components.gyp:policy_component',
         '../components/components.gyp:proxy_config',
         '../components/components.gyp:query_parser',
-        '../components/components.gyp:rappor',
+        #'../components/components.gyp:rappor',
         '../components/components.gyp:search',
         '../components/components.gyp:search_engines',
         '../components/components.gyp:search_provider_logos',
@@ -3247,6 +3248,7 @@
         '../components/url_formatter/url_formatter.gyp:url_formatter',
         '../content/content.gyp:content_browser',
         '../content/content.gyp:content_common',
+        'nw_content',
         '../courgette/courgette.gyp:courgette_lib',
         '../crypto/crypto.gyp:crypto',
         '../google_apis/google_apis.gyp:google_apis',
@@ -3344,7 +3346,7 @@
             '../components/components.gyp:storage_monitor',
             '../components/components.gyp:ssl_config',
             '../components/components.gyp:syncable_prefs',
-            '../components/components.gyp:translate_content_browser',
+            #'../components/components.gyp:translate_content_browser',
             '../components/components.gyp:upload_list',
             '../components/components.gyp:url_matcher',
             '../components/components.gyp:user_prefs_tracked',
diff -r -u --color up/chromium/chrome/chrome_browser_extensions.gypi nw/chromium/chrome/chrome_browser_extensions.gypi
--- up/chromium/chrome/chrome_browser_extensions.gypi	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/chrome_browser_extensions.gypi	2023-02-21 04:37:20.960140242 +0000
@@ -555,12 +555,12 @@
       'browser/extensions/api/webstore_private/webstore_private_api.h',
       'browser/extensions/app_data_migrator.cc',
       'browser/extensions/app_data_migrator.h',
-      'browser/extensions/blacklist.cc',
-      'browser/extensions/blacklist.h',
-      'browser/extensions/blacklist_factory.cc',
-      'browser/extensions/blacklist_factory.h',
-      'browser/extensions/blacklist_state_fetcher.cc',
-      'browser/extensions/blacklist_state_fetcher.h',
+#      'browser/extensions/blacklist.cc',
+#      'browser/extensions/blacklist.h',
+#      'browser/extensions/blacklist_factory.cc',
+#      'browser/extensions/blacklist_factory.h',
+#      'browser/extensions/blacklist_state_fetcher.cc',
+#      'browser/extensions/blacklist_state_fetcher.h',
       'browser/extensions/blob_reader.cc',
       'browser/extensions/blob_reader.h',
       'browser/extensions/bookmark_app_helper.cc',
diff -r -u --color up/chromium/chrome/chrome_browser_ui.gypi nw/chromium/chrome/chrome_browser_ui.gypi
--- up/chromium/chrome/chrome_browser_ui.gypi	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/chrome_browser_ui.gypi	2023-02-21 04:37:20.960140242 +0000
@@ -310,8 +310,8 @@
       'browser/ui/webui/chromeos/touch_view_controller_delegate.h',
       'browser/ui/webui/chromeos/ui_account_tweaks.cc',
       'browser/ui/webui/chromeos/ui_account_tweaks.h',
-      'browser/ui/webui/components_ui.cc',
-      'browser/ui/webui/components_ui.h',
+#      'browser/ui/webui/components_ui.cc',
+#      'browser/ui/webui/components_ui.h',
       'browser/ui/webui/constrained_web_dialog_ui.cc',
       'browser/ui/webui/constrained_web_dialog_ui.h',
       'browser/ui/webui/cookies_tree_model_util.cc',
@@ -334,10 +334,10 @@
       'browser/ui/webui/gcm_internals_ui.h',
       'browser/ui/webui/history_ui.cc',
       'browser/ui/webui/history_ui.h',
-      'browser/ui/webui/instant_ui.cc',
-      'browser/ui/webui/instant_ui.h',
-      'browser/ui/webui/interstitials/interstitial_ui.cc',
-      'browser/ui/webui/interstitials/interstitial_ui.h',
+#      'browser/ui/webui/instant_ui.cc',
+#      'browser/ui/webui/instant_ui.h',
+#      'browser/ui/webui/interstitials/interstitial_ui.cc',
+#      'browser/ui/webui/interstitials/interstitial_ui.h',
       'browser/ui/webui/invalidations_message_handler.cc',
       'browser/ui/webui/invalidations_message_handler.h',
       'browser/ui/webui/invalidations_ui.cc',
@@ -391,10 +391,10 @@
       'browser/ui/webui/test_files_request_filter.h',
       'browser/ui/webui/theme_source.cc',
       'browser/ui/webui/theme_source.h',
-      'browser/ui/webui/translate_internals/translate_internals_handler.cc',
-      'browser/ui/webui/translate_internals/translate_internals_handler.h',
-      'browser/ui/webui/translate_internals/translate_internals_ui.cc',
-      'browser/ui/webui/translate_internals/translate_internals_ui.h',
+#      'browser/ui/webui/translate_internals/translate_internals_handler.cc',
+#      'browser/ui/webui/translate_internals/translate_internals_handler.h',
+#      'browser/ui/webui/translate_internals/translate_internals_ui.cc',
+#      'browser/ui/webui/translate_internals/translate_internals_ui.h',
       'browser/ui/webui/user_actions/user_actions_ui.cc',
       'browser/ui/webui/user_actions/user_actions_ui.h',
       'browser/ui/webui/user_actions/user_actions_ui_handler.cc',
@@ -1334,10 +1334,10 @@
       'browser/ui/webui/signin/inline_login_handler_impl.h',
       'browser/ui/webui/signin/inline_login_ui.cc',
       'browser/ui/webui/signin/inline_login_ui.h',
-      'browser/ui/webui/signin/sync_confirmation_handler.cc',
-      'browser/ui/webui/signin/sync_confirmation_handler.h',
-      'browser/ui/webui/signin/sync_confirmation_ui.cc',
-      'browser/ui/webui/signin/sync_confirmation_ui.h',
+      #'browser/ui/webui/signin/sync_confirmation_handler.cc',
+      #'browser/ui/webui/signin/sync_confirmation_handler.h',
+      #'browser/ui/webui/signin/sync_confirmation_ui.cc',
+      #'browser/ui/webui/signin/sync_confirmation_ui.h',
       'browser/ui/webui/signin/user_manager_screen_handler.cc',
       'browser/ui/webui/signin/user_manager_screen_handler.h',
       'browser/ui/webui/signin/user_manager_ui.cc',
@@ -1824,14 +1824,14 @@
       'browser/ui/webui/copresence_ui_handler.h',
       'browser/ui/webui/devtools_ui.cc',
       'browser/ui/webui/devtools_ui.h',
-      'browser/ui/webui/engagement/site_engagement_ui.cc',
-      'browser/ui/webui/engagement/site_engagement_ui.h',
+      #'browser/ui/webui/engagement/site_engagement_ui.cc',
+      #'browser/ui/webui/engagement/site_engagement_ui.h',
       'browser/ui/webui/extensions/extension_loader_handler.cc',
       'browser/ui/webui/extensions/extension_loader_handler.h',
       'browser/ui/webui/extensions/extension_settings_handler.cc',
       'browser/ui/webui/extensions/extension_settings_handler.h',
-      'browser/ui/webui/extensions/extensions_ui.cc',
-      'browser/ui/webui/extensions/extensions_ui.h',
+      #'browser/ui/webui/extensions/extensions_ui.cc',
+      #'browser/ui/webui/extensions/extensions_ui.h',
       'browser/ui/webui/extensions/install_extension_handler.cc',
       'browser/ui/webui/extensions/install_extension_handler.h',
       'browser/ui/webui/foreign_session_handler.cc',
@@ -1854,14 +1854,14 @@
       'browser/ui/webui/identity_internals_ui.h',
       'browser/ui/webui/inspect_ui.cc',
       'browser/ui/webui/inspect_ui.h',
-      'browser/ui/webui/md_downloads/downloads_list_tracker.cc',
-      'browser/ui/webui/md_downloads/downloads_list_tracker.h',
-      'browser/ui/webui/md_downloads/md_downloads_dom_handler.cc',
-      'browser/ui/webui/md_downloads/md_downloads_dom_handler.h',
-      'browser/ui/webui/md_downloads/md_downloads_ui.cc',
-      'browser/ui/webui/md_downloads/md_downloads_ui.h',
-      'browser/ui/webui/md_history_ui.cc',
-      'browser/ui/webui/md_history_ui.h',
+      #'browser/ui/webui/md_downloads/downloads_list_tracker.cc',
+      #'browser/ui/webui/md_downloads/downloads_list_tracker.h',
+      #'browser/ui/webui/md_downloads/md_downloads_dom_handler.cc',
+      #'browser/ui/webui/md_downloads/md_downloads_dom_handler.h',
+      #'browser/ui/webui/md_downloads/md_downloads_ui.cc',
+      #'browser/ui/webui/md_downloads/md_downloads_ui.h',
+      #'browser/ui/webui/md_history_ui.cc',
+      #'browser/ui/webui/md_history_ui.h',
       'browser/ui/webui/ntp/app_launcher_handler.cc',
       'browser/ui/webui/ntp/app_launcher_handler.h',
       'browser/ui/webui/ntp/app_resource_cache_factory.cc',
@@ -1881,108 +1881,108 @@
       'browser/ui/webui/ntp/ntp_resource_cache_factory.cc',
       'browser/ui/webui/ntp/ntp_resource_cache_factory.h',
       'browser/ui/webui/ntp/ntp_stats.h',
-      'browser/ui/webui/options/advanced_options_utils.h',
-      'browser/ui/webui/options/advanced_options_utils_linux.cc',
-      'browser/ui/webui/options/advanced_options_utils_mac.mm',
-      'browser/ui/webui/options/advanced_options_utils_win.cc',
-      'browser/ui/webui/options/autofill_options_handler.cc',
-      'browser/ui/webui/options/autofill_options_handler.h',
-      'browser/ui/webui/options/automatic_settings_reset_handler.cc',
-      'browser/ui/webui/options/automatic_settings_reset_handler.h',
-      'browser/ui/webui/options/browser_options_handler.cc',
-      'browser/ui/webui/options/browser_options_handler.h',
-      'browser/ui/webui/options/chromeos/accounts_options_handler.cc',
-      'browser/ui/webui/options/chromeos/accounts_options_handler.h',
-      'browser/ui/webui/options/chromeos/bluetooth_options_handler.cc',
-      'browser/ui/webui/options/chromeos/bluetooth_options_handler.h',
-      'browser/ui/webui/options/chromeos/change_picture_options_handler.cc',
-      'browser/ui/webui/options/chromeos/change_picture_options_handler.h',
-      'browser/ui/webui/options/chromeos/consumer_management_handler.cc',
-      'browser/ui/webui/options/chromeos/consumer_management_handler.h',
-      'browser/ui/webui/options/chromeos/core_chromeos_options_handler.cc',
-      'browser/ui/webui/options/chromeos/core_chromeos_options_handler.h',
-      'browser/ui/webui/options/chromeos/cros_language_options_handler.cc',
-      'browser/ui/webui/options/chromeos/cros_language_options_handler.h',
-      'browser/ui/webui/options/chromeos/date_time_options_handler.cc',
-      'browser/ui/webui/options/chromeos/date_time_options_handler.h',
-      'browser/ui/webui/options/chromeos/display_options_handler.cc',
-      'browser/ui/webui/options/chromeos/display_options_handler.h',
-      'browser/ui/webui/options/chromeos/display_overscan_handler.cc',
-      'browser/ui/webui/options/chromeos/display_overscan_handler.h',
-      'browser/ui/webui/options/chromeos/internet_options_handler.cc',
-      'browser/ui/webui/options/chromeos/internet_options_handler.h',
-      'browser/ui/webui/options/chromeos/internet_options_handler_strings.cc',
-      'browser/ui/webui/options/chromeos/internet_options_handler_strings.h',
-      'browser/ui/webui/options/chromeos/keyboard_handler.cc',
-      'browser/ui/webui/options/chromeos/keyboard_handler.h',
-      'browser/ui/webui/options/chromeos/pointer_handler.cc',
-      'browser/ui/webui/options/chromeos/pointer_handler.h',
-      'browser/ui/webui/options/chromeos/power_handler.cc',
-      'browser/ui/webui/options/chromeos/power_handler.h',
-      'browser/ui/webui/options/chromeos/proxy_handler.cc',
-      'browser/ui/webui/options/chromeos/proxy_handler.h',
-      'browser/ui/webui/options/chromeos/stats_options_handler.cc',
-      'browser/ui/webui/options/chromeos/stats_options_handler.h',
-      'browser/ui/webui/options/chromeos/user_image_source.cc',
-      'browser/ui/webui/options/chromeos/user_image_source.h',
-      'browser/ui/webui/options/clear_browser_data_handler.cc',
-      'browser/ui/webui/options/clear_browser_data_handler.h',
-      'browser/ui/webui/options/content_settings_handler.cc',
-      'browser/ui/webui/options/content_settings_handler.h',
-      'browser/ui/webui/options/cookies_view_handler.cc',
-      'browser/ui/webui/options/cookies_view_handler.h',
-      'browser/ui/webui/options/core_options_handler.cc',
-      'browser/ui/webui/options/core_options_handler.h',
-      'browser/ui/webui/options/create_profile_handler.cc',
-      'browser/ui/webui/options/create_profile_handler.h',
-      'browser/ui/webui/options/easy_unlock_handler.cc',
-      'browser/ui/webui/options/easy_unlock_handler.h',
-      'browser/ui/webui/options/font_settings_handler.cc',
-      'browser/ui/webui/options/font_settings_handler.h',
-      'browser/ui/webui/options/font_settings_utils.h',
-      'browser/ui/webui/options/font_settings_utils_linux.cc',
-      'browser/ui/webui/options/font_settings_utils_mac.mm',
-      'browser/ui/webui/options/font_settings_utils_win.cc',
-      'browser/ui/webui/options/handler_options_handler.cc',
-      'browser/ui/webui/options/handler_options_handler.h',
-      'browser/ui/webui/options/help_overlay_handler.cc',
-      'browser/ui/webui/options/help_overlay_handler.h',
-      'browser/ui/webui/options/home_page_overlay_handler.cc',
-      'browser/ui/webui/options/home_page_overlay_handler.h',
-      'browser/ui/webui/options/import_data_handler.cc',
-      'browser/ui/webui/options/import_data_handler.h',
-      'browser/ui/webui/options/language_dictionary_overlay_handler.cc',
-      'browser/ui/webui/options/language_dictionary_overlay_handler.h',
-      'browser/ui/webui/options/language_options_handler.cc',
-      'browser/ui/webui/options/language_options_handler.h',
-      'browser/ui/webui/options/language_options_handler_common.cc',
-      'browser/ui/webui/options/language_options_handler_common.h',
-      'browser/ui/webui/options/manage_profile_handler.cc',
-      'browser/ui/webui/options/manage_profile_handler.h',
-      'browser/ui/webui/options/media_devices_selection_handler.cc',
-      'browser/ui/webui/options/media_devices_selection_handler.h',
-      'browser/ui/webui/options/options_handlers_helper.cc',
-      'browser/ui/webui/options/options_handlers_helper.h',
-      'browser/ui/webui/options/options_ui.cc',
-      'browser/ui/webui/options/options_ui.h',
-      'browser/ui/webui/options/password_manager_handler.cc',
-      'browser/ui/webui/options/password_manager_handler.h',
-      'browser/ui/webui/options/pepper_flash_content_settings_utils.cc',
-      'browser/ui/webui/options/pepper_flash_content_settings_utils.h',
-      'browser/ui/webui/options/reset_profile_settings_handler.cc',
-      'browser/ui/webui/options/reset_profile_settings_handler.h',
-      'browser/ui/webui/options/search_engine_manager_handler.cc',
-      'browser/ui/webui/options/search_engine_manager_handler.h',
-      'browser/ui/webui/options/startup_pages_handler.cc',
-      'browser/ui/webui/options/startup_pages_handler.h',
-      'browser/ui/webui/options/supervised_user_create_confirm_handler.cc',
-      'browser/ui/webui/options/supervised_user_create_confirm_handler.h',
-      'browser/ui/webui/options/supervised_user_import_handler.cc',
-      'browser/ui/webui/options/supervised_user_import_handler.h',
-      'browser/ui/webui/options/supervised_user_learn_more_handler.cc',
-      'browser/ui/webui/options/supervised_user_learn_more_handler.h',
-      'browser/ui/webui/options/sync_setup_handler.cc',
-      'browser/ui/webui/options/sync_setup_handler.h',
+#      'browser/ui/webui/options/advanced_options_utils.h',
+#      'browser/ui/webui/options/advanced_options_utils_linux.cc',
+#      'browser/ui/webui/options/advanced_options_utils_mac.mm',
+#      'browser/ui/webui/options/advanced_options_utils_win.cc',
+#      'browser/ui/webui/options/autofill_options_handler.cc',
+#      'browser/ui/webui/options/autofill_options_handler.h',
+#      'browser/ui/webui/options/automatic_settings_reset_handler.cc',
+#      'browser/ui/webui/options/automatic_settings_reset_handler.h',
+#      'browser/ui/webui/options/browser_options_handler.cc',
+#      'browser/ui/webui/options/browser_options_handler.h',
+#      'browser/ui/webui/options/chromeos/accounts_options_handler.cc',
+#      'browser/ui/webui/options/chromeos/accounts_options_handler.h',
+#      'browser/ui/webui/options/chromeos/bluetooth_options_handler.cc',
+#      'browser/ui/webui/options/chromeos/bluetooth_options_handler.h',
+#      'browser/ui/webui/options/chromeos/change_picture_options_handler.cc',
+#      'browser/ui/webui/options/chromeos/change_picture_options_handler.h',
+#      'browser/ui/webui/options/chromeos/consumer_management_handler.cc',
+#      'browser/ui/webui/options/chromeos/consumer_management_handler.h',
+#      'browser/ui/webui/options/chromeos/core_chromeos_options_handler.cc',
+#      'browser/ui/webui/options/chromeos/core_chromeos_options_handler.h',
+#      'browser/ui/webui/options/chromeos/cros_language_options_handler.cc',
+#      'browser/ui/webui/options/chromeos/cros_language_options_handler.h',
+#      'browser/ui/webui/options/chromeos/date_time_options_handler.cc',
+#      'browser/ui/webui/options/chromeos/date_time_options_handler.h',
+#      'browser/ui/webui/options/chromeos/display_options_handler.cc',
+#      'browser/ui/webui/options/chromeos/display_options_handler.h',
+#      'browser/ui/webui/options/chromeos/display_overscan_handler.cc',
+#      'browser/ui/webui/options/chromeos/display_overscan_handler.h',
+#      'browser/ui/webui/options/chromeos/internet_options_handler.cc',
+#      'browser/ui/webui/options/chromeos/internet_options_handler.h',
+#      'browser/ui/webui/options/chromeos/internet_options_handler_strings.cc',
+#      'browser/ui/webui/options/chromeos/internet_options_handler_strings.h',
+#      'browser/ui/webui/options/chromeos/keyboard_handler.cc',
+#      'browser/ui/webui/options/chromeos/keyboard_handler.h',
+#      'browser/ui/webui/options/chromeos/pointer_handler.cc',
+#      'browser/ui/webui/options/chromeos/pointer_handler.h',
+#      'browser/ui/webui/options/chromeos/power_handler.cc',
+#      'browser/ui/webui/options/chromeos/power_handler.h',
+#      'browser/ui/webui/options/chromeos/proxy_handler.cc',
+#      'browser/ui/webui/options/chromeos/proxy_handler.h',
+#      'browser/ui/webui/options/chromeos/stats_options_handler.cc',
+#      'browser/ui/webui/options/chromeos/stats_options_handler.h',
+#      'browser/ui/webui/options/chromeos/user_image_source.cc',
+#      'browser/ui/webui/options/chromeos/user_image_source.h',
+#      'browser/ui/webui/options/clear_browser_data_handler.cc',
+#      'browser/ui/webui/options/clear_browser_data_handler.h',
+#      'browser/ui/webui/options/content_settings_handler.cc',
+#      'browser/ui/webui/options/content_settings_handler.h',
+#      'browser/ui/webui/options/cookies_view_handler.cc',
+#      'browser/ui/webui/options/cookies_view_handler.h',
+#      'browser/ui/webui/options/core_options_handler.cc',
+#      'browser/ui/webui/options/core_options_handler.h',
+#      'browser/ui/webui/options/create_profile_handler.cc',
+#      'browser/ui/webui/options/create_profile_handler.h',
+#      'browser/ui/webui/options/easy_unlock_handler.cc',
+#      'browser/ui/webui/options/easy_unlock_handler.h',
+#      'browser/ui/webui/options/font_settings_handler.cc',
+#      'browser/ui/webui/options/font_settings_handler.h',
+#      'browser/ui/webui/options/font_settings_utils.h',
+#      'browser/ui/webui/options/font_settings_utils_linux.cc',
+#      'browser/ui/webui/options/font_settings_utils_mac.mm',
+#      'browser/ui/webui/options/font_settings_utils_win.cc',
+#      'browser/ui/webui/options/handler_options_handler.cc',
+#      'browser/ui/webui/options/handler_options_handler.h',
+#      'browser/ui/webui/options/help_overlay_handler.cc',
+#      'browser/ui/webui/options/help_overlay_handler.h',
+#      'browser/ui/webui/options/home_page_overlay_handler.cc',
+#      'browser/ui/webui/options/home_page_overlay_handler.h',
+#      'browser/ui/webui/options/import_data_handler.cc',
+#      'browser/ui/webui/options/import_data_handler.h',
+#      'browser/ui/webui/options/language_dictionary_overlay_handler.cc',
+#      'browser/ui/webui/options/language_dictionary_overlay_handler.h',
+#      'browser/ui/webui/options/language_options_handler.cc',
+#      'browser/ui/webui/options/language_options_handler.h',
+#      'browser/ui/webui/options/language_options_handler_common.cc',
+#      'browser/ui/webui/options/language_options_handler_common.h',
+#      'browser/ui/webui/options/manage_profile_handler.cc',
+#      'browser/ui/webui/options/manage_profile_handler.h',
+#      'browser/ui/webui/options/media_devices_selection_handler.cc',
+#      'browser/ui/webui/options/media_devices_selection_handler.h',
+#      'browser/ui/webui/options/options_handlers_helper.cc',
+#      'browser/ui/webui/options/options_handlers_helper.h',
+#      'browser/ui/webui/options/options_ui.cc',
+#      'browser/ui/webui/options/options_ui.h',
+#      'browser/ui/webui/options/password_manager_handler.cc',
+#      'browser/ui/webui/options/password_manager_handler.h',
+#      'browser/ui/webui/options/pepper_flash_content_settings_utils.cc',
+#      'browser/ui/webui/options/pepper_flash_content_settings_utils.h',
+#      'browser/ui/webui/options/reset_profile_settings_handler.cc',
+#      'browser/ui/webui/options/reset_profile_settings_handler.h',
+#      'browser/ui/webui/options/search_engine_manager_handler.cc',
+#      'browser/ui/webui/options/search_engine_manager_handler.h',
+#      'browser/ui/webui/options/startup_pages_handler.cc',
+#      'browser/ui/webui/options/startup_pages_handler.h',
+#      'browser/ui/webui/options/supervised_user_create_confirm_handler.cc',
+#      'browser/ui/webui/options/supervised_user_create_confirm_handler.h',
+#      'browser/ui/webui/options/supervised_user_import_handler.cc',
+#      'browser/ui/webui/options/supervised_user_import_handler.h',
+#      'browser/ui/webui/options/supervised_user_learn_more_handler.cc',
+#      'browser/ui/webui/options/supervised_user_learn_more_handler.h',
+#      'browser/ui/webui/options/sync_setup_handler.cc',
+#      'browser/ui/webui/options/sync_setup_handler.h',
       'browser/ui/webui/policy_indicator_localized_strings_provider.cc',
       'browser/ui/webui/policy_indicator_localized_strings_provider.h',
       'browser/ui/webui/profile_info_watcher.cc',
@@ -2771,8 +2771,8 @@
       'browser/ui/crypto_module_delegate_nss.h',
       'browser/ui/crypto_module_password_dialog_nss.cc',
       'browser/ui/crypto_module_password_dialog_nss.h',
-      'browser/ui/webui/options/certificate_manager_handler.cc',
-      'browser/ui/webui/options/certificate_manager_handler.h',
+      #'browser/ui/webui/options/certificate_manager_handler.cc',
+      #'browser/ui/webui/options/certificate_manager_handler.h',
     ],
     'chrome_browser_ui_omnibox_non_mobile_sources': [
       'browser/ui/omnibox/alternate_nav_infobar_delegate.cc',
@@ -2933,7 +2933,7 @@
             '../components/components.gyp:flags_ui',
             '../components/components.gyp:net_log',
             '../components/components.gyp:page_load_metrics_browser',
-            '../components/components.gyp:translate_content_common',
+            #'../components/components.gyp:translate_content_common',
             '../components/components_resources.gyp:components_resources',
             '../content/app/resources/content_resources.gyp:content_resources',
             '../media/media.gyp:media',
@@ -2962,6 +2962,13 @@
             '../net/net.gyp:net',
           ],
         }],
+        ['nwjs_sdk==0', {
+          'sources!': [
+            'browser/ui/webui/about_ui.cc',
+            'browser/ui/webui/about_ui.h',
+            '<@(chrome_browser_ui_media_router_sources)',
+          ],
+        }],
         ['enable_basic_printing==1 or enable_print_preview==1', {
           'dependencies': [
             '../printing/printing.gyp:printing',
diff -r -u --color up/chromium/chrome/chrome_common.gypi nw/chromium/chrome/chrome_common.gypi
--- up/chromium/chrome/chrome_common.gypi	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/chrome_common.gypi	2023-02-21 04:37:20.960140242 +0000
@@ -368,6 +368,7 @@
           'dependencies': [
             '<(DEPTH)/device/usb/usb.gyp:device_usb',
             '<(DEPTH)/chrome/common/extensions/api/api.gyp:chrome_api',
+            '<(DEPTH)/content/nw/src/api/api.gyp:nw_api',
             '<(DEPTH)/extensions/common/api/api.gyp:extensions_api',
             '<(DEPTH)/extensions/extensions.gyp:extensions_common',
             '<(DEPTH)/extensions/extensions_resources.gyp:extensions_resources',
@@ -413,7 +414,7 @@
             '<(DEPTH)/components/components.gyp:password_manager_core_common',
             '<(DEPTH)/components/components.gyp:password_manager_content_common',
             '<(DEPTH)/components/components.gyp:signin_core_common',
-            '<(DEPTH)/components/components.gyp:translate_content_common',
+            #'<(DEPTH)/components/components.gyp:translate_content_common',
             '<(DEPTH)/components/components.gyp:visitedlink_common',
             '<(DEPTH)/extensions/extensions.gyp:extensions_common_constants',
             '<(DEPTH)/ipc/ipc.gyp:ipc',
diff -r -u --color up/chromium/chrome/chrome_dll.gypi nw/chromium/chrome/chrome_dll.gypi
--- up/chromium/chrome/chrome_dll.gypi	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/chrome_dll.gypi	2023-02-21 04:37:20.960140242 +0000
@@ -32,7 +32,7 @@
       ],
      },
     ],
-    ['OS=="mac" or OS=="win"', {
+    ['OS=="mac" or OS=="win" or OS=="linux"', {
       'targets': [
         {
           # GN version: //chrome:chrome_dll
@@ -67,14 +67,14 @@
                 {
                   'action_name': 'hardlink_to_output',
                   'inputs': [
-                    '$(OutDir)\\initial\\chrome.dll',
+                    '$(OutDir)\\initial\\nw.dll',
                   ],
                   'outputs': [
-                    '$(OutDir)\\chrome.dll',
+                    '$(OutDir)\\nw.dll',
                   ],
                   'action': ['tools\\build\\win\\hardlink_failsafe.bat',
-                             '$(OutDir)\\initial\\chrome.dll',
-                             '$(OutDir)\\chrome.dll'],
+                             '$(OutDir)\\initial\\nw.dll',
+                             '$(OutDir)\\nw.dll'],
                 },
               ],
               'conditions': [
@@ -85,14 +85,14 @@
                       'action_name': 'hardlink_pdb_to_output',
                       'inputs': [
                         # Not the pdb, since gyp doesn't know about it
-                        '$(OutDir)\\initial\\chrome.dll',
+                        '$(OutDir)\\initial\\nw.dll',
                       ],
                       'outputs': [
-                        '$(OutDir)\\chrome.dll.pdb',
+                        '$(OutDir)\\nw.dll.pdb',
                       ],
                       'action': ['tools\\build\\win\\hardlink_failsafe.bat',
-                                 '$(OutDir)\\initial\\chrome.dll.pdb',
-                                 '$(OutDir)\\chrome.dll.pdb'],
+                                 '$(OutDir)\\initial\\nw.dll.pdb',
+                                 '$(OutDir)\\nw.dll.pdb'],
                     }
                   ]
                 }]
@@ -147,8 +147,11 @@
                 'chrome_user32_delay_imports',
               ],
             },],
+            ['OS=="linux"', {
+              'product_name': 'nw'
+            }],
             ['OS=="win"', {
-              'product_name': 'chrome',
+              'product_name': 'nw',
               'dependencies': [
                 # On Windows, link the dependencies (libraries) that make
                 # up actual Chromium functionality into this .dll.
@@ -189,7 +192,7 @@
                   'SubSystem': '2',
                   'conditions': [
                     ['incremental_chrome_dll==1', {
-                      'OutputFile': '$(OutDir)\\initial\\chrome.dll',
+                      'OutputFile': '$(OutDir)\\initial\\nw.dll',
                       'UseLibraryDependencyInputs': "true",
                     }],
                     ['target_arch=="ia32"', {
@@ -244,7 +247,7 @@
                 },
                 'VCManifestTool': {
                   'AdditionalManifestFiles': [
-                    '$(ProjectDir)\\app\\chrome.dll.manifest',
+                    '$(ProjectDir)\\app\\nw.dll.manifest',
                   ],
                 },
               },
@@ -281,7 +284,7 @@
             }],
             ['cld_version==2', {
               'dependencies': [
-                '<(DEPTH)/third_party/cld_2/cld_2.gyp:cld_2',
+                #'<(DEPTH)/third_party/cld_2/cld_2.gyp:cld_2',
               ],
             }],
             ['OS=="mac" and component!="shared_library"', {
@@ -311,7 +314,7 @@
               ],
             }],
             # This step currently fails when using LTO. TODO(pcc): Re-enable.
-            ['OS=="mac" and use_lto==0 and component=="static_library" and asan==0', {
+            ['OS=="macdisable" and use_lto==0 and component=="static_library" and asan==0', {
               'postbuilds': [
                 {
                   # This step causes an error to be raised if the .order file
@@ -339,7 +342,7 @@
           # GN version: //chrome:chrome_child
           'target_name': 'chrome_child_dll',
           'type': 'shared_library',
-          'product_name': 'chrome_child',
+          'product_name': 'nw_child',
           'variables': {
             'enable_wexit_time_destructors': 1,
           },
diff -r -u --color up/chromium/chrome/chrome_dll_bundle.gypi nw/chromium/chrome/chrome_dll_bundle.gypi
--- up/chromium/chrome/chrome_dll_bundle.gypi	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/chrome_dll_bundle.gypi	2023-02-21 04:37:20.964140281 +0000
@@ -61,7 +61,7 @@
     'app/theme/menu_overflow_down.pdf',
     'app/theme/menu_overflow_up.pdf',
     'browser/mac/install.sh',
-    '<(SHARED_INTERMEDIATE_DIR)/repack/chrome_100_percent.pak',
+    '<(SHARED_INTERMEDIATE_DIR)/repack/nw_100_percent.pak',
     '<(SHARED_INTERMEDIATE_DIR)/repack/resources.pak',
     '<!@pymod_do_main(repack_locales -o -p <(OS) -g <(grit_out_dir) -s <(SHARED_INTERMEDIATE_DIR) -x <(SHARED_INTERMEDIATE_DIR) <(locales))',
     # Note: pseudo_locales are generated via the packed_resources
@@ -105,6 +105,16 @@
   },
   'postbuilds': [
     {
+      'postbuild_name': 'Fix Framework Link',
+      'action': [
+         'install_name_tool',
+         '-change',
+         '/usr/local/lib/libffmpeg.dylib',
+         '@loader_path/libffmpeg.dylib',
+         '${BUILT_PRODUCTS_DIR}/${EXECUTABLE_PATH}'
+      ],
+    },
+    {
       # Modify the Info.plist as needed.  The script explains why
       # this is needed.  This is also done in the chrome target.
       # The framework needs the Breakpad keys if this feature is
@@ -138,6 +148,12 @@
       ],
     },
     {
+      'destination': '<(PRODUCT_DIR)/$(CONTENTS_FOLDER_PATH)',
+      'files': [
+        '<(PRODUCT_DIR)/libffmpeg.dylib',
+      ],
+    },
+    {
       'destination': '<(PRODUCT_DIR)/$(CONTENTS_FOLDER_PATH)/Helpers',
       'files': [
         '<(PRODUCT_DIR)/crashpad_handler',
@@ -150,6 +166,7 @@
         ['disable_nacl!=1', {
           'files': [
             '<(PRODUCT_DIR)/nacl_irt_x86_64.nexe',
+            '<(PRODUCT_DIR)/pnacl',
           ],
         }],
       ],
@@ -270,24 +287,29 @@
     }],
     ['enable_hidpi==1', {
       'mac_bundle_resources': [
-        '<(SHARED_INTERMEDIATE_DIR)/repack/chrome_200_percent.pak',
+        '<(SHARED_INTERMEDIATE_DIR)/repack/nw_200_percent.pak',
       ],
     }],
     ['enable_topchrome_md==1', {
       'mac_bundle_resources': [
-      '<(SHARED_INTERMEDIATE_DIR)/repack/chrome_material_100_percent.pak',
+      '<(SHARED_INTERMEDIATE_DIR)/repack/nw_material_100_percent.pak',
       ],
     }],
     ['enable_topchrome_md==1 and enable_hidpi==1', {
       'mac_bundle_resources': [
-        '<(SHARED_INTERMEDIATE_DIR)/repack/chrome_material_200_percent.pak',
+        '<(SHARED_INTERMEDIATE_DIR)/repack/nw_material_200_percent.pak',
       ],
     }],
-    ['icu_use_data_file_flag==1', {
+    ['icu_use_data_file_flag==1 and nwjs_sdk==1', {
       'mac_bundle_resources': [
         '<(PRODUCT_DIR)/icudtl.dat',
       ],
     }],
+    ['icu_use_data_file_flag==1 and nwjs_sdk==0', {
+      'mac_bundle_resources': [
+        '<(DEPTH)/third_party/icu/android/icudtl.dat',
+      ],
+    }],
     ['v8_use_external_startup_data==1', {
       'mac_bundle_resources': [
         '<(PRODUCT_DIR)/natives_blob.bin',
diff -r -u --color up/chromium/chrome/chrome_exe.gypi nw/chromium/chrome/chrome_exe.gypi
--- up/chromium/chrome/chrome_exe.gypi	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/chrome_exe.gypi	2023-02-21 04:37:20.964140281 +0000
@@ -23,11 +23,11 @@
               'action_name': 'reorder_imports',
               'inputs': [
                 '<(reorder_py_path)',
-                '$(OutDir)\\initialexe\\chrome.exe',
+                '$(OutDir)\\initialexe\\nw.exe',
               ],
               'outputs': [
-                '<(PRODUCT_DIR)\\chrome.exe',
-                '<(PRODUCT_DIR)\\chrome.exe.pdb',
+                '<(PRODUCT_DIR)\\nw.exe',
+                '<(PRODUCT_DIR)\\nw.exe.pdb',
               ],
               'action': [
                 'python',
@@ -51,7 +51,7 @@
         '../chrome/chrome_features.gyp:chrome_common_features',
       ],
       # Name the exe chrome.exe, not chrome_initial.exe.
-      'product_name': 'chrome',
+      'product_name': 'nw',
       'mac_bundle': 1,
       'variables': {
         'use_system_xdg_utils%': 0,
@@ -182,29 +182,30 @@
                 '../build/linux/system.gyp:xext',
               ],
             }],
-            ['OS=="linux" and enable_plugins==1', {
-              'dependencies': [
-                '../pdf/pdf.gyp:pdf',
-              ],
-            }],
-          ],
-          'sources': [
-            'app/chrome_dll_resource.h',
-            'app/chrome_main.cc',
-            'app/chrome_main_delegate.cc',
-            'app/chrome_main_delegate.h',
-          ],
+            #['OS=="linux" and enable_plugins==1', {
+            #  'dependencies': [
+            #    '../pdf/pdf.gyp:pdf',
+            #  ],
+            #}],
+          ],
+          #'sources': [
+          #  'app/chrome_dll_resource.h',
+          #  'app/chrome_main.cc',
+          #  'app/chrome_main_delegate.cc',
+          #  'app/chrome_main_delegate.h',
+          #],
           'dependencies': [
-            # On Linux, link the dependencies (libraries) that make up actual
-            # Chromium functionality directly into the executable.
-            '<@(chromium_browser_dependencies)',
-            '<@(chromium_child_dependencies)',
-            '../content/content.gyp:content_app_both',
-            # Needed for chrome_main.cc initialization of libraries.
-            '../build/linux/system.gyp:pangocairo',
-            'chrome_features.gyp:chrome_common_features',
-            # Needed to use the master_preferences functions
-            'installer_util',
+            ## On Linux, link the dependencies (libraries) that make up actual
+            ## Chromium functionality directly into the executable.
+            #'<@(chromium_browser_dependencies)',
+            #'<@(chromium_child_dependencies)',
+            #'../content/content.gyp:content_app_both',
+            ## Needed for chrome_main.cc initialization of libraries.
+            #'../build/linux/system.gyp:pangocairo',
+            #'chrome_features.gyp:chrome_common_features',
+            ## Needed to use the master_preferences functions
+            #'installer_util',
+            'chrome_dll',
           ],
         }],
         ['OS=="mac"', {
@@ -242,10 +243,9 @@
                       'postbuild_name': 'Dump Symbols',
                       'variables': {
                         'dump_product_syms_path':
-                            'tools/build/mac/dump_product_syms',
+                            '<(DEPTH)/content/nw/tools/dump_mac_syms',
                       },
-                      'action': ['<(dump_product_syms_path)',
-                                 '<(branding)'],
+                      'action': ['<(dump_product_syms_path)']
                     },
                   ],
                 }],
@@ -399,18 +399,18 @@
             }],
           ],
           'dependencies': [
-            '../sandbox/sandbox.gyp:sandbox',
+            #'../sandbox/sandbox.gyp:sandbox',
           ],
         }],
         ['OS=="win"', {
           'dependencies': [
             'chrome_dll',
-            'chrome_nacl_win64',
             'chrome_process_finder',
             'chrome_version_resources',
             'installer_util',
             'file_pre_reader',
             '../base/base.gyp:base',
+            'nw_base',
             '../crypto/crypto.gyp:crypto',
             '../breakpad/breakpad.gyp:breakpad_handler',
             '../breakpad/breakpad.gyp:breakpad_sender',
@@ -419,10 +419,10 @@
             '../components/components.gyp:crash_core_common',
             '../components/components.gyp:flags_ui_switches',
             '../components/components.gyp:startup_metric_utils_common',
-            '../sandbox/sandbox.gyp:sandbox',
+            #'../sandbox/sandbox.gyp:sandbox',
             '../third_party/kasko/kasko.gyp:kasko_features',
             '../ui/gfx/gfx.gyp:gfx',
-            '../win8/delegate_execute/delegate_execute.gyp:*',
+            #'../win8/delegate_execute/delegate_execute.gyp:*',
             '../win8/win8.gyp:visual_elements_resources',
           ],
           'sources': [
@@ -437,7 +437,7 @@
           ],
           'msvs_settings': {
             'VCLinkerTool': {
-              'OutputFile': '$(OutDir)\\initialexe\\chrome.exe',
+              'OutputFile': '$(OutDir)\\initialexe\\nw.exe',
               'DelayLoadDLLs': [
                 'dbghelp.dll',
                 'dwmapi.dll',
@@ -455,8 +455,8 @@
             },
             'VCManifestTool': {
               'AdditionalManifestFiles': [
-                '$(ProjectDir)\\app\\chrome.exe.manifest',
-                '<(SHARED_INTERMEDIATE_DIR)/chrome/app/version_assembly/version_assembly.manifest',
+                '$(ProjectDir)\\app\\nw.exe.manifest',
+                #'<(SHARED_INTERMEDIATE_DIR)/chrome/app/version_assembly/version_assembly.manifest',
               ],
             },
           },
@@ -551,7 +551,7 @@
                 '../components/nacl.gyp:nacl_win64',
                 '../crypto/crypto.gyp:crypto_nacl_win64',
                 '../ipc/ipc.gyp:ipc_win64',
-                '../sandbox/sandbox.gyp:sandbox_win64',
+                #'../sandbox/sandbox.gyp:sandbox_win64',
                 '../third_party/kasko/kasko.gyp:kasko_features',
               ],
               'defines': [
diff -r -u --color up/chromium/chrome/chrome_features.gypi nw/chromium/chrome/chrome_features.gypi
--- up/chromium/chrome/chrome_features.gypi	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/chrome_features.gypi	2023-02-21 04:37:20.964140281 +0000
@@ -20,7 +20,7 @@
           'enable_google_now%': 0,
         }, {
           'enable_background%': 1,
-          'enable_google_now%': 1,
+          'enable_google_now%': 0,
         }]
       ],
 
diff -r -u --color up/chromium/chrome/chrome_ios_bundle_resources.gypi nw/chromium/chrome/chrome_ios_bundle_resources.gypi
--- up/chromium/chrome/chrome_ios_bundle_resources.gypi	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/chrome_ios_bundle_resources.gypi	2023-02-21 04:37:20.964140281 +0000
@@ -7,9 +7,9 @@
     '<(DEPTH)/chrome/chrome_resources.gyp:packed_extra_resources',
   ],
   'mac_bundle_resources': [
-    '<(SHARED_INTERMEDIATE_DIR)/repack/chrome_100_percent.pak',
-    '<(SHARED_INTERMEDIATE_DIR)/repack/chrome_200_percent.pak',
-    '<(SHARED_INTERMEDIATE_DIR)/repack/chrome_300_percent.pak',
+    '<(SHARED_INTERMEDIATE_DIR)/repack/nw_100_percent.pak',
+    '<(SHARED_INTERMEDIATE_DIR)/repack/nw_200_percent.pak',
+    '<(SHARED_INTERMEDIATE_DIR)/repack/nw_300_percent.pak',
     '<(SHARED_INTERMEDIATE_DIR)/repack/resources.pak',
     '<!@pymod_do_main(repack_locales -o -p <(OS) -g <(grit_out_dir) -s <(SHARED_INTERMEDIATE_DIR) -x <(SHARED_INTERMEDIATE_DIR) <(locales))',
   ],
diff -r -u --color up/chromium/chrome/chrome_renderer.gypi nw/chromium/chrome/chrome_renderer.gypi
--- up/chromium/chrome/chrome_renderer.gypi	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/chrome_renderer.gypi	2023-02-21 04:37:20.964140281 +0000
@@ -241,6 +241,7 @@
       'type': 'static_library',
       'variables': { 'enable_wexit_time_destructors': 1, },
       'dependencies': [
+        'nw_base',
         'common',
         'common_mojo_bindings',
         'chrome_features.gyp:chrome_common_features',
@@ -260,7 +261,7 @@
         '../components/components.gyp:password_manager_content_renderer',
         '../components/components.gyp:plugins_renderer',
         '../components/components.gyp:startup_metric_utils_common',
-        '../components/components.gyp:translate_content_renderer',
+        #'../components/components.gyp:translate_content_renderer',
         '../components/components.gyp:visitedlink_renderer',
         '../components/components.gyp:web_cache_renderer',
         '../components/components_resources.gyp:components_resources',
diff -r -u --color up/chromium/chrome/chrome_repack_chrome_100_percent.gypi nw/chromium/chrome/chrome_repack_chrome_100_percent.gypi
--- up/chromium/chrome/chrome_repack_chrome_100_percent.gypi	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/chrome_repack_chrome_100_percent.gypi	2023-02-21 04:37:20.964140281 +0000
@@ -11,7 +11,7 @@
       '<(grit_out_dir)/renderer_resources_100_percent.pak',
       '<(grit_out_dir)/theme_resources_100_percent.pak',
     ],
-    'pak_output': '<(SHARED_INTERMEDIATE_DIR)/repack/chrome_100_percent.pak',
+    'pak_output': '<(SHARED_INTERMEDIATE_DIR)/repack/nw_100_percent.pak',
     'conditions': [
       ['OS != "ios"', {
         'pak_inputs': [
diff -r -u --color up/chromium/chrome/chrome_repack_chrome_200_percent.gypi nw/chromium/chrome/chrome_repack_chrome_200_percent.gypi
--- up/chromium/chrome/chrome_repack_chrome_200_percent.gypi	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/chrome_repack_chrome_200_percent.gypi	2023-02-21 04:37:20.964140281 +0000
@@ -11,7 +11,7 @@
       '<(grit_out_dir)/renderer_resources_200_percent.pak',
       '<(grit_out_dir)/theme_resources_200_percent.pak',
     ],
-    'pak_output': '<(SHARED_INTERMEDIATE_DIR)/repack/chrome_200_percent.pak',
+    'pak_output': '<(SHARED_INTERMEDIATE_DIR)/repack/nw_200_percent.pak',
     'conditions': [
       ['OS != "ios"', {
         'pak_inputs': [
diff -r -u --color up/chromium/chrome/chrome_repack_chrome_300_percent.gypi nw/chromium/chrome/chrome_repack_chrome_300_percent.gypi
--- up/chromium/chrome/chrome_repack_chrome_300_percent.gypi	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/chrome_repack_chrome_300_percent.gypi	2023-02-21 04:37:20.964140281 +0000
@@ -14,7 +14,7 @@
       '<(grit_out_dir)/renderer_resources_300_percent.pak',
       '<(grit_out_dir)/theme_resources_300_percent.pak',
     ],
-    'pak_output': '<(SHARED_INTERMEDIATE_DIR)/repack/chrome_300_percent.pak',
+    'pak_output': '<(SHARED_INTERMEDIATE_DIR)/repack/nw_300_percent.pak',
   },
   'includes': [ '../build/repack_action.gypi' ],
 }
diff -r -u --color up/chromium/chrome/chrome_repack_chrome_material_100_percent.gypi nw/chromium/chrome/chrome_repack_chrome_material_100_percent.gypi
--- up/chromium/chrome/chrome_repack_chrome_material_100_percent.gypi	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/chrome_repack_chrome_material_100_percent.gypi	2023-02-21 04:37:20.964140281 +0000
@@ -9,7 +9,7 @@
       '<(SHARED_INTERMEDIATE_DIR)/components/components_resources_material_100_percent.pak',
       '<(grit_out_dir)/theme_resources_material_100_percent.pak',
     ],
-    'pak_output': '<(SHARED_INTERMEDIATE_DIR)/repack/chrome_material_100_percent.pak',
+    'pak_output': '<(SHARED_INTERMEDIATE_DIR)/repack/nw_material_100_percent.pak',
   },
   'includes': [ '../build/repack_action.gypi' ],
 }
diff -r -u --color up/chromium/chrome/chrome_repack_chrome_material_200_percent.gypi nw/chromium/chrome/chrome_repack_chrome_material_200_percent.gypi
--- up/chromium/chrome/chrome_repack_chrome_material_200_percent.gypi	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/chrome_repack_chrome_material_200_percent.gypi	2023-02-21 04:37:20.964140281 +0000
@@ -9,7 +9,7 @@
       '<(SHARED_INTERMEDIATE_DIR)/components/components_resources_material_200_percent.pak',
       '<(grit_out_dir)/theme_resources_material_200_percent.pak',
     ],
-    'pak_output': '<(SHARED_INTERMEDIATE_DIR)/repack/chrome_material_200_percent.pak',
+    'pak_output': '<(SHARED_INTERMEDIATE_DIR)/repack/nw_material_200_percent.pak',
   },
   'includes': [ '../build/repack_action.gypi' ],
 }
diff -r -u --color up/chromium/chrome/chrome_repack_resources.gypi nw/chromium/chrome/chrome_repack_resources.gypi
--- up/chromium/chrome/chrome_repack_resources.gypi	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/chrome_repack_resources.gypi	2023-02-21 04:37:20.964140281 +0000
@@ -39,21 +39,25 @@
       ['OS != "ios"', {
         'pak_inputs': [
           '<(SHARED_INTERMEDIATE_DIR)/blink/public/resources/blink_resources.pak',
-          '<(SHARED_INTERMEDIATE_DIR)/content/browser/tracing/tracing_resources.pak',
           '<(SHARED_INTERMEDIATE_DIR)/content/content_resources.pak',
         ],
       }],
       ['OS != "ios" and OS != "android"', {
         # New paks should be added here by default.
         'pak_inputs': [
-          '<(SHARED_INTERMEDIATE_DIR)/blink/devtools_resources.pak',
           '<(grit_out_dir)/component_extension_resources.pak',
-          '<(grit_out_dir)/options_resources.pak',
           '<(grit_out_dir)/quota_internals_resources.pak',
           '<(grit_out_dir)/settings_resources.pak',
           '<(grit_out_dir)/sync_file_system_internals_resources.pak',
         ],
       }],
+      ['nwjs_sdk==1', {
+        'pak_inputs': [
+           '<(grit_out_dir)/options_resources.pak',
+           '<(SHARED_INTERMEDIATE_DIR)/blink/devtools_resources.pak',
+           '<(SHARED_INTERMEDIATE_DIR)/content/browser/tracing/tracing_resources.pak',
+       ],
+      }],
       ['enable_extensions==1', {
         'pak_inputs': [
           '<(SHARED_INTERMEDIATE_DIR)/extensions/extensions_renderer_resources.pak',
diff -r -u --color up/chromium/chrome/chrome_resources.gyp nw/chromium/chrome/chrome_resources.gyp
--- up/chromium/chrome/chrome_resources.gyp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/chrome_resources.gyp	2023-02-21 04:37:20.964140281 +0000
@@ -187,12 +187,21 @@
         'chrome_internal_resources_gen',
         'chrome_web_ui_mojo_bindings.gyp:web_ui_mojo_bindings',
       ],
+      'variables': {
+        'conditions': [
+          ['nwjs_sdk==1', {
+            'browser_resources_grd_file': 'browser/browser_resources.grd',
+          }, {
+            'browser_resources_grd_file': 'browser/nwjs_resources.grd',
+          }],
+        ],  # conditions
+      },  # variables
       'actions': [
         {
           # GN version: //chrome/browser:resources
           'action_name': 'generate_browser_resources',
           'variables': {
-            'grit_grd_file': 'browser/browser_resources.grd',
+            'grit_grd_file': '<(browser_resources_grd_file)',
             'grit_additional_defines': [
               '-E', 'additional_modules_list_file=<(additional_modules_list_file)',
               '-E', 'root_gen_dir=<(SHARED_INTERMEDIATE_DIR)',
@@ -563,7 +572,7 @@
             {
               'destination': '<(PRODUCT_DIR)',
               'files': [
-                '<(SHARED_INTERMEDIATE_DIR)/repack/chrome_100_percent.pak'
+                '<(SHARED_INTERMEDIATE_DIR)/repack/nw_100_percent.pak'
               ],
             },
             {
@@ -598,7 +607,7 @@
                 {
                   'destination': '<(PRODUCT_DIR)',
                   'files': [
-                    '<(SHARED_INTERMEDIATE_DIR)/repack/chrome_200_percent.pak',
+                    '<(SHARED_INTERMEDIATE_DIR)/repack/nw_200_percent.pak',
                   ],
                 },
               ],
@@ -608,7 +617,7 @@
                 {
                   'destination': '<(PRODUCT_DIR)',
                   'files': [
-                    '<(SHARED_INTERMEDIATE_DIR)/repack/chrome_material_100_percent.pak',
+                    '<(SHARED_INTERMEDIATE_DIR)/repack/nw_material_100_percent.pak',
                   ],
                 },
               ],
@@ -618,7 +627,7 @@
                 {
                   'destination': '<(PRODUCT_DIR)',
                   'files': [
-                    '<(SHARED_INTERMEDIATE_DIR)/repack/chrome_material_200_percent.pak',
+                    '<(SHARED_INTERMEDIATE_DIR)/repack/nw_material_200_percent.pak',
                   ],
                 },
               ],
diff -r -u --color up/chromium/chrome/chrome_watcher/chrome_watcher.def nw/chromium/chrome/chrome_watcher/chrome_watcher.def
--- up/chromium/chrome/chrome_watcher/chrome_watcher.def	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/chrome_watcher/chrome_watcher.def	2023-02-21 04:37:20.964140281 +0000
@@ -2,7 +2,7 @@
 ; Use of this source code is governed by a BSD-style license that can be
 ; found in the LICENSE file.
 
-LIBRARY  "chrome_watcher.dll"
+LIBRARY  "nw_watcher.dll"
 
 EXPORTS
     WatcherMain
diff -r -u --color up/chromium/chrome/chrome_watcher/chrome_watcher.gypi nw/chromium/chrome/chrome_watcher/chrome_watcher.gypi
--- up/chromium/chrome/chrome_watcher/chrome_watcher.gypi	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/chrome_watcher/chrome_watcher.gypi	2023-02-21 04:37:20.964140281 +0000
@@ -49,6 +49,7 @@
     },
     {
       'target_name': 'chrome_watcher',
+      'product_name': 'nw_watcher',
       'type': 'loadable_module',
       'include_dirs': [
         '../..',
diff -r -u --color up/chromium/chrome/common/chrome_constants.cc nw/chromium/chrome/common/chrome_constants.cc
--- up/chromium/chrome/common/chrome_constants.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/common/chrome_constants.cc	2023-02-21 04:37:20.964140281 +0000
@@ -9,11 +9,11 @@
 #define FPL FILE_PATH_LITERAL
 
 #if defined(OS_MACOSX)
-#define CHROMIUM_PRODUCT_STRING "Chromium"
+#define CHROMIUM_PRODUCT_STRING "nwjs"
 #if defined(GOOGLE_CHROME_BUILD)
 #define PRODUCT_STRING "Google Chrome"
 #elif defined(CHROMIUM_BUILD)
-#define PRODUCT_STRING "Chromium"
+#define PRODUCT_STRING "nwjs"
 #else
 #error Unknown branding
 #endif
@@ -42,13 +42,13 @@
 
 #if defined(OS_WIN)
 const base::FilePath::CharType kBrowserProcessExecutableNameChromium[] =
-    FPL("chrome.exe");
+    FPL("nw.exe");
 const base::FilePath::CharType kBrowserProcessExecutableName[] =
-    FPL("chrome.exe");
+    FPL("nw.exe");
 const base::FilePath::CharType kHelperProcessExecutableNameChromium[] =
-    FPL("chrome.exe");
+    FPL("nw.exe");
 const base::FilePath::CharType kHelperProcessExecutableName[] =
-    FPL("chrome.exe");
+    FPL("nw.exe");
 #elif defined(OS_MACOSX)
 const base::FilePath::CharType kBrowserProcessExecutableNameChromium[] =
     FPL(CHROMIUM_PRODUCT_STRING);
@@ -68,8 +68,8 @@
 const base::FilePath::CharType kHelperProcessExecutableNameChromium[] = FPL("");
 #elif defined(OS_POSIX)
 const base::FilePath::CharType kBrowserProcessExecutableNameChromium[] =
-    FPL("chrome");
-const base::FilePath::CharType kBrowserProcessExecutableName[] = FPL("chrome");
+    FPL("nw");
+const base::FilePath::CharType kBrowserProcessExecutableName[] = FPL("nw");
 // Helper processes end up with a name of "exe" due to execing via
 // /proc/self/exe.  See bug 22703.
 const base::FilePath::CharType kHelperProcessExecutableNameChromium[] =
@@ -79,13 +79,13 @@
 
 #if defined(OS_WIN)
 const base::FilePath::CharType kBrowserProcessExecutablePathChromium[] =
-    FPL("chrome.exe");
+    FPL("nw.exe");
 const base::FilePath::CharType kBrowserProcessExecutablePath[] =
-    FPL("chrome.exe");
+    FPL("nw.exe");
 const base::FilePath::CharType kHelperProcessExecutablePathChromium[] =
-    FPL("chrome.exe");
+    FPL("nw.exe");
 const base::FilePath::CharType kHelperProcessExecutablePath[] =
-    FPL("chrome.exe");
+    FPL("nw.exe");
 #elif defined(OS_MACOSX)
 const base::FilePath::CharType kBrowserProcessExecutablePathChromium[] =
     FPL(CHROMIUM_PRODUCT_STRING ".app/Contents/MacOS/" CHROMIUM_PRODUCT_STRING);
@@ -100,15 +100,15 @@
 const base::FilePath::CharType kBrowserProcessExecutablePath[] = FPL("chrome");
 const base::FilePath::CharType kHelperProcessExecutablePath[] = FPL("chrome");
 const base::FilePath::CharType kBrowserProcessExecutablePathChromium[] =
-    FPL("chrome");
+    FPL("nw");
 const base::FilePath::CharType kHelperProcessExecutablePathChromium[] =
-    FPL("chrome");
+    FPL("nw");
 #elif defined(OS_POSIX)
 const base::FilePath::CharType kBrowserProcessExecutablePathChromium[] =
-    FPL("chrome");
+    FPL("nw");
 const base::FilePath::CharType kBrowserProcessExecutablePath[] = FPL("chrome");
 const base::FilePath::CharType kHelperProcessExecutablePathChromium[] =
-    FPL("chrome");
+    FPL("nw");
 const base::FilePath::CharType kHelperProcessExecutablePath[] = FPL("chrome");
 #endif  // OS_*
 
@@ -118,9 +118,9 @@
 #endif  // OS_MACOSX
 
 #if defined(OS_WIN)
-const base::FilePath::CharType kBrowserResourcesDll[] = FPL("chrome.dll");
+const base::FilePath::CharType kBrowserResourcesDll[] = FPL("nw.dll");
 const base::FilePath::CharType kStatusTrayWindowClass[] =
-    FPL("Chrome_StatusTrayWindow");
+    FPL("NWJS_StatusTrayWindow");
 #endif  // defined(OS_WIN)
 
 const char    kInitialProfile[] = "Default";
diff -r -u --color up/chromium/chrome/common/chrome_constants.h nw/chromium/chrome/common/chrome_constants.h
--- up/chromium/chrome/common/chrome_constants.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/common/chrome_constants.h	2023-02-21 04:37:20.964140281 +0000
@@ -18,7 +18,7 @@
 #if defined(GOOGLE_CHROME_BUILD)
 #define PRODUCT_STRING_PATH L"Google\\Chrome"
 #elif defined(CHROMIUM_BUILD)
-#define PRODUCT_STRING_PATH L"Chromium"
+#define PRODUCT_STRING_PATH L"NWJS"
 #else
 #error Unknown branding
 #endif
diff -r -u --color up/chromium/chrome/common/chrome_content_client.cc nw/chromium/chrome/common/chrome_content_client.cc
--- up/chromium/chrome/common/chrome_content_client.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/common/chrome_content_client.cc	2023-02-21 04:37:20.964140281 +0000
@@ -295,7 +295,7 @@
 #endif  // defined(OS_LINUX)
 
 bool GetBundledPepperFlash(content::PepperPluginInfo* plugin) {
-#if defined(FLAPPER_AVAILABLE)
+#if 1
   base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
 
   // Ignore bundled Pepper Flash if there is Pepper Flash specified from the
@@ -309,10 +309,31 @@
     return false;
 
   base::FilePath flash_path;
-  if (!PathService::Get(chrome::FILE_PEPPER_FLASH_PLUGIN, &flash_path))
+  if (!PathService::Get(chrome::DIR_PEPPER_FLASH_PLUGIN, &flash_path))
+    return false;
+  base::FilePath flash_filename;
+  if (!PathService::Get(chrome::FILE_PEPPER_FLASH_PLUGIN, &flash_filename))
+    return false;
+  base::FilePath manifest_path(
+      flash_path.AppendASCII("manifest.json"));
+
+  std::string manifest_data;
+  if (!base::ReadFileToString(manifest_path, &manifest_data))
+    return false;
+  scoped_ptr<base::Value> manifest_value(
+      base::JSONReader::Read(manifest_data, base::JSON_ALLOW_TRAILING_COMMAS));
+  if (!manifest_value.get())
+    return false;
+  base::DictionaryValue* manifest = NULL;
+  if (!manifest_value->GetAsDictionary(&manifest))
+    return false;
+
+  Version version;
+  if (!chrome::CheckPepperFlashManifest(*manifest, &version))
     return false;
 
-  *plugin = CreatePepperFlashInfo(flash_path, FLAPPER_VERSION_STRING, false);
+  *plugin = CreatePepperFlashInfo(flash_filename, version.GetString(),
+                                  false);
   return true;
 #else
   return false;
diff -r -u --color up/chromium/chrome/common/chrome_paths.cc nw/chromium/chrome/common/chrome_paths.cc
--- up/chromium/chrome/common/chrome_paths.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/common/chrome_paths.cc	2023-02-21 04:37:20.964140281 +0000
@@ -340,7 +340,7 @@
     // was shipped along with chrome.  The value can be overridden
     // if it is installed via component updater.
     case chrome::DIR_PNACL_COMPONENT:
-#if defined(OS_MACOSX)
+#if 0
       // PNaCl really belongs in the InternalPluginsDirectory but actually
       // copying it there would result in the files also being shipped, which
       // we don't want yet. So for now, just find them in the directory where
diff -r -u --color up/chromium/chrome/common/chrome_paths_linux.cc nw/chromium/chrome/common/chrome_paths_linux.cc
--- up/chromium/chrome/common/chrome_paths_linux.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/common/chrome_paths_linux.cc	2023-02-21 04:37:20.968140320 +0000
@@ -13,6 +13,8 @@
 #include "build/build_config.h"
 #include "chrome/common/chrome_paths.h"
 
+#include "content/nw/src/nw_base.h"
+
 namespace chrome {
 
 using base::nix::GetXDGDirectory;
@@ -68,7 +70,7 @@
 #if defined(GOOGLE_CHROME_BUILD)
   *result = config_dir.Append("google-chrome");
 #else
-  *result = config_dir.Append("chromium");
+  *result = config_dir.Append(nw::package()->GetName());
 #endif
   return true;
 }
diff -r -u --color up/chromium/chrome/common/chrome_paths_mac.mm nw/chromium/chrome/common/chrome_paths_mac.mm
--- up/chromium/chrome/common/chrome_paths_mac.mm	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/common/chrome_paths_mac.mm	2023-02-21 04:37:20.968140320 +0000
@@ -18,6 +18,8 @@
 #include "build/build_config.h"
 #include "chrome/common/chrome_constants.h"
 
+#include "content/nw/src/nw_base.h"
+
 namespace {
 
 #if !defined(OS_IOS)
@@ -65,7 +67,7 @@
 #if defined(GOOGLE_CHROME_BUILD)
     product_dir_name = "Google/Chrome";
 #else
-    product_dir_name = "Chromium";
+    product_dir_name = "nwjs";
 #endif
   }
 
@@ -74,6 +76,7 @@
   return strdup(product_dir_name);
 }
 
+#if 0
 // ProductDirName returns the name of the directory inside
 // ~/Library/Application Support that should hold the product application
 // data. This can be overridden by setting the CrProductDirName key in the
@@ -99,6 +102,7 @@
 #endif
   return std::string(product_dir_name);
 }
+#endif
 
 bool GetDefaultUserDataDirectoryForProduct(const std::string& product_dir,
                                            base::FilePath* result) {
@@ -115,7 +119,7 @@
 namespace chrome {
 
 bool GetDefaultUserDataDirectory(base::FilePath* result) {
-  return GetDefaultUserDataDirectoryForProduct(ProductDirName(), result);
+  return GetDefaultUserDataDirectoryForProduct(nw::package()->GetName(), result);
 }
 
 bool GetUserDocumentsDirectory(base::FilePath* result) {
diff -r -u --color up/chromium/chrome/common/chrome_paths_win.cc nw/chromium/chrome/common/chrome_paths_win.cc
--- up/chromium/chrome/common/chrome_paths_win.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/common/chrome_paths_win.cc	2023-02-21 04:37:20.968140320 +0000
@@ -19,6 +19,8 @@
 #include "chrome/installer/util/browser_distribution.h"
 #include "components/nacl/common/nacl_switches.h"
 
+#include "content/nw/src/nw_base.h"
+
 namespace chrome {
 
 namespace {
@@ -45,8 +47,9 @@
 bool GetDefaultUserDataDirectory(base::FilePath* result) {
   if (!PathService::Get(base::DIR_LOCAL_APP_DATA, result))
     return false;
-  BrowserDistribution* dist = BrowserDistribution::GetDistribution();
-  *result = result->Append(dist->GetInstallSubDir());
+  //BrowserDistribution* dist = BrowserDistribution::GetDistribution();
+  if (nw::package()) //FIXME: crashpad initialized early in cr49
+    *result = result->Append(base::FilePath::FromUTF8Unsafe(nw::package()->GetName()));
   *result = result->Append(chrome::kUserDataDirname);
   return true;
 }
@@ -125,11 +128,7 @@
   // Windows. See https://crbug.com/564398.
   if (!GetDefaultUserDataDirectory(crash_dir))
     return false;
-  // We have to make sure the user data dir exists on first run. See
-  // http://crbug.com/591504.
-  if (!PathExists(*crash_dir) && !CreateDirectory(*crash_dir))
-    return false;
-  *crash_dir = crash_dir->Append(FILE_PATH_LITERAL("Crashpad"));
+  *crash_dir = crash_dir->DirName().Append(FILE_PATH_LITERAL("Crashpad"));
   return true;
 }
 
diff -r -u --color up/chromium/chrome/common/extensions/api/_api_features.json nw/chromium/chrome/common/extensions/api/_api_features.json
--- up/chromium/chrome/common/extensions/api/_api_features.json	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/common/extensions/api/_api_features.json	2023-02-21 04:37:20.968140320 +0000
@@ -776,6 +776,7 @@
   }, {
     "channel": "trunk",
     "contexts": ["webui"],
+    "dependencies": ["permission:usersPrivate"],
     "matches": [
       "chrome://md-settings/*",
       "chrome://settings/*",
diff -r -u --color up/chromium/chrome/common/extensions/api/_permission_features.json nw/chromium/chrome/common/extensions/api/_permission_features.json
--- up/chromium/chrome/common/extensions/api/_permission_features.json	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/common/extensions/api/_permission_features.json	2023-02-21 04:37:20.968140320 +0000
@@ -270,16 +270,7 @@
   ],
   "developerPrivate": {
     "channel": "stable",
-    "extension_types": ["platform_app"],
-    "whitelist": [
-        "AE27D69DBE571F4B1694F05C89B710C646792231", // Published ADT.
-        "FA0501B579070BB9CBD4FCAEC8CB0EDF22BA2F04", // Apps Editor published.
-        "4A4EA121622FCA3D78ED2AB534197F43D7189EE0", // Spark nightly build.
-        "9FDE6E7F06FCFA11D9A05041C7FF6D8AE662F5D1", // Spark release.
-        "50B4A905D522C06E27CA6D099E3E54BDA1F152C5", // Spark Beta channel.
-        "BA0C8BB92084C9741312D90D3EA882526853455F", // Spark dev channel.
-        "5F57A9AE8DFF5D6BB09DF8606270402612E871E5"  // http://crbug.com/422624
-    ]
+    "extension_types": ["platform_app"]
   },
   "devtools": {
     "channel": "stable",
@@ -549,7 +540,7 @@
   "launcherSearchProvider": {
     "channel": "stable",
     "extension_types": ["extension", "platform_app"],
-    "platform": ["chromeos"],
+    "platforms": ["chromeos"],
     "whitelist": [
       "A948368FC53BE437A55FEB414106E207925482F5"  // File Manager
     ]
@@ -572,6 +563,7 @@
   "logPrivate": {
     "channel": "stable",
     "extension_types": ["extension", "platform_app"],
+    "platforms": ["chromeos"],
     "whitelist": [
       "ddammdhioacbehjngdmkjcjbnfginlla",          // Test
       "1C93BD3CF875F4A73C0B2A163BB8FBDA8B8B3D80",  // http://crbug.com/293683
@@ -587,6 +579,7 @@
   },
   "webcamPrivate": {
     "channel": "stable",
+    "platforms": ["chromeos"],
     "extension_types": ["extension", "platform_app"]
   },
   "management": [
@@ -596,25 +589,7 @@
     },
     {
       "channel": "stable",
-      "extension_types": ["platform_app"],
-      "whitelist": [
-        "AE27D69DBE571F4B1694F05C89B710C646792231", // Published ADT
-        // TODO(grv): clean up once Apps developer tool is published.
-        "5107DE9024C329EEA9C9A72D94C16723790C6422",  // Apps Developer Tool.
-        "8C0B1873FFFB65E4D0F4D772879F7304CEF125C2",  // Apps Editor old.
-        "FA0501B579070BB9CBD4FCAEC8CB0EDF22BA2F04",  // Apps Editor published.
-        "EE17C698905F7F2E6DDC87C9C30F11E164C829F4",  // Watchdog (Activity Log)
-        "90113DA9516526D24DAF156C629CC41C049E8882",  // Watchdog Test Version
-        "4A4EA121622FCA3D78ED2AB534197F43D7189EE0",  // Spark nightly build.
-        "9FDE6E7F06FCFA11D9A05041C7FF6D8AE662F5D1",  // Spark release.
-        "50B4A905D522C06E27CA6D099E3E54BDA1F152C5",  // Spark Beta channel.
-        "BA0C8BB92084C9741312D90D3EA882526853455F",  // Spark dev channel.
-        "11B478CEC461C766A2DC1E5BEEB7970AE06DC9C2",  // http://crbug.com/408276
-        "0EFB879311E9EFBB7C45251F89EC655711B1F6ED",  // http://crbug.com/408276
-        "9193D3A51E2FE33B496CDA53EA330423166E7F02",  // http://crbug.com/408276
-        "F9119B8B18C7C82B51E7BC6FF816B694F2EC3E89",  // http://crbug.com/408276
-        "5F57A9AE8DFF5D6BB09DF8606270402612E871E5"   // http://crbug.com/422624
-      ]
+      "extension_types": ["platform_app"]
     },
     {
       "channel": "stable",
@@ -899,6 +874,7 @@
   "rtcPrivate": {
     "channel": "stable",
     "extension_types": ["extension", "legacy_packaged_app"],
+    "platforms": ["chromeos"],
     "whitelist": [
       "53041A2FA309EECED01FFC751E7399186E860B2C",  // Google Talk prod
       "A74A4D44C7CFCD8844830E6140C8D763E12DD8F3",  // Google Talk beta
@@ -1000,6 +976,7 @@
   "usersPrivate": {
     "channel": "trunk",
     "extension_types": ["extension", "platform_app"],
+    "platforms": ["chromeos"],
     "location": "component"
   },
   "wallpaper": {
diff -r -u --color up/chromium/chrome/common/extensions/api/webview_tag.json nw/chromium/chrome/common/extensions/api/webview_tag.json
--- up/chromium/chrome/common/extensions/api/webview_tag.json	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/common/extensions/api/webview_tag.json	2023-02-21 04:37:20.980140437 +0000
@@ -857,6 +857,13 @@
         "parameters": []
       },
       {
+        "name": "getGuestId",
+        "type": "function",
+        "returns": { "type": "integer" },
+        "description": "",
+        "parameters": []
+      },
+      {
         "name": "getUserAgent",
         "type": "function",
         "returns": { "type": "string" },
@@ -1071,6 +1078,24 @@
           }
         ]
       },
+      {
+	"name": "showDevTools",
+	"type": "function",
+	"description": "Open or close devtools for this webview.",
+	"parameters": [
+          {
+            "type": "boolean",
+            "name": "show",
+            "description" : "show or close."
+          },
+          {
+            "type": "object",
+            "name": "container",
+            "description" : "where to show the devtools, should be a webview",
+            "optional": true
+          }
+        ]
+      },
       {
         "name": "terminate",
         "type": "function",
diff -r -u --color up/chromium/chrome/common/extensions/chrome_extensions_client.cc nw/chromium/chrome/common/extensions/chrome_extensions_client.cc
--- up/chromium/chrome/common/extensions/chrome_extensions_client.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/common/extensions/chrome_extensions_client.cc	2023-02-21 04:37:20.980140437 +0000
@@ -50,6 +50,8 @@
 #include "ui/base/l10n/l10n_util.h"
 #include "url/gurl.h"
 
+#include "content/nw/src/api/generated_schemas.h"
+
 namespace extensions {
 
 namespace {
@@ -173,6 +175,7 @@
   if (name == "api") {
     source->LoadJSON(IDR_EXTENSION_API_FEATURES);
     source->LoadJSON(IDR_CHROME_EXTENSION_API_FEATURES);
+    source->LoadJSON(IDR_NW_EXTENSION_API_FEATURES);
   } else if (name == "manifest") {
     source->LoadJSON(IDR_EXTENSION_MANIFEST_FEATURES);
     source->LoadJSON(IDR_CHROME_EXTENSION_MANIFEST_FEATURES);
@@ -263,6 +266,7 @@
     const std::string& name) const {
   // Test from most common to least common.
   return api::ChromeGeneratedSchemas::IsGenerated(name) ||
+         nwapi::nwjsGeneratedSchemas::IsGenerated(name) ||
          api::GeneratedSchemas::IsGenerated(name);
 }
 
@@ -271,6 +275,8 @@
   // Test from most common to least common.
   if (api::ChromeGeneratedSchemas::IsGenerated(name))
     return api::ChromeGeneratedSchemas::Get(name);
+  if (nwapi::nwjsGeneratedSchemas::IsGenerated(name))
+    return nwapi::nwjsGeneratedSchemas::Get(name);
 
   return api::GeneratedSchemas::Get(name);
 }
diff -r -u --color up/chromium/chrome/common/extensions/extension_process_policy.cc nw/chromium/chrome/common/extensions/extension_process_policy.cc
--- up/chromium/chrome/common/extensions/extension_process_policy.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/common/extensions/extension_process_policy.cc	2023-02-21 04:37:21.140141995 +0000
@@ -38,6 +38,9 @@
       extensions,
       new_url);
 
+  if (old_url_extension && old_url_extension->is_nwjs_app())
+    return false;
+
   // TODO(creis): Temporary workaround for crbug.com/59285: Do not swap process
   // to navigate from a hosted app to a normal page or another hosted app
   // (unless either is the web store).  This is because some OAuth providers
diff -r -u --color up/chromium/chrome/common/extensions/manifest_handlers/content_scripts_handler.cc nw/chromium/chrome/common/extensions/manifest_handlers/content_scripts_handler.cc
--- up/chromium/chrome/common/extensions/manifest_handlers/content_scripts_handler.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/common/extensions/manifest_handlers/content_scripts_handler.cc	2023-02-21 04:37:21.140141995 +0000
@@ -125,6 +125,18 @@
     result->set_match_about_blank(match_about_blank);
   }
 
+  // in main world
+  if (content_script->HasKey(keys::kInMainWorld)) {
+    bool in_main_world = false;
+    if (!content_script->GetBoolean(keys::kInMainWorld,
+                                    &in_main_world)) {
+      *error = ErrorUtils::FormatErrorMessageUTF16(
+          errors::kInvalidInMainWorld, base::IntToString(definition_index));
+      return false;
+    }
+    result->set_in_main_world(in_main_world);
+  }
+
   // matches (required)
   const base::ListValue* matches = NULL;
   if (!content_script->GetList(keys::kMatches, &matches)) {
diff -r -u --color up/chromium/chrome/common/extensions/sync_helper.cc nw/chromium/chrome/common/extensions/sync_helper.cc
--- up/chromium/chrome/common/extensions/sync_helper.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/common/extensions/sync_helper.cc	2023-02-21 04:37:21.144142034 +0000
@@ -59,6 +59,7 @@
     case Manifest::TYPE_HOSTED_APP:
     case Manifest::TYPE_LEGACY_PACKAGED_APP:
     case Manifest::TYPE_PLATFORM_APP:
+    case Manifest::TYPE_NWJS_APP:
     case Manifest::TYPE_THEME:
       return true;
 
diff -r -u --color up/chromium/chrome/common/logging_chrome.cc nw/chromium/chrome/common/logging_chrome.cc
--- up/chromium/chrome/common/logging_chrome.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/common/logging_chrome.cc	2023-02-21 04:37:21.144142034 +0000
@@ -20,6 +20,7 @@
 #define IPC_LOG_TABLE_ADD_ENTRY(msg_id, logger) \
     content::RegisterIPCLogger(msg_id, logger)
 #include "chrome/common/all_messages.h"
+#include "extensions/common/extension_messages.h"
 #endif
 
 #if defined(OS_WIN)
diff -r -u --color up/chromium/chrome/common/mac/app_mode_chrome_locator.mm nw/chromium/chrome/common/mac/app_mode_chrome_locator.mm
--- up/chromium/chrome/common/mac/app_mode_chrome_locator.mm	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/common/mac/app_mode_chrome_locator.mm	2023-02-21 04:37:21.144142034 +0000
@@ -79,6 +79,7 @@
   // However, we want the shims to be agnostic to distribution and operate based
   // on the data in their plist, so encode the framework names here.
   NSDictionary* framework_for_exe = @{
+    @"nwjs": @"nwjs",
     @"Chromium": @"Chromium",
     @"Google Chrome": @"Google Chrome",
     @"Google Chrome Canary": @"Google Chrome",
diff -r -u --color up/chromium/chrome/common/pepper_flash.cc nw/chromium/chrome/common/pepper_flash.cc
--- up/chromium/chrome/common/pepper_flash.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/common/pepper_flash.cc	2023-02-21 04:37:21.148142073 +0000
@@ -33,6 +33,7 @@
     "linux";
 #endif
 
+#if 0
 // Name of the Pepper Flash architecture in the component manifest.
 const char kPepperFlashArch[] =
 #if defined(ARCH_CPU_X86)
@@ -42,6 +43,7 @@
 #else  // TODO(viettrungluu): Support an ARM check?
     "???";
 #endif
+#endif
 
 // Returns true if the Pepper |interface_name| is implemented  by this browser.
 // It does not check if the interface is proxied.
@@ -119,10 +121,12 @@
   if (os != kPepperFlashOperatingSystem)
     return false;
 
+#if 0
   std::string arch;
   manifest.GetStringASCII("x-ppapi-arch", &arch);
   if (arch != kPepperFlashArch)
     return false;
+#endif
 
   *version_out = version;
   return true;
diff -r -u --color up/chromium/chrome/installer/linux/common/installer.include nw/chromium/chrome/installer/linux/common/installer.include
--- up/chromium/chrome/installer/linux/common/installer.include	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/installer/linux/common/installer.include	2023-02-21 04:37:21.156142150 +0000
@@ -126,11 +126,11 @@
   # we should flag all installer files in FILES.cfg and get them from there, so
   # there's only one place people need to keep track of such things (and in
   # only the public repository).
-  if [ -r "${BUILDDIR}/chrome_100_percent.pak" ]; then
-    install -m 644 "${BUILDDIR}/chrome_100_percent.pak" "${STAGEDIR}/${INSTALLDIR}/"
-    install -m 644 "${BUILDDIR}/chrome_200_percent.pak" "${STAGEDIR}/${INSTALLDIR}/"
-    install -m 644 "${BUILDDIR}/chrome_material_100_percent.pak" "${STAGEDIR}/${INSTALLDIR}/"
-    install -m 644 "${BUILDDIR}/chrome_material_200_percent.pak" "${STAGEDIR}/${INSTALLDIR}/"
+  if [ -r "${BUILDDIR}/nw_100_percent.pak" ]; then
+    install -m 644 "${BUILDDIR}/nw_100_percent.pak" "${STAGEDIR}/${INSTALLDIR}/"
+    install -m 644 "${BUILDDIR}/nw_200_percent.pak" "${STAGEDIR}/${INSTALLDIR}/"
+    install -m 644 "${BUILDDIR}/nw_material_100_percent.pak" "${STAGEDIR}/${INSTALLDIR}/"
+    install -m 644 "${BUILDDIR}/nw_material_200_percent.pak" "${STAGEDIR}/${INSTALLDIR}/"
   else
     install -m 644 "${BUILDDIR}/theme_resources_100_percent.pak" "${STAGEDIR}/${INSTALLDIR}/"
     install -m 644 "${BUILDDIR}/ui_resources_100_percent.pak" "${STAGEDIR}/${INSTALLDIR}/"
diff -r -u --color up/chromium/chrome/installer/mini_installer/chrome.release nw/chromium/chrome/installer/mini_installer/chrome.release
--- up/chromium/chrome/installer/mini_installer/chrome.release	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/installer/mini_installer/chrome.release	2023-02-21 04:37:21.160142189 +0000
@@ -6,7 +6,7 @@
 #
 # Chrome Application dir entries, sorted alphabetically.
 #
-chrome.exe: %(ChromeDir)s\
+nw.exe: %(ChromeDir)s\
 wow_helper.exe: %(ChromeDir)s\
 #
 # Chrome version dir assembly manifest.
@@ -14,62 +14,64 @@
 # hard-code it.
 # // TODO(caitkp): Find a way to do this without wildcards.
 #
-*.*.*.*.manifest: %(VersionDir)s\
+*.*.*.*.manifest: %(ChromeDir)s\
 #
 # Chrome version dir entries, sorted alphabetically.
 #
-chrome.dll: %(VersionDir)s\
-chrome_100_percent.pak: %(VersionDir)s\
-chrome_material_100_percent.pak: %(VersionDir)s\
-chrome_child.dll: %(VersionDir)s\
-chrome_elf.dll: %(VersionDir)s\
-chrome_watcher.dll: %(VersionDir)s\
-d3dcompiler_47.dll: %(VersionDir)s\
+nw.dll: %(ChromeDir)s\
+nw_100_percent.pak: %(ChromeDir)s\
+nw_child.dll: %(ChromeDir)s\
+nw_elf.dll: %(ChromeDir)s\
+nw_material_100_percent.pak: %(ChromeDir)s\
+nw_watcher.dll: %(ChromeDir)s\
+d3dcompiler_47.dll: %(ChromeDir)s\
 ffmpeg.dll: %(VersionDir)s\
-kasko.dll: %(VersionDir)s\
-icudt.dll: %(VersionDir)s\
-icudtl.dat: %(VersionDir)s\
-libEGL.dll: %(VersionDir)s\
-libexif.dll: %(VersionDir)s\
-libGLESv2.dll: %(VersionDir)s\
-nacl64.exe: %(VersionDir)s\
-nacl_irt_x86_32.nexe: %(VersionDir)s\
-nacl_irt_x86_64.nexe: %(VersionDir)s\
-natives_blob.bin: %(VersionDir)s\
-resources.pak: %(VersionDir)s\
-snapshot_blob.bin: %(VersionDir)s\
-syzyasan_rtl.dll: %(VersionDir)s\
-xinput1_3.dll: %(VersionDir)s\
+kasko.dll: %(ChromeDir)s\
+icudt.dll: %(ChromeDir)s\
+icudtl.dat: %(ChromeDir)s\
+libEGL.dll: %(ChromeDir)s\
+libexif.dll: %(ChromeDir)s\
+libGLESv2.dll: %(ChromeDir)s\
+nacl64.exe: %(ChromeDir)s\
+nacl_irt_x86_32.nexe: %(ChromeDir)s\
+nacl_irt_x86_64.nexe: %(ChromeDir)s\
+natives_blob.bin: %(ChromeDir)s\
+resources.pak: %(ChromeDir)s\
+snapshot_blob.bin: %(ChromeDir)s\
+syzyasan_rtl.dll: %(ChromeDir)s\
+xinput1_3.dll: %(ChromeDir)s\
+node.dll: %(ChromeDir)s\
 #
 # Sub directories living in the version dir
 #
-default_apps\*.crx: %(VersionDir)s\default_apps\
-default_apps\external_extensions.json: %(VersionDir)s\default_apps\
-Extensions\*.*: %(VersionDir)s\Extensions\
-locales\*.dll: %(VersionDir)s\Locales
-locales\*.pak: %(VersionDir)s\Locales
+default_apps\*.crx: %(ChromeDir)s\default_apps\
+default_apps\external_extensions.json: %(ChromeDir)s\default_apps\
+Extensions\*.*: %(ChromeDir)s\Extensions\
+locales\*.dll: %(ChromeDir)s\Locales
+locales\*.pak: %(ChromeDir)s\Locales
 
 [HIDPI]
-chrome_200_percent.pak: %(VersionDir)s\
-chrome_material_200_percent.pak: %(VersionDir)s\
+nw_200_percent.pak: %(ChromeDir)s\
+nw_material_200_percent.pak: %(ChromeDir)s\
 
 [TOUCH]
 
 [GOOGLE_CHROME]
-delegate_execute.exe: %(VersionDir)s\
-SecondaryTile.png: %(VersionDir)s\
-widevinecdmadapter.dll: %(VersionDir)s\
+delegate_execute.exe: %(ChromeDir)s\
+SecondaryTile.png: %(ChromeDir)s\
+widevinecdmadapter.dll: %(ChromeDir)s\
 #
 # Pepper Flash sub-dir.
 #
-PepperFlash\manifest.json: %(VersionDir)s\PepperFlash\
-PepperFlash\pepflashplayer.dll: %(VersionDir)s\PepperFlash\
+PepperFlash\manifest.json: %(ChromeDir)s\PepperFlash\
+PepperFlash\pepflashplayer.dll: %(ChromeDir)s\PepperFlash\
 #
 # Win8 sub-dir.
 #
 # All or none of the following 3 files need to be present as the creation of
 # VisualElementsManifest.xml is based on the existence of
-# %(VersionDir)\VisualElements. On a similar note, no other files should be
+# %(ChromeDir)\VisualElements. On a similar note, no other files should be
 # packaged in this directory.
 Logo.png: %(VersionDir)s\VisualElements\
 SmallLogo.png: %(VersionDir)s\VisualElements\
+
diff -r -u --color up/chromium/chrome/installer/mini_installer.gyp nw/chromium/chrome/installer/mini_installer.gyp
--- up/chromium/chrome/installer/mini_installer.gyp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/installer/mini_installer.gyp	2023-02-21 04:37:21.160142189 +0000
@@ -19,7 +19,7 @@
               '../chrome.gyp:chrome_dll',
             ],
             'chrome_dll_path': [
-              '<(PRODUCT_DIR)/chrome.dll',
+              '<(PRODUCT_DIR)/nw.dll',
             ],
             'output_dir': '<(PRODUCT_DIR)',
           },
diff -r -u --color up/chromium/chrome/installer/mini_installer.gypi nw/chromium/chrome/installer/mini_installer.gypi
--- up/chromium/chrome/installer/mini_installer.gypi	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/installer/mini_installer.gypi	2023-02-21 04:37:21.160142189 +0000
@@ -204,7 +204,7 @@
       ],
       'inputs': [
         '<(create_installer_archive_py_path)',
-        '<(PRODUCT_DIR)/chrome.exe',
+        '<(PRODUCT_DIR)/nw.exe',
         '<@(chrome_dll_path)',
         '<(PRODUCT_DIR)/nacl64.exe',
         '<(PRODUCT_DIR)/nacl_irt_x86_32.nexe',
diff -r -u --color up/chromium/chrome/installer/util/browser_distribution.cc nw/chromium/chrome/installer/util/browser_distribution.cc
--- up/chromium/chrome/installer/util/browser_distribution.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/installer/util/browser_distribution.cc	2023-02-21 04:37:21.168142267 +0000
@@ -151,7 +151,7 @@
 }
 
 base::string16 BrowserDistribution::GetBaseAppName() {
-  return L"Chromium";
+  return L"nwjs";
 }
 
 base::string16 BrowserDistribution::GetDisplayName() {
@@ -192,7 +192,7 @@
 }
 
 base::string16 BrowserDistribution::GetBaseAppId() {
-  return L"Chromium";
+  return L"nwjs";
 }
 
 base::string16 BrowserDistribution::GetBrowserProgIdPrefix() {
@@ -208,11 +208,11 @@
 
 
 base::string16 BrowserDistribution::GetInstallSubDir() {
-  return L"Chromium";
+  return L"nwjs";
 }
 
 base::string16 BrowserDistribution::GetPublisherName() {
-  return L"Chromium";
+  return L"nwjs";
 }
 
 base::string16 BrowserDistribution::GetAppDescription() {
@@ -226,7 +226,7 @@
 }
 
 std::string BrowserDistribution::GetSafeBrowsingName() {
-  return "chromium";
+  return "nwjs";
 }
 
 base::string16 BrowserDistribution::GetDistributionData(HKEY root_key) {
diff -r -u --color up/chromium/chrome/installer/util/google_update_settings.cc nw/chromium/chrome/installer/util/google_update_settings.cc
--- up/chromium/chrome/installer/util/google_update_settings.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/installer/util/google_update_settings.cc	2023-02-21 04:37:21.172142306 +0000
@@ -231,7 +231,7 @@
 }
 
 bool GoogleUpdateSettings::GetCollectStatsConsent() {
-  return GetCollectStatsConsentAtLevel(IsSystemInstall());
+  return false; //GetCollectStatsConsentAtLevel(IsSystemInstall());
 }
 
 // Older versions of Chrome unconditionally read from HKCU\...\ClientState\...
diff -r -u --color up/chromium/chrome/installer/util/util_constants.cc nw/chromium/chrome/installer/util/util_constants.cc
--- up/chromium/chrome/installer/util/util_constants.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/installer/util/util_constants.cc	2023-02-21 04:37:21.180142384 +0000
@@ -206,9 +206,9 @@
 // Active Setup.
 const wchar_t kActiveSetupExe[] = L"chrmstp.exe";
 const wchar_t kAppLauncherGuid[] = L"{FDA71E6F-AC4C-4a00-8B70-9958A68906BF}";
-const wchar_t kChromeDll[] = L"chrome.dll";
-const wchar_t kChromeChildDll[] = L"chrome_child.dll";
-const wchar_t kChromeExe[] = L"chrome.exe";
+const wchar_t kChromeDll[] = L"nw.dll";
+const wchar_t kChromeChildDll[] = L"nw_child.dll";
+const wchar_t kChromeExe[] = L"nw.exe";
 const wchar_t kChromeFrameDll[] = L"npchrome_frame.dll";
 const wchar_t kChromeFrameHelperDll[] = L"chrome_frame_helper.dll";
 const wchar_t kChromeFrameHelperExe[] = L"chrome_frame_helper.exe";
diff -r -u --color up/chromium/chrome/renderer/chrome_content_renderer_client.cc nw/chromium/chrome/renderer/chrome_content_renderer_client.cc
--- up/chromium/chrome/renderer/chrome_content_renderer_client.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/renderer/chrome_content_renderer_client.cc	2023-02-21 04:37:21.180142384 +0000
@@ -153,6 +153,9 @@
 #include "chrome/renderer/media/webrtc_logging_message_filter.h"
 #endif
 
+#include "content/nw/src/nw_content.h"
+#include "content/nw/src/common/shell_switches.h"
+
 using autofill::AutofillAgent;
 using autofill::PasswordAutofillAgent;
 using autofill::PasswordGenerationAgent;
@@ -321,6 +324,15 @@
 ChromeContentRendererClient::~ChromeContentRendererClient() {
 }
 
+void ChromeContentRendererClient::willHandleNavigationPolicy(content::RenderView* rv,
+                                                             blink::WebFrame* frame,
+                                                             const blink::WebURLRequest& request,
+                                                             blink::WebNavigationPolicy* policy,
+                                                             blink::WebString* manifest,
+                                                             bool new_win) {
+  nw::willHandleNavigationPolicy(rv, frame, request, policy, manifest, new_win);
+}
+
 void ChromeContentRendererClient::RenderThreadStarted() {
   RenderThread* thread = RenderThread::Get();
 
@@ -336,10 +348,11 @@
 
   prescient_networking_dispatcher_.reset(
       new network_hints::PrescientNetworkingDispatcher());
+  base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
 #if defined(ENABLE_SPELLCHECK)
   // ChromeRenderViewTest::SetUp() creates a Spellcheck and injects it using
   // SetSpellcheck(). Don't overwrite it.
-  if (!spellcheck_) {
+  if (!spellcheck_ && command_line->HasSwitch(switches::kEnableSpellChecking)) {
     spellcheck_.reset(new SpellCheck());
     thread->AddObserver(spellcheck_.get());
   }
@@ -370,7 +383,6 @@
   thread->RegisterExtension(extensions_v8::ExternalExtension::Get());
   thread->RegisterExtension(extensions_v8::LoadTimesExtension::Get());
 
-  base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
   if (command_line->HasSwitch(switches::kEnableBenchmarking))
     thread->RegisterExtension(extensions_v8::BenchmarkingExtension::Get());
   if (command_line->HasSwitch(switches::kEnableNetBenchmarking))
@@ -525,12 +537,13 @@
       scoped_ptr<printing::PrintWebViewHelper::Delegate>(
           new ChromePrintWebViewHelperDelegate()));
 #endif
+  base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
 #if defined(ENABLE_SPELLCHECK)
-  new SpellCheckProvider(render_view, spellcheck_.get());
+  if (command_line->HasSwitch(switches::kEnableSpellChecking))
+    new SpellCheckProvider(render_view, spellcheck_.get());
 #endif
   new prerender::PrerendererClient(render_view);
 
-  base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
   if (command_line->HasSwitch(switches::kInstantProcess))
     new SearchBox(render_view);
 
diff -r -u --color up/chromium/chrome/renderer/chrome_content_renderer_client.h nw/chromium/chrome/renderer/chrome_content_renderer_client.h
--- up/chromium/chrome/renderer/chrome_content_renderer_client.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/renderer/chrome_content_renderer_client.h	2023-02-21 04:37:21.180142384 +0000
@@ -76,6 +76,12 @@
   ChromeContentRendererClient();
   ~ChromeContentRendererClient() override;
 
+  void willHandleNavigationPolicy(content::RenderView* rv,
+                                  blink::WebFrame* frame,
+                                  const blink::WebURLRequest& request,
+                                  blink::WebNavigationPolicy* policy,
+                                  blink::WebString* manifest,
+                                  bool new_win) override;
   void RenderThreadStarted() override;
   void RenderFrameCreated(content::RenderFrame* render_frame) override;
   void RenderViewCreated(content::RenderView* render_view) override;
diff -r -u --color up/chromium/chrome/renderer/chrome_render_frame_observer.cc nw/chromium/chrome/renderer/chrome_render_frame_observer.cc
--- up/chromium/chrome/renderer/chrome_render_frame_observer.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/renderer/chrome_render_frame_observer.cc	2023-02-21 04:37:21.180142384 +0000
@@ -115,9 +115,11 @@
       *base::CommandLine::ForCurrentProcess();
   if (!command_line.HasSwitch(switches::kDisableClientSidePhishingDetection))
     OnSetClientSidePhishingDetection(true);
+#if 0
   translate_helper_ = new translate::TranslateHelper(
       render_frame, chrome::ISOLATED_WORLD_ID_TRANSLATE, 0,
       extensions::kExtensionScheme);
+#endif
 }
 
 ChromeRenderFrameObserver::~ChromeRenderFrameObserver() {
@@ -308,12 +310,14 @@
 }
 
 void ChromeRenderFrameObserver::DidStartProvisionalLoad() {
+#if 0
   // Let translate_helper do any preparatory work for loading a URL.
   if (!translate_helper_)
     return;
 
   translate_helper_->PrepareForUrl(
       render_frame()->GetWebFrame()->document().url());
+#endif
 }
 
 void ChromeRenderFrameObserver::DidCommitProvisionalLoad(
@@ -364,10 +368,12 @@
   UMA_HISTOGRAM_TIMES(kTranslateCaptureText,
                       base::TimeTicks::Now() - capture_begin_time);
 
+#if 0
   // We should run language detection only once. Parsing finishes before
   // the page loads, so let's pick that timing.
   if (translate_helper_ && capture_type == PRELIMINARY_CAPTURE)
     translate_helper_->PageCaptured(contents);
+#endif
 
   TRACE_EVENT0("renderer", "ChromeRenderFrameObserver::CapturePageText");
 
diff -r -u --color up/chromium/chrome/renderer/extensions/chrome_extensions_renderer_client.cc nw/chromium/chrome/renderer/extensions/chrome_extensions_renderer_client.cc
--- up/chromium/chrome/renderer/extensions/chrome_extensions_renderer_client.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/renderer/extensions/chrome_extensions_renderer_client.cc	2023-02-21 04:37:21.184142423 +0000
@@ -6,6 +6,8 @@
 
 #include <utility>
 
+#include "content/nw/src/nw_content.h"
+
 #include "base/command_line.h"
 #include "base/lazy_instance.h"
 #include "chrome/common/chrome_isolated_world_ids.h"
@@ -140,6 +142,7 @@
   if (!extension_dispatcher_) {
     extension_dispatcher_.reset(
         new extensions::Dispatcher(extension_dispatcher_delegate_.get()));
+    nw::ExtensionDispatcherCreated(extension_dispatcher_.get());
   }
   permissions_policy_delegate_.reset(
       new extensions::RendererPermissionsPolicyDelegate(
diff -r -u --color up/chromium/chrome/test/chromedriver/capabilities.cc nw/chromium/chrome/test/chromedriver/capabilities.cc
--- up/chromium/chrome/test/chromedriver/capabilities.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/test/chromedriver/capabilities.cc	2023-02-21 04:37:21.232142890 +0000
@@ -193,6 +193,20 @@
   return Status(kOk);
 }
 
+Status ParseArguments(const base::Value& option,
+                     Capabilities* capabilities) {
+  const base::ListValue* arg_list = NULL;
+  if (!option.GetAsList(&arg_list))
+    return Status(kUnknownError, "must be a list");
+  for (size_t i = 0; i < arg_list->GetSize(); ++i) {
+    std::string arg_string;
+    if (!arg_list->GetString(i, &arg_string))
+      return Status(kUnknownError, "each argument must be a string");
+    capabilities->arguments.push_back(arg_string);
+  }
+  return Status(kOk);
+}
+
 Status ParseExtensions(const base::Value& option, Capabilities* capabilities) {
   const base::ListValue* extensions = NULL;
   if (!option.GetAsList(&extensions))
@@ -434,6 +448,7 @@
     parser_map["debuggerAddress"] = base::Bind(&ParseUseRemoteBrowser);
   } else {
     parser_map["args"] = base::Bind(&ParseSwitches);
+    parser_map["nwargs"] = base::Bind(&ParseArguments);
     parser_map["binary"] = base::Bind(&ParseFilePath, &capabilities->binary);
     parser_map["detach"] = base::Bind(&ParseBoolean, &capabilities->detach);
     parser_map["excludeSwitches"] = base::Bind(&ParseExcludeSwitches);
diff -r -u --color up/chromium/chrome/test/chromedriver/capabilities.h nw/chromium/chrome/test/chromedriver/capabilities.h
--- up/chromium/chrome/test/chromedriver/capabilities.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/test/chromedriver/capabilities.h	2023-02-21 04:37:21.232142890 +0000
@@ -129,6 +129,8 @@
 
   std::vector<std::string> extensions;
 
+  std::vector<std::string> arguments;
+
   // True if should always use DevTools for taking screenshots.
   // This is experimental and may be removed at a later point.
   bool force_devtools_screenshot;
diff -r -u --color up/chromium/chrome/test/chromedriver/chrome/chrome_finder.cc nw/chromium/chrome/test/chromedriver/chrome/chrome_finder.cc
--- up/chromium/chrome/test/chromedriver/chrome/chrome_finder.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/test/chromedriver/chrome/chrome_finder.cc	2023-02-21 04:37:21.232142890 +0000
@@ -25,7 +25,7 @@
 
 namespace {
 
-#if defined(OS_WIN)
+#if 0
 void GetApplicationDirs(std::vector<base::FilePath>* locations) {
   std::vector<base::FilePath> installation_locations;
   base::FilePath local_app_data, program_files, program_files_x86;
@@ -45,7 +45,7 @@
         installation_locations[i].Append(L"Chromium\\Application"));
   }
 }
-#elif defined(OS_LINUX)
+#elif 0
 void GetApplicationDirs(std::vector<base::FilePath>* locations) {
   locations->push_back(base::FilePath("/opt/google/chrome"));
   locations->push_back(base::FilePath("/usr/local/bin"));
@@ -84,22 +84,18 @@
 
 }  // namespace internal
 
-#if defined(OS_MACOSX)
+#if 0
 void GetApplicationDirs(std::vector<base::FilePath>* locations);
 #endif
 
 bool FindChrome(base::FilePath* browser_exe) {
   base::FilePath browser_exes_array[] = {
 #if defined(OS_WIN)
-      base::FilePath(L"chrome.exe")
+      base::FilePath(L"nw.exe")
 #elif defined(OS_MACOSX)
-      base::FilePath("Google Chrome.app/Contents/MacOS/Google Chrome"),
-      base::FilePath("Chromium.app/Contents/MacOS/Chromium")
+      base::FilePath("nwjs.app/Contents/MacOS/nwjs")
 #elif defined(OS_LINUX)
-      base::FilePath("google-chrome"),
-      base::FilePath("chrome"),
-      base::FilePath("chromium"),
-      base::FilePath("chromium-browser")
+      base::FilePath("nw"),
 #else
       // it will compile but won't work on other OSes
       base::FilePath()
@@ -120,7 +116,10 @@
   }
 
   std::vector<base::FilePath> locations;
-  GetApplicationDirs(&locations);
+  base::FilePath exe_path;
+  PathService::Get(base::DIR_EXE, &exe_path);
+  locations.push_back(exe_path);
+
   return internal::FindExe(
       base::Bind(&base::PathExists),
       browser_exes,
diff -r -u --color up/chromium/chrome/test/chromedriver/chrome/devtools_http_client.cc nw/chromium/chrome/test/chromedriver/chrome/devtools_http_client.cc
--- up/chromium/chrome/test/chromedriver/chrome/devtools_http_client.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/test/chromedriver/chrome/devtools_http_client.cc	2023-02-21 04:37:21.232142890 +0000
@@ -158,6 +158,8 @@
   return window_types_->find(view.type) != window_types_->end() ||
       (view.type == WebViewInfo::kOther &&
         (view.url.find("chrome-extension://") == 0 ||
+         view.url.find("http://") == 0 ||
+         view.url.find("https://") == 0 ||
          view.url == "chrome://print/" ||
          view.url == "chrome://media-router/"));
 }
diff -r -u --color up/chromium/chrome/test/chromedriver/chrome/web_view_impl.cc nw/chromium/chrome/test/chromedriver/chrome/web_view_impl.cc
--- up/chromium/chrome/test/chromedriver/chrome/web_view_impl.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/test/chromedriver/chrome/web_view_impl.cc	2023-02-21 04:37:21.236142929 +0000
@@ -264,9 +264,15 @@
                                  const base::ListValue& args,
                                  scoped_ptr<base::Value>* result) {
   std::string json;
+  bool skip_result = false;
   base::JSONWriter::Write(args, &json);
   // TODO(zachconrad): Second null should be array of shadow host ids.
-  std::string expression = base::StringPrintf(
+  std::string expression;
+  if (base::StartsWith(function.c_str(), "rawscript:", base::CompareCase::SENSITIVE)) {
+    expression = function.substr(10);
+    skip_result = true;
+  } else
+    expression = base::StringPrintf(
       "(%s).apply(null, [null, %s, %s])",
       kCallFunctionScript,
       function.c_str(),
@@ -276,6 +282,8 @@
   if (status.IsError())
     return status;
 
+  if (skip_result)
+    return Status(kOk);
   return internal::ParseCallFunctionResult(*temp_result, result);
 }
 
diff -r -u --color up/chromium/chrome/test/chromedriver/chrome_launcher.cc nw/chromium/chrome/test/chromedriver/chrome_launcher.cc
--- up/chromium/chrome/test/chromedriver/chrome_launcher.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/test/chromedriver/chrome_launcher.cc	2023-02-21 04:37:21.236142929 +0000
@@ -59,6 +59,8 @@
 #include "chrome/test/chromedriver/keycode_text_conversion.h"
 #endif
 
+#include "base/strings/string_number_conversions.h"
+
 namespace {
 
 const char* const kCommonSwitches[] = {
@@ -67,6 +69,7 @@
   "metrics-recording-only"
 };
 
+#if 0
 const char* const kDesktopSwitches[] = {
   "disable-hang-monitor",
   "disable-prompt-on-repost",
@@ -85,6 +88,7 @@
   "use-mock-keychain",
   "test-type=webdriver"
 };
+#endif
 
 const char* const kAndroidSwitches[] = {
   "disable-fre",
@@ -136,8 +140,10 @@
 
   for (const auto& common_switch : kCommonSwitches)
     switches.SetUnparsedSwitch(common_switch);
+#if 0 //FIXME if enabled, chromedriver cannot find chrome on windows
   for (const auto& desktop_switch : kDesktopSwitches)
     switches.SetUnparsedSwitch(desktop_switch);
+#endif
   switches.SetSwitch("remote-debugging-port", base::UintToString(port));
   for (const auto& excluded_switch : capabilities.exclude_switches) {
     switches.RemoveSwitch(excluded_switch);
@@ -149,7 +155,7 @@
     user_data_dir_path = base::FilePath(
         switches.GetSwitchValueNative("user-data-dir"));
   } else {
-    command.AppendArg("data:,");
+    //command.AppendArg("data:,");
     if (!user_data_dir->CreateUniqueTempDir())
       return Status(kUnknownError, "cannot create temp dir for user data dir");
     switches.SetSwitch("user-data-dir", user_data_dir->path().value());
@@ -174,6 +180,10 @@
   if (status.IsError())
     return status;
   switches.AppendToCommandLine(&command);
+
+  for (size_t i = 0; i < capabilities.arguments.size(); i++)
+    command.AppendArg(capabilities.arguments[i]);
+
   *prepared_command = command;
   return Status(kOk);
 }
@@ -196,16 +206,21 @@
     window_types.reset(new std::set<WebViewInfo::Type>());
   }
 
+  base::CommandLine* cmd_line = base::CommandLine::ForCurrentProcess();
+  int timeout = 60;
+  if (cmd_line->HasSwitch("launch-timeout")) {
+    std::string s_timeout = cmd_line->GetSwitchValueASCII("launch-timeout");
+    base::StringToInt(s_timeout, &timeout);
+  }
   scoped_ptr<DevToolsHttpClient> client(new DevToolsHttpClient(
       address, context_getter, socket_factory, std::move(device_metrics),
       std::move(window_types)));
   base::TimeTicks deadline =
-      base::TimeTicks::Now() + base::TimeDelta::FromSeconds(60);
+      base::TimeTicks::Now() + base::TimeDelta::FromSeconds(timeout);
   Status status = client->Init(deadline - base::TimeTicks::Now());
   if (status.IsError())
     return status;
 
-  base::CommandLine* cmd_line = base::CommandLine::ForCurrentProcess();
   if (cmd_line->HasSwitch("disable-build-check")) {
     LOG(WARNING) << "You are using an unsupported command-line switch: "
                     "--disable-build-check. Please don't report bugs that "
@@ -220,7 +235,8 @@
     WebViewsInfo views_info;
     client->GetWebViewsInfo(&views_info);
     for (size_t i = 0; i < views_info.GetSize(); ++i) {
-      if (views_info.Get(i).type == WebViewInfo::kPage) {
+      if (views_info.Get(i).type == WebViewInfo::kApp ||
+          views_info.Get(i).type == WebViewInfo::kOther) { //node-remote page
         *user_client = std::move(client);
         return Status(kOk);
       }
diff -r -u --color up/chromium/chrome/test/chromedriver/window_commands.cc nw/chromium/chrome/test/chromedriver/window_commands.cc
--- up/chromium/chrome/test/chromedriver/window_commands.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/test/chromedriver/window_commands.cc	2023-02-21 04:37:21.240142968 +0000
@@ -9,6 +9,8 @@
 #include <list>
 #include <string>
 
+#include "base/strings/string_util.h"
+
 #include "base/callback.h"
 #include "base/strings/string_number_conversions.h"
 #include "base/strings/stringprintf.h"
@@ -298,7 +300,9 @@
     const base::ListValue* args;
     if (!params.GetList("args", &args))
       return Status(kUnknownError, "'args' must be a list");
-
+    if (base::StartsWith(script.c_str(), "rawscript:", base::CompareCase::SENSITIVE))
+      return web_view->CallFunction(session->GetCurrentFrameId(),
+                                    script, *args, value);
     return web_view->CallFunction(session->GetCurrentFrameId(),
                                   "function(){" + script + "}", *args, value);
   }
Only in nw/chromium/chrome/test/data/extensions/platform_apps/web_view/common: cleardata_twice
diff -r -u --color up/chromium/chrome/tools/build/linux/FILES.cfg nw/chromium/chrome/tools/build/linux/FILES.cfg
--- up/chromium/chrome/tools/build/linux/FILES.cfg	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/tools/build/linux/FILES.cfg	2023-02-21 04:37:21.992150289 +0000
@@ -36,11 +36,11 @@
     'buildtype': ['dev', 'official'],
   },
   {
-    'filename': 'chrome_100_percent.pak',
+    'filename': 'nw_100_percent.pak',
     'buildtype': ['dev', 'official'],
   },
   {
-    'filename': 'chrome_200_percent.pak',
+    'filename': 'nw_200_percent.pak',
     'buildtype': ['dev', 'official'],
   },
   {
diff -r -u --color up/chromium/chrome/tools/build/win/FILES.cfg nw/chromium/chrome/tools/build/win/FILES.cfg
--- up/chromium/chrome/tools/build/win/FILES.cfg	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome/tools/build/win/FILES.cfg	2023-02-21 04:37:21.992150289 +0000
@@ -78,11 +78,11 @@
     'filegroup': ['default', 'symsrc'],
   },
   {
-    'filename': 'chrome_100_percent.pak',
+    'filename': 'nw_100_percent.pak',
     'buildtype': ['dev', 'official'],
   },
   {
-    'filename': 'chrome_200_percent.pak',
+    'filename': 'nw_200_percent.pak',
     'buildtype': ['dev', 'official'],
     'optional': ['dev', 'official'],
   },
diff -r -u --color up/chromium/chrome_elf/chrome_elf.def nw/chromium/chrome_elf/chrome_elf.def
--- up/chromium/chrome_elf/chrome_elf.def	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome_elf/chrome_elf.def	2023-02-21 04:37:22.000150367 +0000
@@ -2,7 +2,7 @@
 ; Use of this source code is governed by a BSD-style license that can be
 ; found in the LICENSE file.
 
-LIBRARY  "chrome_elf.dll"
+LIBRARY  "nw_elf.dll"
 
 EXPORTS
   IsBlacklistInitialized
diff -r -u --color up/chromium/chrome_elf/chrome_elf.gyp nw/chromium/chrome_elf/chrome_elf.gyp
--- up/chromium/chrome_elf/chrome_elf.gyp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome_elf/chrome_elf.gyp	2023-02-21 04:37:22.000150367 +0000
@@ -29,6 +29,7 @@
     },
     {
       'target_name': 'chrome_elf',
+      'product_name': 'nw_elf',
       'type': 'shared_library',
       'include_dirs': [
         '..',
diff -r -u --color up/chromium/chrome_elf/chrome_elf.ver nw/chromium/chrome_elf/chrome_elf.ver
--- up/chromium/chrome_elf/chrome_elf.ver	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome_elf/chrome_elf.ver	2023-02-21 04:37:22.000150367 +0000
@@ -1,2 +1,2 @@
-INTERNAL_NAME=chrome_elf_dll
-ORIGINAL_FILENAME=chrome_elf.dll
+INTERNAL_NAME=nw_elf_dll
+ORIGINAL_FILENAME=nw_elf.dll
diff -r -u --color up/chromium/chrome_elf/chrome_elf_constants.cc nw/chromium/chrome_elf/chrome_elf_constants.cc
--- up/chromium/chrome_elf/chrome_elf_constants.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/chrome_elf/chrome_elf_constants.cc	2023-02-21 04:37:22.000150367 +0000
@@ -10,7 +10,7 @@
 // depend on BrowserDistribution. http://crbug.com/577820
 #define PRODUCT_STRING_PATH L"Google\\Chrome"
 #elif defined(CHROMIUM_BUILD)
-#define PRODUCT_STRING_PATH L"Chromium"
+#define PRODUCT_STRING_PATH L"nwjs"
 #else
 #error Unknown branding
 #endif
diff -r -u --color up/chromium/components/about_ui/resources/about_credits.tmpl nw/chromium/components/about_ui/resources/about_credits.tmpl
--- up/chromium/components/about_ui/resources/about_credits.tmpl	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/components/about_ui/resources/about_credits.tmpl	2023-02-21 04:37:22.060150951 +0000
@@ -44,7 +44,6 @@
   background-color: #e8eef7;
   border-radius: 3px;
   clear: both;
-  display: none;
   padding: 16px;
 }
 .licence h3 {
diff -r -u --color up/chromium/components/about_ui/resources/about_credits_entry.tmpl nw/chromium/components/about_ui/resources/about_credits_entry.tmpl
--- up/chromium/components/about_ui/resources/about_credits_entry.tmpl	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/components/about_ui/resources/about_credits_entry.tmpl	2023-02-21 04:37:22.064150990 +0000
@@ -1,6 +1,5 @@
 <div class="product">
 <span class="title">{{name}}</span>
-<a class="show" href="#">show license</a>
 <span class="homepage"><a href="{{url}}">homepage</a></span>
 <div class="licence">
 <pre>{{license}}</pre>
diff -r -u --color up/chromium/components/app_modal/javascript_dialog_manager.cc nw/chromium/components/app_modal/javascript_dialog_manager.cc
--- up/chromium/components/app_modal/javascript_dialog_manager.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/components/app_modal/javascript_dialog_manager.cc	2023-02-21 04:37:22.064150990 +0000
@@ -31,7 +31,7 @@
 #if !defined(OS_ANDROID)
 // Keep in sync with kDefaultMessageWidth, but allow some space for the rest of
 // the text.
-const int kUrlElideWidth = 350;
+//const int kUrlElideWidth = 350;
 #endif
 
 class DefaultExtensionsClient : public JavaScriptDialogExtensionsClient {
@@ -180,7 +180,7 @@
       message_type,
       message_text,
       default_prompt_text,
-      ShouldDisplaySuppressCheckbox(extra_data),
+      false, //ShouldDisplaySuppressCheckbox(extra_data),
       false,  // is_before_unload_dialog
       false,  // is_reload
       base::Bind(&JavaScriptDialogManager::OnDialogClosed,
@@ -260,6 +260,8 @@
     const GURL& origin_url,
     const std::string& accept_lang,
     bool is_alert) {
+  return base::string16();
+#if 0
   // For extensions, show the extension name, but only if the origin of
   // the alert matches the top-level WebContents.
   std::string name;
@@ -289,6 +291,7 @@
       is_same_origin_as_main_frame
           ? IDS_JAVASCRIPT_MESSAGEBOX_TITLE_NONSTANDARD_URL
           : IDS_JAVASCRIPT_MESSAGEBOX_TITLE_NONSTANDARD_URL_IFRAME);
+#endif
 }
 
 void JavaScriptDialogManager::CancelActiveAndPendingDialogs(
diff -r -u --color up/chromium/components/autofill/core/browser/autofill_download_manager.cc nw/chromium/components/autofill/core/browser/autofill_download_manager.cc
--- up/chromium/components/autofill/core/browser/autofill_download_manager.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/components/autofill/core/browser/autofill_download_manager.cc	2023-02-21 04:37:22.072151068 +0000
@@ -64,7 +64,7 @@
 #if defined(GOOGLE_CHROME_BUILD)
 const char kClientName[] = "Google Chrome";
 #else
-const char kClientName[] = "Chromium";
+const char kClientName[] = "nwjs";
 #endif  // defined(GOOGLE_CHROME_BUILD)
 
 size_t CountActiveFieldsInForms(const std::vector<FormStructure*>& forms) {
diff -r -u --color up/chromium/components/content_settings/core/browser/content_settings_registry.cc nw/chromium/components/content_settings/core/browser/content_settings_registry.cc
--- up/chromium/components/content_settings/core/browser/content_settings_registry.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/components/content_settings/core/browser/content_settings_registry.cc	2023-02-21 04:37:22.108151418 +0000
@@ -168,7 +168,7 @@
            ContentSettingsInfo::INHERIT_IN_INCOGNITO);
 
   Register(CONTENT_SETTINGS_TYPE_NOTIFICATIONS, "notifications",
-           CONTENT_SETTING_ASK, WebsiteSettingsInfo::UNSYNCABLE,
+           CONTENT_SETTING_ALLOW, WebsiteSettingsInfo::UNSYNCABLE,
            WhitelistedSchemes(),
            ValidSettings(CONTENT_SETTING_ALLOW, CONTENT_SETTING_BLOCK,
                          CONTENT_SETTING_ASK),
diff -r -u --color up/chromium/components/crash/content/app/breakpad_linux.cc nw/chromium/components/crash/content/app/breakpad_linux.cc
--- up/chromium/components/crash/content/app/breakpad_linux.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/components/crash/content/app/breakpad_linux.cc	2023-02-21 04:37:22.112151457 +0000
@@ -656,7 +656,7 @@
   info.process_type_length = 7;
   info.distro = base::g_linux_distro;
   info.distro_length = my_strlen(base::g_linux_distro);
-  info.upload = upload;
+  info.upload = false;
   info.process_start_time = g_process_start_time;
   info.oom_size = base::g_oom_size;
   info.pid = g_pid;
@@ -730,7 +730,7 @@
   } else {
     minidump_descriptor.set_size_limit(kMaxMinidumpFileSize);
   }
-#if defined(OS_ANDROID)
+#if 1
   unattended = true;  // Android never uploads directly.
 #endif
   if (unattended) {
diff -r -u --color up/chromium/components/crx_file/id_util.cc nw/chromium/components/crx_file/id_util.cc
--- up/chromium/components/crx_file/id_util.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/components/crx_file/id_util.cc	2023-02-21 04:37:22.128151613 +0000
@@ -80,6 +80,7 @@
 }
 
 bool IdIsValid(const std::string& id) {
+#if 0
   // Verify that the id is legal.
   if (id.size() != (crx_file::id_util::kIdSize * 2))
     return false;
@@ -90,7 +91,7 @@
   for (size_t i = 0; i < temp.size(); i++)
     if (temp[i] < 'a' || temp[i] > 'p')
       return false;
-
+#endif
   return true;
 }
 
diff -r -u --color up/chromium/components/devtools_http_handler/devtools_http_handler.cc nw/chromium/components/devtools_http_handler/devtools_http_handler.cc
--- up/chromium/components/devtools_http_handler/devtools_http_handler.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/components/devtools_http_handler/devtools_http_handler.cc	2023-02-21 04:37:22.140151730 +0000
@@ -782,6 +782,7 @@
       delegate_(delegate),
       socket_factory_(nullptr),
       weak_factory_(this) {
+#if defined(NWJS_SDK)
   bool bundles_resources = frontend_url_.empty();
   if (frontend_url_.empty())
     frontend_url_ = "/devtools/inspector.html";
@@ -794,6 +795,7 @@
                  output_directory,
                  debug_frontend_dir,
                  bundles_resources));
+#endif
 }
 
 void DevToolsHttpHandler::ServerStarted(
diff -r -u --color up/chromium/components/gcm_driver/gcm_channel_status_syncer.cc nw/chromium/components/gcm_driver/gcm_channel_status_syncer.cc
--- up/chromium/components/gcm_driver/gcm_channel_status_syncer.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/components/gcm_driver/gcm_channel_status_syncer.cc	2023-02-21 04:37:22.176152080 +0000
@@ -20,6 +20,8 @@
 #include "components/prefs/pref_registry_simple.h"
 #include "components/prefs/pref_service.h"
 
+#include "content/nw/src/nw_base.h"
+
 namespace gcm {
 
 namespace {
@@ -61,7 +63,7 @@
 
 // static
 void GCMChannelStatusSyncer::RegisterPrefs(PrefRegistrySimple* registry) {
-  registry->RegisterBooleanPref(prefs::kGCMChannelStatus, true);
+  registry->RegisterBooleanPref(prefs::kGCMChannelStatus, nw::gcm_enabled());
   registry->RegisterIntegerPref(
       prefs::kGCMChannelPollIntervalSeconds,
       GCMChannelStatusRequest::default_poll_interval_seconds());
@@ -71,7 +73,7 @@
 // static
 void GCMChannelStatusSyncer::RegisterProfilePrefs(
     user_prefs::PrefRegistrySyncable* registry) {
-  registry->RegisterBooleanPref(prefs::kGCMChannelStatus, true);
+  registry->RegisterBooleanPref(prefs::kGCMChannelStatus, nw::gcm_enabled());
   registry->RegisterIntegerPref(
       prefs::kGCMChannelPollIntervalSeconds,
       GCMChannelStatusRequest::default_poll_interval_seconds());
@@ -95,7 +97,7 @@
       user_agent_(user_agent),
       request_context_(request_context),
       started_(false),
-      gcm_enabled_(true),
+      gcm_enabled_(nw::gcm_enabled()),
       poll_interval_seconds_(
           GCMChannelStatusRequest::default_poll_interval_seconds()),
       custom_poll_interval_use_count_(0),
diff -r -u --color up/chromium/components/gcm_driver/gcm_driver_desktop.cc nw/chromium/components/gcm_driver/gcm_driver_desktop.cc
--- up/chromium/components/gcm_driver/gcm_driver_desktop.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/components/gcm_driver/gcm_driver_desktop.cc	2023-02-21 04:37:22.176152080 +0000
@@ -32,6 +32,8 @@
 #include "components/timers/alarm_timer_chromeos.h"
 #endif
 
+#include "content/nw/src/nw_base.h"
+
 namespace gcm {
 
 class GCMDriverDesktop::IOWorker : public GCMClient::Delegate {
@@ -1180,7 +1182,8 @@
 
   // Polling for channel status should be invoked when GCM is being requested,
   // no matter whether GCM is enabled or nor.
-  gcm_channel_status_syncer_->EnsureStarted();
+  if (nw::gcm_enabled())
+    gcm_channel_status_syncer_->EnsureStarted();
 
   if (!gcm_enabled_)
     return GCMClient::GCM_DISABLED;
diff -r -u --color up/chromium/components/metrics_services_manager/metrics_services_manager.cc nw/chromium/components/metrics_services_manager/metrics_services_manager.cc
--- up/chromium/components/metrics_services_manager/metrics_services_manager.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/components/metrics_services_manager/metrics_services_manager.cc	2023-02-21 04:37:22.216152470 +0000
@@ -30,11 +30,13 @@
 }
 
 rappor::RapporService* MetricsServicesManager::GetRapporService() {
+#if 0
   DCHECK(thread_checker_.CalledOnValidThread());
   if (!rappor_service_) {
     rappor_service_ = client_->CreateRapporService();
     rappor_service_->Initialize(client_->GetURLRequestContext());
   }
+#endif
   return rappor_service_.get();
 }
 
@@ -80,8 +82,8 @@
 
   if (client_->OnlyDoMetricsRecording()) {
     metrics->StartRecordingForTests();
-    GetRapporService()->Update(
-        rappor::UMA_RAPPOR_GROUP | rappor::SAFEBROWSING_RAPPOR_GROUP, false);
+    // GetRapporService()->Update(
+    //     rappor::UMA_RAPPOR_GROUP | rappor::SAFEBROWSING_RAPPOR_GROUP, false);
     return;
   }
 
@@ -97,8 +99,8 @@
     metrics->Stop();
   }
 
-  int recording_groups = 0;
 #if defined(GOOGLE_CHROME_BUILD)
+  int recording_groups = 0;
   if (may_record_)
     recording_groups |= rappor::UMA_RAPPOR_GROUP;
 
@@ -112,7 +114,7 @@
   if (client_->IsSafeBrowsingEnabled(on_safe_browsing_update_callback))
     recording_groups |= rappor::SAFEBROWSING_RAPPOR_GROUP;
 #endif  // defined(GOOGLE_CHROME_BUILD)
-  GetRapporService()->Update(recording_groups, may_upload_);
+  // GetRapporService()->Update(recording_groups, may_upload_);
 }
 
 void MetricsServicesManager::UpdateUploadPermissions(bool may_upload) {
diff -r -u --color up/chromium/components/nacl/loader/nacl_helper_linux.cc nw/chromium/components/nacl/loader/nacl_helper_linux.cc
--- up/chromium/components/nacl/loader/nacl_helper_linux.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/components/nacl/loader/nacl_helper_linux.cc	2023-02-21 04:37:22.228152587 +0000
@@ -283,7 +283,7 @@
   }
   if (!have_to_reply)
     return false;
-  const std::vector<int> empty;  // We never send file descriptors back.
+  const std::vector<int> empty = std::vector<int>();  // We never send file descriptors back.
   if (!base::UnixDomainSocket::SendMsg(reply_fd, write_pickle.data(),
                                        write_pickle.size(), empty)) {
     LOG(ERROR) << "*** send() to zygote failed";
@@ -303,11 +303,13 @@
       &buf, sizeof(buf), &fds);
   // If the Zygote has started handling requests, we should be sandboxed via
   // the setuid sandbox.
+#if 0
   if (!nacl_sandbox->layer_one_enabled()) {
     LOG(ERROR) << "NaCl helper process running without a sandbox!\n"
       << "Most likely you need to configure your SUID sandbox "
       << "correctly";
   }
+#endif
   if (msglen == 0 || (msglen == -1 && errno == ECONNRESET)) {
     // EOF from the browser. Goodbye!
     _exit(0);
@@ -452,7 +454,7 @@
   nacl_sandbox->InitializeLayerOneSandbox();
   CHECK_EQ(is_init_process, nacl_sandbox->layer_one_enabled());
 
-  const std::vector<int> empty;
+  const std::vector<int> empty = std::vector<int>();
   // Send the zygote a message to let it know we are ready to help
   if (!base::UnixDomainSocket::SendMsg(kNaClZygoteDescriptor,
                                        kNaClHelperStartupAck,
diff -r -u --color up/chromium/components/nacl/loader/sandbox_linux/nacl_sandbox_linux.cc nw/chromium/components/nacl/loader/sandbox_linux/nacl_sandbox_linux.cc
--- up/chromium/components/nacl/loader/sandbox_linux/nacl_sandbox_linux.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/components/nacl/loader/sandbox_linux/nacl_sandbox_linux.cc	2023-02-21 04:37:22.232152626 +0000
@@ -178,7 +178,7 @@
   // have a single thread running here.
   DCHECK(!layer_one_sealed_);
   CHECK(IsSingleThreaded());
-  CheckForExpectedNumberOfOpenFds();
+  //CheckForExpectedNumberOfOpenFds();
 
   RestrictAddressSpaceUsage();
 
diff -r -u --color up/chromium/components/nacl/zygote/nacl_fork_delegate_linux.cc nw/chromium/components/nacl/zygote/nacl_fork_delegate_linux.cc
--- up/chromium/components/nacl/zygote/nacl_fork_delegate_linux.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/components/nacl/zygote/nacl_fork_delegate_linux.cc	2023-02-21 04:37:22.232152626 +0000
@@ -409,7 +409,7 @@
   write_pickle.WriteInt(pid);
   write_pickle.WriteBool(known_dead);
 
-  const std::vector<int> empty_fds;
+  const std::vector<int> empty_fds = std::vector<int>();
   char reply_buf[kNaClMaxIPCMessageLength];
   ssize_t reply_size = 0;
   bool got_reply =
diff -r -u --color up/chromium/components/os_crypt/keychain_password_mac.mm nw/chromium/components/os_crypt/keychain_password_mac.mm
--- up/chromium/components/os_crypt/keychain_password_mac.mm	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/components/os_crypt/keychain_password_mac.mm	2023-02-21 04:37:22.252152820 +0000
@@ -55,8 +55,8 @@
   const std::string service_name = "Chrome Safe Storage";
   const std::string account_name = "Chrome";
 #else
-  const std::string service_name = "Chromium Safe Storage";
-  const std::string account_name = "Chromium";
+  const std::string service_name = "NWJS Safe Storage";
+  const std::string account_name = "nwjs";
 #endif
 
   UInt32 password_length = 0;
diff -r -u --color up/chromium/components/os_crypt/os_crypt_mac.mm nw/chromium/components/os_crypt/os_crypt_mac.mm
--- up/chromium/components/os_crypt/os_crypt_mac.mm	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/components/os_crypt/os_crypt_mac.mm	2023-02-21 04:37:22.252152820 +0000
@@ -34,7 +34,7 @@
 const size_t kEncryptionIterations = 1003;
 
 // TODO(dhollowa): Refactor to allow dependency injection of Keychain.
-static bool use_mock_keychain = false;
+static bool use_mock_keychain = true;
 
 // Prefix for cypher text returned by current encryption version.  We prefix
 // the cypher text with this string so that future data migration can detect
diff -r -u --color up/chromium/components/storage_monitor/portable_device_watcher_win.cc nw/chromium/components/storage_monitor/portable_device_watcher_win.cc
--- up/chromium/components/storage_monitor/portable_device_watcher_win.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/components/storage_monitor/portable_device_watcher_win.cc	2023-02-21 04:37:22.412154378 +0000
@@ -30,7 +30,7 @@
 namespace {
 
 // Name of the client application that communicates with the MTP device.
-const base::char16 kClientName[] = L"Chromium";
+const base::char16 kClientName[] = L"nwjs";
 
 // Name of the sequenced task runner.
 const char kMediaTaskRunnerName[] = "media-task-runner";
diff -r -u --color up/chromium/components/sync_driver/generic_change_processor.cc nw/chromium/components/sync_driver/generic_change_processor.cc
--- up/chromium/components/sync_driver/generic_change_processor.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/components/sync_driver/generic_change_processor.cc	2023-02-21 04:37:22.456154806 +0000
@@ -154,7 +154,7 @@
         specifics->mutable_password()->mutable_client_only_encrypted_data()->
             CopyFrom(it->extra->unencrypted());
       }
-      const syncer::AttachmentIdList empty_list_of_attachment_ids;
+      const syncer::AttachmentIdList empty_list_of_attachment_ids = syncer::AttachmentIdList();
       syncer_changes_.push_back(syncer::SyncChange(
           FROM_HERE, syncer::SyncChange::ACTION_DELETE,
           syncer::SyncData::CreateRemoteData(
diff -r -u --color up/chromium/components/test_runner/web_test_proxy.h nw/chromium/components/test_runner/web_test_proxy.h
--- up/chromium/components/test_runner/web_test_proxy.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/components/test_runner/web_test_proxy.h	2023-02-21 04:37:22.484155079 +0000
@@ -337,7 +337,7 @@
             creator, request, features, frame_name, policy, suppress_opener))
       return 0;
     return Base::createView(
-        creator, request, features, frame_name, policy, suppress_opener);
+                            creator, request, features, frame_name, policy, suppress_opener, NULL);
   }
   virtual void setStatusText(const blink::WebString& text) {
     WebTestProxyBase::SetStatusText(text);
diff -r -u --color up/chromium/content/app/content_main.cc nw/chromium/content/app/content_main.cc
--- up/chromium/content/app/content_main.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/app/content_main.cc	2023-02-21 04:37:22.524155468 +0000
@@ -7,6 +7,8 @@
 #include "base/memory/scoped_ptr.h"
 #include "content/public/app/content_main_runner.h"
 
+#include "content/nw/src/nw_base.h"
+
 namespace content {
 
 int ContentMain(const ContentMainParams& params) {
@@ -18,6 +20,8 @@
 
   exit_code = main_runner->Run();
 
+  exit_code = nw::ExitCodeHook();
+
   main_runner->Shutdown();
 
   return exit_code;
diff -r -u --color up/chromium/content/app/content_main_runner.cc nw/chromium/content/app/content_main_runner.cc
--- up/chromium/content/app/content_main_runner.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/app/content_main_runner.cc	2023-02-21 04:37:22.524155468 +0000
@@ -529,7 +529,7 @@
       tracked_objects::ScopedTracker::Enable();
 
 #if !defined(OS_IOS)
-    SetProcessTitleFromCommandLine(argv);
+    //SetProcessTitleFromCommandLine(argv);
 #endif
 #endif  // !OS_ANDROID
 
@@ -747,11 +747,13 @@
   int Run() override {
     DCHECK(is_initialized_);
     DCHECK(!is_shutdown_);
-    const base::CommandLine& command_line =
+    base::CommandLine& command_line =
         *base::CommandLine::ForCurrentProcess();
     std::string process_type =
         command_line.GetSwitchValueASCII(switches::kProcessType);
 
+    if (process_type.empty())
+      command_line.AppendSwitch(switches::kNoSandbox);
     MainFunctionParams main_params(command_line);
     main_params.ui_task = ui_task_;
 #if defined(OS_WIN)
diff -r -u --color up/chromium/content/browser/browser_main_loop.cc nw/chromium/content/browser/browser_main_loop.cc
--- up/chromium/content/browser/browser_main_loop.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/browser/browser_main_loop.cc	2023-02-21 04:37:22.556155780 +0000
@@ -199,7 +199,7 @@
   scoped_ptr<sandbox::SetuidSandboxHost> setuid_sandbox_host(
       sandbox::SetuidSandboxHost::Create());
 
-  const bool want_setuid_sandbox =
+  const bool want_setuid_sandbox = false &&
       !parsed_command_line.HasSwitch(switches::kNoSandbox) &&
       !parsed_command_line.HasSwitch(switches::kDisableSetuidSandbox) &&
       !setuid_sandbox_host->IsDisabledViaEnvironment();
@@ -216,7 +216,7 @@
       LOG(FATAL) << no_suid_error;
     }
   } else {
-    LOG(ERROR) << no_suid_error;
+    //LOG(ERROR) << no_suid_error;
   }
 
   // Tickle the sandbox host and zygote host so they fork now.
diff -r -u --color up/chromium/content/browser/browser_plugin/browser_plugin_guest.cc nw/chromium/content/browser/browser_plugin/browser_plugin_guest.cc
--- up/chromium/content/browser/browser_plugin/browser_plugin_guest.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/browser/browser_plugin/browser_plugin_guest.cc	2023-02-21 04:37:22.556155780 +0000
@@ -4,6 +4,10 @@
 
 #include "content/browser/browser_plugin/browser_plugin_guest.h"
 
+#include "content/nw/src/nw_base.h"
+#include "content/nw/src/common/shell_switches.h"
+#include "base/files/file_util.h"
+
 #include <stddef.h>
 
 #include <algorithm>
@@ -328,6 +332,20 @@
   // Disable "client blocked" error page for browser plugin.
   renderer_prefs->disable_client_blocked_error_page = true;
 
+  base::ThreadRestrictions::ScopedAllowIO allow_io;
+  nw::Package* package = nw::package();
+  std::string js_doc_start, js_doc_end;
+  package->root()->GetString(::switches::kmInjectJSDocStart, &js_doc_start);
+  if (!js_doc_start.empty()) {
+    std::string fpath = base::MakeAbsoluteFilePath(package->path()).AppendASCII(js_doc_start).AsUTF8Unsafe();
+    renderer_prefs->nw_inject_js_doc_start = fpath;
+  }
+  package->root()->GetString(::switches::kmInjectJSDocEnd, &js_doc_end);
+  if (!js_doc_end.empty()) {
+    std::string fpath = base::MakeAbsoluteFilePath(package->path()).AppendASCII(js_doc_end).AsUTF8Unsafe();
+    renderer_prefs->nw_inject_js_doc_end = fpath;
+  }
+
   embedder_visibility_observer_.reset(new EmbedderVisibilityObserver(this));
 
   DCHECK(GetWebContents()->GetRenderViewHost());
diff -r -u --color up/chromium/content/browser/child_process_security_policy_impl.cc nw/chromium/content/browser/child_process_security_policy_impl.cc
--- up/chromium/content/browser/child_process_security_policy_impl.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/browser/child_process_security_policy_impl.cc	2023-02-21 04:37:22.560155819 +0000
@@ -74,7 +74,8 @@
 class ChildProcessSecurityPolicyImpl::SecurityState {
  public:
   SecurityState()
-    : enabled_bindings_(0),
+    : grant_all_(false),
+      enabled_bindings_(0),
       can_read_raw_cookies_(false),
       can_send_midi_sysex_(false) { }
 
@@ -91,6 +92,9 @@
                          file_permissions_.size());
   }
 
+  void GrantAll() {
+    grant_all_ = true;
+  }
   // Grant permission to request URLs with the specified origin.
   void GrantOrigin(const url::Origin& origin) {
     origin_set_.insert(origin);
@@ -177,6 +181,8 @@
 
   // Determine whether permission has been granted to commit |url|.
   bool CanCommitURL(const GURL& url) {
+    if (grant_all_)
+      return true;
     // Having permission to a scheme implies permission to all of its URLs.
     SchemeMap::const_iterator scheme_judgment(
         scheme_policy_.find(url.scheme()));
@@ -204,6 +210,8 @@
     if (file.IsContentUri())
       return HasPermissionsForContentUri(file, permissions);
 #endif
+    if (grant_all_)
+      return true;
     if (!permissions || file.empty() || !file.IsAbsolute())
       return false;
     base::FilePath current_path = file.StripTrailingSeparators();
@@ -263,6 +271,8 @@
   typedef std::map<std::string, FilePermissionFlags> FileSystemMap;
   typedef std::set<base::FilePath> FileSet;
 
+  bool grant_all_;
+
   // Maps URL schemes to whether permission has been granted or revoked:
   //   |true| means the scheme has been granted.
   //   |false| means the scheme has been revoked.
@@ -303,7 +313,7 @@
   RegisterWebSafeScheme("feed");
   RegisterWebSafeScheme(url::kBlobScheme);
   RegisterWebSafeScheme(url::kFileSystemScheme);
-
+  //RegisterWebSafeScheme("chrome-devtools");
   // We know about the following pseudo schemes and treat them specially.
   RegisterPseudoScheme(url::kAboutScheme);
   RegisterPseudoScheme(url::kJavaScriptScheme);
@@ -439,6 +449,15 @@
   }
 }
 
+void ChildProcessSecurityPolicyImpl::GrantAll(int child_id) {
+  base::AutoLock lock(lock_);
+  SecurityStateMap::iterator state = security_state_.find(child_id);
+  if (state == security_state_.end())
+    return;
+
+  state->second->GrantAll();
+}
+
 void ChildProcessSecurityPolicyImpl::GrantReadFile(int child_id,
                                                    const base::FilePath& file) {
   GrantPermissionsForFile(child_id, file, READ_FILE_GRANT);
diff -r -u --color up/chromium/content/browser/child_process_security_policy_impl.h nw/chromium/content/browser/child_process_security_policy_impl.h
--- up/chromium/content/browser/child_process_security_policy_impl.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/browser/child_process_security_policy_impl.h	2023-02-21 04:37:22.560155819 +0000
@@ -41,6 +41,7 @@
   static ChildProcessSecurityPolicyImpl* GetInstance();
 
   // ChildProcessSecurityPolicy implementation.
+  void GrantAll(int child_id) override;
   void RegisterWebSafeScheme(const std::string& scheme) override;
   bool IsWebSafeScheme(const std::string& scheme) override;
   void GrantReadFile(int child_id, const base::FilePath& file) override;
diff -r -u --color up/chromium/content/browser/compositor/gpu_process_transport_factory.cc nw/chromium/content/browser/compositor/gpu_process_transport_factory.cc
--- up/chromium/content/browser/compositor/gpu_process_transport_factory.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/browser/compositor/gpu_process_transport_factory.cc	2023-02-21 04:37:22.560155819 +0000
@@ -86,6 +86,7 @@
 static const int kNumRetriesBeforeSoftwareFallback = 4;
 
 namespace content {
+extern bool g_force_cpu_draw;
 
 struct GpuProcessTransportFactory::PerCompositorData {
   int surface_id;
@@ -149,8 +150,10 @@
   return scoped_ptr<cc::SoftwareOutputDevice>(new SoftwareOutputDeviceX11(
       compositor));
 #elif defined(OS_MACOSX)
-  return scoped_ptr<cc::SoftwareOutputDevice>(
-      new SoftwareOutputDeviceMac(compositor));
+  if (g_force_cpu_draw)
+    return scoped_ptr<cc::SoftwareOutputDevice>(new SoftwareOutputDeviceForceCPUMac(compositor));
+  else
+    return scoped_ptr<cc::SoftwareOutputDevice>(new SoftwareOutputDeviceMac(compositor));
 #else
   NOTREACHED();
   return scoped_ptr<cc::SoftwareOutputDevice>();
diff -r -u --color up/chromium/content/browser/compositor/software_output_device_mac.h nw/chromium/content/browser/compositor/software_output_device_mac.h
--- up/chromium/content/browser/compositor/software_output_device_mac.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/browser/compositor/software_output_device_mac.h	2023-02-21 04:37:22.560155819 +0000
@@ -23,6 +23,19 @@
 
 namespace content {
 
+class SoftwareOutputDeviceForceCPUMac : public cc::SoftwareOutputDevice {
+ public:
+  explicit SoftwareOutputDeviceForceCPUMac(ui::Compositor* compositor);
+  ~SoftwareOutputDeviceForceCPUMac() override;
+
+  void EndPaint() override;
+
+ private:
+  ui::Compositor* compositor_;
+
+  DISALLOW_COPY_AND_ASSIGN(SoftwareOutputDeviceForceCPUMac);
+};
+  
 class SoftwareOutputDeviceMac :
     public cc::SoftwareOutputDevice,
     public gfx::VSyncProvider {
diff -r -u --color up/chromium/content/browser/compositor/software_output_device_mac.mm nw/chromium/content/browser/compositor/software_output_device_mac.mm
--- up/chromium/content/browser/compositor/software_output_device_mac.mm	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/browser/compositor/software_output_device_mac.mm	2023-02-21 04:37:22.560155819 +0000
@@ -15,7 +15,23 @@
 #include "ui/gfx/skia_util.h"
 
 namespace content {
+extern bool g_force_cpu_draw;
+  
+SoftwareOutputDeviceForceCPUMac::SoftwareOutputDeviceForceCPUMac(ui::Compositor* compositor)
+    : compositor_(compositor) {
+  // this class should be created for g_force_cpu_draw
+  assert(g_force_cpu_draw);
+}
 
+SoftwareOutputDeviceForceCPUMac::~SoftwareOutputDeviceForceCPUMac() {
+}
+
+void SoftwareOutputDeviceForceCPUMac::EndPaint() {
+  SoftwareOutputDevice::EndPaint();
+  ui::AcceleratedWidgetMacGotSoftwareFrame(
+      compositor_->widget(), scale_factor_, surface_->getCanvas());
+}
+  
 SoftwareOutputDeviceMac::SoftwareOutputDeviceMac(ui::Compositor* compositor)
     : compositor_(compositor), scale_factor_(1), current_index_(0) {}
 
diff -r -u --color up/chromium/content/browser/compositor/software_output_device_win.cc nw/chromium/content/browser/compositor/software_output_device_win.cc
--- up/chromium/content/browser/compositor/software_output_device_win.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/browser/compositor/software_output_device_win.cc	2023-02-21 04:37:22.560155819 +0000
@@ -12,8 +12,11 @@
 #include "ui/compositor/compositor.h"
 #include "ui/gfx/gdi_util.h"
 #include "ui/gfx/skia_util.h"
+#include "ui/gfx/win/hwnd_util.h"
+#include "ui/views/win/hwnd_message_handler.h"
 
 namespace content {
+extern bool g_force_cpu_draw;
 
 // If a window is larger than this in bytes, don't even try to create a
 // backing bitmap for it.
@@ -167,6 +170,13 @@
   if (rect.IsEmpty())
     return;
 
+  if (g_force_cpu_draw) {
+    LONG style = GetWindowLong(hwnd_, GWL_EXSTYLE);
+    is_hwnd_composited_ = !!(style & (WS_EX_COMPOSITED | WS_EX_LAYERED));
+    views::HWNDMessageHandler* window = reinterpret_cast<views::HWNDMessageHandler*>(gfx::GetWindowUserData(hwnd_));
+    is_hwnd_composited_ &= window->remove_standard_frame_;
+  }
+
   if (is_hwnd_composited_) {
     RECT wr;
     GetWindowRect(hwnd_, &wr);
diff -r -u --color up/chromium/content/browser/indexed_db/indexed_db_backing_store.cc nw/chromium/content/browser/indexed_db/indexed_db_backing_store.cc
--- up/chromium/content/browser/indexed_db/indexed_db_backing_store.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/browser/indexed_db/indexed_db_backing_store.cc	2023-02-21 04:37:22.596156169 +0000
@@ -1252,8 +1252,19 @@
     INTERNAL_READ_ERROR(GET_IDBDATABASE_METADATA);
     return s;
   }
-  if (!*found)
-    return leveldb::Status::OK();
+  if (!*found) {
+    // migrate from 0.12 origin
+    std::string nw12_origin = ComputeOriginIdentifier(GURL("file://"));
+    const std::string key2 = DatabaseNameKey::Encode(nw12_origin, name);
+    s = GetInt(db_.get(), key2, &metadata->id, found);
+    if (!s.ok() || !*found)
+      return leveldb::Status::OK();
+    scoped_refptr<LevelDBTransaction> transaction =
+      IndexedDBClassFactory::Get()->CreateLevelDBTransaction(db_.get());
+    PutInt(transaction.get(), key, metadata->id);
+    transaction->Commit();
+    LOG(INFO) << "migrated indexed db: " << name;
+  }
 
   s = GetVarInt(db_.get(), DatabaseMetaDataKey::Encode(
                                metadata->id, DatabaseMetaDataKey::USER_VERSION),
diff -r -u --color up/chromium/content/browser/renderer_host/render_process_host_impl.cc nw/chromium/content/browser/renderer_host/render_process_host_impl.cc
--- up/chromium/content/browser/renderer_host/render_process_host_impl.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/browser/renderer_host/render_process_host_impl.cc	2023-02-21 04:37:22.640156598 +0000
@@ -238,9 +238,14 @@
 #define IntToStringType base::IntToString
 #endif
 
+#include "content/nw/src/common/shell_switches.h"
+#include "content/nw/src/nw_content.h"
+
 namespace content {
 namespace {
 
+RenderProcessHost* g_first_host = nullptr;
+
 const char kSiteProcessMapKeyName[] = "content_site_process_map";
 
 #ifdef ENABLE_WEBRTC
@@ -1391,6 +1396,8 @@
   // Propagate the following switches to the renderer command line (along
   // with any associated values) if present in the browser command line.
   static const char* const kSwitchNames[] = {
+    switches::kDisableRAFThrottling,
+    switches::kEnableSpellChecking,
     switches::kAgcStartupMinVolume,
     switches::kAllowLoopbackInPeerConnection,
     switches::kAudioBufferSize,
@@ -2120,6 +2127,8 @@
 // static
 void RenderProcessHostImpl::RegisterHost(int host_id, RenderProcessHost* host) {
   g_all_hosts.Get().AddWithID(host, host_id);
+  if (g_all_hosts.Get().size() == 1)
+    g_first_host = host;
 }
 
 // static
@@ -2130,6 +2139,8 @@
 
   g_all_hosts.Get().Remove(host_id);
 
+  if (g_first_host == host)
+    g_first_host = nullptr;
   // Look up the map of site to process for the given browser_context,
   // in case we need to remove this process from it.  It will be registered
   // under any sites it rendered that use process-per-site mode.
@@ -2178,6 +2189,8 @@
     // If this renderer is not permitted to request this URL, we invalidate the
     // URL.  This prevents us from storing the blocked URL and becoming confused
     // later.
+    if (non_web_url_in_guest && nw::RphGuestFilterURLHook(rph, url))
+      return;
     VLOG(1) << "Blocked URL " << url->spec();
     *url = GURL(url::kAboutBlankURL);
   }
@@ -2299,6 +2312,8 @@
     if (GetContentClient()->browser()->MayReuseHost(iter.GetCurrentValue()) &&
         RenderProcessHostImpl::IsSuitableHost(iter.GetCurrentValue(),
                                               browser_context, site_url)) {
+      if (iter.GetCurrentValue() == g_first_host)
+        return g_first_host;
       suitable_renderers.push_back(iter.GetCurrentValue());
     }
     iter.Advance();
@@ -2306,9 +2321,11 @@
 
   // Now pick a random suitable renderer, if we have any.
   if (!suitable_renderers.empty()) {
-    int suitable_count = static_cast<int>(suitable_renderers.size());
-    int random_index = base::RandInt(0, suitable_count - 1);
-    return suitable_renderers[random_index];
+    //int suitable_count = static_cast<int>(suitable_renderers.size());
+    //int random_index = base::RandInt(0, suitable_count - 1);
+    //NWJS: reuse first renderer, the main process for valid nw.Window.open
+    //callback value. see also app_window_api.cc:416
+    return suitable_renderers[0];
   }
 
   return NULL;
@@ -2377,7 +2394,10 @@
   // appropriate bindings here, because the bindings have not yet been granted.
   std::string site =
       SiteInstance::GetSiteForURL(browser_context, url).possibly_invalid_spec();
-  if (!site.empty())
+  // don't register process when we're opening new_instance window, or
+  // the map slot will be took over and following same-instance window
+  // opening will return null; NWJS#4691
+  if (!site.empty() && nw::PinningRenderer())
     map->RegisterProcess(site, process);
 }
 
diff -r -u --color up/chromium/content/browser/renderer_host/render_widget_host_view_mac.mm nw/chromium/content/browser/renderer_host/render_widget_host_view_mac.mm
--- up/chromium/content/browser/renderer_host/render_widget_host_view_mac.mm	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/browser/renderer_host/render_widget_host_view_mac.mm	2023-02-21 04:37:22.648156675 +0000
@@ -107,6 +107,11 @@
 using blink::WebMouseWheelEvent;
 using blink::WebGestureEvent;
 
+namespace content {
+  extern bool g_support_transparency;
+  extern bool g_force_cpu_draw;
+}
+
 namespace {
 
 // Whether a keyboard event has been reserved by OSX.
@@ -532,9 +537,11 @@
   background_layer_.reset([[CALayer alloc] init]);
   // Set the default color to be white. This is the wrong thing to do, but many
   // UI components expect this view to be opaque.
-  [background_layer_ setBackgroundColor:CGColorGetConstantColor(kCGColorWhite)];
+  bool isOpaque = [cocoa_view_ isOpaque];
+  [background_layer_ setBackgroundColor: (isOpaque || !content::g_support_transparency) ?
+     CGColorGetConstantColor(kCGColorWhite) : CGColorGetConstantColor(kCGColorClear)];
   [cocoa_view_ setLayer:background_layer_];
-  [cocoa_view_ setWantsLayer:YES];
+  [cocoa_view_ setWantsLayer:!content::g_force_cpu_draw];
 
   root_layer_.reset(new ui::Layer(ui::LAYER_SOLID_COLOR));
   delegated_frame_host_.reset(new DelegatedFrameHost(this));
@@ -629,6 +636,8 @@
     browser_compositor_->Unsuspend();
     browser_compositor_state_ = BrowserCompositorActive;
   }
+  if (content::g_support_transparency)
+    root_layer_->GetCompositor()->SetHostHasTransparentBackground(!cocoa_view_.isOpaque);
 }
 
 void RenderWidgetHostViewMac::SuspendBrowserCompositorView() {
@@ -1861,6 +1870,16 @@
   return [super forwardingTargetForSelector:selector];
 }
 
+- (void)drawRect:(NSRect)dirty {
+  if (content::g_force_cpu_draw) {
+    CGContextRef ctx = (CGContextRef)[[NSGraphicsContext currentContext] graphicsPort];
+    CGContextClipToRect(ctx, NSRectToCGRect(dirty));
+    [[self layer] renderInContext:ctx];
+  } else {
+    [super drawRect:dirty];
+  }
+}
+
 - (void)setCanBeKeyView:(BOOL)can {
   canBeKeyView_ = can;
 }
@@ -3444,7 +3463,7 @@
 }
 
 - (BOOL)isOpaque {
-  return opaque_;
+  return content::g_support_transparency ? [super isOpaque] : opaque_;
 }
 
 // "-webkit-app-region: drag | no-drag" is implemented on Mac by excluding
diff -r -u --color up/chromium/content/browser/site_instance_impl.cc nw/chromium/content/browser/site_instance_impl.cc
--- up/chromium/content/browser/site_instance_impl.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/browser/site_instance_impl.cc	2023-02-21 04:37:22.664156831 +0000
@@ -4,6 +4,9 @@
 
 #include "content/browser/site_instance_impl.h"
 
+#include "content/nw/src/nw_content.h"
+#include "extensions/common/constants.h"
+
 #include "content/browser/browsing_instance.h"
 #include "content/browser/child_process_security_policy_impl.h"
 #include "content/browser/frame_host/debug_urls.h"
@@ -83,7 +86,7 @@
     // given site), then look for an existing RenderProcessHost for the site.
     bool use_process_per_site = has_site_ &&
         RenderProcessHost::ShouldUseProcessPerSite(browser_context, site_);
-    if (use_process_per_site) {
+    if (use_process_per_site && nw::PinningRenderer()) {
       process_ = RenderProcessHostImpl::GetProcessHostForSite(browser_context,
                                                               site_);
     }
@@ -321,6 +324,11 @@
     // may also include a port, which we need to drop.
     GURL site = url.GetOrigin();
 
+    //NWJS: chrome-extension://test.foo.com was changed to foo.com
+    //without this
+    if (real_url.SchemeIs(extensions::kExtensionScheme))
+      return site;
+
     // Remove port, if any.
     if (site.has_port()) {
       GURL::Replacements rep;
diff -r -u --color up/chromium/content/browser/web_contents/web_contents_impl.cc nw/chromium/content/browser/web_contents/web_contents_impl.cc
--- up/chromium/content/browser/web_contents/web_contents_impl.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/browser/web_contents/web_contents_impl.cc	2023-02-21 04:37:22.672156909 +0000
@@ -9,6 +9,8 @@
 #include <cmath>
 #include <utility>
 
+#include "content/nw/src/nw_base.h"
+
 #include "base/command_line.h"
 #include "base/lazy_instance.h"
 #include "base/location.h"
@@ -1905,10 +1907,11 @@
     AddDestructionObserver(new_contents);
   }
 
+  nw::SetCurrentNewWinManifest(params.nw_window_manifest);
   if (delegate_) {
     delegate_->WebContentsCreated(
         this, params.opener_render_frame_id, params.frame_name,
-        params.target_url, new_contents);
+        params.target_url, new_contents, params.nw_window_manifest);
   }
 
   if (params.opener_suppressed) {
diff -r -u --color up/chromium/content/browser/webui/url_data_manager_backend.cc nw/chromium/content/browser/webui/url_data_manager_backend.cc
--- up/chromium/content/browser/webui/url_data_manager_backend.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/browser/webui/url_data_manager_backend.cc	2023-02-21 04:37:22.676156948 +0000
@@ -6,6 +6,8 @@
 
 #include <set>
 
+#include "content/nw/src/nw_content.h"
+
 #include "base/bind.h"
 #include "base/command_line.h"
 #include "base/compiler_specific.h"
@@ -399,6 +401,7 @@
   std::vector<std::string> hosts;
   GetContentClient()->
       browser()->GetAdditionalWebUIHostsToIgnoreParititionCheck(&hosts);
+
   if (url.SchemeIs(kChromeUIScheme) &&
       (url.SchemeIs(kChromeUIScheme) ||
        std::find(hosts.begin(), hosts.end(), url.host()) != hosts.end())) {
@@ -415,6 +418,9 @@
     }
   }
 
+  if (nw::CheckStoragePartitionMatches(render_process_id, url))
+    allowed = true;
+
   BrowserThread::PostTask(
       BrowserThread::IO,
       FROM_HERE,
diff -r -u --color up/chromium/content/browser/zygote_host/zygote_communication_linux.cc nw/chromium/content/browser/zygote_host/zygote_communication_linux.cc
--- up/chromium/content/browser/zygote_host/zygote_communication_linux.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/browser/zygote_host/zygote_communication_linux.cc	2023-02-21 04:37:22.676156948 +0000
@@ -4,6 +4,7 @@
 
 #include "content/browser/zygote_host/zygote_communication_linux.h"
 
+#include "content/nw/src/common/shell_switches.h"
 #include <string.h>
 #include <sys/socket.h>
 
@@ -280,6 +281,7 @@
   // to the zygote/renderers.
   // Should this list be obtained from browser_render_process_host.cc?
   static const char* kForwardSwitches[] = {
+      switches::kEnableSpellChecking,
       switches::kAllowSandboxDebugging, switches::kDisableSeccompFilterSandbox,
       switches::kEnableHeapProfiling,
       switches::kEnableLogging,  // Support, e.g., --enable-logging=stderr.
diff -r -u --color up/chromium/content/browser/zygote_host/zygote_host_impl_linux.cc nw/chromium/content/browser/zygote_host/zygote_host_impl_linux.cc
--- up/chromium/content/browser/zygote_host/zygote_host_impl_linux.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/browser/zygote_host/zygote_host_impl_linux.cc	2023-02-21 04:37:22.676156948 +0000
@@ -15,6 +15,8 @@
 #include "sandbox/linux/services/credentials.h"
 #include "sandbox/linux/suid/common/sandbox.h"
 
+#include "content/nw/src/common/shell_switches.h"
+
 namespace content {
 
 // static
@@ -47,6 +49,7 @@
     should_use_namespace_sandbox_ = false;
   }
 
+#if 0
   const bool using_namespace_sandbox = ShouldUseNamespaceSandbox();
   // A non empty sandbox_cmd means we want a SUID sandbox.
   const bool using_suid_sandbox =
@@ -56,7 +59,7 @@
   // sandbox. This is needed beacuse the processes are non-dumpable, so
   // /proc/pid/oom_score_adj can only be written by root.
   use_suid_sandbox_for_adj_oom_score_ = using_suid_sandbox;
-
+#endif
 #if defined(OS_CHROMEOS)
   // Chrome OS has a kernel patch that restricts oom_score_adj. See
   // crbug.com/576409 for details.
diff -r -u --color up/chromium/content/child/child_process.cc nw/chromium/content/child/child_process.cc
--- up/chromium/content/child/child_process.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/child/child_process.cc	2023-02-21 04:37:22.680156987 +0000
@@ -114,7 +114,7 @@
 #if defined(GOOGLE_CHROME_BUILD)
   std::string title = "Google Chrome";
 #else  // CHROMIUM_BUILD
-  std::string title = "Chromium";
+  std::string title = "NWJS";
 #endif  // CHROMIUM_BUILD
   title += " ";
   title += label;  // makes attaching to process easier
diff -r -u --color up/chromium/content/child/child_thread_impl.cc nw/chromium/content/child/child_thread_impl.cc
--- up/chromium/content/child/child_thread_impl.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/child/child_thread_impl.cc	2023-02-21 04:37:22.680156987 +0000
@@ -435,7 +435,7 @@
         new base::PowerMonitor(std::move(power_monitor_source)));
   }
 
-#if defined(OS_POSIX)
+#if 0  // for supporting 'exit' event of process
   // Check that --process-type is specified so we don't do this in unit tests
   // and single-process mode.
   if (base::CommandLine::ForCurrentProcess()->HasSwitch(switches::kProcessType))
diff -r -u --color up/chromium/content/common/dom_storage/dom_storage_map.cc nw/chromium/content/common/dom_storage/dom_storage_map.cc
--- up/chromium/content/common/dom_storage/dom_storage_map.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/common/dom_storage/dom_storage_map.cc	2023-02-21 04:37:22.700157182 +0000
@@ -16,10 +16,14 @@
 
 }  // namespace
 
+size_t DOMStorageMap::quota_override_ = 0;
+
 DOMStorageMap::DOMStorageMap(size_t quota)
     : bytes_used_(0),
       quota_(quota) {
   ResetKeyIterator();
+  if (quota_override_)
+    quota_ = quota_override_;
 }
 
 DOMStorageMap::~DOMStorageMap() {}
diff -r -u --color up/chromium/content/common/dom_storage/dom_storage_map.h nw/chromium/content/common/dom_storage/dom_storage_map.h
--- up/chromium/content/common/dom_storage/dom_storage_map.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/common/dom_storage/dom_storage_map.h	2023-02-21 04:37:22.700157182 +0000
@@ -24,6 +24,7 @@
     : public base::RefCountedThreadSafe<DOMStorageMap> {
  public:
   explicit DOMStorageMap(size_t quota);
+  static void SetQuotaOverride(size_t quota) {quota_override_ = quota; }
 
   unsigned Length() const;
   base::NullableString16 Key(unsigned index);
@@ -46,7 +47,7 @@
 
   size_t bytes_used() const { return bytes_used_; }
   size_t quota() const { return quota_; }
-  void set_quota(size_t quota) { quota_ = quota; }
+  void set_quota(size_t quota) { quota_ = quota > quota_override_ ? quota : quota_override_; }
 
   static size_t CountBytes(const DOMStorageValuesMap& values);
 
@@ -61,6 +62,7 @@
   unsigned last_key_index_;
   size_t bytes_used_;
   size_t quota_;
+  static size_t quota_override_;
 };
 
 }  // namespace content
diff -r -u --color up/chromium/content/common/sandbox_linux/sandbox_linux.cc nw/chromium/content/common/sandbox_linux/sandbox_linux.cc
--- up/chromium/content/common/sandbox_linux/sandbox_linux.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/common/sandbox_linux/sandbox_linux.cc	2023-02-21 04:37:22.732157493 +0000
@@ -119,9 +119,11 @@
 }
 
 LinuxSandbox::~LinuxSandbox() {
+#if 0
   if (pre_initialized_) {
     CHECK(initialize_sandbox_ran_);
   }
+#endif
 }
 
 LinuxSandbox* LinuxSandbox::GetInstance() {
diff -r -u --color up/chromium/content/common/user_agent.cc nw/chromium/content/common/user_agent.cc
--- up/chromium/content/common/user_agent.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/common/user_agent.cc	2023-02-21 04:37:22.732157493 +0000
@@ -171,6 +171,16 @@
   return BuildUserAgentFromOSAndProduct(os_info, product);
 }
 
+std::string BuildOSInfo() {
+  std::string os_info;
+  base::StringAppendF(
+      &os_info,
+      "%s%s",
+      getUserAgentPlatform().c_str(),
+      BuildOSCpuInfo().c_str());
+  return os_info;
+}
+
 std::string BuildUserAgentFromProductAndExtraOSInfo(
     const std::string& product,
     const std::string& extra_os_info) {
diff -r -u --color up/chromium/content/common/view_messages.h nw/chromium/content/common/view_messages.h
--- up/chromium/content/common/view_messages.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/common/view_messages.h	2023-02-21 04:37:22.736157532 +0000
@@ -232,6 +232,8 @@
   IPC_STRUCT_TRAITS_MEMBER(capture)
 #endif
   IPC_STRUCT_TRAITS_MEMBER(requestor)
+  IPC_STRUCT_TRAITS_MEMBER(initial_path)
+IPC_STRUCT_TRAITS_MEMBER(extract_directory)
 IPC_STRUCT_TRAITS_END()
 
 IPC_STRUCT_TRAITS_BEGIN(content::RendererPreferences)
@@ -283,6 +285,8 @@
   IPC_STRUCT_TRAITS_MEMBER(arrow_bitmap_width_horizontal_scroll_bar_in_dips)
 #endif
   IPC_STRUCT_TRAITS_MEMBER(default_font_size)
+  IPC_STRUCT_TRAITS_MEMBER(nw_inject_js_doc_start)
+  IPC_STRUCT_TRAITS_MEMBER(nw_inject_js_doc_end)
 IPC_STRUCT_TRAITS_END()
 
 IPC_STRUCT_TRAITS_BEGIN(content::WebPluginGeometry)
@@ -352,6 +356,8 @@
   // separately from |features| above because we cannot serialize WebStrings
   // over IPC.
   IPC_STRUCT_MEMBER(std::vector<base::string16>, additional_features)
+
+  IPC_STRUCT_MEMBER(base::string16, nw_window_manifest)
 IPC_STRUCT_END()
 
 IPC_STRUCT_BEGIN(ViewHostMsg_CreateWindow_Reply)
diff -r -u --color up/chromium/content/content_app.gypi nw/chromium/content/content_app.gypi
--- up/chromium/content/content_app.gypi	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/content_app.gypi	2023-02-21 04:37:22.736157532 +0000
@@ -16,6 +16,7 @@
     '../ui/gfx/gfx.gyp:gfx',
     '../ui/gfx/gfx.gyp:gfx_geometry',
     'content_common_mojo_bindings.gyp:content_common_mojo_bindings',
+    '../chrome/chrome.gyp:nw_base',
   ],
   'sources': [
     'app/android/app_jni_registrar.cc',
diff -r -u --color up/chromium/content/content_browser.gypi nw/chromium/content/content_browser.gypi
--- up/chromium/content/content_browser.gypi	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/content_browser.gypi	2023-02-21 04:37:22.736157532 +0000
@@ -71,6 +71,7 @@
     'browser/service_worker/service_worker_proto.gyp:service_worker_proto',
     'browser/speech/proto/speech_proto.gyp:speech_proto',
     'content_common_mojo_bindings.gyp:content_common_mojo_bindings',
+    '../chrome/chrome.gyp:nw_base',
   ],
   'export_dependent_settings': [
     '../mojo/mojo_public.gyp:mojo_cpp_bindings',
diff -r -u --color up/chromium/content/content_renderer.gypi nw/chromium/content/content_renderer.gypi
--- up/chromium/content/content_renderer.gypi	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/content_renderer.gypi	2023-02-21 04:37:22.736157532 +0000
@@ -49,6 +49,7 @@
     '../ui/surface/surface.gyp:surface',
     '../v8/tools/gyp/v8.gyp:v8',
     'content_common_mojo_bindings.gyp:content_common_mojo_bindings',
+    #'../third_party/node/node.gyp:node',
   ],
   'include_dirs': [
     '..',
@@ -98,6 +99,10 @@
       'public/renderer/plugin_instance_throttler.h',
     ],
     'private_renderer_sources': [
+      '<(DEPTH)/base/message_loop/message_pump_uv.cc',
+      '<(DEPTH)/base/message_loop/message_pump_uv.h',
+      '<(DEPTH)/base/message_loop/message_pumpuv_mac.mm',
+      '<(DEPTH)/base/message_loop/message_pumpuv_mac.h',
       'renderer/accessibility/blink_ax_enum_conversion.cc',
       'renderer/accessibility/blink_ax_enum_conversion.h',
       'renderer/accessibility/blink_ax_tree_source.cc',
@@ -800,6 +805,8 @@
         'common/process_watcher_posix.cc',
         'renderer/webscrollbarbehavior_impl_gtkoraura.cc',
         'renderer/webscrollbarbehavior_impl_gtkoraura.h',
+        '<(DEPTH)/base/message_loop/message_pump_uv.cc',
+        '<(DEPTH)/base/message_loop/message_pump_uv.h',
       ],
       'sources': [
         'renderer/external_popup_menu.cc',
diff -r -u --color up/chromium/content/ppapi_plugin/ppapi_plugin_main.cc nw/chromium/content/ppapi_plugin/ppapi_plugin_main.cc
--- up/chromium/content/ppapi_plugin/ppapi_plugin_main.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/ppapi_plugin/ppapi_plugin_main.cc	2023-02-21 04:37:22.740157571 +0000
@@ -130,7 +130,7 @@
     GetContentClient()->plugin()->PreSandboxInitialization();
 
 #if defined(OS_LINUX)
-  LinuxSandbox::InitializeSandbox();
+  //LinuxSandbox::InitializeSandbox();
 #endif
 
   ChildProcess ppapi_process;
diff -r -u --color up/chromium/content/public/browser/child_process_security_policy.h nw/chromium/content/public/browser/child_process_security_policy.h
--- up/chromium/content/public/browser/child_process_security_policy.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/public/browser/child_process_security_policy.h	2023-02-21 04:37:22.760157766 +0000
@@ -41,6 +41,7 @@
   // Returns true iff |scheme| has been registered as a web-safe scheme.
   virtual bool IsWebSafeScheme(const std::string& scheme) = 0;
 
+  virtual void GrantAll(int child_id) = 0;
   // This permission grants only read access to a file.
   // Whenever the user picks a file from a <input type="file"> element, the
   // browser should call this function to grant the child process the capability
diff -r -u --color up/chromium/content/public/browser/web_contents_delegate.h nw/chromium/content/public/browser/web_contents_delegate.h
--- up/chromium/content/public/browser/web_contents_delegate.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/public/browser/web_contents_delegate.h	2023-02-21 04:37:22.768157844 +0000
@@ -319,7 +319,8 @@
                                   int opener_render_frame_id,
                                   const std::string& frame_name,
                                   const GURL& target_url,
-                                  WebContents* new_contents) {}
+                                  WebContents* new_contents,
+                                  const base::string16& nw_window_manifest) {}
 
   // Notification that the tab is hung.
   virtual void RendererUnresponsive(WebContents* source) {}
diff -r -u --color up/chromium/content/public/common/content_switches.cc nw/chromium/content/public/common/content_switches.cc
--- up/chromium/content/public/common/content_switches.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/public/common/content_switches.cc	2023-02-21 04:37:22.772157883 +0000
@@ -146,8 +146,15 @@
 // then the GPU process won't launch.
 const char kDisableGpu[]                    = "disable-gpu";
 
+// Disable apps transparency support
+const char kDisableTransparency[]           = "disable-transparency";
+
+// Force CPU drawing, needed to enable click through on transparent window
+const char kForceCpuDraw[]                  = "force-cpu-draw";
+
 // Prevent the compositor from using its GPU implementation.
 const char kDisableGpuCompositing[]         = "disable-gpu-compositing";
+const char kDisableRAFThrottling[]          = "disable-raf-throttling";
 
 // Disable proactive early init of GPU process.
 const char kDisableGpuEarlyInit[]           = "disable-gpu-early-init";
diff -r -u --color up/chromium/content/public/common/content_switches.h nw/chromium/content/public/common/content_switches.h
--- up/chromium/content/public/common/content_switches.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/public/common/content_switches.h	2023-02-21 04:37:22.772157883 +0000
@@ -54,7 +54,10 @@
 CONTENT_EXPORT extern const char kDisableGestureRequirementForMediaPlayback[];
 CONTENT_EXPORT extern const char kDisableGestureRequirementForPresentation[];
 CONTENT_EXPORT extern const char kDisableGpu[];
+CONTENT_EXPORT extern const char kDisableTransparency[];
+CONTENT_EXPORT extern const char kForceCpuDraw[];
 CONTENT_EXPORT extern const char kDisableGpuCompositing[];
+CONTENT_EXPORT extern const char kDisableRAFThrottling[];
 CONTENT_EXPORT extern const char kDisableGpuEarlyInit[];
 CONTENT_EXPORT extern const char kDisableGpuMemoryBufferCompositorResources[];
 CONTENT_EXPORT extern const char kDisableGpuMemoryBufferVideoFrames[];
diff -r -u --color up/chromium/content/public/common/file_chooser_params.h nw/chromium/content/public/common/file_chooser_params.h
--- up/chromium/content/public/common/file_chooser_params.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/public/common/file_chooser_params.h	2023-02-21 04:37:22.772157883 +0000
@@ -62,6 +62,9 @@
   // initiated by a document. Note that this value should be considered
   // untrustworthy since it is specified by the sandbox and not validated.
   GURL requestor;
+
+  base::FilePath initial_path;
+  bool extract_directory;
 };
 
 }  // namespace content
diff -r -u --color up/chromium/content/public/common/renderer_preferences.h nw/chromium/content/public/common/renderer_preferences.h
--- up/chromium/content/public/common/renderer_preferences.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/public/common/renderer_preferences.h	2023-02-21 04:37:22.772157883 +0000
@@ -174,6 +174,8 @@
 
   // The default font size used for rendering on Linux.
   int default_font_size;
+  std::string nw_inject_js_doc_start;
+  std::string nw_inject_js_doc_end;
 };
 
 }  // namespace content
diff -r -u --color up/chromium/content/public/common/user_agent.h nw/chromium/content/public/common/user_agent.h
--- up/chromium/content/public/common/user_agent.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/public/common/user_agent.h	2023-02-21 04:37:22.776157922 +0000
@@ -23,6 +23,8 @@
 // Builds a User-agent compatible string that describes the OS and CPU type.
 CONTENT_EXPORT std::string BuildOSCpuInfo();
 
+CONTENT_EXPORT std::string BuildOSInfo();
+
 // Helper function to generate a full user agent string from a short
 // product name.
 CONTENT_EXPORT std::string BuildUserAgentFromProduct(
diff -r -u --color up/chromium/content/public/common/web_preferences.cc nw/chromium/content/public/common/web_preferences.cc
--- up/chromium/content/public/common/web_preferences.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/public/common/web_preferences.cc	2023-02-21 04:37:22.776157922 +0000
@@ -164,13 +164,13 @@
       pepper_accelerated_video_decode_enabled(false),
       animation_policy(IMAGE_ANIMATION_POLICY_ALLOWED),
       user_gesture_required_for_presentation(true),
+      double_tap_to_zoom_enabled(false),
 #if defined(OS_ANDROID)
       text_autosizing_enabled(true),
       font_scale_factor(1.0f),
       device_scale_adjustment(1.0f),
       force_enable_zoom(false),
       fullscreen_supported(true),
-      double_tap_to_zoom_enabled(true),
       user_gesture_required_for_media_playback(true),
       support_deprecated_target_density_dpi(false),
       use_legacy_background_size_shorthand_behavior(false),
diff -r -u --color up/chromium/content/public/common/web_preferences.h nw/chromium/content/public/common/web_preferences.h
--- up/chromium/content/public/common/web_preferences.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/public/common/web_preferences.h	2023-02-21 04:37:22.776157922 +0000
@@ -192,13 +192,13 @@
 
   bool user_gesture_required_for_presentation;
 
+  bool double_tap_to_zoom_enabled;
 #if defined(OS_ANDROID)
   bool text_autosizing_enabled;
   float font_scale_factor;
   float device_scale_adjustment;
   bool force_enable_zoom;
   bool fullscreen_supported;
-  bool double_tap_to_zoom_enabled;
   bool user_gesture_required_for_media_playback;
   GURL default_video_poster_url;
   bool support_deprecated_target_density_dpi;
diff -r -u --color up/chromium/content/public/renderer/content_renderer_client.h nw/chromium/content/public/renderer/content_renderer_client.h
--- up/chromium/content/public/renderer/content_renderer_client.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/public/renderer/content_renderer_client.h	2023-02-21 04:37:22.776157922 +0000
@@ -32,6 +32,7 @@
 
 namespace blink {
 class WebAppBannerClient;
+class WebString;
 class WebAudioDevice;
 class WebClipboard;
 class WebFrame;
@@ -78,6 +79,12 @@
 // Embedder API for participating in renderer logic.
 class CONTENT_EXPORT ContentRendererClient {
  public:
+  virtual void willHandleNavigationPolicy(RenderView* rv,
+                                          blink::WebFrame* frame,
+                                          const blink::WebURLRequest& request,
+                                          blink::WebNavigationPolicy* policy,
+                                          blink::WebString* manifest,
+                                          bool new_win) {}
   virtual ~ContentRendererClient() {}
 
   // Notifies us that the RenderThread has been created.
diff -r -u --color up/chromium/content/renderer/in_process_renderer_thread.cc nw/chromium/content/renderer/in_process_renderer_thread.cc
--- up/chromium/content/renderer/in_process_renderer_thread.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/renderer/in_process_renderer_thread.cc	2023-02-21 04:37:22.792158077 +0000
@@ -9,6 +9,8 @@
 #include "content/renderer/render_process_impl.h"
 #include "content/renderer/render_thread_impl.h"
 
+#include "content/nw/src/nw_content.h"
+
 #if defined(OS_ANDROID)
 #include "base/android/jni_android.h"
 #endif
@@ -33,6 +35,7 @@
   base::android::AttachCurrentThreadWithName(thread_name());
 #endif
   render_process_.reset(new RenderProcessImpl());
+  nw::LoadNodeSymbols();
   RenderThreadImpl::Create(params_);
 }
 
diff -r -u --color up/chromium/content/renderer/pepper/content_decryptor_delegate.cc nw/chromium/content/renderer/pepper/content_decryptor_delegate.cc
--- up/chromium/content/renderer/pepper/content_decryptor_delegate.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/renderer/pepper/content_decryptor_delegate.cc	2023-02-21 04:37:22.820158350 +0000
@@ -1072,7 +1072,7 @@
 
   Decryptor::AudioDecodeCB audio_decode_cb = audio_decode_cb_.ResetAndReturn();
 
-  const Decryptor::AudioFrames empty_frames;
+  const Decryptor::AudioFrames empty_frames = Decryptor::AudioFrames();
 
   Decryptor::Status status =
       PpDecryptResultToMediaDecryptorStatus(sample_info->result);
@@ -1284,7 +1284,7 @@
     video_decrypt_cb_.ResetAndReturn().Run(media::Decryptor::kError, NULL);
 
   if (!audio_decode_cb_.is_null()) {
-    const media::Decryptor::AudioFrames empty_frames;
+    const media::Decryptor::AudioFrames empty_frames = media::Decryptor::AudioFrames();
     audio_decode_cb_.ResetAndReturn().Run(media::Decryptor::kError,
                                           empty_frames);
   }
diff -r -u --color up/chromium/content/renderer/render_frame_impl.cc nw/chromium/content/renderer/render_frame_impl.cc
--- up/chromium/content/renderer/render_frame_impl.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/renderer/render_frame_impl.cc	2023-02-21 04:37:22.832158467 +0000
@@ -241,6 +241,8 @@
 #include "content/renderer/vr/vr_dispatcher.h"
 #endif
 
+#include "content/nw/src/nw_content.h"
+
 using blink::WebContentDecryptionModule;
 using blink::WebContextMenuData;
 using blink::WebCString;
@@ -779,6 +781,16 @@
 
 }  // namespace
 
+void RenderFrameImpl::willHandleNavigationPolicy(
+                                                blink::WebFrame* frame,
+                                                const blink::WebURLRequest& request,
+                                                blink::WebNavigationPolicy* policy,
+                                                blink::WebString* manifest,
+                                                bool new_win) {
+  GetContentClient()->renderer()
+    ->willHandleNavigationPolicy(render_view_.get(), frame, request, policy, manifest, new_win);
+}
+
 // static
 RenderFrameImpl* RenderFrameImpl::Create(RenderViewImpl* render_view,
                                          int32_t routing_id) {
@@ -4214,6 +4226,10 @@
 }
 
 blink::WebString RenderFrameImpl::userAgentOverride() {
+  std::string user_agent;
+  if (nw::GetUserAgentFromManifest(&user_agent))
+    return WebString::fromUTF8(user_agent);
+
   if (!render_view_->webview() || !render_view_->webview()->mainFrame() ||
       render_view_->renderer_preferences_.user_agent_override.empty()) {
     return blink::WebString();
diff -r -u --color up/chromium/content/renderer/render_frame_impl.h nw/chromium/content/renderer/render_frame_impl.h
--- up/chromium/content/renderer/render_frame_impl.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/renderer/render_frame_impl.h	2023-02-21 04:37:22.832158467 +0000
@@ -626,6 +626,12 @@
       const blink::WebCString& data,
       blink::WebFrameSerializerClient::FrameSerializationStatus status)
       override;
+  void willHandleNavigationPolicy(
+                                          blink::WebFrame*,
+                                          const blink::WebURLRequest&,
+                                          blink::WebNavigationPolicy*,
+                                          blink::WebString* manifest = NULL,
+                                          bool new_win = true) override;
 
   // Make this frame show an empty, unscriptable page.
   // TODO(nasko): Remove this method once swapped out state is no longer used.
diff -r -u --color up/chromium/content/renderer/render_view_impl.cc nw/chromium/content/renderer/render_view_impl.cc
--- up/chromium/content/renderer/render_view_impl.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/renderer/render_view_impl.cc	2023-02-21 04:37:22.836158506 +0000
@@ -1073,6 +1073,7 @@
       prefs.default_minimum_page_scale_factor,
       prefs.default_maximum_page_scale_factor);
 
+  settings->setDoubleTapToZoomEnabled(prefs.double_tap_to_zoom_enabled);
 #if defined(OS_ANDROID)
   settings->setAllowCustomScrollbarInMainFrame(false);
   settings->setTextAutosizingEnabled(prefs.text_autosizing_enabled);
@@ -1081,7 +1082,6 @@
   settings->setFullscreenSupported(prefs.fullscreen_supported);
   web_view->setIgnoreViewportTagScaleLimits(prefs.force_enable_zoom);
   settings->setAutoZoomFocusedNodeToLegibleScale(true);
-  settings->setDoubleTapToZoomEnabled(prefs.double_tap_to_zoom_enabled);
   settings->setMediaControlsOverlayPlayButtonEnabled(true);
   settings->setMediaPlaybackRequiresUserGesture(
       prefs.user_gesture_required_for_media_playback);
@@ -1129,7 +1129,7 @@
   settings->setShowContextMenuOnMouseUp(prefs.context_menu_on_mouse_up);
 
 #if defined(OS_MACOSX)
-  settings->setDoubleTapToZoomEnabled(true);
+  //settings->setDoubleTapToZoomEnabled(true);
   web_view->setMaximumLegibleScale(prefs.default_maximum_page_scale_factor);
 #endif
 }
@@ -1604,7 +1604,8 @@
                                     const WebWindowFeatures& features,
                                     const WebString& frame_name,
                                     WebNavigationPolicy policy,
-                                    bool suppress_opener) {
+                                    bool suppress_opener,
+                                    WebString* manifest) {
   ViewHostMsg_CreateWindow_Params params;
   params.opener_id = routing_id();
   params.user_gesture = WebUserGestureIndicator::isProcessingUserGesture();
@@ -1646,6 +1647,7 @@
     params.referrer = GetReferrerFromRequest(creator, request);
   }
   params.features = features;
+  params.nw_window_manifest = *manifest;
 
   for (size_t i = 0; i < features.additionalFeatures.size(); ++i)
     params.additional_features.push_back(features.additionalFeatures[i]);
@@ -1828,6 +1830,8 @@
   ipc_params.capture = params.useMediaCapture;
 #endif
   ipc_params.requestor = params.requestor;
+  ipc_params.initial_path = blink::WebStringToFilePath(params.initialPath);
+  ipc_params.extract_directory = params.extractDirectory;
 
   return ScheduleFileChooser(ipc_params, chooser_completion);
 }
diff -r -u --color up/chromium/content/renderer/render_view_impl.h nw/chromium/content/renderer/render_view_impl.h
--- up/chromium/content/renderer/render_view_impl.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/renderer/render_view_impl.h	2023-02-21 04:37:22.836158506 +0000
@@ -353,7 +353,8 @@
                              const blink::WebWindowFeatures& features,
                              const blink::WebString& frame_name,
                              blink::WebNavigationPolicy policy,
-                             bool suppress_opener) override;
+                             bool suppress_opener,
+                             blink::WebString* manifest) override;
   blink::WebWidget* createPopupMenu(blink::WebPopupType popup_type) override;
   blink::WebStorageNamespace* createSessionStorageNamespace() override;
   void printPage(blink::WebLocalFrame* frame) override;
diff -r -u --color up/chromium/content/renderer/render_widget.cc nw/chromium/content/renderer/render_widget.cc
--- up/chromium/content/renderer/render_widget.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/renderer/render_widget.cc	2023-02-21 04:37:22.836158506 +0000
@@ -6,6 +6,8 @@
 
 #include <utility>
 
+#include "content/nw/src/nw_content.h"
+
 #include "base/auto_reset.h"
 #include "base/bind.h"
 #include "base/command_line.h"
@@ -613,6 +615,8 @@
 }
 
 void RenderWidget::OnWasHidden() {
+  if (nw::RenderWidgetWasHiddenHook(this))
+    return;
   TRACE_EVENT0("renderer", "RenderWidget::OnWasHidden");
   // Go into a mode where we stop generating paint and scrolling events.
   SetHidden(true);
diff -r -u --color up/chromium/content/renderer/renderer_blink_platform_impl.cc nw/chromium/content/renderer/renderer_blink_platform_impl.cc
--- up/chromium/content/renderer/renderer_blink_platform_impl.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/renderer/renderer_blink_platform_impl.cc	2023-02-21 04:37:22.836158506 +0000
@@ -168,6 +168,14 @@
 
 namespace content {
 
+// Switch to enable / disable code for window's transparency
+extern bool g_support_transparency;
+bool g_support_transparency = true;
+
+// Switch to force cpu drawing, is used to enable click through on alpha pixels
+extern bool g_force_cpu_draw;
+bool g_force_cpu_draw = false;
+
 namespace {
 
 bool g_sandbox_enabled = true;
diff -r -u --color up/chromium/content/renderer/renderer_main.cc nw/chromium/content/renderer/renderer_main.cc
--- up/chromium/content/renderer/renderer_main.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/content/renderer/renderer_main.cc	2023-02-21 04:37:22.836158506 +0000
@@ -34,6 +34,7 @@
 #include "content/renderer/renderer_main_platform_delegate.h"
 #include "third_party/skia/include/core/SkGraphics.h"
 #include "ui/base/ui_base_switches.h"
+#include "content/nw/src/nw_content.h"
 
 #if defined(OS_ANDROID)
 #include "base/android/library_loader/library_loader_hooks.h"
@@ -46,6 +47,7 @@
 
 #include "base/mac/scoped_nsautorelease_pool.h"
 #include "base/message_loop/message_pump_mac.h"
+#include "base/message_loop/message_pumpuv_mac.h"
 #include "third_party/WebKit/public/web/WebView.h"
 #endif  // OS_MACOSX
 
@@ -95,6 +97,11 @@
 
   MojoShellConnectionImpl::Create();
 
+  bool nwjs = parsed_command_line.HasSwitch(switches::kNWJS);
+
+  if (nwjs)
+    nw::LoadNodeSymbols();
+
 #if defined(OS_MACOSX)
   base::mac::ScopedNSAutoreleasePool* pool = parameters.autorelease_pool;
 #endif  // OS_MACOSX
@@ -135,12 +142,25 @@
   // As long as scrollbars on Mac are painted with Cocoa, the message pump
   // needs to be backed by a Foundation-level loop to process NSTimers. See
   // http://crbug.com/306348#c24 for details.
-  scoped_ptr<base::MessagePump> pump(new base::MessagePumpNSRunLoop());
+  base::MessagePump* p;
+  if (nwjs) {
+    p = new base::MessagePumpUVNSRunLoop();
+  } else
+    p = new base::MessagePumpNSRunLoop();
+  scoped_ptr<base::MessagePump> pump(p);
   scoped_ptr<base::MessageLoop> main_message_loop(
       new base::MessageLoop(std::move(pump)));
 #else
-  // The main message loop of the renderer services doesn't have IO or UI tasks.
-  scoped_ptr<base::MessageLoop> main_message_loop(new base::MessageLoop());
+  // The main message loop of the renderer services doesn't have IO or
+  // UI tasks.
+  base::MessageLoop* msg_loop;
+  if (nwjs) {
+    scoped_ptr<base::MessagePump> pump_uv(new base::MessagePumpUV());
+    msg_loop = new base::MessageLoop(std::move(pump_uv));
+  } else
+    msg_loop = new base::MessageLoop(base::MessageLoop::TYPE_DEFAULT);
+
+  scoped_ptr<base::MessageLoop> main_message_loop(msg_loop);
 #endif
 
   base::PlatformThread::SetName("CrRendererMain");
diff -r -u --color up/chromium/extensions/browser/api/app_current_window_internal/app_current_window_internal_api.cc nw/chromium/extensions/browser/api/app_current_window_internal/app_current_window_internal_api.cc
--- up/chromium/extensions/browser/api/app_current_window_internal/app_current_window_internal_api.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/api/app_current_window_internal/app_current_window_internal_api.cc	2023-02-21 04:37:23.040160492 +0000
@@ -26,6 +26,7 @@
 namespace Show = app_current_window_internal::Show;
 namespace SetBounds = app_current_window_internal::SetBounds;
 namespace SetSizeConstraints = app_current_window_internal::SetSizeConstraints;
+namespace SetResizable = app_current_window_internal::SetResizable;
 namespace SetIcon = app_current_window_internal::SetIcon;
 namespace SetShape = app_current_window_internal::SetShape;
 namespace SetAlwaysOnTop = app_current_window_internal::SetAlwaysOnTop;
@@ -256,6 +257,16 @@
   return true;
 }
 
+bool AppCurrentWindowInternalSetResizableFunction::RunWithWindow(
+    AppWindow* window) {
+  scoped_ptr<SetResizable::Params> params(
+      SetResizable::Params::Create(*args_));
+  CHECK(params.get());
+  window->GetBaseWindow()->SetResizable(params->flag);
+  window->OnNativeWindowChanged();
+  return true;
+}
+
 bool AppCurrentWindowInternalSetSizeConstraintsFunction::RunWithWindow(
     AppWindow* window) {
   scoped_ptr<SetSizeConstraints::Params> params(
diff -r -u --color up/chromium/extensions/browser/api/app_current_window_internal/app_current_window_internal_api.h nw/chromium/extensions/browser/api/app_current_window_internal/app_current_window_internal_api.h
--- up/chromium/extensions/browser/api/app_current_window_internal/app_current_window_internal_api.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/api/app_current_window_internal/app_current_window_internal_api.h	2023-02-21 04:37:23.040160492 +0000
@@ -141,6 +141,16 @@
   bool RunWithWindow(AppWindow* window) override;
 };
 
+class AppCurrentWindowInternalSetResizableFunction
+    : public AppCurrentWindowInternalExtensionFunction {
+ public:
+  DECLARE_EXTENSION_FUNCTION("app.currentWindowInternal.setResizable",
+                             UNKNOWN)
+ protected:
+  ~AppCurrentWindowInternalSetResizableFunction() override {}
+  bool RunWithWindow(AppWindow* window) override;
+};
+
 class AppCurrentWindowInternalSetIconFunction
     : public AppCurrentWindowInternalExtensionFunction {
  public:
diff -r -u --color up/chromium/extensions/browser/api/app_window/app_window_api.cc nw/chromium/extensions/browser/api/app_window/app_window_api.cc
--- up/chromium/extensions/browser/api/app_window/app_window_api.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/api/app_window/app_window_api.cc	2023-02-21 04:37:23.040160492 +0000
@@ -35,9 +35,15 @@
 #include "ui/gfx/geometry/rect.h"
 #include "url/gurl.h"
 
+#include "content/nw/src/nw_base.h"
+#include "content/nw/src/nw_content.h"
+
 namespace app_window = extensions::api::app_window;
 namespace Create = app_window::Create;
 
+namespace content {
+  extern bool g_support_transparency;
+}
 namespace extensions {
 
 namespace app_window_constants {
@@ -52,8 +58,8 @@
     "The $1 property cannot be specified for both inner and outer bounds.";
 const char kAlwaysOnTopPermission[] =
     "The \"app.window.alwaysOnTop\" permission is required.";
-const char kInvalidUrlParameter[] =
-    "The URL used for window creation must be local for security reasons.";
+// const char kInvalidUrlParameter[] =
+//     "The URL used for window creation must be local for security reasons.";
 const char kAlphaEnabledWrongChannel[] =
     "The alphaEnabled option requires dev channel or newer.";
 const char kAlphaEnabledMissingPermission[] =
@@ -137,6 +143,10 @@
   // path.
   // TODO(devlin): Investigate if this is still used. If not, kill it dead!
   GURL absolute = GURL(params->url);
+
+  if (absolute.has_scheme())
+    url = absolute;
+#if 0
   if (absolute.has_scheme()) {
     if (extension()->location() == Manifest::COMPONENT) {
       url = absolute;
@@ -146,13 +156,27 @@
       return false;
     }
   }
-
+#endif
   // TODO(jeremya): figure out a way to pass the opening WebContents through to
   // AppWindow::Create so we can set the opener at create time rather than
   // with a hack in AppWindowCustomBindings::GetView().
   AppWindow::CreateParams create_params;
   app_window::CreateWindowOptions* options = params->options.get();
   if (options) {
+    if (options->title.get())
+      create_params.title = *options->title;
+
+    if (options->icon.get()) {
+      base::ThreadRestrictions::ScopedAllowIO allow_io;
+      gfx::Image app_icon;
+      nw::Package* package = nw::package();
+      if (nw::GetPackageImage(package,
+                              base::FilePath::FromUTF8Unsafe(*options->icon),
+                              &app_icon)) {
+        create_params.icon = app_icon;
+      }
+    }
+
     if (options->id.get()) {
       // TODO(mek): use URL if no id specified?
       // Limit length of id to 256 characters.
@@ -289,6 +313,8 @@
 #else
       // Transparency is only supported on Aura.
       // Fallback to creating an opaque window (by ignoring alphaEnabled).
+      if (content::g_support_transparency)
+        create_params.alpha_enabled = *options->alpha_enabled;
 #endif
     }
 
@@ -317,6 +343,22 @@
           *options->visible_on_all_workspaces.get();
     }
 
+    if (options->show_in_taskbar.get()) {
+      create_params.show_in_taskbar = *options->show_in_taskbar.get();
+    }
+
+    if (options->new_instance.get()) {
+      create_params.new_instance = *options->new_instance.get();
+    }
+    
+    if (options->inject_js_start.get()) {
+      create_params.inject_js_start =
+          *options->inject_js_start.get();
+    }
+    if (options->inject_js_end.get()) {
+      create_params.inject_js_end =
+          *options->inject_js_end.get();
+    }
     if (options->type != app_window::WINDOW_TYPE_PANEL) {
       switch (options->state) {
         case app_window::STATE_NONE:
@@ -335,18 +377,39 @@
     }
   }
 
+  switch (options->position) {
+  case app_window::POSITION_NONE:
+    create_params.position = extensions::AppWindow::POS_NONE;
+    break;
+  case app_window::POSITION_CENTER:
+    create_params.position = extensions::AppWindow::POS_CENTER;
+    break;
+  case app_window::POSITION_MOUSE:
+    create_params.position = extensions::AppWindow::POS_MOUSE;
+    break;
+  }
+
   create_params.creator_process_id =
       render_frame_host()->GetProcess()->GetID();
 
+  if (create_params.new_instance)
+    nw::SetPinningRenderer(false);
+
   AppWindow* app_window =
       AppWindowClient::Get()->CreateAppWindow(browser_context(), extension());
   app_window->Init(url, new AppWindowContentsImpl(app_window), create_params);
 
+  if (create_params.new_instance)
+    nw::SetPinningRenderer(true);
+
   if (ExtensionsBrowserClient::Get()->IsRunningInForcedAppMode() &&
       !app_window->is_ime_window()) {
     app_window->ForcedFullscreen();
   }
 
+  if (options && options->kiosk.get())
+    app_window->ForcedFullscreen();
+  
   content::RenderFrameHost* created_frame =
       app_window->web_contents()->GetMainFrame();
   int frame_id = MSG_ROUTING_NONE;
diff -r -u --color up/chromium/extensions/browser/api/guest_view/web_view/web_view_internal_api.cc nw/chromium/extensions/browser/api/guest_view/web_view/web_view_internal_api.cc
--- up/chromium/extensions/browser/api/guest_view/web_view/web_view_internal_api.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/api/guest_view/web_view/web_view_internal_api.cc	2023-02-21 04:37:23.048160570 +0000
@@ -762,6 +762,24 @@
   return successful;
 }
 
+WebViewInternalShowDevToolsFunction::WebViewInternalShowDevToolsFunction() {
+}
+
+WebViewInternalShowDevToolsFunction::~WebViewInternalShowDevToolsFunction() {
+}
+
+bool WebViewInternalShowDevToolsFunction::RunAsyncSafe(WebViewGuest* guest) {
+  scoped_ptr<web_view_internal::ShowDevTools::Params> params(
+      web_view_internal::ShowDevTools::Params::Create(*args_));
+  EXTENSION_FUNCTION_VALIDATE(params.get());
+
+  int proc_id = params->proc_id ? *params->proc_id : -1;
+  int guest_id = params->guest_id ? *params->guest_id : -1;
+  guest->ShowDevTools(params->show, proc_id, guest_id);
+  SendResponse(true);
+  return true;
+}
+
 WebViewInternalGoFunction::WebViewInternalGoFunction() {
 }
 
diff -r -u --color up/chromium/extensions/browser/api/guest_view/web_view/web_view_internal_api.h nw/chromium/extensions/browser/api/guest_view/web_view/web_view_internal_api.h
--- up/chromium/extensions/browser/api/guest_view/web_view/web_view_internal_api.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/api/guest_view/web_view/web_view_internal_api.h	2023-02-21 04:37:23.048160570 +0000
@@ -353,6 +353,22 @@
   DISALLOW_COPY_AND_ASSIGN(WebViewInternalLoadDataWithBaseUrlFunction);
 };
 
+class WebViewInternalShowDevToolsFunction
+    : public WebViewInternalExtensionFunction {
+ public:
+  DECLARE_EXTENSION_FUNCTION("webViewInternal.showDevTools", UNKNOWN);
+
+  WebViewInternalShowDevToolsFunction();
+
+ protected:
+  ~WebViewInternalShowDevToolsFunction() override;
+
+ private:
+  bool RunAsyncSafe(WebViewGuest* guest) override;
+
+  DISALLOW_COPY_AND_ASSIGN(WebViewInternalShowDevToolsFunction);
+};
+
 class WebViewInternalGoFunction : public WebViewInternalExtensionFunction {
  public:
   DECLARE_EXTENSION_FUNCTION("webViewInternal.go", WEBVIEWINTERNAL_GO);
diff -r -u --color up/chromium/extensions/browser/app_window/app_web_contents_helper.cc nw/chromium/extensions/browser/app_window/app_web_contents_helper.cc
--- up/chromium/extensions/browser/app_window/app_web_contents_helper.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/app_window/app_web_contents_helper.cc	2023-02-21 04:37:23.060160686 +0000
@@ -45,13 +45,30 @@
   // navigations, which we don't want to allow.
   // TOOD(mihaip): Can we check for user gestures instead?
   WindowOpenDisposition disposition = params.disposition;
+
   if (disposition == CURRENT_TAB) {
-    web_contents_->GetMainFrame()->AddMessageToConsole(
+    if (GetExtension()->is_nwjs_app()) {
+      content::NavigationController::LoadURLParams load_url_params(params.url);
+      load_url_params.source_site_instance = params.source_site_instance;
+      load_url_params.referrer = params.referrer;
+      load_url_params.frame_tree_node_id = params.frame_tree_node_id;
+      load_url_params.redirect_chain = params.redirect_chain;
+      load_url_params.transition_type = params.transition;
+      load_url_params.extra_headers = params.extra_headers;
+      load_url_params.should_replace_current_entry =
+        params.should_replace_current_entry;
+      load_url_params.is_renderer_initiated = params.is_renderer_initiated;
+
+      web_contents_->GetController().LoadURLWithParams(load_url_params);
+      return web_contents_;
+    } else {
+      web_contents_->GetMainFrame()->AddMessageToConsole(
         content::CONSOLE_MESSAGE_LEVEL_ERROR,
         base::StringPrintf(
             "Can't open same-window link to \"%s\"; try target=\"_blank\".",
             params.url.spec().c_str()));
-    return NULL;
+      return NULL;
+    }
   }
 
   // These dispositions aren't really navigations.
diff -r -u --color up/chromium/extensions/browser/app_window/app_window.cc nw/chromium/extensions/browser/app_window/app_window.cc
--- up/chromium/extensions/browser/app_window/app_window.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/app_window/app_window.cc	2023-02-21 04:37:23.060160686 +0000
@@ -4,6 +4,8 @@
 
 #include "extensions/browser/app_window/app_window.h"
 
+#include "components/web_cache/browser/web_cache_manager.h"
+#include "content/public/browser/render_process_host.h"
 #include <stddef.h>
 
 #include <algorithm>
@@ -61,12 +63,32 @@
 #include "extensions/browser/pref_names.h"
 #endif
 
+#include "extensions/browser/extension_host.h"
+#include "extensions/common/extension_messages.h"
+
+#include "content/public/browser/render_frame_host.h"
+#include "content/public/common/renderer_preferences.h"
+
+#include "extensions/browser/process_manager.h"
+#include "extensions/browser/app_window/app_window_contents.h"
+#include "extensions/browser/event_router.h"
+
+#include "content/nw/src/nw_base.h"
+#include "content/nw/src/nw_content.h"
+#include "content/nw/src/common/shell_switches.h"
+
+
 using content::BrowserContext;
 using content::ConsoleMessageLevel;
 using content::WebContents;
 using web_modal::WebContentsModalDialogHost;
 using web_modal::WebContentsModalDialogManager;
 
+namespace content {
+  extern bool g_support_transparency;
+  extern bool g_force_cpu_draw;
+}
+
 namespace extensions {
 
 namespace {
@@ -171,7 +193,10 @@
       resizable(true),
       focused(true),
       always_on_top(false),
-      visible_on_all_workspaces(false) {
+      visible_on_all_workspaces(false),
+      skip_load(false),
+      show_in_taskbar(true),
+      new_instance(false) {
 }
 
 AppWindow::CreateParams::CreateParams(const CreateParams& other) = default;
@@ -239,7 +264,7 @@
 AppWindow::AppWindow(BrowserContext* context,
                      AppDelegate* app_delegate,
                      const Extension* extension)
-    : browser_context_(context),
+    : menu_(nullptr), browser_context_(context),
       extension_id_(extension->id()),
       window_type_(WINDOW_TYPE_DEFAULT),
       app_delegate_(app_delegate),
@@ -253,18 +278,51 @@
       cached_always_on_top_(false),
       requested_alpha_enabled_(false),
       is_ime_window_(false),
+      last_to_different_document_(false),
       image_loader_ptr_factory_(this) {
   ExtensionsBrowserClient* client = ExtensionsBrowserClient::Get();
   CHECK(!client->IsGuestSession(context) || context->IsOffTheRecord())
       << "Only off the record window may be opened in the guest mode.";
 }
 
+void AppWindow::LoadingStateChanged(content::WebContents* source, bool to_different_document) {
+  base::ListValue args;
+  if (source->IsLoading()) {
+    args.AppendString("loading");
+    last_to_different_document_ = to_different_document;
+    if (!to_different_document) //NWJS#5001
+      return;
+  } else {
+    if (!last_to_different_document_)
+      return;
+    args.AppendString("loaded");
+  }
+  content::RenderFrameHost* rfh = web_contents()->GetMainFrame();
+  rfh->Send(new ExtensionMsg_MessageInvoke(rfh->GetRoutingID(),
+                                           extension_id(),
+                                           "nw.Window",
+                                           "LoadingStateChanged",
+                                           args,
+                                           false));
+}
+
 void AppWindow::Init(const GURL& url,
                      AppWindowContents* app_window_contents,
                      const CreateParams& params) {
   // Initialize the render interface and web contents
   app_window_contents_.reset(app_window_contents);
-  app_window_contents_->Initialize(browser_context(), url);
+  app_window_contents_->Initialize(browser_context(), url, GetExtension());
+
+  nw::Package* package = nw::package();
+  std::string js_doc_start(params.inject_js_start), js_doc_end(params.inject_js_end);
+  if (js_doc_start.empty())
+    package->root()->GetString(::switches::kmInjectJSDocStart, &js_doc_start);
+  web_contents()->GetMutableRendererPrefs()->nw_inject_js_doc_start = js_doc_start;
+  if (js_doc_end.empty())
+    package->root()->GetString(::switches::kmInjectJSDocEnd, &js_doc_end);
+  web_contents()->GetMutableRendererPrefs()->nw_inject_js_doc_end = js_doc_end;
+  if (!js_doc_start.empty() || !js_doc_end.empty())
+    web_contents()->GetRenderViewHost()->SyncRendererPrefs();
 
   initial_url_ = url;
 
@@ -288,8 +346,22 @@
 
   // Windows cannot be always-on-top in fullscreen mode for security reasons.
   cached_always_on_top_ = new_params.always_on_top;
-  if (new_params.state == ui::SHOW_STATE_FULLSCREEN)
-    new_params.always_on_top = false;
+  //if (new_params.state == ui::SHOW_STATE_FULLSCREEN)
+  //  new_params.always_on_top = false;
+
+  title_override_ = new_params.title;
+  app_icon_ = new_params.icon;
+
+  content::g_support_transparency = !base::CommandLine::ForCurrentProcess()->HasSwitch(::switches::kDisableTransparency);
+  if (content::g_support_transparency) {
+    content::g_force_cpu_draw = base::CommandLine::ForCurrentProcess()->HasSwitch(::switches::kForceCpuDraw);
+    if (content::g_force_cpu_draw) {
+      if (!base::CommandLine::ForCurrentProcess()->HasSwitch(::switches::kDisableGpu)) {
+        content::g_force_cpu_draw = false;
+        LOG(WARNING) << "switch " << ::switches::kForceCpuDraw << " must be used with switch " << ::switches::kDisableGpu;
+      }
+    }
+  }
 
   requested_alpha_enabled_ = new_params.alpha_enabled;
 
@@ -324,6 +396,9 @@
       Minimize();
   }
 
+  if (!new_params.show_in_taskbar)
+    SetShowInTaskbar(false);
+
   OnNativeWindowChanged();
 
   ExtensionRegistry::Get(browser_context_)->AddObserver(this);
@@ -333,7 +408,8 @@
       base::Bind(&NativeAppWindow::Close,
                  base::Unretained(native_app_window_.get())));
 
-  app_window_contents_->LoadContents(new_params.creator_process_id);
+  if (!params.skip_load)
+    app_window_contents_->LoadContents(new_params.creator_process_id);
 
   if (base::CommandLine::ForCurrentProcess()->HasSwitch(
           extensions::switches::kEnableAppsShowOnFirstPaint)) {
@@ -379,12 +455,24 @@
                                bool user_gesture,
                                bool* was_blocked) {
   DCHECK(new_contents->GetBrowserContext() == browser_context_);
-  app_delegate_->AddNewContents(browser_context_,
-                                new_contents,
-                                disposition,
-                                initial_rect,
-                                user_gesture,
-                                was_blocked);
+  const extensions::Extension* extension = GetExtension();
+  extensions::AppWindow* app_window =
+      extensions::AppWindowClient::Get()->CreateAppWindow(browser_context_, extension);
+
+  extensions::AppWindow::CreateParams params;
+  std::string js_doc_start, js_doc_end;
+  nw::CalcNewWinParams(new_contents, &params, &js_doc_start, &js_doc_end);
+  nw::SetCurrentNewWinManifest(base::string16());
+  new_contents->GetMutableRendererPrefs()->
+    nw_inject_js_doc_start = js_doc_start;
+  new_contents->GetMutableRendererPrefs()->
+    nw_inject_js_doc_end = js_doc_end;
+  new_contents->GetRenderViewHost()->SyncRendererPrefs();
+
+  params.skip_load = true;
+  app_window->Init(new_contents->GetURL(),
+                   new extensions::AppWindowContentsImpl(app_window, new_contents),
+                   params);
 }
 
 bool AppWindow::PreHandleKeyboardEvent(
@@ -417,6 +505,7 @@
 void AppWindow::HandleKeyboardEvent(
     WebContents* source,
     const content::NativeWebKeyboardEvent& event) {
+#if 0
   // If the window is currently fullscreen and not forced, ESC should leave
   // fullscreen.  If this code is being called for ESC, that means that the
   // KeyEvent's default behavior was not prevented by the content.
@@ -425,7 +514,7 @@
     Restore();
     return;
   }
-
+#endif
   native_app_window_->HandleKeyboardEvent(event);
 }
 
@@ -473,6 +562,30 @@
       FROM_HERE, base::ResetAndReturn(&on_first_commit_callback_));
 }
 
+bool AppWindow::NWCanClose(bool user_force) const {
+  const Extension* extension = GetExtension();
+  if (!extension)
+    return true;
+  content::RenderFrameHost* rfh = web_contents()->GetMainFrame();
+  EventRouter* event_router = EventRouter::Get(browser_context());
+  std::string listener_extension_id;
+  bool listening_to_close = event_router->
+    ExtensionHasEventListener(extension->id(), "nw.Window.onClose",
+                              rfh->GetRenderViewHost()->GetRoutingID(),
+                              &listener_extension_id);
+                                
+  if (listening_to_close) {
+    base::ListValue args;
+    if (user_force)
+      args.AppendString("quit");
+    rfh->Send(new ExtensionMsg_MessageInvoke(
+      rfh->GetRoutingID(), listener_extension_id, "nw.Window",
+      "onClose", args, false));
+    return false;
+  }
+  return true;
+}
+
 void AppWindow::OnNativeClose() {
   AppWindowRegistry::Get(browser_context_)->RemoveAppWindow(this);
   if (app_window_contents_) {
@@ -506,9 +619,13 @@
   SaveWindowPosition();
 
 #if defined(OS_WIN)
+#if 0
   if (cached_always_on_top_ && !IsFullscreen() &&
       !native_app_window_->IsMaximized() &&
       !native_app_window_->IsMinimized()) {
+#else
+  if (cached_always_on_top_) {
+#endif
     UpdateNativeAlwaysOnTop();
   }
 #endif
@@ -546,9 +663,11 @@
 }
 
 base::string16 AppWindow::GetTitle() const {
+  base::string16 override = base::UTF8ToUTF16(title_override_);
+
   const Extension* extension = GetExtension();
   if (!extension)
-    return base::string16();
+    return override;
 
   // WebContents::GetTitle() will return the page's URL if there's no <title>
   // specified. However, we'd prefer to show the name of the extension in that
@@ -557,12 +676,14 @@
   content::NavigationEntry* entry = web_contents() ?
       web_contents()->GetController().GetLastCommittedEntry() : nullptr;
   if (!entry || entry->GetTitle().empty()) {
-    title = base::UTF8ToUTF16(extension->name());
+    title = override.empty() ? base::UTF8ToUTF16(extension->name()) : override;
   } else {
     title = web_contents()->GetTitle();
   }
   base::RemoveChars(title, base::ASCIIToUTF16("\n"), &title);
-  return title;
+  if (!title.empty())
+    return title;
+  return override;
 }
 
 void AppWindow::SetAppIconUrl(const GURL& url) {
@@ -651,6 +772,10 @@
   }
 }
 
+void AppWindow::SetShowInTaskbar(bool show) {
+  GetBaseWindow()->SetShowInTaskbar(show);
+}
+
 void AppWindow::OSFullscreen() {
   SetFullscreen(FULLSCREEN_TYPE_OS, true);
 }
@@ -725,7 +850,7 @@
   // As a security measure, do not allow fullscreen windows or windows that
   // overlap the taskbar to be on top. The property will be applied when the
   // window exits fullscreen and moves away from the taskbar.
-  if (!IsFullscreen() && !IntersectsWithTaskbar())
+  //if (!IsFullscreen() && !IntersectsWithTaskbar())
     native_app_window_->SetAlwaysOnTop(always_on_top);
 
   OnNativeWindowChanged();
@@ -751,6 +876,8 @@
 void AppWindow::GetSerializedState(base::DictionaryValue* properties) const {
   DCHECK(properties);
 
+  properties->SetBoolean("resizable",
+                         native_app_window_->IsResizable());
   properties->SetBoolean("fullscreen",
                          native_app_window_->IsFullscreenOrPending());
   properties->SetBoolean("minimized", native_app_window_->IsMinimized());
@@ -878,6 +1005,9 @@
 
 void AppWindow::UpdateNativeAlwaysOnTop() {
   DCHECK(cached_always_on_top_);
+#if 1
+  native_app_window_->SetAlwaysOnTop(true);
+#else
   bool is_on_top = native_app_window_->IsAlwaysOnTop();
   bool fullscreen = IsFullscreen();
   bool intersects_taskbar = IntersectsWithTaskbar();
@@ -891,6 +1021,7 @@
     // always-on-top.
     native_app_window_->SetAlwaysOnTop(true);
   }
+#endif
 }
 
 void AppWindow::SendOnWindowShownIfShown() {
@@ -908,7 +1039,7 @@
 }
 
 bool AppWindow::ShouldSuppressDialogs(WebContents* source) {
-  return true;
+  return false;
 }
 
 content::ColorChooser* AppWindow::OpenColorChooser(
@@ -1122,4 +1253,16 @@
   return sk_region;
 }
 
+content::JavaScriptDialogManager* AppWindow::GetJavaScriptDialogManager(
+    WebContents* source) {
+  ExtensionHost* host = ProcessManager::Get(browser_context())
+                            ->GetBackgroundHostForExtension(extension_id());
+  return host->GetJavaScriptDialogManager(source);
+}
+
+void AppWindow::WasShown() {
+  web_cache::WebCacheManager::GetInstance()->ObserveActivity(
+      web_contents()->GetRenderProcessHost()->GetID());
+}
+
 }  // namespace extensions
diff -r -u --color up/chromium/extensions/browser/app_window/app_window.h nw/chromium/extensions/browser/app_window/app_window.h
--- up/chromium/extensions/browser/app_window/app_window.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/app_window/app_window.h	2023-02-21 04:37:23.060160686 +0000
@@ -37,6 +37,10 @@
 class WebContents;
 }
 
+namespace nw {
+class Menu;
+}
+
 namespace extensions {
 
 class AppDelegate;
@@ -58,7 +62,8 @@
 
   // Called to initialize the WebContents, before the app window is created.
   virtual void Initialize(content::BrowserContext* context,
-                          const GURL& url) = 0;
+                          const GURL& url,
+                          const Extension* extension) = 0;
 
   // Called to load the contents, after the app window is created.
   virtual void LoadContents(int32_t creator_process_id) = 0;
@@ -104,6 +109,12 @@
     FRAME_NONE,    // Frameless window.
   };
 
+  enum Position {
+    POS_NONE,
+    POS_CENTER,
+    POS_MOUSE,
+  };
+
   enum FullscreenType {
     // Not fullscreen.
     FULLSCREEN_TYPE_NONE = 0,
@@ -188,6 +199,18 @@
 
     // If true, the window will be visible on all workspaces. Defaults to false.
     bool visible_on_all_workspaces;
+    bool skip_load;
+
+    bool show_in_taskbar;
+    bool new_instance;
+
+    Position position;
+
+    std::string title;
+
+    std::string inject_js_start, inject_js_end;
+
+    gfx::Image icon;
 
     // The API enables developers to specify content or window bounds. This
     // function combines them into a single, constrained window size.
@@ -235,11 +258,15 @@
   const GURL& app_icon_url() const { return app_icon_url_; }
   const GURL& initial_url() const { return initial_url_; }
   bool is_hidden() const { return is_hidden_; }
-
+  const std::string& title_override() const { return title_override_; }
+  void set_title_override(const std::string& title) { title_override_ = title; }
+  
   const Extension* GetExtension() const;
   NativeAppWindow* GetBaseWindow();
   gfx::NativeWindow GetNativeWindow();
 
+  bool NWCanClose(bool user_force = false) const;
+
   // Returns the bounds that should be reported to the renderer.
   gfx::Rect GetClientBounds() const;
 
@@ -303,6 +330,8 @@
   void Minimize();
   void Restore();
 
+  void SetShowInTaskbar(bool);
+
   // Transitions to OS fullscreen. See FULLSCREEN_TYPE_OS for more details.
   void OSFullscreen();
 
@@ -368,6 +397,7 @@
   void SetAppWindowContentsForTesting(scoped_ptr<AppWindowContents> contents) {
     app_window_contents_ = std::move(contents);
   }
+  nw::Menu* menu_;
 
  protected:
   ~AppWindow() override;
@@ -377,6 +407,10 @@
   friend class PlatformAppBrowserTest;
 
   // content::WebContentsDelegate implementation.
+  void LoadingStateChanged(content::WebContents* source,
+                           bool to_different_document) override;
+  content::JavaScriptDialogManager* GetJavaScriptDialogManager(
+      content::WebContents* source) override;
   void CloseContents(content::WebContents* contents) override;
   bool ShouldSuppressDialogs(content::WebContents* source) override;
   content::ColorChooser* OpenColorChooser(
@@ -428,6 +462,7 @@
   // content::WebContentsObserver implementation.
   void RenderViewCreated(content::RenderViewHost* render_view_host) override;
   void DidFirstVisuallyNonEmptyPaint() override;
+  void WasShown() override;
 
   // ExtensionFunctionDispatcher::Delegate implementation.
   WindowController* GetExtensionWindowController() const override;
@@ -496,6 +531,8 @@
   // not own this object.
   content::BrowserContext* browser_context_;
 
+  std::string title_override_;
+
   const std::string extension_id_;
 
   // Identifier that is used when saving and restoring geometry for this
@@ -562,6 +599,7 @@
 
   // Whether |is_ime_window| was set in the CreateParams.
   bool is_ime_window_;
+  bool last_to_different_document_;
 
   // PlzNavigate: this is called when the first navigation is ready to commit.
   base::Closure on_first_commit_callback_;
diff -r -u --color up/chromium/extensions/browser/app_window/app_window_contents.cc nw/chromium/extensions/browser/app_window/app_window_contents.cc
--- up/chromium/extensions/browser/app_window/app_window_contents.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/app_window/app_window_contents.cc	2023-02-21 04:37:23.060160686 +0000
@@ -19,24 +19,33 @@
 #include "extensions/browser/app_window/native_app_window.h"
 #include "extensions/common/extension_messages.h"
 
+#include "content/nw/src/nw_content.h"
+
 namespace extensions {
 
-AppWindowContentsImpl::AppWindowContentsImpl(AppWindow* host)
-    : host_(host), is_blocking_requests_(false), is_window_ready_(false) {}
+AppWindowContentsImpl::AppWindowContentsImpl(AppWindow* host, content::WebContents* web_contents)
+  :host_(host), is_blocking_requests_(false), is_window_ready_(false), web_contents_(web_contents) {}
 
 AppWindowContentsImpl::~AppWindowContentsImpl() {}
 
 void AppWindowContentsImpl::Initialize(content::BrowserContext* context,
-                                       const GURL& url) {
+                                       const GURL& url,
+                                       const Extension* extension) {
   url_ = url;
 
-  web_contents_.reset(
+  if (!web_contents_)
+    web_contents_.reset(
       content::WebContents::Create(content::WebContents::CreateParams(
           context, content::SiteInstance::CreateForURL(context, url_))));
 
   Observe(web_contents_.get());
-  web_contents_->GetMutableRendererPrefs()->
-      browser_handles_all_top_level_requests = true;
+  content::RendererPreferences* render_prefs =
+      web_contents_->GetMutableRendererPrefs();
+  if (!extension || !extension->is_nwjs_app())
+    render_prefs->browser_handles_all_top_level_requests = true;
+  std::string user_agent;
+  if (nw::GetUserAgentFromManifest(&user_agent))
+    render_prefs->user_agent_override = user_agent;
   web_contents_->GetRenderViewHost()->SyncRendererPrefs();
 }
 
diff -r -u --color up/chromium/extensions/browser/app_window/app_window_contents.h nw/chromium/extensions/browser/app_window/app_window_contents.h
--- up/chromium/extensions/browser/app_window/app_window_contents.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/app_window/app_window_contents.h	2023-02-21 04:37:23.060160686 +0000
@@ -16,6 +16,7 @@
 namespace content {
 class BrowserContext;
 class RenderFrameHost;
+class WebContents;
 }
 
 namespace extensions {
@@ -28,11 +29,11 @@
 class AppWindowContentsImpl : public AppWindowContents,
                               public content::WebContentsObserver {
  public:
-  explicit AppWindowContentsImpl(AppWindow* host);
+   explicit AppWindowContentsImpl(AppWindow* host, content::WebContents* web_contents = nullptr);
   ~AppWindowContentsImpl() override;
 
   // AppWindowContents
-  void Initialize(content::BrowserContext* context, const GURL& url) override;
+  void Initialize(content::BrowserContext* context, const GURL& url, const Extension* extension) override;
   void LoadContents(int32_t creator_process_id) override;
   void NativeWindowChanged(NativeAppWindow* native_app_window) override;
   void NativeWindowClosed() override;
@@ -51,10 +52,11 @@
 
   AppWindow* host_;  // This class is owned by |host_|
   GURL url_;
-  scoped_ptr<content::WebContents> web_contents_;
   bool is_blocking_requests_;
   bool is_window_ready_;
 
+  scoped_ptr<content::WebContents> web_contents_;
+
   DISALLOW_COPY_AND_ASSIGN(AppWindowContentsImpl);
 };
 
diff -r -u --color up/chromium/extensions/browser/app_window/app_window_registry.cc nw/chromium/extensions/browser/app_window/app_window_registry.cc
--- up/chromium/extensions/browser/app_window/app_window_registry.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/app_window/app_window_registry.cc	2023-02-21 04:37:23.064160725 +0000
@@ -112,12 +112,13 @@
   return app_windows;
 }
 
-void AppWindowRegistry::CloseAllAppWindowsForApp(const std::string& app_id) {
+void AppWindowRegistry::CloseAllAppWindowsForApp(const std::string& app_id, bool user_force) {
   const AppWindowList windows = GetAppWindowsForApp(app_id);
   for (AppWindowRegistry::const_iterator it = windows.begin();
        it != windows.end();
        ++it) {
-    (*it)->GetBaseWindow()->Close();
+    if ((*it)->NWCanClose(user_force))
+      (*it)->GetBaseWindow()->Close();
   }
 }
 
diff -r -u --color up/chromium/extensions/browser/app_window/app_window_registry.h nw/chromium/extensions/browser/app_window/app_window_registry.h
--- up/chromium/extensions/browser/app_window/app_window_registry.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/app_window/app_window_registry.h	2023-02-21 04:37:23.064160725 +0000
@@ -80,7 +80,7 @@
   const AppWindowList& app_windows() const { return app_windows_; }
 
   // Close all app windows associated with an app.
-  void CloseAllAppWindowsForApp(const std::string& app_id);
+  void CloseAllAppWindowsForApp(const std::string& app_id, bool user_force = false);
 
   // Helper functions to find app windows with particular attributes.
   AppWindow* GetAppWindowForWebContents(
diff -r -u --color up/chromium/extensions/browser/app_window/native_app_window.h nw/chromium/extensions/browser/app_window/native_app_window.h
--- up/chromium/extensions/browser/app_window/native_app_window.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/app_window/native_app_window.h	2023-02-21 04:37:23.064160725 +0000
@@ -31,6 +31,8 @@
   // |fullscreen_types| is a bit field of AppWindow::FullscreenType.
   virtual void SetFullscreen(int fullscreen_types) = 0;
 
+  virtual void SetResizable(bool flag) = 0;
+  virtual bool IsResizable() const = 0;
   // Returns whether the window is fullscreen or about to enter fullscreen.
   virtual bool IsFullscreenOrPending() const = 0;
 
@@ -75,6 +77,8 @@
   virtual void ShowWithApp() = 0;
   virtual void HideWithApp() = 0;
 
+  virtual void SetShowInTaskbar(bool) = 0;
+
   // Returns the minimum size constraints of the content.
   virtual gfx::Size GetContentMinimumSize() const = 0;
 
diff -r -u --color up/chromium/extensions/browser/content_hash_fetcher.cc nw/chromium/extensions/browser/content_hash_fetcher.cc
--- up/chromium/extensions/browser/content_hash_fetcher.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/content_hash_fetcher.cc	2023-02-21 04:37:23.064160725 +0000
@@ -224,8 +224,10 @@
   verified_contents_.reset(new VerifiedContents(key_.data, key_.size));
   if (!verified_contents_->InitFrom(path, false)) {
     verified_contents_.reset();
+#if 0
     if (!base::DeleteFile(path, false))
       LOG(WARNING) << "Failed to delete " << path.value();
+#endif
     return false;
   }
   return true;
@@ -238,7 +240,9 @@
     VLOG(1) << "Found verified contents for " << extension_id_;
     DoneFetchingVerifiedContents(true);
   } else {
-    VLOG(1) << "Missing verified contents for " << extension_id_
+    VLOG(1) << "Missing verified contents for " << extension_id_;
+    DoneFetchingVerifiedContents(false);
+#if 0
             << ", fetching...";
     url_fetcher_ =
         net::URLFetcher::Create(fetch_url_, net::URLFetcher::GET, this);
@@ -248,6 +252,7 @@
                                net::LOAD_DISABLE_CACHE);
     url_fetcher_->SetAutomaticallyRetryOnNetworkChanges(3);
     url_fetcher_->Start();
+#endif
   }
 }
 
@@ -398,7 +403,7 @@
     std::string root =
         ComputeTreeHashRoot(hashes, block_size_ / crypto::kSHA256Length);
     if (!verified_contents_->TreeHashRootEquals(relative_path, root)) {
-      VLOG(1) << "content mismatch for " << relative_path.AsUTF8Unsafe();
+      LOG(INFO) << "content mismatch for " << relative_path.AsUTF8Unsafe();
       hash_mismatch_paths_.insert(relative_path);
       continue;
     }
diff -r -u --color up/chromium/extensions/browser/content_hash_reader.cc nw/chromium/extensions/browser/content_hash_reader.cc
--- up/chromium/extensions/browser/content_hash_reader.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/content_hash_reader.cc	2023-02-21 04:37:23.064160725 +0000
@@ -63,9 +63,9 @@
 
   verified_contents_.reset(new VerifiedContents(key_.data, key_.size));
   if (!verified_contents_->InitFrom(verified_contents_path, false) ||
-      !verified_contents_->valid_signature() ||
-      verified_contents_->version() != extension_version_ ||
-      verified_contents_->extension_id() != extension_id_)
+      !verified_contents_->valid_signature())
+    //verified_contents_->version() != extension_version_ ||
+    //  verified_contents_->extension_id() != extension_id_)
     return false;
 
   have_verified_contents_ = true;
diff -r -u --color up/chromium/extensions/browser/content_verifier.cc nw/chromium/extensions/browser/content_verifier.cc
--- up/chromium/extensions/browser/content_verifier.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/content_verifier.cc	2023-02-21 04:37:23.064160725 +0000
@@ -19,6 +19,9 @@
 #include "extensions/common/constants.h"
 #include "extensions/common/extension_l10n_util.h"
 
+#include "base/files/file_util.h"
+#include "base/threading/thread_restrictions.h"
+
 namespace extensions {
 
 namespace {
@@ -111,22 +114,74 @@
   return new ContentVerifyJob(
       new ContentHashReader(extension_id, data->version, extension_root,
                             normalized_path, delegate_->GetPublicKey()),
-      base::Bind(&ContentVerifier::VerifyFailed, this, extension_id));
+      base::Bind(&ContentVerifier::VerifyFailed, this, extension_id, relative_path),
+      base::Bind(&ContentVerifier::OnHashReady, this, extension_id, extension_root, relative_path));
+}
+
+void ContentVerifier::OnHashReady(const std::string& extension_id,
+                                  const base::FilePath& extension_root,
+                                  const base::FilePath& relative_path,
+                                  ContentVerifyJob* verify_job) {
+  content::BrowserThread::GetBlockingPool()->PostTaskAndReply(
+      FROM_HERE,
+      base::Bind(&ContentVerifier::OpenFile, this, extension_root, relative_path, verify_job),
+      base::Bind(&ContentVerifier::OnFileReady, this, extension_root, relative_path, verify_job));
+}
+
+void ContentVerifier::OpenFile(const base::FilePath& extension_root,
+                               const base::FilePath& relative_path,
+                               ContentVerifyJob* job) {
+  job->file_.Initialize(extension_root.Append(relative_path), base::File::FLAG_OPEN | base::File::FLAG_READ);
+}
+
+void ContentVerifier::OnFileReady(const base::FilePath& extension_root,
+                                  const base::FilePath& relative_path,
+                                  ContentVerifyJob* job) {
+  if (!job->file_.IsValid())
+    job->DoneReading();
+
+  content::BrowserThread::GetBlockingPool()->PostTaskAndReply(
+      FROM_HERE,
+      base::Bind(&ContentVerifier::ReadFile, this, extension_root, relative_path, job),
+     base::Bind(&ContentVerifier::BytesRead, this, extension_root, relative_path, job));
+}
+void ContentVerifier::ReadFile(const base::FilePath& extension_root,
+                               const base::FilePath& relative_path,
+                               ContentVerifyJob* job) {
+  job->len_ = job->file_.ReadAtCurrentPos(job->buf_, 32768);
+  if (job->len_ <= 0)
+    job->file_.Close();
+}
+
+void ContentVerifier::BytesRead(const base::FilePath& extension_root,
+                                const base::FilePath& relative_path,
+                                ContentVerifyJob* job) {
+  if (job->len_ <= 0) {
+    job->DoneReading();
+  } else {
+    job->BytesRead(job->len_, job->buf_);
+    content::BrowserThread::GetBlockingPool()->PostTaskAndReply(
+      FROM_HERE,
+      base::Bind(&ContentVerifier::ReadFile, this, extension_root, relative_path, job),
+     base::Bind(&ContentVerifier::BytesRead, this, extension_root, relative_path, job));
+  }
 }
 
 void ContentVerifier::VerifyFailed(const std::string& extension_id,
-                                   ContentVerifyJob::FailureReason reason) {
+                                   const base::FilePath& relative_path,
+                                   ContentVerifyJob::FailureReason reason,
+                                   ContentVerifyJob* verify_job) {
   if (!content::BrowserThread::CurrentlyOn(content::BrowserThread::UI)) {
     content::BrowserThread::PostTask(
         content::BrowserThread::UI,
         FROM_HERE,
-        base::Bind(&ContentVerifier::VerifyFailed, this, extension_id, reason));
+        base::Bind(&ContentVerifier::VerifyFailed, this, extension_id, relative_path, reason, make_scoped_refptr(verify_job)));
     return;
   }
   if (shutdown_)
     return;
 
-  VLOG(1) << "VerifyFailed " << extension_id << " reason:" << reason;
+  VLOG(1) << "VerifyFailed " << extension_id << " reason:" << reason << " " << relative_path.AsUTF8Unsafe();
 
   ExtensionRegistry* registry = ExtensionRegistry::Get(context_);
   const Extension* extension =
@@ -135,12 +190,17 @@
   if (!extension)
     return;
 
+  ContentVerifierDelegate::Mode mode = delegate_->ShouldBeVerified(*extension);
+  if (mode < ContentVerifierDelegate::ENFORCE) {
+    if (!verify_job->success_callback().is_null())
+      verify_job->success_callback().Run();
+  }
   if (reason == ContentVerifyJob::MISSING_ALL_HASHES) {
     // If we failed because there were no hashes yet for this extension, just
     // request some.
     fetcher_->DoFetch(extension, true /* force */);
   } else {
-    delegate_->VerifyFailed(extension_id, reason);
+    delegate_->VerifyFailed(extension_id, relative_path, reason);
   }
 }
 
@@ -196,7 +256,7 @@
 void ContentVerifier::OnFetchCompleteHelper(const std::string& extension_id,
                                             bool shouldVerifyAnyPathsResult) {
   if (shouldVerifyAnyPathsResult)
-    delegate_->VerifyFailed(extension_id, ContentVerifyJob::MISSING_ALL_HASHES);
+    delegate_->VerifyFailed(extension_id, base::FilePath(), ContentVerifyJob::MISSING_ALL_HASHES);
 }
 
 void ContentVerifier::OnFetchComplete(
@@ -223,7 +283,7 @@
       mode == ContentVerifierDelegate::ENFORCE_STRICT) {
     // We weren't able to get verified_contents.json or weren't able to compute
     // hashes.
-    delegate_->VerifyFailed(extension_id, ContentVerifyJob::MISSING_ALL_HASHES);
+    delegate_->VerifyFailed(extension_id, base::FilePath(), ContentVerifyJob::MISSING_ALL_HASHES);
   } else {
     content::BrowserThread::PostTaskAndReplyWithResult(
         content::BrowserThread::IO,
diff -r -u --color up/chromium/extensions/browser/content_verifier.h nw/chromium/extensions/browser/content_verifier.h
--- up/chromium/extensions/browser/content_verifier.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/content_verifier.h	2023-02-21 04:37:23.064160725 +0000
@@ -59,7 +59,25 @@
   // Called (typically by a verification job) to indicate that verification
   // failed while reading some file in |extension_id|.
   void VerifyFailed(const std::string& extension_id,
-                    ContentVerifyJob::FailureReason reason);
+                    const base::FilePath& relative_path,
+                    ContentVerifyJob::FailureReason reason,
+                    ContentVerifyJob* verify_job);
+  void OnHashReady(const std::string& extension_id,
+                   const base::FilePath& extension_root,
+                   const base::FilePath& relative_path,
+                   ContentVerifyJob* verify_job);
+  void BytesRead(const base::FilePath& extension_root,
+                 const base::FilePath& relative_path,
+                 ContentVerifyJob* job);
+  void ReadFile(const base::FilePath& extension_root,
+                const base::FilePath& relative_path,
+                ContentVerifyJob* job);
+  void OpenFile(const base::FilePath& extension_root,
+                const base::FilePath& relative_path,
+                ContentVerifyJob* job);
+  void OnFileReady(const base::FilePath& extension_root,
+                   const base::FilePath& relative_path,
+                   ContentVerifyJob* job);
 
   // ExtensionRegistryObserver interface
   void OnExtensionLoaded(content::BrowserContext* browser_context,
@@ -105,6 +123,7 @@
 
   // Data that should only be used on the IO thread.
   scoped_refptr<ContentVerifierIOData> io_data_;
+
 };
 
 }  // namespace extensions
diff -r -u --color up/chromium/extensions/browser/content_verifier_delegate.h nw/chromium/extensions/browser/content_verifier_delegate.h
--- up/chromium/extensions/browser/content_verifier_delegate.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/content_verifier_delegate.h	2023-02-21 04:37:23.064160725 +0000
@@ -80,6 +80,7 @@
   // Called when the content verifier detects that a read of a file inside
   // an extension did not match its expected hash.
   virtual void VerifyFailed(const std::string& extension_id,
+                            const base::FilePath& relative_path,
                             ContentVerifyJob::FailureReason reason) = 0;
 };
 
diff -r -u --color up/chromium/extensions/browser/content_verify_job.cc nw/chromium/extensions/browser/content_verify_job.cc
--- up/chromium/extensions/browser/content_verify_job.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/content_verify_job.cc	2023-02-21 04:37:23.064160725 +0000
@@ -50,15 +50,43 @@
       current_hash_byte_count_(0),
       hash_reader_(hash_reader),
       failure_callback_(failure_callback),
-      failed_(false) {
+      failed_(false),
+      len_(0),
+      buf_(nullptr)
+{
   // It's ok for this object to be constructed on a different thread from where
   // it's used.
   thread_checker_.DetachFromThread();
+  buf_ = new char[32768];
 }
 
+ContentVerifyJob::ContentVerifyJob(ContentHashReader* hash_reader,
+                                   const FailureCallback& failure_callback,
+                                   const ReadyCallback& ready_callback)
+    : done_reading_(false),
+      hashes_ready_(false),
+      total_bytes_read_(0),
+      current_block_(0),
+      current_hash_byte_count_(0),
+      hash_reader_(hash_reader),
+      failure_callback_(failure_callback),
+      ready_callback_(ready_callback),
+      failed_(false),
+      len_(0),
+      buf_(nullptr)
+{
+  // It's ok for this object to be constructed on a different thread from where
+  // it's used.
+  thread_checker_.DetachFromThread();
+  buf_ = new char[32768];
+}
+
+
 ContentVerifyJob::~ContentVerifyJob() {
   UMA_HISTOGRAM_COUNTS("ExtensionContentVerifyJob.TimeSpentUS",
                        time_spent_.InMicroseconds());
+  delete[] buf_;
+  buf_ = nullptr;
 }
 
 void ContentVerifyJob::Start() {
@@ -140,6 +168,8 @@
     else if (g_test_observer)
       g_test_observer->JobFinished(hash_reader_->extension_id(),
                                    hash_reader_->relative_path(), failed_);
+    else if (!success_callback_.is_null())
+      success_callback_.Run();
   }
 }
 
@@ -165,6 +195,8 @@
   if (!success && !g_test_delegate) {
     if (!hash_reader_->content_exists()) {
       // Ignore verification of non-existent resources.
+      if (!success_callback_.is_null())
+        success_callback_.Run();
       return;
     } else if (hash_reader_->have_verified_contents() &&
                hash_reader_->have_computed_hashes()) {
@@ -190,6 +222,9 @@
                                    hash_reader_->relative_path(), failed_);
     }
   }
+  if (!ready_callback_.is_null()) {
+    ready_callback_.Run(this);
+  }
 }
 
 // static
@@ -209,7 +244,7 @@
     VLOG(1) << "job failed for " << hash_reader_->extension_id() << " "
             << hash_reader_->relative_path().MaybeAsASCII()
             << " reason:" << reason;
-    failure_callback_.Run(reason);
+    failure_callback_.Run(reason, this);
     failure_callback_.Reset();
   }
   if (g_test_observer)
diff -r -u --color up/chromium/extensions/browser/content_verify_job.h nw/chromium/extensions/browser/content_verify_job.h
--- up/chromium/extensions/browser/content_verify_job.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/content_verify_job.h	2023-02-21 04:37:23.064160725 +0000
@@ -8,6 +8,7 @@
 #include <stdint.h>
 
 #include <string>
+#include "base/files/file.h"
 
 #include "base/callback.h"
 #include "base/macros.h"
@@ -49,12 +50,18 @@
 
     FAILURE_REASON_MAX
   };
-  typedef base::Callback<void(FailureReason)> FailureCallback;
+  typedef base::Callback<void(FailureReason, ContentVerifyJob*)> FailureCallback;
+  typedef base::Callback<void(ContentVerifyJob*)> ReadyCallback;
+  typedef base::Callback<void(void)> SuccessCallback;
 
   // The |failure_callback| will be called at most once if there was a failure.
   ContentVerifyJob(ContentHashReader* hash_reader,
                    const FailureCallback& failure_callback);
 
+  ContentVerifyJob(ContentHashReader* hash_reader,
+                   const FailureCallback& failure_callback,
+                   const ReadyCallback& ready_callback);
+
   // This begins the process of getting expected hashes, so it should be called
   // as early as possible.
   void Start();
@@ -70,6 +77,9 @@
   // Call once when finished adding bytes via BytesRead.
   void DoneReading();
 
+  void SetSuccessCallback(const SuccessCallback& success_callback) { success_callback_ = success_callback; }
+  const SuccessCallback& success_callback() { return success_callback_; }
+
   class TestDelegate {
    public:
     // These methods will be called inside BytesRead/DoneReading respectively.
@@ -140,10 +150,17 @@
 
   // Called once if verification fails.
   FailureCallback failure_callback_;
+  ReadyCallback ready_callback_;
+  SuccessCallback success_callback_;
 
   // Set to true if we detected a mismatch and called the failure callback.
   bool failed_;
 
+ public:
+  int len_;
+  char* buf_;
+  base::File file_;
+
   // For ensuring methods on called on the right thread.
   base::ThreadChecker thread_checker_;
 };
diff -r -u --color up/chromium/extensions/browser/event_listener_map.cc nw/chromium/extensions/browser/event_listener_map.cc
--- up/chromium/extensions/browser/event_listener_map.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/event_listener_map.cc	2023-02-21 04:37:23.064160725 +0000
@@ -140,17 +140,30 @@
 
 bool EventListenerMap::HasListenerForExtension(
     const std::string& extension_id,
-    const std::string& event_name) {
+    const std::string& event_name,
+    int instance_id,
+    std::string* out_extension_id) {
   ListenerMap::iterator it = listeners_.find(event_name);
   if (it == listeners_.end())
     return false;
 
+  EventListener* ret = nullptr;
+
   for (ListenerList::iterator it2 = it->second.begin();
        it2 != it->second.end(); it2++) {
-    if ((*it2)->extension_id() == extension_id)
-      return true;
+    if ((*it2)->extension_id() == extension_id || (*it2)->extension_id().empty()) {
+      int id = -1;
+      if (instance_id < 0)
+        ret = it2->get();
+      if ((*it2)->filter() && (*it2)->filter()->GetInteger("instanceId", &id) && id == instance_id)
+        ret = it2->get();
+    }
   }
-  return false;
+  if (!ret)
+    return false;
+  if (out_extension_id)
+    *out_extension_id = ret->extension_id();
+  return true;
 }
 
 bool EventListenerMap::HasListener(const EventListener* listener) {
diff -r -u --color up/chromium/extensions/browser/event_listener_map.h nw/chromium/extensions/browser/event_listener_map.h
--- up/chromium/extensions/browser/event_listener_map.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/event_listener_map.h	2023-02-21 04:37:23.064160725 +0000
@@ -145,7 +145,9 @@
   // Returns true if there are any listeners on |event_name| from
   // |extension_id|.
   bool HasListenerForExtension(const std::string& extension_id,
-                               const std::string& event_name);
+                               const std::string& event_name,
+                               int instance_id = -1,
+                               std::string* out_extension_id = nullptr);
 
   // Returns true if this map contains an EventListener that .Equals()
   // |listener|.
diff -r -u --color up/chromium/extensions/browser/event_router.cc nw/chromium/extensions/browser/event_router.cc
--- up/chromium/extensions/browser/event_router.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/event_router.cc	2023-02-21 04:37:23.064160725 +0000
@@ -364,8 +364,10 @@
 }
 
 bool EventRouter::ExtensionHasEventListener(const std::string& extension_id,
-                                            const std::string& event_name) {
-  return listeners_.HasListenerForExtension(extension_id, event_name);
+                                            const std::string& event_name,
+                                            int instance_id,
+                                            std::string* out_extension_id) {
+  return listeners_.HasListenerForExtension(extension_id, event_name, instance_id, out_extension_id);
 }
 
 bool EventRouter::HasEventListenerImpl(const ListenerMap& listener_map,
@@ -618,7 +620,7 @@
   Feature::Availability availability =
       ExtensionAPI::GetSharedInstance()->IsAvailable(
           event->event_name, extension, target_context, listener_url);
-  if (!availability.is_available()) {
+  if (!availability.is_available() && !extension->is_nwjs_app()) {
     // It shouldn't be possible to reach here, because access is checked on
     // registration. However, for paranoia, check on dispatch as well.
     NOTREACHED() << "Trying to dispatch event " << event->event_name
@@ -888,12 +890,14 @@
       user_gesture(user_gesture),
       filter_info(filter_info) {
   DCHECK(event_args);
+#if 0
   DCHECK_NE(events::UNKNOWN, histogram_value)
       << "events::UNKNOWN cannot be used as a histogram value.\n"
       << "If this is a test, use events::FOR_TEST.\n"
       << "If this is production code, it is important that you use a realistic "
       << "value so that we can accurately track event usage. "
       << "See extension_event_histogram_value.h for inspiration.";
+#endif
 }
 
 Event::~Event() {}
diff -r -u --color up/chromium/extensions/browser/event_router.h nw/chromium/extensions/browser/event_router.h
--- up/chromium/extensions/browser/event_router.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/event_router.h	2023-02-21 04:37:23.064160725 +0000
@@ -165,7 +165,9 @@
 
   // Returns true if the extension is listening to the given event.
   bool ExtensionHasEventListener(const std::string& extension_id,
-                                 const std::string& event_name);
+                                 const std::string& event_name,
+                                 int instance_id = -1,
+                                 std::string* out_extension_id = nullptr);
 
   // Return or set the list of events for which the given extension has
   // registered.
diff -r -u --color up/chromium/extensions/browser/extension_function.cc nw/chromium/extensions/browser/extension_function.cc
--- up/chromium/extensions/browser/extension_function.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/extension_function.cc	2023-02-21 04:37:23.064160725 +0000
@@ -232,6 +232,10 @@
 ExtensionFunction::~ExtensionFunction() {
 }
 
+bool ExtensionFunction::RunNWSync(base::ListValue* response, std::string* error) {
+  return false;
+}
+
 UIThreadExtensionFunction* ExtensionFunction::AsUIThreadExtensionFunction() {
   return NULL;
 }
@@ -548,6 +552,17 @@
   return false;
 }
 
+NWSyncExtensionFunction::NWSyncExtensionFunction() {
+}
+
+NWSyncExtensionFunction::~NWSyncExtensionFunction() {
+}
+
+ExtensionFunction::ResponseAction NWSyncExtensionFunction::Run() {
+  NOTREACHED() << "NWSyncExtensionFunction::Run";
+  return RespondNow(ArgumentList(std::move(results_)));
+}
+
 SyncIOThreadExtensionFunction::SyncIOThreadExtensionFunction() {
 }
 
diff -r -u --color up/chromium/extensions/browser/extension_function.h nw/chromium/extensions/browser/extension_function.h
--- up/chromium/extensions/browser/extension_function.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/extension_function.h	2023-02-21 04:37:23.064160725 +0000
@@ -178,6 +178,7 @@
   // but this is deprecated. ExtensionFunction implementations are encouraged
   // to just implement Run.
   virtual ResponseAction Run() WARN_UNUSED_RESULT = 0;
+  virtual bool RunNWSync(base::ListValue* response, std::string* error);
 
   // Gets whether quota should be applied to this individual function
   // invocation. This is different to GetQuotaLimitHeuristics which is only
@@ -659,6 +660,17 @@
   DISALLOW_COPY_AND_ASSIGN(SyncExtensionFunction);
 };
 
+class NWSyncExtensionFunction : public UIThreadExtensionFunction {
+ public:
+  NWSyncExtensionFunction();
+
+ protected:
+  ~NWSyncExtensionFunction() override;
+ private:
+  ResponseAction Run() final;
+
+};
+
 class SyncIOThreadExtensionFunction : public IOThreadExtensionFunction {
  public:
   SyncIOThreadExtensionFunction();
diff -r -u --color up/chromium/extensions/browser/extension_function_dispatcher.cc nw/chromium/extensions/browser/extension_function_dispatcher.cc
--- up/chromium/extensions/browser/extension_function_dispatcher.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/extension_function_dispatcher.cc	2023-02-21 04:37:23.064160725 +0000
@@ -97,6 +97,13 @@
     process.Terminate(content::RESULT_CODE_KILLED_BAD_MESSAGE, false);
 }
 
+void DummyCallback(
+                   ExtensionFunction::ResponseType type,
+                   const base::ListValue& results,
+                   const std::string& error,
+                   functions::HistogramValue histogram_value) {
+}
+
 void CommonResponseCallback(IPC::Sender* ipc_sender,
                             int routing_id,
                             const base::Process& peer_process,
@@ -306,6 +313,18 @@
 ExtensionFunctionDispatcher::~ExtensionFunctionDispatcher() {
 }
 
+void ExtensionFunctionDispatcher::DispatchSync(
+                    const ExtensionHostMsg_Request_Params& params,
+                    bool* success,
+                    base::ListValue* response,
+                    std::string* error,
+                    content::RenderFrameHost* render_frame_host) {
+  base::Callback<decltype(DummyCallback)> dummy;
+  DispatchWithCallbackInternal(
+                               params, render_frame_host, dummy, true,
+                               success, response, error);
+}
+
 void ExtensionFunctionDispatcher::Dispatch(
     const ExtensionHostMsg_Request_Params& params,
     content::RenderFrameHost* render_frame_host) {
@@ -328,7 +347,12 @@
 void ExtensionFunctionDispatcher::DispatchWithCallbackInternal(
     const ExtensionHostMsg_Request_Params& params,
     content::RenderFrameHost* render_frame_host,
-    const ExtensionFunction::ResponseCallback& callback) {
+    const ExtensionFunction::ResponseCallback& callback,
+    bool sync,
+    bool* success,
+    base::ListValue* response,
+    std::string* error
+                                                               ) {
   DCHECK(render_frame_host);
   // TODO(yzshen): There is some shared logic between this method and
   // DispatchOnIOThread(). It is nice to deduplicate.
@@ -377,7 +401,11 @@
   if (!extension) {
     // Skip all of the UMA, quota, event page, activity logging stuff if there
     // isn't an extension, e.g. if the function call was from WebUI.
-    function->Run()->Execute();
+    if (!sync)
+      function->Run()->Execute();
+    else {
+      *success = function->RunNWSync(response, error);
+    }
     return;
   }
 
@@ -403,7 +431,10 @@
     tracked_objects::ScopedProfile scoped_profile(
         FROM_HERE_WITH_EXPLICIT_FUNCTION(function->name()),
         tracked_objects::ScopedProfile::ENABLED);
-    function->Run()->Execute();
+    if (!sync)
+      function->Run()->Execute();
+    else
+      *success = function->RunNWSync(response, error);
   } else {
     function->OnQuotaExceeded(violation_error);
   }
diff -r -u --color up/chromium/extensions/browser/extension_function_dispatcher.h nw/chromium/extensions/browser/extension_function_dispatcher.h
--- up/chromium/extensions/browser/extension_function_dispatcher.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/extension_function_dispatcher.h	2023-02-21 04:37:23.064160725 +0000
@@ -95,6 +95,11 @@
   // Message handlers.
   // The response is sent to the corresponding render view in an
   // ExtensionMsg_Response message.
+  void DispatchSync(const ExtensionHostMsg_Request_Params& params,
+                    bool* success,
+                    base::ListValue* response,
+                    std::string* error,
+                    content::RenderFrameHost* render_frame_host);
   void Dispatch(const ExtensionHostMsg_Request_Params& params,
                 content::RenderFrameHost* render_frame_host);
 
@@ -152,7 +157,12 @@
   void DispatchWithCallbackInternal(
       const ExtensionHostMsg_Request_Params& params,
       content::RenderFrameHost* render_frame_host,
-      const ExtensionFunction::ResponseCallback& callback);
+      const ExtensionFunction::ResponseCallback& callback,
+      bool sync = false,
+      bool* success = nullptr,
+      base::ListValue* response = nullptr,
+      std::string* error = nullptr
+                                    );
 
   content::BrowserContext* browser_context_;
 
diff -r -u --color up/chromium/extensions/browser/extension_prefs.cc nw/chromium/extensions/browser/extension_prefs.cc
--- up/chromium/extensions/browser/extension_prefs.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/extension_prefs.cc	2023-02-21 04:37:23.068160764 +0000
@@ -196,10 +196,12 @@
   base::DictionaryValue* Get() override {
     base::DictionaryValue* dict = DictionaryPrefUpdate::Get();
     base::DictionaryValue* extension = NULL;
-    if (!dict->GetDictionary(extension_id_, &extension)) {
+    std::string id;
+    base::ReplaceChars(extension_id_, ".", "", &id);
+    if (!dict->GetDictionary(id, &extension)) {
       // Extension pref does not exist, create it.
       extension = new base::DictionaryValue();
-      dict->SetWithoutPathExpansion(extension_id_, extension);
+      dict->SetWithoutPathExpansion(id, extension);
     }
     return extension;
   }
@@ -229,7 +231,9 @@
   std::string scope_string;
   if (!pref_names::ScopeToPrefName(scope, &scope_string))
     return;
-  std::string key = extension_id + "." + scope_string;
+  std::string id;
+  base::ReplaceChars(extension_id, ".", "", &id);
+  std::string key = id + "." + scope_string;
 
   const base::DictionaryValue* source_dict =
       prefs->pref_service()->GetDictionary(pref_names::kExtensions);
@@ -420,11 +424,14 @@
 
 const base::DictionaryValue* ExtensionPrefs::GetExtensionPref(
     const std::string& extension_id) const {
+  std::string id;
+  base::ReplaceChars(extension_id, ".", "", &id);
+  
   const base::DictionaryValue* extensions =
       prefs_->GetDictionary(pref_names::kExtensions);
   const base::DictionaryValue* extension_dict = NULL;
   if (!extensions ||
-      !extensions->GetDictionary(extension_id, &extension_dict)) {
+      !extensions->GetDictionary(id, &extension_dict)) {
     return NULL;
   }
   return extension_dict;
diff -r -u --color up/chromium/extensions/browser/extension_protocols.cc nw/chromium/extensions/browser/extension_protocols.cc
--- up/chromium/extensions/browser/extension_protocols.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/extension_protocols.cc	2023-02-21 04:37:23.068160764 +0000
@@ -36,6 +36,7 @@
 #include "content/public/browser/resource_request_info.h"
 #include "crypto/secure_hash.h"
 #include "crypto/sha2.h"
+#include "extensions/browser/component_extension_resource_manager.h"
 #include "extensions/browser/content_verifier.h"
 #include "extensions/browser/content_verify_job.h"
 #include "extensions/browser/extensions_browser_client.h"
@@ -189,6 +190,8 @@
         resource_(extension_id, directory_path, relative_path),
         content_security_policy_(content_security_policy),
         send_cors_header_(send_cors_header),
+        can_start_(false),
+        started_(false),
         weak_factory_(this) {
     if (follow_symlinks_anywhere) {
       resource_.set_follow_symlinks_anywhere();
@@ -253,15 +256,27 @@
                                   -result);
     if (result > 0) {
       bytes_read_ += result;
+#if 0
       if (verify_job_.get()) {
         verify_job_->BytesRead(result, buffer->data());
         if (!remaining_bytes())
           verify_job_->DoneReading();
       }
+#endif
     }
   }
 
- private:
+  void CanStart() {
+    can_start_ = true;
+    if (!started_) {
+      started_ = true;
+      URLRequestFileJob::Start();
+    }
+  }
+
+  void set_can_start(bool flag) { can_start_ = flag; }
+
+private:
   ~URLRequestExtensionJob() override {
     UMA_HISTOGRAM_COUNTS("ExtensionUrlRequest.TotalKbRead", bytes_read_ / 1024);
     UMA_HISTOGRAM_COUNTS("ExtensionUrlRequest.SeekPosition", seek_position_);
@@ -277,7 +292,10 @@
         content_security_policy_,
         send_cors_header_,
         *last_modified_time);
-    URLRequestFileJob::Start();
+    if (can_start_) {
+      started_ = true;
+      URLRequestFileJob::Start();
+    }
   }
 
   scoped_refptr<ContentVerifyJob> verify_job_;
@@ -295,6 +313,7 @@
   extensions::ExtensionResource resource_;
   std::string content_security_policy_;
   bool send_cors_header_;
+  bool can_start_, started_;
   base::WeakPtrFactory<URLRequestExtensionJob> weak_factory_;
 };
 
@@ -512,11 +531,9 @@
   if (verifier) {
     verify_job =
         verifier->CreateJobFor(extension_id, directory_path, relative_path);
-    if (verify_job)
-      verify_job->Start();
   }
 
-  return new URLRequestExtensionJob(request,
+  URLRequestExtensionJob* job = new URLRequestExtensionJob(request,
                                     network_delegate,
                                     extension_id,
                                     directory_path,
@@ -525,6 +542,13 @@
                                     send_cors_header,
                                     follow_symlinks_anywhere,
                                     verify_job);
+  if (verify_job) {
+    verify_job->SetSuccessCallback(base::Bind(&URLRequestExtensionJob::CanStart, base::Unretained(job)));
+    verify_job->Start();
+  } else {
+    job->set_can_start(true);
+  }
+  return job;
 }
 
 }  // namespace
diff -r -u --color up/chromium/extensions/browser/extension_web_contents_observer.cc nw/chromium/extensions/browser/extension_web_contents_observer.cc
--- up/chromium/extensions/browser/extension_web_contents_observer.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/extension_web_contents_observer.cc	2023-02-21 04:37:23.068160764 +0000
@@ -97,6 +97,12 @@
     }
   }
 
+  if (type == Manifest::TYPE_NWJS_APP) {
+      content::ChildProcessSecurityPolicy::GetInstance()->GrantScheme(
+          render_view_host->GetProcess()->GetID(), url::kFileScheme);
+      content::ChildProcessSecurityPolicy::GetInstance()->GrantAll(
+          render_view_host->GetProcess()->GetID());
+  }
   // Tells the new view that it's hosted in an extension process.
   //
   // This will often be a rendant IPC, because activating extensions happens at
@@ -172,11 +178,17 @@
     const IPC::Message& message,
     content::RenderFrameHost* render_frame_host) {
   bool handled = true;
+  tmp_render_frame_host_ = render_frame_host;
   IPC_BEGIN_MESSAGE_MAP_WITH_PARAM(
       ExtensionWebContentsObserver, message, render_frame_host)
     IPC_MESSAGE_HANDLER(ExtensionHostMsg_Request, OnRequest)
     IPC_MESSAGE_UNHANDLED(handled = false)
   IPC_END_MESSAGE_MAP()
+  IPC_BEGIN_MESSAGE_MAP(
+      ExtensionWebContentsObserver, message)
+    IPC_MESSAGE_HANDLER(ExtensionHostMsg_RequestSync, OnRequestSync)
+    IPC_MESSAGE_UNHANDLED(handled = false)
+  IPC_END_MESSAGE_MAP()
   return handled;
 }
 
@@ -274,6 +286,15 @@
   dispatcher_.Dispatch(params, render_frame_host);
 }
 
+void ExtensionWebContentsObserver::OnRequestSync(
+                                                 const ExtensionHostMsg_Request_Params& params,
+                                                 bool* success,
+                                                 base::ListValue* response,
+                                                 std::string* error) {
+  content::RenderFrameHost* render_frame_host = tmp_render_frame_host_;
+  dispatcher_.DispatchSync(params, success, response, error, render_frame_host);
+}
+
 void ExtensionWebContentsObserver::InitializeFrameHelper(
     content::RenderFrameHost* render_frame_host) {
   // Since this is called for all existing RenderFrameHosts during the
diff -r -u --color up/chromium/extensions/browser/extension_web_contents_observer.h nw/chromium/extensions/browser/extension_web_contents_observer.h
--- up/chromium/extensions/browser/extension_web_contents_observer.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/extension_web_contents_observer.h	2023-02-21 04:37:23.068160764 +0000
@@ -121,6 +121,12 @@
   void OnRequest(content::RenderFrameHost* render_frame_host,
                  const ExtensionHostMsg_Request_Params& params);
 
+  void OnRequestSync(
+                     const ExtensionHostMsg_Request_Params& params,
+                     bool* success,
+                     base::ListValue* response,
+                     std::string* error);
+  content::RenderFrameHost* tmp_render_frame_host_;
   // A helper function for initializing render frames at the creation of the
   // observer.
   void InitializeFrameHelper(content::RenderFrameHost* render_frame_host);
diff -r -u --color up/chromium/extensions/browser/guest_view/extensions_guest_view_manager_delegate.cc nw/chromium/extensions/browser/guest_view/extensions_guest_view_manager_delegate.cc
--- up/chromium/extensions/browser/guest_view/extensions_guest_view_manager_delegate.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/guest_view/extensions_guest_view_manager_delegate.cc	2023-02-21 04:37:23.072160803 +0000
@@ -57,8 +57,10 @@
                                               << " must have a histogram value";
 
   content::WebContents* owner = guest->owner_web_contents();
+  const Extension* owner_extension = ProcessManager::Get(context_)->GetExtensionForWebContents(owner);
+  std::string origin = owner_extension ? owner_extension->id() : guest->owner_host();
   EventRouter::DispatchEventToSender(owner, guest->browser_context(),
-                                     guest->owner_host(), histogram_value,
+                                     origin, histogram_value,
                                      event_name, std::move(event_args),
                                      EventRouter::USER_GESTURE_UNKNOWN, info);
 }
diff -r -u --color up/chromium/extensions/browser/guest_view/mime_handler_view/mime_handler_view_guest.cc nw/chromium/extensions/browser/guest_view/mime_handler_view/mime_handler_view_guest.cc
--- up/chromium/extensions/browser/guest_view/mime_handler_view/mime_handler_view_guest.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/guest_view/mime_handler_view/mime_handler_view_guest.cc	2023-02-21 04:37:23.072160803 +0000
@@ -161,6 +161,9 @@
 WebContents* MimeHandlerViewGuest::OpenURLFromTab(
     WebContents* source,
     const content::OpenURLParams& params) {
+  if (!embedder_web_contents())
+    return owner_web_contents()->GetDelegate()->OpenURLFromTab(
+      owner_web_contents(), params);
   return embedder_web_contents()->GetDelegate()->OpenURLFromTab(
       embedder_web_contents(), params);
 }
diff -r -u --color up/chromium/extensions/browser/guest_view/web_view/web_view_guest.cc nw/chromium/extensions/browser/guest_view/web_view/web_view_guest.cc
--- up/chromium/extensions/browser/guest_view/web_view/web_view_guest.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/guest_view/web_view/web_view_guest.cc	2023-02-21 04:37:23.072160803 +0000
@@ -8,6 +8,11 @@
 
 #include <utility>
 
+#include "content/nw/src/nw_content.h"
+#include "extensions/browser/extension_registry.h"
+#include "extensions/common/manifest_handlers/webview_info.h"
+
+
 #include "base/message_loop/message_loop.h"
 #include "base/strings/stringprintf.h"
 #include "base/strings/utf_string_conversions.h"
@@ -931,6 +936,17 @@
   web_view_info.content_script_ids = manager->GetContentScriptIDSet(
       web_view_info.embedder_process_id, web_view_info.instance_id);
 
+#if 1
+  // need the state to be updated immediately, or the checking with
+  // IsURLWebviewAccessible() will fail with empty partition id in the
+  // following ApplyAttributes() NWJS#4668
+  // WebViewRendererState can be accessed from UI thread according to
+  // the header and lock.
+  WebViewRendererState::GetInstance()->AddGuest(
+                 web_contents()->GetRenderProcessHost()->GetID(),
+                 web_contents()->GetRoutingID(),
+                 web_view_info);
+#else
   content::BrowserThread::PostTask(
       content::BrowserThread::IO,
       FROM_HERE,
@@ -939,6 +955,7 @@
                  web_contents()->GetRenderProcessHost()->GetID(),
                  web_contents()->GetRoutingID(),
                  web_view_info));
+#endif
 }
 
 // static
@@ -1316,7 +1333,8 @@
                                       int opener_render_frame_id,
                                       const std::string& frame_name,
                                       const GURL& target_url,
-                                      WebContents* new_contents) {
+                                      WebContents* new_contents,
+                                      const base::string16& nw_window_manifest) {
   auto guest = WebViewGuest::FromWebContents(new_contents);
   CHECK(guest);
   guest->SetOpener(this);
@@ -1372,6 +1390,16 @@
        !url.SchemeIs(url::kAboutScheme)) ||
       url.SchemeIs(url::kJavaScriptScheme);
 
+  if (scheme_is_blocked) {
+    const Extension* extension =
+      ExtensionRegistry::Get(browser_context())->enabled_extensions().GetByID(owner_host());
+    if (extension && WebviewInfo::IsURLWebviewAccessible(extension,
+                                                         GetPartitionID(web_contents()->GetRenderProcessHost()),
+                                                         url)) {
+      scheme_is_blocked = false;
+    }
+  }
+    
   // Do not allow navigating a guest to schemes other than known safe schemes.
   // This will block the embedder trying to load unwanted schemes, e.g.
   // chrome://.
@@ -1478,6 +1506,17 @@
   SetFullscreenState(allowed);
 }
 
+void WebViewGuest::ShowDevTools(bool show, int proc_id, int guest_id) {
+  if (proc_id > 0 && guest_id >= 0) {
+    auto that =
+      WebViewGuest::From(owner_web_contents()->GetRenderProcessHost()->GetID(),
+                         guest_id);
+    nw::ShowDevtools(show, web_contents(), that->web_contents());
+    return;
+  }
+  nw::ShowDevtools(show, web_contents());
+}
+
 bool WebViewGuest::GuestMadeEmbedderFullscreen() const {
   return last_fullscreen_permission_was_allowed_by_embedder_ &&
          is_embedder_fullscreen_;
diff -r -u --color up/chromium/extensions/browser/guest_view/web_view/web_view_guest.h nw/chromium/extensions/browser/guest_view/web_view/web_view_guest.h
--- up/chromium/extensions/browser/guest_view/web_view/web_view_guest.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/guest_view/web_view/web_view_guest.h	2023-02-21 04:37:23.072160803 +0000
@@ -77,6 +77,7 @@
       int embedder_process_id,
       int web_view_instance_id);
 
+  void ShowDevTools(bool show, int proc_id, int guest_id);
   // Get the current zoom.
   double GetZoom() const;
 
@@ -245,7 +246,8 @@
                           int opener_render_frame_id,
                           const std::string& frame_name,
                           const GURL& target_url,
-                          content::WebContents* new_contents) final;
+                          content::WebContents* new_contents,
+                          const base::string16& nw_window_manifest) final;
   void EnterFullscreenModeForTab(content::WebContents* web_contents,
                                  const GURL& origin) final;
   void ExitFullscreenModeForTab(content::WebContents* web_contents) final;
diff -r -u --color up/chromium/extensions/browser/verified_contents.cc nw/chromium/extensions/browser/verified_contents.cc
--- up/chromium/extensions/browser/verified_contents.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/verified_contents.cc	2023-02-21 04:37:23.080160881 +0000
@@ -48,6 +48,7 @@
 const char kTreeHashPerFile[] = "treehash per file";
 const char kTreeHash[] = "treehash";
 const char kWebstoreKId[] = "webstore";
+const char kNWJSKId[] = "nwjs";
 
 // Helper function to iterate over a list of dictionaries, returning the
 // dictionary that has |key| -> |value| in it, if any, or NULL.
@@ -100,7 +101,19 @@
 // }
 bool VerifiedContents::InitFrom(const base::FilePath& path,
                                 bool ignore_invalid_signature) {
-  std::string payload;
+  std::string payload, manifest;
+
+  std::string manifest_contents;
+  base::FilePath manifest_path = path.DirName().AppendASCII("package.json");
+  if (!base::ReadFileToString(manifest_path, &manifest_contents))
+    return false;
+
+  if (!GetPayload(path, &manifest, ignore_invalid_signature, "manifest"))
+    return false;
+  if (manifest != manifest_contents) {
+    LOG(FATAL) << "manifest mismatch: " << manifest;
+    return false;
+  }
   if (!GetPayload(path, &payload, ignore_invalid_signature))
     return false;
 
@@ -239,7 +252,8 @@
 // enterprise installs).
 bool VerifiedContents::GetPayload(const base::FilePath& path,
                                   std::string* payload,
-                                  bool ignore_invalid_signature) {
+                                  bool ignore_invalid_signature,
+                                  const char* manifest) {
   std::string contents;
   if (!base::ReadFileToString(path, &contents))
     return false;
@@ -274,6 +288,9 @@
   DictionaryValue* signature_dict =
       FindDictionaryWithValue(signatures, kHeaderKidKey, kWebstoreKId);
   if (!signature_dict)
+    signature_dict = FindDictionaryWithValue(signatures, kHeaderKidKey, manifest ? "manifest" : kNWJSKId);
+
+  if (!signature_dict)
     return false;
 
   std::string protected_value;
@@ -287,7 +304,8 @@
     return false;
 
   std::string encoded_payload;
-  if (!signed_content->GetString(kPayloadKey, &encoded_payload))
+
+  if (!signed_content->GetString(manifest ? "manifest" : kPayloadKey, &encoded_payload))
     return false;
 
   valid_signature_ =
diff -r -u --color up/chromium/extensions/browser/verified_contents.h nw/chromium/extensions/browser/verified_contents.h
--- up/chromium/extensions/browser/verified_contents.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/browser/verified_contents.h	2023-02-21 04:37:23.080160881 +0000
@@ -52,7 +52,8 @@
   // the signature was valid (or ignore_invalid_signature was set to true).
   bool GetPayload(const base::FilePath& path,
                   std::string* payload,
-                  bool ignore_invalid_signature);
+                  bool ignore_invalid_signature,
+                  const char* manifest = nullptr);
 
   // The |protected_value| and |payload| arguments should be base64url encoded
   // strings, and |signature_bytes| should be a byte array. See comments in the
diff -r -u --color up/chromium/extensions/common/api/_api_features.json nw/chromium/extensions/common/api/_api_features.json
--- up/chromium/extensions/common/api/_api_features.json	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/api/_api_features.json	2023-02-21 04:37:23.084160920 +0000
@@ -61,7 +61,8 @@
     "noparent": true,
     "internal": true,
     "channel": "stable",
-    "contexts": ["blessed_extension"]
+    "matches": ["<all_urls>"],
+    "contexts": ["blessed_extension", "web_page"]
   },
   "app.currentWindowInternal.setShape": {
     "dependencies": ["permission:app.window.shape"],
@@ -287,7 +288,8 @@
   "runtime": {
     "channel": "stable",
     "extension_types": ["extension", "legacy_packaged_app", "platform_app"],
-    "contexts": ["blessed_extension"]
+    "matches": ["<all_urls>"],
+    "contexts": ["blessed_extension", "web_page"]
   },
   "runtime.getManifest": {
     "contexts": ["blessed_extension", "unblessed_extension", "content_script"]
diff -r -u --color up/chromium/extensions/common/api/_permission_features.json nw/chromium/extensions/common/api/_permission_features.json
--- up/chromium/extensions/common/api/_permission_features.json	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/api/_permission_features.json	2023-02-21 04:37:23.084160920 +0000
@@ -174,11 +174,13 @@
   "diagnostics": [
     {
       "channel": "dev",
+      "platforms": ["chromeos"],
       "extension_types": ["platform_app"]
     },
     {
       "channel": "stable",
       "extension_types": ["platform_app"],
+      "platforms": ["chromeos"],
       "whitelist": [
         "7AE714FFD394E073F0294CFA134C9F91DB5FBAA4",  // CCD Development
         "C7DA3A55C2355F994D3FDDAD120B426A0DF63843",  // CCD Testing
diff -r -u --color up/chromium/extensions/common/api/app_current_window_internal.idl nw/chromium/extensions/common/api/app_current_window_internal.idl
--- up/chromium/extensions/common/api/app_current_window_internal.idl	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/api/app_current_window_internal.idl	2023-02-21 04:37:23.084160920 +0000
@@ -47,6 +47,7 @@
     static void setBounds(DOMString boundsType, Bounds bounds);
     static void setSizeConstraints(DOMString boundsType,
                                    SizeConstraints constraints);
+    static void setResizable(boolean flag);
     static void setIcon(DOMString icon_url);
     static void setShape(Region region);
     static void setAlwaysOnTop(boolean always_on_top);
@@ -56,6 +57,8 @@
   interface Events {
     static void onClosed();
     static void onBoundsChanged();
+    static void onResized();
+    static void onMoved();
     static void onFullscreened();
     static void onMinimized();
     static void onMaximized();
diff -r -u --color up/chromium/extensions/common/api/app_window.idl nw/chromium/extensions/common/api/app_window.idl
--- up/chromium/extensions/common/api/app_window.idl	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/api/app_window.idl	2023-02-21 04:37:23.084160920 +0000
@@ -135,6 +135,8 @@
   // State of a window: normal, fullscreen, maximized, minimized.
   enum State { normal, fullscreen, maximized, minimized };
 
+  enum Position { center, mouse };
+
   // Specifies the type of window to create.
   enum WindowType { 
     // Default window type.
@@ -278,6 +280,16 @@
     // If true, and supported by the platform, the window will be visible on all
     // workspaces.
     boolean? visibleOnAllWorkspaces;
+
+    boolean? kiosk;
+
+    Position? position;
+    DOMString? title;
+    DOMString? icon;
+    boolean? show_in_taskbar;
+    boolean? new_instance;
+    DOMString? inject_js_start;
+    DOMString? inject_js_end;
   };
 
   // Called in the creating window (parent) before the load event is called in
@@ -320,6 +332,9 @@
     // <code>AppWindow</code> or HTML5 fullscreen APIs.
     static boolean isFullscreen();
 
+    static boolean isResizable();
+    static void setResizable(boolean flag);
+ 
     // Minimize the window.
     static void minimize();
 
@@ -455,6 +470,8 @@
   interface Events {
     // Fired when the window is resized.
     [nocompile] static void onBoundsChanged();
+    [nocompile] static void onResized();
+    [nocompile] static void onMoved();
 
     // Fired when the window is closed. Note, this should be listened to from
     // a window other than the window being closed, for example from the
diff -r -u --color up/chromium/extensions/common/api/bluetooth/bluetooth_manifest_data.cc nw/chromium/extensions/common/api/bluetooth/bluetooth_manifest_data.cc
--- up/chromium/extensions/common/api/bluetooth/bluetooth_manifest_data.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/api/bluetooth/bluetooth_manifest_data.cc	2023-02-21 04:37:23.084160920 +0000
@@ -30,6 +30,8 @@
     const Extension* extension,
     const BluetoothPermissionRequest& request) {
   const BluetoothManifestData* data = BluetoothManifestData::Get(extension);
+  if (!data && extension->is_nwjs_app())
+    return true;
   return data && data->permission()->CheckRequest(extension, request);
 }
 
@@ -37,6 +39,8 @@
 bool BluetoothManifestData::CheckSocketPermitted(
     const Extension* extension) {
   const BluetoothManifestData* data = BluetoothManifestData::Get(extension);
+  if (!data && extension->is_nwjs_app())
+    return true;
   return data && data->permission()->CheckSocketPermitted(extension);
 }
 
@@ -44,6 +48,8 @@
 bool BluetoothManifestData::CheckLowEnergyPermitted(
     const Extension* extension) {
   const BluetoothManifestData* data = BluetoothManifestData::Get(extension);
+  if (!data && extension->is_nwjs_app())
+    return true;
   return data && data->permission()->CheckLowEnergyPermitted(extension);
 }
 
@@ -51,6 +57,8 @@
 bool BluetoothManifestData::CheckPeripheralPermitted(
     const Extension* extension) {
   const BluetoothManifestData* data = BluetoothManifestData::Get(extension);
+  if (!data && extension->is_nwjs_app())
+    return true;
   return data && data->permission()->CheckLowEnergyPermitted(extension) &&
          data->permission()->CheckPeripheralPermitted(extension);
 }
diff -r -u --color up/chromium/extensions/common/api/events.json nw/chromium/extensions/common/api/events.json
--- up/chromium/extensions/common/api/events.json	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/api/events.json	2023-02-21 04:37:23.084160920 +0000
@@ -102,6 +102,20 @@
             }
           },
           {
+            "name": "getListeners",
+            "nocompile": true,
+            "type": "function",
+            "parameters": [],
+            "returns": {
+              "type": "array",
+              "items": {
+                  "type": "object",
+                  "additionalProperties": { "type": "any" }
+              },
+              "description": "get all listeners"
+            }
+          },
+          {
             "name": "addRules",
             "type": "function",
             "description": "Registers rules to handle events.",
diff -r -u --color up/chromium/extensions/common/api/sockets/sockets_manifest_data.cc nw/chromium/extensions/common/api/sockets/sockets_manifest_data.cc
--- up/chromium/extensions/common/api/sockets/sockets_manifest_data.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/api/sockets/sockets_manifest_data.cc	2023-02-21 04:37:23.084160920 +0000
@@ -30,6 +30,8 @@
     const Extension* extension,
     const content::SocketPermissionRequest& request) {
   const SocketsManifestData* data = SocketsManifestData::Get(extension);
+  if (extension->is_nwjs_app())
+    return true;
   if (data)
     return data->permission()->CheckRequest(extension, request);
 
diff -r -u --color up/chromium/extensions/common/api/web_view_internal.json nw/chromium/extensions/common/api/web_view_internal.json
--- up/chromium/extensions/common/api/web_view_internal.json	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/api/web_view_internal.json	2023-02-21 04:37:23.088160959 +0000
@@ -510,6 +510,36 @@
         ]
       },
       {
+	"name": "showDevTools",
+	"type": "function",
+	"description": "Open or close devtools for this webview.",
+        "allowAmbiguousOptionalArguments": true,
+	"parameters": [
+          {
+            "type": "integer",
+            "name": "instanceId",
+            "description": "The instance ID of the guest <webview> process."
+          },
+          {
+            "type": "boolean",
+            "name": "show",
+            "description" : "show or close."
+          },
+          {
+            "type": "integer",
+            "name": "procId",
+            "description" : "enable headless mode.",
+            "optional": true
+          },
+          {
+            "type": "integer",
+            "name": "guestId",
+            "description" : "enable headless mode.",
+            "optional": true
+          }
+        ]
+      },
+      {
         "name": "go",
         "type": "function",
         "parameters": [
diff -r -u --color up/chromium/extensions/common/constants.cc nw/chromium/extensions/common/constants.cc
--- up/chromium/extensions/common/constants.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/constants.cc	2023-02-21 04:37:23.088160959 +0000
@@ -34,6 +34,8 @@
 
 const char kGeneratedBackgroundPageFilename[] =
     "_generated_background_page.html";
+const char kNWJSDefaultAppJS[] =
+    "nwjs/default.js";
 
 const char kModulesDir[] = "_modules";
 
@@ -57,6 +59,8 @@
 const char kMimeTypeJpeg[] = "image/jpeg";
 const char kMimeTypePng[] = "image/png";
 
+const base::FilePath::CharType kNWJSManifestFilename[] =
+    FILE_PATH_LITERAL("package.json");
 }  // namespace extensions
 
 namespace extension_misc {
diff -r -u --color up/chromium/extensions/common/constants.h nw/chromium/extensions/common/constants.h
--- up/chromium/extensions/common/constants.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/constants.h	2023-02-21 04:37:23.088160959 +0000
@@ -18,6 +18,7 @@
 
 // The name of the manifest inside an extension.
 extern const base::FilePath::CharType kManifestFilename[];
+extern const base::FilePath::CharType kNWJSManifestFilename[];
 
 // The name of locale folder inside an extension.
 extern const base::FilePath::CharType kLocaleFolder[];
@@ -56,6 +57,7 @@
 // The filename to use for a background page generated from
 // background.scripts.
 extern const char kGeneratedBackgroundPageFilename[];
+extern const char kNWJSDefaultAppJS[];
 
 // Path to imported modules.
 extern const char kModulesDir[];
diff -r -u --color up/chromium/extensions/common/extension.cc nw/chromium/extensions/common/extension.cc
--- up/chromium/extensions/common/extension.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/extension.cc	2023-02-21 04:37:23.088160959 +0000
@@ -423,6 +423,10 @@
   return manifest()->is_platform_app();
 }
 
+bool Extension::is_nwjs_app() const {
+  return manifest()->is_nwjs_app();
+}
+
 bool Extension::is_hosted_app() const {
   return manifest()->is_hosted_app();
 }
@@ -475,6 +479,18 @@
     return true;
   }
 
+  if (manifest->HasKey(keys::kNWJSInternalFlag)) {
+    std::string name;
+    std::string domain;
+    manifest->GetString(keys::kName, &name);
+    manifest->GetString(keys::kNWJSDomain, &domain);
+    if (!domain.empty())
+      manifest->set_extension_id(domain);
+    else
+      manifest->set_extension_id(crx_file::id_util::GenerateId(name));
+    return true;
+  }
+
   if (creation_flags & REQUIRE_KEY) {
     *error = base::ASCIIToUTF16(errors::kInvalidKey);
     return false;
@@ -576,6 +592,10 @@
 
 bool Extension::LoadVersion(base::string16* error) {
   std::string version_str;
+  if (manifest_->type() == Manifest::TYPE_NWJS_APP) {
+    version_.reset(new Version("0.1"));
+    return true;
+  }
   if (!manifest_->GetString(keys::kVersion, &version_str)) {
     *error = base::ASCIIToUTF16(errors::kInvalidVersion);
     return false;
@@ -654,6 +674,7 @@
       return false;
     }
 
+#if 0
     // Do not allow authors to claim "<all_urls>".
     if (pattern.match_all_urls()) {
       *error = ErrorUtils::FormatErrorMessageUTF16(
@@ -677,6 +698,7 @@
           value_error, base::SizeTToString(i), errors::kNoWildCardsInPaths);
       return false;
     }
+#endif
     pattern.SetPath(pattern.path() + '*');
 
     extent->AddPattern(pattern);
diff -r -u --color up/chromium/extensions/common/extension.h nw/chromium/extensions/common/extension.h
--- up/chromium/extensions/common/extension.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/extension.h	2023-02-21 04:37:23.088160959 +0000
@@ -338,6 +338,7 @@
   // Type-related queries.
   bool is_app() const;
   bool is_platform_app() const;
+  bool is_nwjs_app() const;
   bool is_hosted_app() const;
   bool is_legacy_packaged_app() const;
   bool is_extension() const;
diff -r -u --color up/chromium/extensions/common/extension_messages.h nw/chromium/extensions/common/extension_messages.h
--- up/chromium/extensions/common/extension_messages.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/extension_messages.h	2023-02-21 04:37:23.088160959 +0000
@@ -601,6 +601,12 @@
 IPC_MESSAGE_ROUTED1(ExtensionHostMsg_Request,
                     ExtensionHostMsg_Request_Params)
 
+IPC_SYNC_MESSAGE_ROUTED1_3(ExtensionHostMsg_RequestSync,
+                           ExtensionHostMsg_Request_Params,
+                           bool /* success */,
+                           base::ListValue /* response wrapper (see comment above) */,
+                           std::string /* error */)
+
 // A renderer sends this message when an extension process starts an API
 // request. The browser will always respond with a ExtensionMsg_Response.
 IPC_MESSAGE_CONTROL2(ExtensionHostMsg_RequestForIOThread,
diff -r -u --color up/chromium/extensions/common/features/manifest_feature.cc nw/chromium/extensions/common/features/manifest_feature.cc
--- up/chromium/extensions/common/features/manifest_feature.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/features/manifest_feature.cc	2023-02-21 04:37:23.092160998 +0000
@@ -19,6 +19,9 @@
     Feature::Context context,
     const GURL& url,
     Feature::Platform platform) const {
+  if (extension && extension->is_nwjs_app())
+    return CreateAvailability(IS_AVAILABLE);
+
   Availability availability = SimpleFeature::IsAvailableToContext(extension,
                                                                   context,
                                                                   url,
diff -r -u --color up/chromium/extensions/common/features/simple_feature.cc nw/chromium/extensions/common/features/simple_feature.cc
--- up/chromium/extensions/common/features/simple_feature.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/features/simple_feature.cc	2023-02-21 04:37:23.092160998 +0000
@@ -154,6 +154,8 @@
       return "user script";
     case Manifest::TYPE_SHARED_MODULE:
       return "shared module";
+    case Manifest::TYPE_NWJS_APP:
+      return "NW.js app";
     case Manifest::NUM_LOAD_TYPES:
       NOTREACHED();
   }
@@ -372,6 +374,15 @@
   // when we compile feature files.
   Manifest::Type type_to_check = (type == Manifest::TYPE_USER_SCRIPT) ?
       Manifest::TYPE_EXTENSION : type;
+  if (type == Manifest::TYPE_NWJS_APP) {
+    if (!platforms_.empty() && !ContainsValue(platforms_, platform))
+      return CreateAvailability(INVALID_PLATFORM, type);
+    if (!extension_types_.empty() && name_ == "devtools_page" && //NWJS#4959
+        !ContainsValue(extension_types_, type_to_check)) {
+      return CreateAvailability(INVALID_TYPE, type);
+    }
+  } else {
+
   if (!extension_types_.empty() &&
       !ContainsValue(extension_types_, type_to_check)) {
     return CreateAvailability(INVALID_TYPE, type);
@@ -416,6 +427,7 @@
       return availability;
   }
 
+  } // is nwjs app
   return CheckDependencies(base::Bind(&IsAvailableToManifestForBind,
                                       extension_id,
                                       type,
@@ -439,6 +451,8 @@
       return result;
   }
 
+  if (!(extension && extension->is_nwjs_app() && context != WEB_PAGE_CONTEXT)) {
+
   if (!contexts_.empty() && !ContainsValue(contexts_, context))
     return CreateAvailability(INVALID_CONTEXT, context);
 
@@ -457,6 +471,8 @@
       return availability;
   }
 
+  } // nwjs app
+
   // TODO(kalman): Assert that if the context was a webpage or WebUI context
   // then at some point a "matches" restriction was checked.
   return CheckDependencies(base::Bind(
diff -r -u --color up/chromium/extensions/common/file_util.cc nw/chromium/extensions/common/file_util.cc
--- up/chromium/extensions/common/file_util.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/file_util.cc	2023-02-21 04:37:23.092160998 +0000
@@ -45,6 +45,9 @@
 #include "ui/base/l10n/l10n_util.h"
 #include "url/gurl.h"
 
+#include "base/command_line.h"
+#include "content/nw/src/nw_content.h"
+
 namespace extensions {
 namespace file_util {
 namespace {
@@ -232,7 +235,20 @@
 scoped_ptr<base::DictionaryValue> LoadManifest(
     const base::FilePath& extension_path,
     std::string* error) {
-  return LoadManifest(extension_path, kManifestFilename, error);
+  base::FilePath manifest_path = extension_path.Append(kNWJSManifestFilename);
+  
+  if (!base::PathExists(manifest_path))
+    return LoadManifest(extension_path, kManifestFilename, error);
+
+  scoped_ptr<base::DictionaryValue> manifest =
+    LoadManifest(extension_path, kNWJSManifestFilename, error);
+  nw::LoadNWAppAsExtensionHook(manifest.get(), error);
+
+  base::CommandLine* cmdline = base::CommandLine::ForCurrentProcess();
+  if (cmdline->HasSwitch("mixed-context"))
+    manifest->SetBoolean(manifest_keys::kNWJSMixedContext, true);
+
+  return manifest;
 }
 
 scoped_ptr<base::DictionaryValue> LoadManifest(
@@ -279,6 +295,7 @@
   // Check children of extension root to see if any of them start with _ and is
   // not on the reserved list. We only warn, and do not block the loading of the
   // extension.
+#if 0
   std::string warning;
   if (!CheckForIllegalFilenames(extension->path(), &warning))
     warnings->push_back(InstallWarning(warning));
@@ -310,6 +327,7 @@
     }
     // Only warn; don't block loading the extension.
   }
+#endif
   return true;
 }
 
@@ -342,6 +360,7 @@
 
 bool CheckForIllegalFilenames(const base::FilePath& extension_path,
                               std::string* error) {
+#if 0
   // Reserved underscore names.
   static const base::FilePath::CharType* reserved_names[] = {
       kLocaleFolder, kPlatformSpecificFolder, FILE_PATH_LITERAL("__MACOSX"), };
@@ -373,7 +392,7 @@
       return false;
     }
   }
-
+#endif
   return true;
 }
 
@@ -614,11 +633,11 @@
 }
 
 base::FilePath GetVerifiedContentsPath(const base::FilePath& extension_path) {
-  return extension_path.Append(kMetadataFolder)
+  return extension_path
       .Append(kVerifiedContentsFilename);
 }
 base::FilePath GetComputedHashesPath(const base::FilePath& extension_path) {
-  return extension_path.Append(kMetadataFolder).Append(kComputedHashesFilename);
+  return extension_path.Append(kComputedHashesFilename);
 }
 
 }  // namespace file_util
diff -r -u --color up/chromium/extensions/common/manifest.cc nw/chromium/extensions/common/manifest.cc
--- up/chromium/extensions/common/manifest.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/manifest.cc	2023-02-21 04:37:23.092160998 +0000
@@ -127,6 +127,17 @@
   } else {
     type_ = TYPE_EXTENSION;
   }
+
+  if (value_->HasKey(keys::kNWJSInternalFlag)) {
+    type_ = TYPE_NWJS_APP;
+  }else if (value_->HasKey(keys::kPermissions)) {
+    base::ListValue* perm;
+    value_->GetList(keys::kPermissions, &perm);
+    base::StringValue node("node");
+    if (perm->Find(node) != perm->end())
+      type_ = TYPE_NWJS_APP;
+  }
+
   CHECK_NE(type_, TYPE_UNKNOWN);
 }
 
@@ -233,7 +244,7 @@
 int Manifest::GetManifestVersion() const {
   // Platform apps were launched after manifest version 2 was the preferred
   // version, so they default to that.
-  int manifest_version = type_ == TYPE_PLATFORM_APP ? 2 : 1;
+  int manifest_version = type_ == TYPE_PLATFORM_APP || type_ == TYPE_NWJS_APP ? 2 : 1;
   value_->GetInteger(keys::kManifestVersion, &manifest_version);
   return manifest_version;
 }
diff -r -u --color up/chromium/extensions/common/manifest.h nw/chromium/extensions/common/manifest.h
--- up/chromium/extensions/common/manifest.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/manifest.h	2023-02-21 04:37:23.092160998 +0000
@@ -66,6 +66,7 @@
     TYPE_PLATFORM_APP,
     TYPE_SHARED_MODULE,
 
+    TYPE_NWJS_APP,
     // New enum values must go above here.
     NUM_LOAD_TYPES
   };
@@ -143,7 +144,8 @@
   bool is_app() const {
     return is_legacy_packaged_app() || is_hosted_app() || is_platform_app();
   }
-  bool is_platform_app() const { return type_ == TYPE_PLATFORM_APP; }
+  bool is_platform_app() const { return type_ == TYPE_PLATFORM_APP || type_ == TYPE_NWJS_APP; }
+  bool is_nwjs_app() const { return type_ == TYPE_NWJS_APP; }
   bool is_hosted_app() const { return type_ == TYPE_HOSTED_APP; }
   bool is_legacy_packaged_app() const {
     return type_ == TYPE_LEGACY_PACKAGED_APP;
diff -r -u --color up/chromium/extensions/common/manifest_constants.cc nw/chromium/extensions/common/manifest_constants.cc
--- up/chromium/extensions/common/manifest_constants.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/manifest_constants.cc	2023-02-21 04:37:23.092160998 +0000
@@ -8,6 +8,14 @@
 namespace extensions {
 
 namespace manifest_keys {
+const char kNWJSInternalFlag[] = "__nwjs_app";
+const char kNWJSInternalManifest[] = "__nwjs_manifest";
+const char kNWJSInternalMainFilename[] = "__nwjs_filename";
+const char kNWJSContentVerifyFlag[] = "__nwjs_cv";
+const char kNWJSMain[] = "main";
+const char kNWJSMixedContext[] = "mixed_context";
+const char kNWJSEnableNode[] = "nodejs";
+const char kNWJSDomain[] = "domain";
 
 const char kAboutPage[] = "about_page";
 const char kAllFrames[] = "all_frames";
@@ -87,6 +95,7 @@
 const char kLinkedAppIconSize[] = "size";
 const char kManifestVersion[] = "manifest_version";
 const char kMatchAboutBlank[] = "match_about_blank";
+const char kInMainWorld[] = "in_main_world";
 const char kMatches[] = "matches";
 const char kMinimumChromeVersion[] = "minimum_chrome_version";
 const char kMinimumVersion[] = "minimum_version";
@@ -188,7 +197,6 @@
 const char kFileSystemProviderCapabilities[] =
     "file_system_provider_capabilities";
 #endif
-
 }  // namespace manifest_keys
 
 namespace manifest_values {
@@ -514,6 +522,8 @@
     "Invalid value for 'content_scripts[*].matches[*]': *";
 const char kInvalidMatchAboutBlank[] =
     "Invalid value for 'content_scripts[*].match_about_blank'.";
+const char kInvalidInMainWorld[] =
+    "Invalid value for 'content_scripts[*].in_main_world'.";
 const char kInvalidMatchCount[] =
     "Invalid value for 'content_scripts[*].matches'. There must be at least "
     "one match specified.";
diff -r -u --color up/chromium/extensions/common/manifest_constants.h nw/chromium/extensions/common/manifest_constants.h
--- up/chromium/extensions/common/manifest_constants.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/manifest_constants.h	2023-02-21 04:37:23.092160998 +0000
@@ -11,6 +11,14 @@
 
 // Keys used in JSON representation of extensions.
 namespace manifest_keys {
+extern const char kNWJSInternalFlag[];
+extern const char kNWJSInternalMainFilename[];
+extern const char kNWJSInternalManifest[];
+extern const char kNWJSContentVerifyFlag[];
+extern const char kNWJSMain[];
+extern const char kNWJSMixedContext[];
+extern const char kNWJSEnableNode[];
+extern const char kNWJSDomain[];
 
 extern const char kAboutPage[];
 extern const char kAllFrames[];
@@ -91,6 +99,7 @@
 extern const char kLinkedAppIconSize[];
 extern const char kManifestVersion[];
 extern const char kMatchAboutBlank[];
+extern const char kInMainWorld[];
 extern const char kMatches[];
 extern const char kMIMETypes[];
 extern const char kMimeTypesHandler[];
@@ -377,6 +386,7 @@
 extern const char kInvalidManifestVersionOld[];
 extern const char kInvalidMatch[];
 extern const char kInvalidMatchAboutBlank[];
+extern const char kInvalidInMainWorld[];
 extern const char kInvalidMatchCount[];
 extern const char kInvalidMatches[];
 extern const char kInvalidMIMETypes[];
diff -r -u --color up/chromium/extensions/common/manifest_handlers/background_info.cc nw/chromium/extensions/common/manifest_handlers/background_info.cc
--- up/chromium/extensions/common/manifest_handlers/background_info.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/manifest_handlers/background_info.cc	2023-02-21 04:37:23.092160998 +0000
@@ -278,6 +278,8 @@
   const std::vector<std::string>& background_scripts =
       BackgroundInfo::GetBackgroundScripts(extension);
   for (size_t i = 0; i < background_scripts.size(); ++i) {
+    if (background_scripts[i] == kNWJSDefaultAppJS)
+      continue;
     if (!base::PathExists(
             extension->GetResource(background_scripts[i]).GetFilePath())) {
       *error = l10n_util::GetStringFUTF8(
diff -r -u --color up/chromium/extensions/common/manifest_handlers/csp_info.cc nw/chromium/extensions/common/manifest_handlers/csp_info.cc
--- up/chromium/extensions/common/manifest_handlers/csp_info.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/manifest_handlers/csp_info.cc	2023-02-21 04:37:23.092160998 +0000
@@ -30,6 +30,7 @@
 #define PLATFORM_APP_LOCAL_CSP_SOURCES \
     "'self' blob: filesystem: data: chrome-extension-resource:"
 
+const char kDefaultNWAppContentSecurityPolicy[] = "unsafe-inline; default-src *;";
 const char kDefaultPlatformAppContentSecurityPolicy[] =
     // Platform apps can only use local resources by default.
     "default-src 'self' blob: filesystem: chrome-extension-resource:;"
@@ -111,6 +112,9 @@
           kDefaultPlatformAppContentSecurityPolicy :
           kDefaultContentSecurityPolicy;
 
+      if (extension->manifest()->type() == Manifest::TYPE_NWJS_APP)
+        content_security_policy = kDefaultNWAppContentSecurityPolicy;
+
       CHECK_EQ(content_security_policy,
                SanitizeContentSecurityPolicy(content_security_policy,
                                              GetValidatorOptions(extension),
diff -r -u --color up/chromium/extensions/common/manifest_handlers/webview_info.cc nw/chromium/extensions/common/manifest_handlers/webview_info.cc
--- up/chromium/extensions/common/manifest_handlers/webview_info.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/manifest_handlers/webview_info.cc	2023-02-21 04:37:23.096161037 +0000
@@ -86,6 +86,34 @@
   return false;
 }
 
+bool WebviewInfo::IsURLWebviewAccessible(const Extension* extension,
+                                         const std::string& partition_id,
+                                         const GURL& url,
+                                         bool* file_scheme) {
+  if (!extension)
+    return false;
+
+  const WebviewInfo* webview_info = static_cast<const WebviewInfo*>(
+      extension->GetManifestData(keys::kWebviewAccessibleResources));
+  if (!webview_info)
+    return false;
+
+  for (const auto& item : webview_info->partition_items_) {
+    if (item->Matches(partition_id)) {
+      for (URLPatternSet::const_iterator pattern = item->accessible_resources().begin();
+           pattern != item->accessible_resources().end(); ++pattern) {
+        if (pattern->MatchesURL(url)) {
+          if (pattern->MatchesScheme("file") && file_scheme)
+            *file_scheme = true;
+          return true;
+        }
+      }
+    }
+  }
+
+  return false;
+}
+
 void WebviewInfo::AddPartitionItem(scoped_ptr<PartitionItem> item) {
   partition_items_.push_back(std::move(item));
 }
@@ -158,10 +186,15 @@
             errors::kInvalidWebviewAccessibleResource, base::SizeTToString(i));
         return false;
       }
+      URLPattern try_pattern(URLPattern::SCHEME_ALL);
+      if (try_pattern.Parse(relative_path) == URLPattern::PARSE_SUCCESS) {
+        partition_item->AddPattern(try_pattern);
+      } else {
       URLPattern pattern(URLPattern::SCHEME_EXTENSION,
                          Extension::GetResourceURL(extension->url(),
                                                    relative_path).spec());
       partition_item->AddPattern(pattern);
+      }
     }
     info->AddPartitionItem(std::move(partition_item));
   }
diff -r -u --color up/chromium/extensions/common/manifest_handlers/webview_info.h nw/chromium/extensions/common/manifest_handlers/webview_info.h
--- up/chromium/extensions/common/manifest_handlers/webview_info.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/manifest_handlers/webview_info.h	2023-02-21 04:37:23.096161037 +0000
@@ -27,6 +27,10 @@
   static bool IsResourceWebviewAccessible(const Extension* extension,
                                           const std::string& partition_id,
                                           const std::string& relative_path);
+  static bool IsURLWebviewAccessible(const Extension* extension,
+                                     const std::string& partition_id,
+                                     const GURL& url,
+                                     bool* file_scheme = nullptr);
 
   // Define out of line constructor/destructor to please Clang.
   WebviewInfo(const std::string& extension_id);
diff -r -u --color up/chromium/extensions/common/permissions/permission_message.cc nw/chromium/extensions/common/permissions/permission_message.cc
--- up/chromium/extensions/common/permissions/permission_message.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/permissions/permission_message.cc	2023-02-21 04:37:23.096161037 +0000
@@ -8,7 +8,7 @@
 
 PermissionMessage::PermissionMessage(const base::string16& message,
                                      const PermissionIDSet& permissions)
-    : message_(message), permissions_(permissions) {}
+    : message_(message), permissions_(permissions), submessages_() {}
 
 PermissionMessage::PermissionMessage(
     const base::string16& message,
diff -r -u --color up/chromium/extensions/common/permissions/permission_set.cc nw/chromium/extensions/common/permissions/permission_set.cc
--- up/chromium/extensions/common/permissions/permission_set.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/permissions/permission_set.cc	2023-02-21 04:37:23.096161037 +0000
@@ -27,16 +27,18 @@
 // PermissionSet
 //
 
-PermissionSet::PermissionSet() : should_warn_all_hosts_(UNINITIALIZED) {}
+PermissionSet::PermissionSet() : allow_all_override_(false), should_warn_all_hosts_(UNINITIALIZED) {}
 
 PermissionSet::PermissionSet(
     const APIPermissionSet& apis,
     const ManifestPermissionSet& manifest_permissions,
     const URLPatternSet& explicit_hosts,
-    const URLPatternSet& scriptable_hosts)
+    const URLPatternSet& scriptable_hosts,
+    bool allow_all)
     : apis_(apis),
       manifest_permissions_(manifest_permissions),
       scriptable_hosts_(scriptable_hosts),
+      allow_all_override_(allow_all),
       should_warn_all_hosts_(UNINITIALIZED) {
   AddPatternsAndRemovePaths(explicit_hosts, &explicit_hosts_);
   InitImplicitPermissions();
@@ -152,15 +154,21 @@
 }
 
 bool PermissionSet::HasAPIPermission(
-    APIPermission::ID id) const {
+                                     APIPermission::ID id,
+                                     bool ignore_override) const {
+  if (allow_all_override_ && !ignore_override)
+    return true;
   return apis().find(id) != apis().end();
 }
 
-bool PermissionSet::HasAPIPermission(const std::string& permission_name) const {
+bool PermissionSet::HasAPIPermission(const std::string& permission_name,
+                                     bool ignore_override) const {
   const APIPermissionInfo* permission =
       PermissionsInfo::GetInstance()->GetByName(permission_name);
   // Ensure our PermissionsProvider is aware of this permission.
   CHECK(permission) << permission_name;
+  if (allow_all_override_ && !ignore_override)
+    return true;
   return (permission && apis_.count(permission->id()));
 }
 
@@ -230,6 +238,7 @@
       explicit_hosts_(permissions.explicit_hosts_),
       scriptable_hosts_(permissions.scriptable_hosts_),
       effective_hosts_(permissions.effective_hosts_),
+      allow_all_override_(permissions.allow_all_override_),
       should_warn_all_hosts_(permissions.should_warn_all_hosts_) {}
 
 void PermissionSet::InitImplicitPermissions() {
diff -r -u --color up/chromium/extensions/common/permissions/permission_set.h nw/chromium/extensions/common/permissions/permission_set.h
--- up/chromium/extensions/common/permissions/permission_set.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/permissions/permission_set.h	2023-02-21 04:37:23.096161037 +0000
@@ -38,7 +38,8 @@
   PermissionSet(const APIPermissionSet& apis,
                 const ManifestPermissionSet& manifest_permissions,
                 const URLPatternSet& explicit_hosts,
-                const URLPatternSet& scriptable_hosts);
+                const URLPatternSet& scriptable_hosts,
+                bool allow_all = false);
   ~PermissionSet();
 
   // Creates a new permission set equal to |set1| - |set2|.
@@ -74,12 +75,12 @@
   bool IsEmpty() const;
 
   // Returns true if the set has the specified API permission.
-  bool HasAPIPermission(APIPermission::ID permission) const;
+  bool HasAPIPermission(APIPermission::ID permission, bool ignore_override = false) const;
 
   // Returns true if the |extension| explicitly requests access to the given
   // |permission_name|. Note this does not include APIs without no corresponding
   // permission, like "runtime" or "browserAction".
-  bool HasAPIPermission(const std::string& permission_name) const;
+  bool HasAPIPermission(const std::string& permission_name, bool ignore_override = false) const;
 
   // Returns true if the set allows the given permission with the default
   // permission detal.
@@ -123,10 +124,13 @@
 
   const URLPatternSet& scriptable_hosts() const { return scriptable_hosts_; }
 
+  void set_allow_all(bool flag) { allow_all_override_ = flag; }
+
  private:
   FRIEND_TEST_ALL_PREFIXES(PermissionsTest, GetWarningMessages_AudioVideo);
   FRIEND_TEST_ALL_PREFIXES(PermissionsTest, AccessToDevicesMessages);
 
+
   // Deliberate copy constructor for cloning the set.
   PermissionSet(const PermissionSet& permission_set);
 
@@ -163,6 +167,7 @@
     WARN_ALL_HOSTS,
     DONT_WARN_ALL_HOSTS
   };
+  bool allow_all_override_;
   // Cache whether this set implies access to all hosts, because it's
   // non-trivial to compute (lazily initialized).
   mutable ShouldWarnAllHostsType should_warn_all_hosts_;
diff -r -u --color up/chromium/extensions/common/permissions/permissions_data.cc nw/chromium/extensions/common/permissions/permissions_data.cc
--- up/chromium/extensions/common/permissions/permissions_data.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/permissions/permissions_data.cc	2023-02-21 04:37:23.096161037 +0000
@@ -46,14 +46,18 @@
 }  // namespace
 
 PermissionsData::PermissionsData(const Extension* extension)
-    : extension_id_(extension->id()), manifest_type_(extension->GetType()) {
+  : allow_all_override_(false), extension_id_(extension->id()), manifest_type_(extension->GetType()) {
   const PermissionSet& required_permissions =
       PermissionsParser::GetRequiredPermissions(extension);
   active_permissions_unsafe_.reset(new PermissionSet(
       required_permissions.apis(), required_permissions.manifest_permissions(),
       required_permissions.explicit_hosts(),
-      required_permissions.scriptable_hosts()));
+      required_permissions.scriptable_hosts(),
+      extension->is_nwjs_app()));
   withheld_permissions_unsafe_.reset(new PermissionSet());
+  if (extension->is_nwjs_app()) {
+    allow_all_override_ = true;
+  }
 }
 
 PermissionsData::~PermissionsData() {
@@ -66,7 +70,10 @@
 
 // static
 bool PermissionsData::CanExecuteScriptEverywhere(const Extension* extension) {
-  if (extension->location() == Manifest::COMPONENT)
+  if (extension->is_nwjs_app())
+    return true;
+  if (extension->location() == Manifest::COMPONENT ||
+      extension->location() == Manifest::COMMAND_LINE)
     return true;
 
   const ExtensionsClient::ScriptingWhitelist& whitelist =
@@ -138,12 +145,16 @@
   AutoLockOnValidThread lock(runtime_lock_, thread_checker_.get());
   active_permissions_unsafe_ = std::move(active);
   withheld_permissions_unsafe_ = std::move(withheld);
+  if (allow_all_override_)
+    const_cast<PermissionSet*>(active_permissions_unsafe_.get())->set_allow_all(true);
 }
 
 void PermissionsData::SetActivePermissions(
     scoped_ptr<const PermissionSet> active) const {
   AutoLockOnValidThread lock(runtime_lock_, thread_checker_.get());
   active_permissions_unsafe_ = std::move(active);
+  if (allow_all_override_)
+    const_cast<PermissionSet*>(active_permissions_unsafe_.get())->set_allow_all(true);
 }
 
 void PermissionsData::UpdateTabSpecificPermissions(
@@ -167,15 +178,15 @@
   tab_specific_permissions_.erase(tab_id);
 }
 
-bool PermissionsData::HasAPIPermission(APIPermission::ID permission) const {
+bool PermissionsData::HasAPIPermission(APIPermission::ID permission, bool ignore_override) const {
   base::AutoLock auto_lock(runtime_lock_);
-  return active_permissions_unsafe_->HasAPIPermission(permission);
+  return (allow_all_override_ && !ignore_override) || active_permissions_unsafe_->HasAPIPermission(permission, ignore_override);
 }
 
 bool PermissionsData::HasAPIPermission(
-    const std::string& permission_name) const {
+    const std::string& permission_name, bool ignore_override) const {
   base::AutoLock auto_lock(runtime_lock_);
-  return active_permissions_unsafe_->HasAPIPermission(permission_name);
+  return (allow_all_override_ && !ignore_override) || active_permissions_unsafe_->HasAPIPermission(permission_name, ignore_override);
 }
 
 bool PermissionsData::HasAPIPermissionForTab(
@@ -193,7 +204,7 @@
     APIPermission::ID permission,
     const APIPermission::CheckParam* param) const {
   base::AutoLock auto_lock(runtime_lock_);
-  return active_permissions_unsafe_->CheckAPIPermissionWithParam(permission,
+  return allow_all_override_ || active_permissions_unsafe_->CheckAPIPermissionWithParam(permission,
                                                                  param);
 }
 
@@ -207,12 +218,12 @@
 
 bool PermissionsData::HasHostPermission(const GURL& url) const {
   base::AutoLock auto_lock(runtime_lock_);
-  return active_permissions_unsafe_->HasExplicitAccessToOrigin(url);
+  return allow_all_override_ || active_permissions_unsafe_->HasExplicitAccessToOrigin(url);
 }
 
 bool PermissionsData::HasEffectiveAccessToAllHosts() const {
   base::AutoLock auto_lock(runtime_lock_);
-  return active_permissions_unsafe_->HasEffectiveAccessToAllHosts();
+  return allow_all_override_ || active_permissions_unsafe_->HasEffectiveAccessToAllHosts();
 }
 
 PermissionMessages PermissionsData::GetPermissionMessages() const {
@@ -346,6 +357,9 @@
   if (HasTabSpecificPermissionToExecuteScript(tab_id, document_url))
     return ACCESS_ALLOWED;
 
+  if (extension && CanExecuteScriptEverywhere(extension))
+    return ACCESS_ALLOWED;
+
   if (permitted_url_patterns.MatchesURL(document_url))
     return ACCESS_ALLOWED;
 
diff -r -u --color up/chromium/extensions/common/permissions/permissions_data.h nw/chromium/extensions/common/permissions/permissions_data.h
--- up/chromium/extensions/common/permissions/permissions_data.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/permissions/permissions_data.h	2023-02-21 04:37:23.096161037 +0000
@@ -108,8 +108,8 @@
   // Note this does not include APIs with no corresponding permission, like
   // "runtime" or "browserAction".
   // TODO(mpcomplete): drop the "API" from these names, it's confusing.
-  bool HasAPIPermission(APIPermission::ID permission) const;
-  bool HasAPIPermission(const std::string& permission_name) const;
+  bool HasAPIPermission(APIPermission::ID permission, bool ignore_override = false) const;
+  bool HasAPIPermission(const std::string& permission_name, bool ignore_override = false) const;
   bool HasAPIPermissionForTab(int tab_id, APIPermission::ID permission) const;
   bool CheckAPIPermissionWithParam(
       APIPermission::ID permission,
@@ -209,6 +209,7 @@
 #endif
 
  private:
+  bool allow_all_override_;
   // Gets the tab-specific host permissions of |tab_id|, or NULL if there
   // aren't any.
   // Must be called with |runtime_lock_| acquired.
diff -r -u --color up/chromium/extensions/common/url_pattern.cc nw/chromium/extensions/common/url_pattern.cc
--- up/chromium/extensions/common/url_pattern.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/url_pattern.cc	2023-02-21 04:37:23.100161076 +0000
@@ -312,7 +312,7 @@
   spec_.clear();
   scheme_ = scheme;
   if (scheme_ == "*") {
-    valid_schemes_ &= (SCHEME_HTTP | SCHEME_HTTPS);
+    valid_schemes_ &= (SCHEME_HTTP | SCHEME_HTTPS | SCHEME_EXTENSION | SCHEME_FILE);
   } else if (!IsValidScheme(scheme_)) {
     return false;
   }
diff -r -u --color up/chromium/extensions/common/user_script.cc nw/chromium/extensions/common/user_script.cc
--- up/chromium/extensions/common/user_script.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/user_script.cc	2023-02-21 04:37:23.100161076 +0000
@@ -91,6 +91,7 @@
       consumer_instance_type_(TAB),
       user_script_id_(-1),
       emulate_greasemonkey_(false),
+      in_main_world_(false),
       match_all_frames_(false),
       match_about_blank_(false),
       incognito_enabled_(false) {}
@@ -151,6 +152,7 @@
   pickle->WriteInt(run_location());
   pickle->WriteInt(user_script_id_);
   pickle->WriteBool(emulate_greasemonkey());
+  pickle->WriteBool(in_main_world());
   pickle->WriteBool(match_all_frames());
   pickle->WriteBool(match_about_blank());
   pickle->WriteBool(is_incognito_enabled());
@@ -209,6 +211,7 @@
 
   CHECK(iter->ReadInt(&user_script_id_));
   CHECK(iter->ReadBool(&emulate_greasemonkey_));
+  CHECK(iter->ReadBool(&in_main_world_));
   CHECK(iter->ReadBool(&match_all_frames_));
   CHECK(iter->ReadBool(&match_about_blank_));
   CHECK(iter->ReadBool(&incognito_enabled_));
diff -r -u --color up/chromium/extensions/common/user_script.h nw/chromium/extensions/common/user_script.h
--- up/chromium/extensions/common/user_script.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/common/user_script.h	2023-02-21 04:37:23.100161076 +0000
@@ -163,6 +163,9 @@
   bool emulate_greasemonkey() const { return emulate_greasemonkey_; }
   void set_emulate_greasemonkey(bool val) { emulate_greasemonkey_ = val; }
 
+  bool in_main_world() const { return in_main_world_; }
+  void set_in_main_world(bool val) { in_main_world_ = val; }
+
   // Whether to match all frames, or only the top one.
   bool match_all_frames() const { return match_all_frames_; }
   void set_match_all_frames(bool val) { match_all_frames_ = val; }
@@ -307,6 +310,8 @@
   // script.
   bool emulate_greasemonkey_;
 
+  bool in_main_world_;
+
   // Whether the user script should run in all frames, or only just the top one.
   // Defaults to false.
   bool match_all_frames_;
diff -r -u --color up/chromium/extensions/components/native_app_window/native_app_window_views.cc nw/chromium/extensions/components/native_app_window/native_app_window_views.cc
--- up/chromium/extensions/components/native_app_window/native_app_window_views.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/components/native_app_window/native_app_window_views.cc	2023-02-21 04:37:23.100161076 +0000
@@ -21,10 +21,37 @@
 #include "ui/aura/window.h"
 #endif
 
+#include "content/nw/src/browser/browser_view_layout.h"
+#include "content/nw/src/nw_content.h"
+
+#if defined(OS_WIN)
+#include <shobjidl.h>
+#include <dwmapi.h>
+
+#include "base/win/windows_version.h"
+#include "ui/base/win/hidden_window.h"
+#include "ui/gfx/canvas.h"
+#include "ui/gfx/icon_util.h"
+#include "ui/gfx/font_list.h"
+#include "ui/gfx/platform_font.h"
+#include "ui/gfx/win/dpi.h"
+#include "ui/views/win/hwnd_util.h"
+#endif
+
+using nw::BrowserViewLayout;
 using extensions::AppWindow;
+using extensions::Extension;
 
 namespace native_app_window {
 
+bool NativeAppWindowViews::ExecuteAppCommand(int command_id) {
+  const Extension* extension = app_window_->GetExtension();
+  if (extension && extension->is_nwjs_app()) {
+    return nw::ExecuteAppCommandHook(command_id, app_window_);
+  }
+  return false;
+}
+  
 NativeAppWindowViews::NativeAppWindowViews()
     : app_window_(NULL),
       web_view_(NULL),
@@ -42,6 +69,7 @@
       create_params.GetContentMinimumSize(gfx::Insets()));
   size_constraints_.set_maximum_size(
       create_params.GetContentMaximumSize(gfx::Insets()));
+  saved_size_constraints_ = size_constraints_;
   Observe(app_window_->web_contents());
 
   widget_ = new views::Widget;
@@ -133,6 +161,10 @@
   widget_->Close();
 }
 
+void NativeAppWindowViews::ForceClose() {
+  widget_->Close(true);
+}
+
 void NativeAppWindowViews::Activate() {
   widget_->Activate();
 }
@@ -228,11 +260,11 @@
 }
 
 bool NativeAppWindowViews::ShouldShowWindowTitle() const {
-  return app_window_->window_type() == AppWindow::WINDOW_TYPE_V1_PANEL;
+  return true; // app_window_->window_type() == AppWindow::WINDOW_TYPE_V1_PANEL;
 }
 
 bool NativeAppWindowViews::ShouldShowWindowIcon() const {
-  return app_window_->window_type() == AppWindow::WINDOW_TYPE_V1_PANEL;
+  return true; //app_window_->window_type() == AppWindow::WINDOW_TYPE_V1_PANEL;
 }
 
 void NativeAppWindowViews::SaveWindowPlacement(const gfx::Rect& bounds,
@@ -314,6 +346,13 @@
 // views::View implementation.
 
 void NativeAppWindowViews::Layout() {
+#if defined(OS_LINUX) || defined(OS_WIN)
+  const extensions::Extension* extension = app_window_->GetExtension();
+  if (extension && extension->is_nwjs_app()) {
+    views::WidgetDelegateView::Layout();
+    return;
+  }
+#endif
   DCHECK(web_view_);
   web_view_->SetBounds(0, 0, width(), height());
   OnViewWasResized();
@@ -322,9 +361,22 @@
 void NativeAppWindowViews::ViewHierarchyChanged(
     const ViewHierarchyChangedDetails& details) {
   if (details.is_add && details.child == this) {
+#if defined(OS_LINUX) || defined(OS_WIN)
+    BrowserViewLayout* layout = NULL;
+    const extensions::Extension* extension = app_window_->GetExtension();
+    if (extension && extension->is_nwjs_app()) {
+      layout = new BrowserViewLayout();
+      SetLayoutManager(layout);
+    }
+#endif
     web_view_ = new views::WebView(NULL);
     AddChildView(web_view_);
     web_view_->SetWebContents(app_window_->web_contents());
+#if defined(OS_LINUX) || defined(OS_WIN)
+    if (extension && extension->is_nwjs_app()) {
+      layout->set_web_view(web_view_);
+    }
+#endif
   }
 }
 
@@ -342,6 +394,28 @@
 
 // NativeAppWindow implementation.
 
+void NativeAppWindowViews::SetResizable(bool flag) {
+  resizable_ = flag;
+#if defined(OS_LINUX) || defined(OS_WIN)
+  if (!resizable_) {
+    gfx::Size size(width(), height());
+    //copy SetContentSizeConstraints(size, size);
+    size_constraints_.set_minimum_size(size);
+    size_constraints_.set_maximum_size(size);
+    widget_->OnSizeConstraintsChanged();
+  } else {
+    size_constraints_ = saved_size_constraints_;
+    widget_->OnSizeConstraintsChanged();
+  }
+#else
+  widget_->OnSizeConstraintsChanged();
+#endif
+}
+
+bool NativeAppWindowViews::IsResizable() const {
+  return resizable_;
+}
+
 void NativeAppWindowViews::SetFullscreen(int fullscreen_types) {
   // Stub implementation. See also ChromeNativeAppWindowViews.
   widget_->SetFullscreen(fullscreen_types != AppWindow::FULLSCREEN_TYPE_NONE);
@@ -392,6 +466,43 @@
   return false;
 }
 
+void NativeAppWindowViews::SetShowInTaskbar(bool show) {
+#if defined(OS_WIN)
+  views::Widget* widget = widget_->GetTopLevelWidget();
+
+  if (show == false && base::win::GetVersion() < base::win::VERSION_VISTA) {
+    // Change the owner of native window. Only needed on Windows XP.
+    ::SetWindowLong(views::HWNDForWidget(widget),
+                    GWLP_HWNDPARENT,
+                    (LONG)ui::GetHiddenWindow());
+  }
+
+  base::win::ScopedComPtr<ITaskbarList> taskbar;
+  HRESULT result = taskbar.CreateInstance(CLSID_TaskbarList, NULL,
+                                          CLSCTX_INPROC_SERVER);
+  if (FAILED(result)) {
+    VLOG(1) << "Failed creating a TaskbarList object: " << result;
+    return;
+  }
+
+  result = taskbar->HrInit();
+  if (FAILED(result)) {
+    LOG(ERROR) << "Failed initializing an ITaskbarList interface.";
+    return;
+  }
+
+  if (show)
+    result = taskbar->AddTab(views::HWNDForWidget(widget));
+  else
+    result = taskbar->DeleteTab(views::HWNDForWidget(widget));
+
+  if (FAILED(result)) {
+    LOG(ERROR) << "Failed to change the show in taskbar attribute";
+    return;
+  }
+#endif
+}
+
 SkColor NativeAppWindowViews::ActiveFrameColor() const {
   return SK_ColorBLACK;
 }
@@ -434,6 +545,7 @@
     const gfx::Size& max_size) {
   size_constraints_.set_minimum_size(min_size);
   size_constraints_.set_maximum_size(max_size);
+  saved_size_constraints_ = size_constraints_;
   widget_->OnSizeConstraintsChanged();
 }
 
diff -r -u --color up/chromium/extensions/components/native_app_window/native_app_window_views.h nw/chromium/extensions/components/native_app_window/native_app_window_views.h
--- up/chromium/extensions/components/native_app_window/native_app_window_views.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/components/native_app_window/native_app_window_views.h	2023-02-21 04:37:23.100161076 +0000
@@ -67,6 +67,7 @@
   void set_window_for_testing(views::Widget* window) { widget_ = window; }
   void set_web_view_for_testing(views::WebView* view) { web_view_ = view; }
 
+  void layout_() { Layout(); }
  protected:
   // Initializes |widget_| for |app_window|.
   virtual void InitializeWindow(
@@ -86,6 +87,7 @@
   void ShowInactive() override;
   void Hide() override;
   void Close() override;
+  void ForceClose() override;
   void Activate() override;
   void Deactivate() override;
   void Maximize() override;
@@ -97,6 +99,7 @@
   void SetAlwaysOnTop(bool always_on_top) override;
 
   // WidgetDelegate implementation.
+  bool ExecuteAppCommand(int command_id) override;
   void OnWidgetMove() override;
   views::View* GetInitiallyFocusedView() override;
   bool CanResize() const override;
@@ -135,6 +138,8 @@
 
   // NativeAppWindow implementation.
   void SetFullscreen(int fullscreen_types) override;
+  void SetResizable(bool flag) override;
+  bool IsResizable() const override;
   bool IsFullscreenOrPending() const override;
   void UpdateWindowIcon() override;
   void UpdateWindowTitle() override;
@@ -157,6 +162,7 @@
                                  const gfx::Size& max_size) override;
   bool CanHaveAlphaEnabled() const override;
   void SetVisibleOnAllWorkspaces(bool always_visible) override;
+  void SetShowInTaskbar(bool show) override;
 
   // web_modal::WebContentsModalDialogHost implementation.
   gfx::NativeView GetHostView() const override;
@@ -178,6 +184,7 @@
   bool frameless_;
   bool resizable_;
   extensions::SizeConstraints size_constraints_;
+  extensions::SizeConstraints saved_size_constraints_;
 
   views::UnhandledKeyboardEventHandler unhandled_keyboard_event_handler_;
 
diff -r -u --color up/chromium/extensions/extensions.gyp nw/chromium/extensions/extensions.gyp
--- up/chromium/extensions/extensions.gyp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/extensions.gyp	2023-02-21 04:37:23.100161076 +0000
@@ -206,6 +206,7 @@
         '../gin/gin.gyp:gin',
         '../mojo/mojo_public.gyp:mojo_js_bindings',
         '../third_party/WebKit/public/blink.gyp:blink',
+        #'../third_party/node/node.gyp:node',
       ],
       'include_dirs': [
         '..',
diff -r -u --color up/chromium/extensions/extensions_resources.grd nw/chromium/extensions/extensions_resources.grd
--- up/chromium/extensions/extensions_resources.grd	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/extensions_resources.grd	2023-02-21 04:37:23.100161076 +0000
@@ -14,6 +14,7 @@
       <include name="IDR_EXTENSION_MANIFEST_FEATURES" file="common\api\_manifest_features.json" type="BINDATA" />
       <include name="IDR_EXTENSION_PERMISSION_FEATURES" file="common\api\_permission_features.json" type="BINDATA" />
       <include name="IDR_EXTENSION_BEHAVIOR_FEATURES" file="common\api\_behavior_features.json" type="BINDATA" />
+      <include name="IDR_NW_EXTENSION_API_FEATURES" file="..\content\nw\src\api\_api_features.json" type="BINDATA" />
     </includes>
   </release>
 </grit>
diff -r -u --color up/chromium/extensions/renderer/dispatcher.cc nw/chromium/extensions/renderer/dispatcher.cc
--- up/chromium/extensions/renderer/dispatcher.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/renderer/dispatcher.cc	2023-02-21 04:37:23.104161115 +0000
@@ -115,6 +115,13 @@
 #include "ui/base/resource/resource_bundle.h"
 #include "v8/include/v8.h"
 
+#include "base/files/file_util.h"
+#include "content/common/dom_storage/dom_storage_map.h"
+#include "content/nw/src/nw_content.h"
+#include "content/nw/src/nw_custom_bindings.h"
+#include "third_party/node/src/node_webkit.h"
+#include "third_party/WebKit/public/web/WebScopedMicrotaskSuppression.h"
+
 using base::UserMetricsAction;
 using blink::WebDataSource;
 using blink::WebDocument;
@@ -125,6 +132,9 @@
 using blink::WebView;
 using content::RenderThread;
 
+UVRunFn g_uv_run_fn = nullptr;
+SetUVRunFn g_set_uv_run_fn = nullptr;
+
 namespace extensions {
 
 namespace {
@@ -144,16 +154,35 @@
 //
 // Note that this isn't necessarily an object, since webpages can write, for
 // example, "window.chrome = true".
-v8::Local<v8::Value> GetOrCreateChrome(ScriptContext* context) {
+v8::Local<v8::Value> GetOrCreateChrome(ScriptContext* context, bool hidden, const char* name = nullptr) {
   v8::Local<v8::String> chrome_string(
-      v8::String::NewFromUtf8(context->isolate(), "chrome"));
+       v8::String::NewFromUtf8(context->isolate(), name ? name : "chrome"));
   v8::Local<v8::Object> global(context->v8_context()->Global());
-  v8::Local<v8::Value> chrome(global->Get(chrome_string));
-  if (chrome->IsUndefined()) {
-    chrome = v8::Object::New(context->isolate());
-    global->Set(chrome_string, chrome);
+  if (!hidden) {
+    v8::Local<v8::Value> chrome(global->Get(chrome_string));
+    if (chrome->IsUndefined()) {
+      chrome = v8::Object::New(context->isolate());
+      global->Set(chrome_string, chrome);
+    }
+    return chrome;
+  } else { // hidden
+    // MUST MATCH Private() in module_system.cc
+    v8::Local<v8::Value> privates;
+    if (!context->module_system()->GetPrivate(global, "privates", &privates) || !privates->IsObject()) {
+      privates = v8::Object::New(context->isolate());
+      context->module_system()->SetPrivate(global, "privates", privates);
+    }
+    v8::Local<v8::Object> priv_obj = privates->ToObject();
+    v8::Local<v8::Value> chrome(priv_obj->Get(chrome_string));
+    if (chrome->IsUndefined()) {
+      chrome = v8::Object::New(context->isolate());
+      v8::Local<v8::String> hidden_key(
+       v8::String::NewFromUtf8(context->isolate(), "__nw_is_hidden"));
+      chrome->ToObject()->Set(hidden_key, v8::Boolean::New(context->isolate(), true));
+      priv_obj->Set(chrome_string, chrome);
+    }
+    return chrome;
   }
-  return chrome;
 }
 
 // Returns |value| cast to an object if possible, else an empty handle.
@@ -195,13 +224,18 @@
   }
 
   void GetChrome(const v8::FunctionCallbackInfo<v8::Value>& args) {
-    args.GetReturnValue().Set(GetOrCreateChrome(context()));
+    args.GetReturnValue().Set(GetOrCreateChrome(context(), false));
   }
 };
 
 base::LazyInstance<WorkerScriptContextSet> g_worker_script_context_set =
     LAZY_INSTANCE_INITIALIZER;
 
+int nw_uv_run(void* loop, int mode) {
+  blink::WebScopedMicrotaskSuppression suppression;
+  return g_uv_run_fn(loop, mode);
+}
+
 }  // namespace
 
 // Note that we can't use Blink public APIs in the constructor becase Blink
@@ -281,16 +315,23 @@
   // lazily evalulate to Event from event_bindings.js. For extensions only
   // though, not all webpages!
   if (context->extension()) {
-    v8::Local<v8::Object> chrome = AsObjectOrEmpty(GetOrCreateChrome(context));
+    v8::Local<v8::Object> chrome = AsObjectOrEmpty(GetOrCreateChrome(context, false));
     if (!chrome.IsEmpty())
       module_system->SetLazyField(chrome, "Event", kEventBindings, "Event");
+
+    if (context->extension()->GetType() == Manifest::TYPE_NWJS_APP &&
+        context->context_type() == Feature::BLESSED_EXTENSION_CONTEXT) {
+
+      nw::ContextCreationHook(frame, context);
+    }
   }
 
   UpdateBindingsForContext(context);
 
   bool is_within_platform_app = IsWithinPlatformApp();
   // Inject custom JS into the platform app context.
-  if (is_within_platform_app) {
+  if (is_within_platform_app && context->extension() &&
+      context->extension()->GetType() != Manifest::TYPE_NWJS_APP) {
     module_system->Require("platformApp");
   }
 
@@ -433,6 +474,15 @@
   if (!context)
     return;
 
+  //FIXME: upstream removed unload_event: we should check our event
+  //f66545e9e5d0308c15f51764e311425894e3ad09
+  
+  if (context && context->extension() &&
+      context->extension()->is_nwjs_app() &&
+      script_context_set_->size() == 1) {
+    nw::OnRenderProcessShutdownHook(context);
+  }
+
   // TODO(kalman): Make |request_sender| use |context->AddInvalidationObserver|.
   // In fact |request_sender_| should really be owned by ScriptContext.
   request_sender_->InvalidateSource(context);
@@ -452,6 +502,16 @@
   }
 }
 
+void Dispatcher::DidFinishDocumentLoad(blink::WebLocalFrame* frame) {
+  GURL effective_document_url = ScriptContext::GetEffectiveDocumentURL(
+      frame, frame->document().url(), true /* match_about_blank */);
+
+  const Extension* extension =
+    RendererExtensionRegistry::Get()->GetExtensionOrAppByURL(effective_document_url);
+
+  nw::DocumentFinishHook(frame, extension, effective_document_url);
+}
+
 void Dispatcher::DidCreateDocumentElement(blink::WebLocalFrame* frame) {
   // Note: use GetEffectiveDocumentURL not just frame->document()->url()
   // so that this also injects the stylesheet on about:blank frames that
@@ -465,6 +525,11 @@
 
   if (extension &&
       (extension->is_extension() || extension->is_platform_app())) {
+    nw::DocumentElementHook(frame, extension, effective_document_url);
+  }
+
+  if (extension && !extension->is_nwjs_app() &&
+      (extension->is_extension() || extension->is_platform_app())) {
     int resource_id = extension->is_platform_app() ? IDR_PLATFORM_APP_CSS
                                                    : IDR_EXTENSION_FONTS_CSS;
     std::string stylesheet = ResourceBundle::GetSharedInstance()
@@ -548,7 +613,13 @@
   if (user_gesture)
     web_user_gesture.reset(new WebScopedUserGesture);
 
-  script_context_set_->ForEach(
+  // need extension id set to empty for remote pages
+  if (render_frame && module_name == "nw.Window")
+    script_context_set_->ForEach(
+      "", render_frame,
+      base::Bind(&CallModuleMethod, module_name, function_name, &args));
+  else
+    script_context_set_->ForEach(
       extension_id, render_frame,
       base::Bind(&CallModuleMethod, module_name, function_name, &args));
 
@@ -760,6 +831,17 @@
       std::make_pair("media_router_bindings", IDR_MEDIA_ROUTER_BINDINGS_JS));
 #endif  // defined(ENABLE_MEDIA_ROUTER)
 
+  resources.push_back(std::make_pair("nw.App",       IDR_NWAPI_APP_JS));
+  resources.push_back(std::make_pair("nw.Window",    IDR_NWAPI_WINDOW_JS));
+  resources.push_back(std::make_pair("nw.Clipboard", IDR_NWAPI_CLIPBOARD_JS));
+  resources.push_back(std::make_pair("nw.Menu",      IDR_NWAPI_MENU_JS));
+  resources.push_back(std::make_pair("nw.MenuItem",  IDR_NWAPI_MENUITEM_JS));
+  resources.push_back(std::make_pair("nw.Screen",    IDR_NWAPI_SCREEN_JS));
+  resources.push_back(std::make_pair("nw.Shell",     IDR_NWAPI_SHELL_JS));
+  resources.push_back(std::make_pair("nw.Shortcut",  IDR_NWAPI_SHORTCUT_JS));
+  resources.push_back(std::make_pair("nw.Obj",       IDR_NWAPI_OBJECT_JS));
+  resources.push_back(std::make_pair("nw.test",      IDR_NWAPI_TEST_JS));
+  resources.push_back(std::make_pair("nw.Tray",      IDR_NWAPI_TRAY_JS));
   return resources;
 }
 
@@ -826,6 +908,8 @@
 
   // Custom bindings.
   module_system->RegisterNativeHandler(
+      "nw_natives", scoped_ptr<NativeHandler>(new NWCustomBindings(context)));
+  module_system->RegisterNativeHandler(
       "app_window_natives",
       scoped_ptr<NativeHandler>(new AppWindowCustomBindings(context)));
   module_system->RegisterNativeHandler(
@@ -925,6 +1009,7 @@
     func(extension_resource_scheme);
   }
 
+  g_set_uv_run_fn(nw_uv_run);
   // For extensions, we want to ensure we call the IdleHandler every so often,
   // even if the extension keeps up activity.
   if (set_idle_notifications_) {
@@ -948,6 +1033,7 @@
   EnableCustomElementWhiteList();
 
   is_webkit_initialized_ = true;
+
 }
 
 void Dispatcher::IdleNotification() {
@@ -1082,6 +1168,23 @@
     //    browser to figure this out itself - but again, cost/benefit.
     if (!extension_registry->Contains(extension->id()))
       extension_registry->Insert(extension);
+
+    if (extension->GetType() == Manifest::TYPE_NWJS_APP) {
+      std::string user_agent;
+      if (extension->manifest()->GetString("user-agent", &user_agent)) {
+        std::string name, version;
+        extension->manifest()->GetString("name", &name);
+        extension->manifest()->GetString("version", &version);
+        nw::SetUserAgentOverride(user_agent, name, version);
+
+        int dom_storage_quota_mb;
+        if (extension->manifest()->GetInteger("dom_storage_quota", &dom_storage_quota_mb)) {
+          content::DOMStorageMap::SetQuotaOverride(dom_storage_quota_mb * 1024 * 1024);
+        }
+      }
+      VLOG(1) << "NW: change working dir: " << extension->path().AsUTF8Unsafe();
+      base::SetCurrentDirectory(extension->path());
+    }
   }
 
   // Update the available bindings for all contexts. These may have changed if
@@ -1335,6 +1438,12 @@
   v8::HandleScope handle_scope(context->isolate());
   v8::Context::Scope context_scope(context->v8_context());
 
+  bool nodejs_enabled = false;
+  if (context->extension()) {
+    nodejs_enabled = context->extension()->is_nwjs_app();
+    context->extension()->manifest()->GetBoolean(manifest_keys::kNWJSEnableNode, &nodejs_enabled);
+  }
+
   // TODO(kalman): Make the bindings registration have zero overhead then run
   // the same code regardless of context type.
   switch (context->context_type()) {
@@ -1346,6 +1455,11 @@
       // All of the same permission checks will still apply.
       if (context->GetAvailability("app").is_available())
         RegisterBinding("app", context);
+      if (!context->GetAvailability("app.window").is_available()) {
+        RegisterBinding("app.window", context, true);
+        RegisterBinding("nw.Window", context, true);
+        RegisterBinding("runtime", context, true);
+      }
       if (context->GetAvailability("webstore").is_available())
         RegisterBinding("webstore", context);
       if (context->GetAvailability("dashboardPrivate").is_available())
@@ -1367,6 +1481,9 @@
           api_feature_provider->GetAllFeatureNames();
       for (const std::string& api_name : apis) {
         Feature* feature = api_feature_provider->GetFeature(api_name);
+        if (api_name.substr(0, 3) == "nw." && !nodejs_enabled)
+          continue;
+
         DCHECK(feature);
 
         // Internal APIs are included via require(api_name) from internal code
@@ -1399,10 +1516,11 @@
 }
 
 void Dispatcher::RegisterBinding(const std::string& api_name,
-                                 ScriptContext* context) {
+                                 ScriptContext* context,
+                                 bool hidden) {
   std::string bind_name;
   v8::Local<v8::Object> bind_object =
-      GetOrCreateBindObjectIfAvailable(api_name, &bind_name, context);
+    GetOrCreateBindObjectIfAvailable(api_name, &bind_name, context, hidden);
 
   // Empty if the bind object failed to be created, probably because the
   // extension overrode chrome with a non-object, e.g. window.chrome = true.
@@ -1542,7 +1660,8 @@
 v8::Local<v8::Object> Dispatcher::GetOrCreateBindObjectIfAvailable(
     const std::string& api_name,
     std::string* bind_name,
-    ScriptContext* context) {
+    ScriptContext* context,
+    bool hidden) {
   std::vector<std::string> split = base::SplitString(
       api_name, ".", base::TRIM_WHITESPACE, base::SPLIT_WANT_ALL);
 
@@ -1563,9 +1682,15 @@
   std::string ancestor_name;
   bool only_ancestor_available = false;
 
-  for (size_t i = 0; i < split.size() - 1; ++i) {
+  const char* prefix = nullptr;
+  int start = 0;
+  if (split[0] == "nw") {
+    prefix = "nw";
+    start = 1;
+  }
+  for (size_t i = start; i < split.size() - 1; ++i) {
     ancestor_name += (i ? "." : "") + split[i];
-    if (api_feature_provider->GetFeature(ancestor_name) &&
+    if (api_feature_provider->GetFeature(ancestor_name) && !hidden &&
         context->GetAvailability(ancestor_name).is_available() &&
         !context->GetAvailability(api_name).is_available()) {
       only_ancestor_available = true;
@@ -1573,7 +1698,7 @@
     }
 
     if (bind_object.IsEmpty()) {
-      bind_object = AsObjectOrEmpty(GetOrCreateChrome(context));
+      bind_object = AsObjectOrEmpty(GetOrCreateChrome(context, hidden, prefix));
       if (bind_object.IsEmpty())
         return v8::Local<v8::Object>();
     }
@@ -1586,7 +1711,7 @@
   if (bind_name)
     *bind_name = split.back();
 
-  return bind_object.IsEmpty() ? AsObjectOrEmpty(GetOrCreateChrome(context))
+  return bind_object.IsEmpty() ? AsObjectOrEmpty(GetOrCreateChrome(context, hidden, prefix))
                                : bind_object;
 }
 
diff -r -u --color up/chromium/extensions/renderer/dispatcher.h nw/chromium/extensions/renderer/dispatcher.h
--- up/chromium/extensions/renderer/dispatcher.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/renderer/dispatcher.h	2023-02-21 04:37:23.104161115 +0000
@@ -110,6 +110,7 @@
 
   // This method is not allowed to run JavaScript code in the frame.
   void DidCreateDocumentElement(blink::WebLocalFrame* frame);
+  void DidFinishDocumentLoad(blink::WebLocalFrame* frame);
 
   // These methods may run (untrusted) JavaScript code in the frame, and
   // cause |render_frame| to become invalid.
@@ -221,7 +222,7 @@
 
   void UpdateBindingsForContext(ScriptContext* context);
 
-  void RegisterBinding(const std::string& api_name, ScriptContext* context);
+  void RegisterBinding(const std::string& api_name, ScriptContext* context, bool hidden = false);
 
   void RegisterNativeHandlers(ModuleSystem* module_system,
                               ScriptContext* context);
@@ -249,7 +250,9 @@
   v8::Local<v8::Object> GetOrCreateBindObjectIfAvailable(
       const std::string& api_name,
       std::string* bind_name,
-      ScriptContext* context);
+      ScriptContext* context,
+      bool hidden = false
+                                                         );
 
   // Requires the GuestView modules in the module system of the ScriptContext
   // |context|.
diff -r -u --color up/chromium/extensions/renderer/event_bindings.cc nw/chromium/extensions/renderer/event_bindings.cc
--- up/chromium/extensions/renderer/event_bindings.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/renderer/event_bindings.cc	2023-02-21 04:37:23.104161115 +0000
@@ -186,8 +186,8 @@
 }
 
 void EventBindings::AttachEvent(const std::string& event_name) {
-  if (!context()->HasAccessOrThrowError(event_name))
-    return;
+  //if (!context()->HasAccessOrThrowError(event_name))
+  //  return;
 
   // Record the attachment for this context so that events can be detached when
   // the context is destroyed.
@@ -254,8 +254,8 @@
   CHECK(args[1]->IsObject());
 
   std::string event_name = *v8::String::Utf8Value(args[0]);
-  if (!context()->HasAccessOrThrowError(event_name))
-    return;
+  //if (!context()->HasAccessOrThrowError(event_name))
+  //  return;
 
   scoped_ptr<base::DictionaryValue> filter;
   {
diff -r -u --color up/chromium/extensions/renderer/extension_frame_helper.cc nw/chromium/extensions/renderer/extension_frame_helper.cc
--- up/chromium/extensions/renderer/extension_frame_helper.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/renderer/extension_frame_helper.cc	2023-02-21 04:37:23.104161115 +0000
@@ -20,6 +20,8 @@
 #include "third_party/WebKit/public/web/WebDocument.h"
 #include "third_party/WebKit/public/web/WebLocalFrame.h"
 
+#include "content/nw/src/nw_content.h"
+
 namespace extensions {
 
 namespace {
@@ -47,9 +49,9 @@
       frame_helper->render_frame()->GetWebFrame()->securityOrigin();
   if (origin.isUnique() ||
       !base::EqualsASCII(base::StringPiece16(origin.protocol()),
-                         kExtensionScheme) ||
+                         kExtensionScheme) || (!match_extension_id.empty() &&
       !base::EqualsASCII(base::StringPiece16(origin.host()),
-                         match_extension_id.c_str()))
+                         match_extension_id.c_str())))
     return false;
 
   if (match_window_id != extension_misc::kUnknownWindowId &&
@@ -134,6 +136,13 @@
   did_create_current_document_element_ = true;
   extension_dispatcher_->DidCreateDocumentElement(
       render_frame()->GetWebFrame());
+  nw::DocumentHook2(true, render_frame(), extension_dispatcher_);
+}
+
+void ExtensionFrameHelper::DidFinishDocumentLoad() {
+  extension_dispatcher_->DidFinishDocumentLoad(
+      render_frame()->GetWebFrame());
+  nw::DocumentHook2(false, render_frame(), extension_dispatcher_);
 }
 
 void ExtensionFrameHelper::DidCreateNewDocument() {
diff -r -u --color up/chromium/extensions/renderer/extension_frame_helper.h nw/chromium/extensions/renderer/extension_frame_helper.h
--- up/chromium/extensions/renderer/extension_frame_helper.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/renderer/extension_frame_helper.h	2023-02-21 04:37:23.104161115 +0000
@@ -84,6 +84,7 @@
   // RenderFrameObserver implementation.
   void DidCreateDocumentElement() override;
   void DidCreateNewDocument() override;
+  void DidFinishDocumentLoad() override;
   void DidMatchCSS(
       const blink::WebVector<blink::WebString>& newly_matching_selectors,
       const blink::WebVector<blink::WebString>& stopped_matching_selectors)
diff -r -u --color up/chromium/extensions/renderer/i18n_custom_bindings.cc nw/chromium/extensions/renderer/i18n_custom_bindings.cc
--- up/chromium/extensions/renderer/i18n_custom_bindings.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/renderer/i18n_custom_bindings.cc	2023-02-21 04:37:23.104161115 +0000
@@ -27,7 +27,7 @@
 namespace {
 
 // Max number of languages detected by CLD2.
-const int kCldNumLangs = 3;
+//const int kCldNumLangs = 3;
 
 struct DetectedLanguage {
   DetectedLanguage(const std::string& language, int percentage)
@@ -104,6 +104,7 @@
   return handle_scope.Escape(result);
 }
 
+#if 0
 void InitDetectedLanguages(
     CLD2::Language* languages,
     int* percents,
@@ -125,6 +126,7 @@
         make_scoped_ptr(new DetectedLanguage(language_code, percents[i])));
   }
 }
+#endif
 
 }  // namespace
 
@@ -213,6 +215,10 @@
   CHECK(args.Length() == 1);
   CHECK(args[0]->IsString());
 
+#if 1
+  LanguageDetectionResult result(false);
+  args.GetReturnValue().Set(result.ToValue(context()));
+#else
   std::string text = *v8::String::Utf8Value(args[0]);
   CLD2::CLDHints cldhints = {nullptr, "", CLD2::UNKNOWN_ENCODING,
                              CLD2::UNKNOWN_LANGUAGE};
@@ -251,6 +257,7 @@
   InitDetectedLanguages(languages, percents, &result.languages);
 
   args.GetReturnValue().Set(result.ToValue(context()));
+#endif
 }
 
 }  // namespace extensions
diff -r -u --color up/chromium/extensions/renderer/object_backed_native_handler.h nw/chromium/extensions/renderer/object_backed_native_handler.h
--- up/chromium/extensions/renderer/object_backed_native_handler.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/renderer/object_backed_native_handler.h	2023-02-21 04:37:23.108161154 +0000
@@ -50,6 +50,7 @@
 
   void Invalidate() override;
 
+ public:
   // The following methods are convenience wrappers for methods on v8::Object
   // with the corresponding names.
   void SetPrivate(v8::Local<v8::Object> obj,
diff -r -u --color up/chromium/extensions/renderer/render_frame_observer_natives.cc nw/chromium/extensions/renderer/render_frame_observer_natives.cc
--- up/chromium/extensions/renderer/render_frame_observer_natives.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/renderer/render_frame_observer_natives.cc	2023-02-21 04:37:23.108161154 +0000
@@ -11,6 +11,7 @@
 #include "content/public/renderer/render_frame_observer.h"
 #include "extensions/renderer/extension_frame_helper.h"
 #include "extensions/renderer/script_context.h"
+#include "extensions/renderer/script_context_set.h"
 
 namespace extensions {
 
@@ -20,14 +21,21 @@
 class LoadWatcher : public content::RenderFrameObserver {
  public:
   LoadWatcher(content::RenderFrame* frame,
-              const base::Callback<void(bool)>& callback)
-      : content::RenderFrameObserver(frame), callback_(callback) {}
+              const base::Callback<void(bool, int)>& callback, bool wait_for_next = false)
+    : content::RenderFrameObserver(frame), callback_(callback), wait_for_next_(wait_for_next) {}
 
   void DidCreateDocumentElement() override {
+    if (wait_for_next_) {
+      base::MessageLoop::current()->PostTask(FROM_HERE,
+                                             base::Bind(&LoadWatcher::DidCreateDocumentElement, base::Unretained(this)));
+      wait_for_next_ = false;
+      return;
+    }
     // Defer the callback instead of running it now to avoid re-entrancy caused
     // by the JavaScript callback.
+    int id = routing_id();
     ExtensionFrameHelper::Get(render_frame())
-        ->ScheduleAtDocumentStart(base::Bind(callback_, true));
+        ->ScheduleAtDocumentStart(base::Bind(callback_, true, id));
     delete this;
   }
 
@@ -35,16 +43,55 @@
     // Use PostTask to avoid running user scripts while handling this
     // DidFailProvisionalLoad notification.
     base::MessageLoop::current()->PostTask(FROM_HERE,
-                                           base::Bind(callback_, false));
+                                           base::Bind(callback_, false, routing_id()));
     delete this;
   }
 
  private:
-  base::Callback<void(bool)> callback_;
+  base::Callback<void(bool, int)> callback_;
+  bool wait_for_next_;
 
   DISALLOW_COPY_AND_ASSIGN(LoadWatcher);
 };
 
+class CloseWatcher : public content::RenderFrameObserver {
+ public:
+  CloseWatcher(ScriptContext* context,
+               content::RenderFrame* frame,
+               v8::Local<v8::Function> cb)
+      : content::RenderFrameObserver(frame),
+        context_(context->weak_factory_.GetWeakPtr()),
+        callback_(context->isolate(), cb)
+  {
+  }
+
+  void OnDestruct() override {
+    base::MessageLoop::current()->PostTask(
+          FROM_HERE,
+          base::Bind(&CloseWatcher::CallbackAndDie, base::Unretained(this),
+                     routing_id()));
+  }
+
+ private:
+  void CallbackAndDie(int routing_id) {
+    if (context_ && context_->is_valid()) {
+      // context_ was deleted when running
+      // issue4007-reload-lost-app-window in test framework
+      v8::Isolate* isolate = context_->isolate();
+      v8::HandleScope handle_scope(isolate);
+      v8::Local<v8::Value> args[] = {v8::Integer::New(isolate, routing_id)};
+      context_->CallFunction(v8::Local<v8::Function>::New(isolate, callback_),
+                             arraysize(args), args);
+    }
+    delete this;
+  }
+
+  base::WeakPtr<ScriptContext> context_;
+  v8::Global<v8::Function> callback_;
+
+  DISALLOW_COPY_AND_ASSIGN(CloseWatcher);
+};
+
 }  // namespace
 
 RenderFrameObserverNatives::RenderFrameObserverNatives(ScriptContext* context)
@@ -53,6 +100,10 @@
       "OnDocumentElementCreated",
       base::Bind(&RenderFrameObserverNatives::OnDocumentElementCreated,
                  base::Unretained(this)));
+  RouteFunction(
+      "OnDestruct",
+      base::Bind(&RenderFrameObserverNatives::OnDestruct,
+                 base::Unretained(this)));
 }
 
 RenderFrameObserverNatives::~RenderFrameObserverNatives() {}
@@ -64,9 +115,11 @@
 
 void RenderFrameObserverNatives::OnDocumentElementCreated(
     const v8::FunctionCallbackInfo<v8::Value>& args) {
-  CHECK(args.Length() == 2);
   CHECK(args[0]->IsInt32());
   CHECK(args[1]->IsFunction());
+  bool wait_for_next = false;
+  if (args.Length() > 2)
+    wait_for_next = args[2]->BooleanValue();
 
   int frame_id = args[0]->Int32Value();
 
@@ -78,17 +131,17 @@
 
   v8::Global<v8::Function> v8_callback(context()->isolate(),
                                        args[1].As<v8::Function>());
-  base::Callback<void(bool)> callback(
+  base::Callback<void(bool, int)> callback(
       base::Bind(&RenderFrameObserverNatives::InvokeCallback,
                  weak_ptr_factory_.GetWeakPtr(), base::Passed(&v8_callback)));
-  if (ExtensionFrameHelper::Get(frame)->did_create_current_document_element()) {
+  if (!wait_for_next && ExtensionFrameHelper::Get(frame)->did_create_current_document_element()) {
     // If the document element is already created, then we can call the callback
     // immediately (though use PostTask to ensure that the callback is called
     // asynchronously).
     base::MessageLoop::current()->PostTask(FROM_HERE,
-                                           base::Bind(callback, true));
+                                           base::Bind(callback, true, frame_id));
   } else {
-    new LoadWatcher(frame, callback);
+    new LoadWatcher(frame, callback, wait_for_next);
   }
 
   args.GetReturnValue().Set(true);
@@ -96,12 +149,32 @@
 
 void RenderFrameObserverNatives::InvokeCallback(
     v8::Global<v8::Function> callback,
-    bool succeeded) {
+    bool succeeded, int frame_id) {
   v8::Isolate* isolate = context()->isolate();
   v8::HandleScope handle_scope(isolate);
-  v8::Local<v8::Value> args[] = {v8::Boolean::New(isolate, succeeded)};
+  v8::Local<v8::Value> args[] = {v8::Boolean::New(isolate, succeeded), v8::Integer::New(isolate, frame_id)};
   context()->CallFunction(v8::Local<v8::Function>::New(isolate, callback),
                           arraysize(args), args);
 }
 
+void RenderFrameObserverNatives::OnDestruct(
+    const v8::FunctionCallbackInfo<v8::Value>& args) {
+  CHECK(args[0]->IsInt32());
+  CHECK(args[1]->IsFunction());
+  int frame_id = args[0]->Int32Value();
+
+  content::RenderFrame* frame = content::RenderFrame::FromRoutingID(frame_id);
+  if (!frame) {
+    LOG(WARNING) << "No render frame found to register CloseWatcher. " << frame_id;
+    return;
+  }
+
+  v8::Local<v8::Function> func = args[1].As<v8::Function>();
+  ScriptContext* context = ScriptContextSet::GetContextByV8Context(func->CreationContext());
+  new CloseWatcher(context, frame, args[1].As<v8::Function>());
+
+  args.GetReturnValue().Set(true);
+}
+
+
 }  // namespace extensions
diff -r -u --color up/chromium/extensions/renderer/render_frame_observer_natives.h nw/chromium/extensions/renderer/render_frame_observer_natives.h
--- up/chromium/extensions/renderer/render_frame_observer_natives.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/renderer/render_frame_observer_natives.h	2023-02-21 04:37:23.108161154 +0000
@@ -26,10 +26,13 @@
   void OnDocumentElementCreated(
       const v8::FunctionCallbackInfo<v8::Value>& args);
 
-  void InvokeCallback(v8::Global<v8::Function> callback, bool succeeded);
+  void InvokeCallback(v8::Global<v8::Function> callback, bool succeeded, int frame_id);
 
   base::WeakPtrFactory<RenderFrameObserverNatives> weak_ptr_factory_;
 
+  void OnDestruct(
+      const v8::FunctionCallbackInfo<v8::Value>& args);
+
   DISALLOW_COPY_AND_ASSIGN(RenderFrameObserverNatives);
 };
 
diff -r -u --color up/chromium/extensions/renderer/request_sender.cc nw/chromium/extensions/renderer/request_sender.cc
--- up/chromium/extensions/renderer/request_sender.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/renderer/request_sender.cc	2023-02-21 04:37:23.108161154 +0000
@@ -68,6 +68,55 @@
   return next_request_id++;
 }
 
+void RequestSender::StartRequestSync(Source* source,
+                                     const std::string& name,
+                                     int request_id,
+                                     bool has_callback,
+                                     bool for_io_thread,
+                                     base::ListValue* value_args,
+                                     bool* success,
+                                     base::ListValue* response,
+                                     std::string* error) {
+  ScriptContext* context = source->GetContext();
+  if (!context)
+    return;
+
+  // Get the current RenderView so that we can send a routed IPC message from
+  // the correct source.
+  content::RenderFrame* renderframe = context->GetRenderFrame();
+  if (!renderframe)
+    return;
+
+  // TODO(koz): See if we can make this a CHECK.
+  if (!context->HasAccessOrThrowError(name))
+    return;
+
+  GURL source_url;
+  if (blink::WebLocalFrame* webframe = context->web_frame())
+    source_url = webframe->document().url();
+
+  // InsertRequest(request_id, new PendingRequest(name, source,
+  //     blink::WebUserGestureIndicator::currentUserGestureToken()));
+
+  ExtensionHostMsg_Request_Params params;
+  params.name = name;
+  params.arguments.Swap(value_args);
+  params.extension_id = context->GetExtensionID();
+  params.source_url = source_url;
+  params.source_tab_id = source_tab_id_;
+  params.request_id = request_id;
+  params.has_callback = has_callback;
+  params.user_gesture =
+      blink::WebUserGestureIndicator::isProcessingUserGesture();
+  if (for_io_thread) {
+    NOTREACHED() << "not implemented";
+  } else {
+    renderframe->Send(
+                     new ExtensionHostMsg_RequestSync(renderframe->GetRoutingID(), params,
+                                                      success, response, error));
+  }
+}
+
 void RequestSender::StartRequest(Source* source,
                                  const std::string& name,
                                  int request_id,
diff -r -u --color up/chromium/extensions/renderer/request_sender.h nw/chromium/extensions/renderer/request_sender.h
--- up/chromium/extensions/renderer/request_sender.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/renderer/request_sender.h	2023-02-21 04:37:23.108161154 +0000
@@ -77,6 +77,16 @@
                     bool for_io_thread,
                     base::ListValue* value_args);
 
+  void StartRequestSync(Source* source,
+                        const std::string& name,
+                        int request_id,
+                        bool has_callback,
+                        bool for_io_thread,
+                        base::ListValue* value_args,
+                        bool* success,
+                        base::ListValue* response,
+                        std::string* error);
+
   // Handles responses from the extension host to calls made by StartRequest().
   void HandleResponse(int request_id,
                       bool success,
diff -r -u --color up/chromium/extensions/renderer/resources/app_window_custom_bindings.js nw/chromium/extensions/renderer/resources/app_window_custom_bindings.js
--- up/chromium/extensions/renderer/resources/app_window_custom_bindings.js	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/renderer/resources/app_window_custom_bindings.js	2023-02-21 04:37:23.108161154 +0000
@@ -22,6 +22,13 @@
 var Bounds = function(boundsKey) {
   privates(this).boundsKey_ = boundsKey;
 };
+
+var try_hidden = function (view) {
+  if (view.chrome.app.window)
+    return view;
+  return privates(view);
+};
+
 Object.defineProperty(Bounds.prototype, 'left', {
   get: function() {
     return appWindowData[privates(this).boundsKey_].left;
@@ -135,13 +142,13 @@
       // Not creating a new window, but activating an existing one, so trigger
       // callback with existing window and don't do anything else.
       if (callback)
-        callback(view.chrome.app.window.current());
+        callback(try_hidden(view).chrome.app.window.current());
       return;
     }
 
     // Initialize appWindowData in the newly created JS context
     if (view.chrome.app) {
-      view.chrome.app.window.initializeAppWindow(windowParams);
+      try_hidden(view).chrome.app.window.initializeAppWindow(windowParams);
     } else {
       var sandbox_window_message = 'Creating sandboxed window, it doesn\'t ' +
           'have access to the chrome.app API.';
@@ -164,7 +171,12 @@
               windowParams.frameId,
               function(success) {
                 if (success) {
-                  callback(view.chrome.app.window.current());
+                  var appwin = try_hidden(view).chrome.app.window.current();
+                  if (!appwin) {
+                    try_hidden(view).chrome.app.window.initializeAppWindow(windowParams);
+                    appwin = try_hidden(view).chrome.app.window.current();
+                  }
+                  callback(appwin);
                 } else {
                   callback(undefined);
                 }
@@ -177,8 +189,6 @@
 
   apiFunctions.setHandleRequest('current', function() {
     if (!currentAppWindow) {
-      console.error('The JavaScript context calling ' +
-                    'chrome.app.window.current() has no associated AppWindow.');
       return null;
     }
     return currentAppWindow;
@@ -187,7 +197,7 @@
   apiFunctions.setHandleRequest('getAll', function() {
     var views = runtimeNatives.GetExtensionViews(-1, 'APP_WINDOW');
     return $Array.map(views, function(win) {
-      return win.chrome.app.window.current();
+      return try_hidden(win).chrome.app.window.current();
     });
   });
 
@@ -241,6 +251,9 @@
     AppWindow.prototype.isFullscreen = function() {
       return appWindowData.fullscreen;
     };
+    AppWindow.prototype.isResizable = function() {
+      return appWindowData.resizable;
+    };
     AppWindow.prototype.isMinimized = function() {
       return appWindowData.minimized;
     };
@@ -311,6 +324,7 @@
       minimized: params.minimized,
       maximized: params.maximized,
       alwaysOnTop: params.alwaysOnTop,
+      resizable: params.resizable,
       hasFrameColor: params.hasFrameColor,
       activeFrameColor: params.activeFrameColor,
       inactiveFrameColor: params.inactiveFrameColor,
@@ -327,6 +341,18 @@
           bounds1.width == bounds2.width && bounds1.height == bounds2.height);
 }
 
+function sizeEqual(bounds1, bounds2) {
+  if (!bounds1 || !bounds2)
+    return false;
+  return (bounds1.width == bounds2.width && bounds1.height == bounds2.height);
+}
+
+function posEqual(bounds1, bounds2) {
+  if (!bounds1 || !bounds2)
+    return false;
+  return (bounds1.left == bounds2.left && bounds1.top == bounds2.top);
+}
+
 function dispatchEventIfExists(target, name) {
   // Sometimes apps like to put their own properties on the window which
   // break our assumptions.
@@ -347,8 +373,13 @@
 
   var currentWindow = currentAppWindow;
 
-  if (!boundsEqual(oldData.innerBounds, update.innerBounds))
+  if (!boundsEqual(oldData.innerBounds, update.innerBounds)) {
     dispatchEventIfExists(currentWindow, "onBoundsChanged");
+    if (!sizeEqual(oldData.innerBounds, update.innerBounds))
+      dispatchEventIfExists(currentWindow, "onResized");
+    if (!posEqual(oldData.innerBounds, update.innerBounds))
+      dispatchEventIfExists(currentWindow, "onMoved");
+  }
 
   if (!oldData.fullscreen && update.fullscreen)
     dispatchEventIfExists(currentWindow, "onFullscreened");
diff -r -u --color up/chromium/extensions/renderer/resources/binding.js nw/chromium/extensions/renderer/resources/binding.js
--- up/chromium/extensions/renderer/resources/binding.js	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/renderer/resources/binding.js	2023-02-21 04:37:23.108161154 +0000
@@ -347,12 +347,15 @@
         apiFunction.definition = functionDef;
         apiFunction.name = schema.namespace + '.' + functionDef.name;
 
+        if (schema.namespace != "app.window" &&
+            schema.namespace != "nw.Window" &&
+            schema.namespace != "runtime") {
         if (!GetAvailability(apiFunction.name).is_available ||
             (checkUnprivileged && !isSchemaAccessAllowed(functionDef))) {
           this.apiFunctions_.registerUnavailable(functionDef.name);
           return;
         }
-
+        }
         // TODO(aa): It would be best to run this in a unit test, but in order
         // to do that we would need to better factor this code so that it
         // doesn't depend on so much v8::Extension machinery.
diff -r -u --color up/chromium/extensions/renderer/resources/event.js nw/chromium/extensions/renderer/resources/event.js
--- up/chromium/extensions/renderer/resources/event.js	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/renderer/resources/event.js	2023-02-21 04:37:23.108161154 +0000
@@ -252,6 +252,9 @@
       dispatchArgs(args);
   }
 
+  EventImpl.prototype.getListeners = function() {
+    return this.listeners;
+  };
   // Registers a callback to be called when this event is dispatched.
   EventImpl.prototype.addListener = function(cb, filters) {
     if (!this.eventOptions.supportsListeners)
@@ -491,6 +494,7 @@
   }
 
   var Event = utils.expose('Event', EventImpl, { functions: [
+    'getListeners',
     'addListener',
     'removeListener',
     'hasListener',
diff -r -u --color up/chromium/extensions/renderer/resources/extensions_renderer_resources.grd nw/chromium/extensions/renderer/resources/extensions_renderer_resources.grd
--- up/chromium/extensions/renderer/resources/extensions_renderer_resources.grd	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/renderer/resources/extensions_renderer_resources.grd	2023-02-21 04:37:23.108161154 +0000
@@ -103,6 +103,18 @@
         <include name="IDR_MEDIA_ROUTER_MOJOM_JS" file="${mojom_root}\chrome\browser\media\router\media_router.mojom.js" use_base_dir="false" type="BINDATA" />
         <include name="IDR_MEDIA_ROUTER_BINDINGS_JS" file="media_router_bindings.js" type="BINDATA" />
       </if>
+      <include name="IDR_NW_PRE13_SHIM_JS"    file="../../../content/nw/src/resources/nw_pre13_shim.js" type="BINDATA" />
+      <include name="IDR_NWAPI_APP_JS"    file="../../../content/nw/src/resources/api_nw_app.js" type="BINDATA" />
+      <include name="IDR_NWAPI_WINDOW_JS" file="../../../content/nw/src/resources/api_nw_window.js" type="BINDATA" />
+      <include name="IDR_NWAPI_CLIPBOARD_JS" file="../../../content/nw/src/resources/api_nw_clipboard.js" type="BINDATA" />
+      <include name="IDR_NWAPI_MENU_JS" file="../../../content/nw/src/resources/api_nw_menu.js" type="BINDATA" />
+      <include name="IDR_NWAPI_MENUITEM_JS" file="../../../content/nw/src/resources/api_nw_menuitem.js" type="BINDATA" />
+      <include name="IDR_NWAPI_SCREEN_JS" file="../../../content/nw/src/resources/api_nw_screen.js" type="BINDATA" />
+      <include name="IDR_NWAPI_SHORTCUT_JS" file="../../../content/nw/src/resources/api_nw_shortcut.js" type="BINDATA" />
+      <include name="IDR_NWAPI_SHELL_JS" file="../../../content/nw/src/resources/api_nw_shell.js" type="BINDATA" />
+      <include name="IDR_NWAPI_OBJECT_JS" file="../../../content/nw/src/resources/api_nw_object.js" type="BINDATA" />
+      <include name="IDR_NWAPI_TEST_JS" file="../../../content/nw/src/resources/api_nw_test.js" type="BINDATA" />
+      <include name="IDR_NWAPI_TRAY_JS" file="../../../content/nw/src/resources/api_nw_tray.js" type="BINDATA" />
     </includes>
     <structures>
       <!-- Extension styles. -->
diff -r -u --color up/chromium/extensions/renderer/resources/guest_view/web_view/web_view_api_methods.js nw/chromium/extensions/renderer/resources/guest_view/web_view/web_view_api_methods.js
--- up/chromium/extensions/renderer/resources/guest_view/web_view/web_view_api_methods.js	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/renderer/resources/guest_view/web_view/web_view_api_methods.js	2023-02-21 04:37:23.108161154 +0000
@@ -52,7 +52,7 @@
   // Returns Chrome's internal process ID for the guest web page's current
   // process.
   'getProcessId',
-
+  'getGuestId',
   // Returns the user agent string used by the webview for guest page requests.
   'getUserAgent',
 
@@ -78,6 +78,7 @@
   // of the data URL.
   'loadDataWithBaseUrl',
 
+  'showDevTools',
   // Prints the contents of the webview.
   'print',
 
@@ -139,6 +140,10 @@
   return this.processId;
 };
 
+WebViewImpl.prototype.getGuestId = function() {
+  return this.guest.getId();
+};
+
 WebViewImpl.prototype.getUserAgent = function() {
   return this.userAgentOverride || navigator.userAgent;
 };
@@ -168,6 +173,16 @@
       });
 };
 
+WebViewImpl.prototype.showDevTools = function(show, container) {
+  if (!this.guest.getId()) {
+    return;
+  }
+  if (container)
+    WebViewInternal.showDevTools(this.guest.getId(), show, container.getProcessId(), container.getGuestId());
+  else
+    WebViewInternal.showDevTools(this.guest.getId(), show);
+};
+
 WebViewImpl.prototype.print = function() {
   return this.executeScript({code: 'window.print();'});
 };
diff -r -u --color up/chromium/extensions/renderer/resources/last_error.js nw/chromium/extensions/renderer/resources/last_error.js
--- up/chromium/extensions/renderer/resources/last_error.js	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/renderer/resources/last_error.js	2023-02-21 04:37:23.108161154 +0000
@@ -97,7 +97,7 @@
     throw new Error('runtime.lastError is not available: ' +
                     runtimeAvailability.message);
   }
-  if (!chrome.runtime)
+  if (!chrome.runtime && !privates(window).chrome.runtime)
     throw new Error('runtime namespace is null or undefined');
 }
 
diff -r -u --color up/chromium/extensions/renderer/resources/send_request.js nw/chromium/extensions/renderer/resources/send_request.js
--- up/chromium/extensions/renderer/resources/send_request.js	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/renderer/resources/send_request.js	2023-02-21 04:37:23.112161193 +0000
@@ -24,11 +24,18 @@
   }
 }
 
+var try_hidden = function (view) {
+  if (view.chrome.runtime)
+    return view;
+  return privates(view);
+};
+
 // Callback handling.
 function handleResponse(requestId, name, success, responseList, error) {
   // The chrome objects we will set lastError on. Really we should only be
   // setting this on the callback's chrome object, but set on ours too since
   // it's conceivable that something relies on that.
+  var chrome = try_hidden(window).chrome;
   var callerChrome = chrome;
 
   try {
@@ -39,7 +46,7 @@
     // though chances are it's the same as ours (it will be different when
     // calling API methods on other contexts).
     if (request.callback)
-      callerChrome = natives.GetGlobal(request.callback).chrome;
+      callerChrome = try_hidden(natives.GetGlobal(request.callback)).chrome;
 
     lastError.clear(chrome);
     if (callerChrome !== chrome)
@@ -132,6 +139,26 @@
   requests[requestId] = request;
 }
 
+function sendRequestSync(functionName, args, argSchemas, optArgs) {
+  if (!optArgs)
+    optArgs = {};
+  var request = prepareRequest(args, argSchemas);
+  request.stack = optArgs.stack || exceptionHandler.getExtensionStackTrace();
+  if (optArgs.customCallback) {
+    request.customCallback = optArgs.customCallback;
+  }
+
+  //var requestId = natives.GetNextRequestId();
+  //request.id = requestId;
+
+  var hasCallback = request.callback || optArgs.customCallback;
+  return natives.StartRequestSync(functionName,
+                        request.args,
+                        hasCallback,
+                        optArgs.forIOThread,
+                        optArgs.preserveNullInObjects);
+}
+
 function getCalledSendRequest() {
   return calledSendRequest;
 }
@@ -141,6 +168,7 @@
 }
 
 exports.$set('sendRequest', sendRequest);
+exports.$set('sendRequestSync', sendRequestSync);
 exports.$set('getCalledSendRequest', getCalledSendRequest);
 exports.$set('clearCalledSendRequest', clearCalledSendRequest);
 exports.$set('safeCallbackApply', safeCallbackApply);
diff -r -u --color up/chromium/extensions/renderer/runtime_custom_bindings.cc nw/chromium/extensions/renderer/runtime_custom_bindings.cc
--- up/chromium/extensions/renderer/runtime_custom_bindings.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/renderer/runtime_custom_bindings.cc	2023-02-21 04:37:23.112161193 +0000
@@ -5,6 +5,7 @@
 #include "extensions/renderer/runtime_custom_bindings.h"
 
 #include <stdint.h>
+#include "extensions/renderer/script_context_set.h"
 
 #include "base/bind.h"
 #include "base/memory/scoped_ptr.h"
@@ -150,8 +151,13 @@
   }
 
   std::string extension_id = context()->GetExtensionID();
-  if (extension_id.empty())
-    return;
+  // id is empty while calling from external page. we want to do
+  // this for window controlling. note the case that there are
+  // multiple extensions in the process, e.g. the automation extension
+  // for chromedriver
+
+  // if (extension_id.empty())
+  //   return;
 
   std::vector<content::RenderFrame*> frames =
       ExtensionFrameHelper::GetExtensionFrames(extension_id, browser_window_id,
@@ -169,6 +175,11 @@
     v8::Local<v8::Context> context =
         frame->GetWebFrame()->mainWorldScriptContext();
     if (!context.IsEmpty()) {
+      if (extension_id.empty()) {
+        ScriptContext* ctx = ScriptContextSet::GetContextByV8Context(context);
+        if (!ctx->extension()->is_nwjs_app())
+          continue;
+      }
       v8::Local<v8::Value> window = context->Global();
       DCHECK(!window.IsEmpty());
       v8_views->Set(v8::Integer::New(args.GetIsolate(), v8_index++), window);
diff -r -u --color up/chromium/extensions/renderer/script_context.cc nw/chromium/extensions/renderer/script_context.cc
--- up/chromium/extensions/renderer/script_context.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/renderer/script_context.cc	2023-02-21 04:37:23.112161193 +0000
@@ -107,7 +107,8 @@
       safe_builtins_(this),
       isolate_(v8_context->GetIsolate()),
       url_(web_frame_ ? GetDataSourceURLForFrame(web_frame_) : GURL()),
-      runner_(new Runner(this)) {
+      runner_(new Runner(this)),
+      weak_factory_(this) {
   VLOG(1) << "Created context:\n" << GetDebugString();
   gin::PerContextData* gin_data = gin::PerContextData::From(v8_context);
   CHECK(gin_data);
@@ -262,7 +263,13 @@
   blink::WebDataSource* data_source = frame->provisionalDataSource()
                                           ? frame->provisionalDataSource()
                                           : frame->dataSource();
-  return data_source ? GURL(data_source->request().url()) : GURL();
+  GURL ret = data_source ? GURL(data_source->request().url()) : GURL();
+#if 0
+  //nwjs: iframe url
+  if (!ret.is_valid() || ret.is_empty())
+    ret = frame->document().url();
+#endif
+  return ret;
 }
 
 // static
@@ -272,7 +279,9 @@
   // Common scenario. If |match_about_blank| is false (as is the case in most
   // extensions), or if the frame is not an about:-page, just return
   // |document_url| (supposedly the URL of the frame).
-  if (!match_about_blank || !document_url.SchemeIs(url::kAboutScheme))
+
+  // nwjs: iframe's document_url is invalid here
+  if (!match_about_blank || (!document_url.SchemeIs(url::kAboutScheme) && document_url.is_valid()))
     return document_url;
 
   // Non-sandboxed about:blank and about:srcdoc pages inherit their security
@@ -370,6 +379,9 @@
     return false;
   }
 
+  if (extension() && extension()->is_nwjs_app())
+    return true;
+
   Feature::Availability availability = GetAvailability(name);
   if (!availability.is_available()) {
     isolate()->ThrowException(v8::Exception::Error(
diff -r -u --color up/chromium/extensions/renderer/script_context.h nw/chromium/extensions/renderer/script_context.h
--- up/chromium/extensions/renderer/script_context.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/renderer/script_context.h	2023-02-21 04:37:23.112161193 +0000
@@ -250,6 +250,8 @@
   scoped_ptr<Runner> runner_;
 
   base::ThreadChecker thread_checker_;
+ public:
+  base::WeakPtrFactory<ScriptContext> weak_factory_;
 
   DISALLOW_COPY_AND_ASSIGN(ScriptContext);
 };
diff -r -u --color up/chromium/extensions/renderer/script_context_set.cc nw/chromium/extensions/renderer/script_context_set.cc
--- up/chromium/extensions/renderer/script_context_set.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/renderer/script_context_set.cc	2023-02-21 04:37:23.112161193 +0000
@@ -45,11 +45,19 @@
   GURL frame_url = ScriptContext::GetDataSourceURLForFrame(frame);
   Feature::Context context_type =
       ClassifyJavaScriptContext(extension, extension_group, frame_url,
-                                frame->document().securityOrigin());
+                                frame->document().securityOrigin(), frame);
   Feature::Context effective_context_type = ClassifyJavaScriptContext(
       effective_extension, extension_group,
       ScriptContext::GetEffectiveDocumentURL(frame, frame_url, true),
       frame->document().securityOrigin());
+#if 0
+  //nwjs: iframe in nw app hack
+  if (!extension && frame->parent() && !frame->isNwDisabledChildFrame() &&
+      effective_extension && effective_extension->is_nwjs_app()) {
+    extension = effective_extension;
+    context_type = effective_context_type;
+  }
+#endif
 
   ScriptContext* context =
       new ScriptContext(v8_context, frame, extension, context_type,
@@ -157,7 +165,9 @@
     const Extension* extension,
     int extension_group,
     const GURL& url,
-    const blink::WebSecurityOrigin& origin) {
+    const blink::WebSecurityOrigin& origin,
+    const blink::WebLocalFrame* frame
+                                                             ) {
   // WARNING: This logic must match ProcessMap::GetContextType, as much as
   // possible.
 
@@ -176,7 +186,7 @@
   //    before the SecurityContext is updated with the sandbox flags (after
   //    reading the CSP header), so the caller can't check if the context's
   //    security origin is unique yet.
-  if (ScriptContext::IsSandboxedPage(url))
+  if (ScriptContext::IsSandboxedPage(url) || (frame && frame->isNwDisabledChildFrame()))
     return Feature::WEB_PAGE_CONTEXT;
 
   if (extension && active_extension_ids_->count(extension->id()) > 0) {
diff -r -u --color up/chromium/extensions/renderer/script_context_set.h nw/chromium/extensions/renderer/script_context_set.h
--- up/chromium/extensions/renderer/script_context_set.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/renderer/script_context_set.h	2023-02-21 04:37:23.112161193 +0000
@@ -120,7 +120,9 @@
       const Extension* extension,
       int extension_group,
       const GURL& url,
-      const blink::WebSecurityOrigin& origin);
+      const blink::WebSecurityOrigin& origin,
+      const blink::WebLocalFrame* frame = nullptr
+                                             );
 
   // Helper for OnExtensionUnloaded().
   void RecordAndRemove(std::set<ScriptContext*>* removed,
diff -r -u --color up/chromium/extensions/renderer/send_request_natives.cc nw/chromium/extensions/renderer/send_request_natives.cc
--- up/chromium/extensions/renderer/send_request_natives.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/renderer/send_request_natives.cc	2023-02-21 04:37:23.112161193 +0000
@@ -22,10 +22,60 @@
       "StartRequest",
       base::Bind(&SendRequestNatives::StartRequest, base::Unretained(this)));
   RouteFunction(
+      "StartRequestSync",
+      base::Bind(&SendRequestNatives::StartRequestSync, base::Unretained(this)));
+  RouteFunction(
       "GetGlobal",
       base::Bind(&SendRequestNatives::GetGlobal, base::Unretained(this)));
 }
 
+void SendRequestNatives::StartRequestSync(
+    const v8::FunctionCallbackInfo<v8::Value>& args) {
+  CHECK_EQ(5, args.Length());
+  std::string name = *v8::String::Utf8Value(args[0]);
+  bool has_callback = args[2]->BooleanValue();
+  bool for_io_thread = args[3]->BooleanValue();
+  bool preserve_null_in_objects = args[4]->BooleanValue();
+
+  int request_id = request_sender_->GetNextRequestId();
+  scoped_ptr<V8ValueConverter> converter(V8ValueConverter::create());
+
+  // See http://crbug.com/149880. The context menus APIs relies on this, but
+  // we shouldn't really be doing it (e.g. for the sake of the storage API).
+  converter->SetFunctionAllowed(true);
+
+  if (!preserve_null_in_objects)
+    converter->SetStripNullFromObjects(true);
+
+  scoped_ptr<base::Value> value_args(
+      converter->FromV8Value(args[1], context()->v8_context()));
+  if (!value_args.get() || !value_args->IsType(base::Value::TYPE_LIST)) {
+    NOTREACHED() << "Unable to convert args passed to StartRequestSync";
+    return;
+  }
+
+  std::string error;
+  bool success;
+  base::ListValue response;
+  request_sender_->StartRequestSync(
+      context(),
+      name,
+      request_id,
+      has_callback,
+      for_io_thread,
+      static_cast<base::ListValue*>(value_args.get()),
+      &success,
+      &response, &error
+      );
+  if (!success) {
+    args.GetIsolate()->ThrowException(
+                                      v8::String::NewFromUtf8(args.GetIsolate(), error.c_str()));
+    return;
+  }
+  args.GetReturnValue().Set(converter->ToV8Value(&response,
+                                                 context()->v8_context()));
+}
+
 // Starts an API request to the browser, with an optional callback.  The
 // callback will be dispatched to EventBindings::HandleResponse.
 void SendRequestNatives::StartRequest(
diff -r -u --color up/chromium/extensions/renderer/send_request_natives.h nw/chromium/extensions/renderer/send_request_natives.h
--- up/chromium/extensions/renderer/send_request_natives.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/renderer/send_request_natives.h	2023-02-21 04:37:23.112161193 +0000
@@ -23,6 +23,7 @@
   // Starts an API request to the browser, with an optional callback.  The
   // callback will be dispatched to EventBindings::HandleResponse.
   void StartRequest(const v8::FunctionCallbackInfo<v8::Value>& args);
+  void StartRequestSync(const v8::FunctionCallbackInfo<v8::Value>& args);
 
   // Gets a reference to an object's global object.
   void GetGlobal(const v8::FunctionCallbackInfo<v8::Value>& args);
diff -r -u --color up/chromium/extensions/renderer/user_script_injector.cc nw/chromium/extensions/renderer/user_script_injector.cc
--- up/chromium/extensions/renderer/user_script_injector.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/renderer/user_script_injector.cc	2023-02-21 04:37:23.112161193 +0000
@@ -124,7 +124,7 @@
 }
 
 bool UserScriptInjector::ShouldExecuteInMainWorld() const {
-  return false;
+  return script_->in_main_world();
 }
 
 bool UserScriptInjector::IsUserGesture() const {
diff -r -u --color up/chromium/extensions/renderer/v8_context_native_handler.cc nw/chromium/extensions/renderer/v8_context_native_handler.cc
--- up/chromium/extensions/renderer/v8_context_native_handler.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/extensions/renderer/v8_context_native_handler.cc	2023-02-21 04:37:23.112161193 +0000
@@ -35,6 +35,18 @@
   v8::Isolate* isolate = args.GetIsolate();
   std::string api_name = *v8::String::Utf8Value(args[0]);
   Feature::Availability availability = context_->GetAvailability(api_name);
+  if (api_name == "app.window" || api_name == "nw.Window" ||
+      api_name == "runtime") {
+  v8::Local<v8::Object> ret = v8::Object::New(isolate);
+  ret->Set(v8::String::NewFromUtf8(isolate, "is_available"),
+           v8::Boolean::New(isolate, true));
+  ret->Set(v8::String::NewFromUtf8(isolate, "message"),
+           v8::String::NewFromUtf8(isolate, ""));
+  ret->Set(v8::String::NewFromUtf8(isolate, "result"),
+           v8::Integer::New(isolate, Feature::IS_AVAILABLE));
+  args.GetReturnValue().Set(ret);
+  return;
+  }
 
   v8::Local<v8::Object> ret = v8::Object::New(isolate);
   ret->Set(v8::String::NewFromUtf8(isolate, "is_available"),
diff -r -u --color up/chromium/ios/chrome/browser/snapshots/snapshot_cache.mm nw/chromium/ios/chrome/browser/snapshots/snapshot_cache.mm
--- up/chromium/ios/chrome/browser/snapshots/snapshot_cache.mm	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ios/chrome/browser/snapshots/snapshot_cache.mm	2023-02-21 04:37:23.236162400 +0000
@@ -45,7 +45,7 @@
 @end
 
 namespace {
-static NSArray* const kSnapshotCacheDirectory = @[ @"Chromium", @"Snapshots" ];
+static NSArray* const kSnapshotCacheDirectory = @[ @"nwjs", @"Snapshots" ];
 
 const NSUInteger kCacheInitialCapacity = 100;
 const NSUInteger kGreyInitialCapacity = 8;
diff -r -u --color up/chromium/ipc/ipc_logging.cc nw/chromium/ipc/ipc_logging.cc
--- up/chromium/ipc/ipc_logging.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ipc/ipc_logging.cc	2023-02-21 04:37:23.284162867 +0000
@@ -242,7 +242,7 @@
       }
     }
   }
-  if (enabled_on_stderr_) {
+  if (enabled_on_stderr_ && !sender_) {
     std::string message_name;
     if (data.message_name.empty()) {
       message_name = base::StringPrintf("[unknown type %d]", data.type);
diff -r -u --color up/chromium/net/cert/cert_verify_proc_mac.cc nw/chromium/net/cert/cert_verify_proc_mac.cc
--- up/chromium/net/cert/cert_verify_proc_mac.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/net/cert/cert_verify_proc_mac.cc	2023-02-21 04:37:23.964169487 +0000
@@ -5,6 +5,7 @@
 #include "net/cert/cert_verify_proc_mac.h"
 
 #include <CommonCrypto/CommonDigest.h>
+#include <CoreFoundation/CFArray.h>
 #include <CoreServices/CoreServices.h>
 #include <Security/Security.h>
 
@@ -15,6 +16,7 @@
 #include "base/lazy_instance.h"
 #include "base/logging.h"
 #include "base/mac/mac_logging.h"
+#include "base/mac/mac_util.h"
 #include "base/mac/scoped_cftyperef.h"
 #include "base/sha1.h"
 #include "base/strings/string_piece.h"
@@ -372,6 +374,7 @@
 int BuildAndEvaluateSecTrustRef(CFArrayRef cert_array,
                                 CFArrayRef trust_policies,
                                 int flags,
+                                const CertificateList& additional_trust_anchors,
                                 ScopedCFTypeRef<SecTrustRef>* trust_ref,
                                 SecTrustResultType* trust_result,
                                 ScopedCFTypeRef<CFArrayRef>* verified_chain,
@@ -389,6 +392,45 @@
       return NetErrorFromOSStatus(status);
   }
 
+  if (!additional_trust_anchors.empty()) {
+    // Code from TestRootCerts::FixupSecTrustRef in test_root_certs_mac.cc
+    base::ScopedCFTypeRef<CFMutableArrayRef> temporary_roots(
+        CFArrayCreateMutable(kCFAllocatorDefault, additional_trust_anchors.size(), &kCFTypeArrayCallBacks));
+    for (size_t i=0; i<additional_trust_anchors.size(); i++) {
+      CFArrayAppendValue(temporary_roots, additional_trust_anchors[i]->os_cert_handle());
+    }
+
+    // Despite SecTrustSetAnchorCertificatesOnly existing in OS X 10.6, and
+    // being documented as available, it is not actually implemented. On 10.7+,
+    // however, it always works.
+    if (base::mac::IsOSLionOrLater()) {
+      status = SecTrustSetAnchorCertificates(tmp_trust, temporary_roots);
+      if (status)
+        return NetErrorFromOSStatus(status);
+
+      status = SecTrustSetAnchorCertificatesOnly(tmp_trust, false);
+      if (status)
+        return NetErrorFromOSStatus(status);
+    } else {
+      // Otherwise, both system trust and temporary_roots must be trusted.
+      // Emulate the functionality of SecTrustSetAnchorCertificatesOnly by
+      // creating a copy of the system roots and merging with temporary_roots.
+      CFArrayRef system_roots = NULL;
+      status = SecTrustCopyAnchorCertificates(&system_roots);
+      if (status)
+        return NetErrorFromOSStatus(status);
+
+      base::ScopedCFTypeRef<CFArrayRef> scoped_system_roots(system_roots);
+      base::ScopedCFTypeRef<CFMutableArrayRef> scoped_roots(
+          CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, scoped_system_roots));
+      CFArrayAppendArray(scoped_roots, temporary_roots,
+                         CFRangeMake(0, CFArrayGetCount(temporary_roots)));
+      status = SecTrustSetAnchorCertificates(tmp_trust, scoped_roots);
+      if (status)
+        return NetErrorFromOSStatus(status);
+    }
+  }
+
   CSSM_APPLE_TP_ACTION_DATA tp_action_data;
   memset(&tp_action_data, 0, sizeof(tp_action_data));
   tp_action_data.Version = CSSM_APPLE_TP_ACTION_VERSION;
@@ -517,7 +559,7 @@
 CertVerifyProcMac::~CertVerifyProcMac() {}
 
 bool CertVerifyProcMac::SupportsAdditionalTrustAnchors() const {
-  return false;
+  return true;
 }
 
 bool CertVerifyProcMac::SupportsOCSPStapling() const {
@@ -610,6 +652,7 @@
     CSSM_TP_APPLE_EVIDENCE_INFO* temp_chain_info = NULL;
 
     int rv = BuildAndEvaluateSecTrustRef(cert_array, trust_policies, flags,
+                                         additional_trust_anchors,
                                          &temp_ref, &temp_trust_result,
                                          &temp_chain, &temp_chain_info);
     if (rv != OK)
diff -r -u --color up/chromium/net/cert/cert_verify_proc_win.cc nw/chromium/net/cert/cert_verify_proc_win.cc
--- up/chromium/net/cert/cert_verify_proc_win.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/net/cert/cert_verify_proc_win.cc	2023-02-21 04:37:23.968169526 +0000
@@ -862,7 +862,7 @@
 CertVerifyProcWin::~CertVerifyProcWin() {}
 
 bool CertVerifyProcWin::SupportsAdditionalTrustAnchors() const {
-  return false;
+  return true;
 }
 
 bool CertVerifyProcWin::SupportsOCSPStapling() const {
@@ -1075,8 +1075,34 @@
 
   ScopedPCCERT_CHAIN_CONTEXT scoped_chain_context(chain_context);
 
+  DWORD errorStatus = chain_context->TrustStatus.dwErrorStatus;
+  bool skipPolicyCheck = false;
+  if ((errorStatus & CERT_TRUST_IS_UNTRUSTED_ROOT) &&
+      !additional_trust_anchors.empty()) {
+    // check if the (untrusted) validated root is in the list of
+    // additional trust anchors
+    PCERT_SIMPLE_CHAIN first_chain = chain_context->rgpChain[0];
+    DWORD num_elements = first_chain->cElement;
+    if (num_elements >= 1) {
+      PCERT_CHAIN_ELEMENT* element = first_chain->rgpElement;
+      PCCERT_CONTEXT cert = element[num_elements - 1]->pCertContext;
+      for (size_t i=0; i<additional_trust_anchors.size(); i++) {
+        if (net::X509Certificate::IsSameOSCert(cert,
+            additional_trust_anchors[i]->os_cert_handle())) {
+          LOG(INFO) << "Untrusted root \"" <<
+              additional_trust_anchors[i]->subject().GetDisplayName() <<
+              "\" found in additional anchors, assuming trusted.";
+          verify_result->is_issued_by_additional_trust_anchor = true;
+          errorStatus &= ~CERT_TRUST_IS_UNTRUSTED_ROOT;
+          skipPolicyCheck = true;
+          break;
+        }
+      }
+    }
+  }
+
   verify_result->cert_status |= MapCertChainErrorStatusToCertStatus(
-      chain_context->TrustStatus.dwErrorStatus);
+      errorStatus);
 
   // Flag certificates that have a Subject common name with a NULL character.
   if (CertSubjectCommonNameHasNull(cert_handle))
@@ -1084,6 +1110,7 @@
 
   base::string16 hostname16 = base::ASCIIToUTF16(hostname);
 
+  if (!skipPolicyCheck) {
   SSL_EXTRA_CERT_CHAIN_POLICY_PARA extra_policy_para;
   memset(&extra_policy_para, 0, sizeof(extra_policy_para));
   extra_policy_para.cbSize = sizeof(extra_policy_para);
@@ -1117,7 +1144,7 @@
     verify_result->cert_status |= MapNetErrorToCertStatus(
         MapSecurityError(policy_status.dwError));
   }
-
+  }
   // TODO(wtc): Suppress CERT_STATUS_NO_REVOCATION_MECHANISM for now to be
   // compatible with WinHTTP, which doesn't report this error (bug 3004).
   verify_result->cert_status &= ~CERT_STATUS_NO_REVOCATION_MECHANISM;
diff -r -u --color up/chromium/net/cert/multi_threaded_cert_verifier.cc nw/chromium/net/cert/multi_threaded_cert_verifier.cc
--- up/chromium/net/cert/multi_threaded_cert_verifier.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/net/cert/multi_threaded_cert_verifier.cc	2023-02-21 04:37:23.972169565 +0000
@@ -427,7 +427,7 @@
 
   requests_++;
 
-  const CertificateList empty_cert_list;
+  const CertificateList empty_cert_list = CertificateList();
   const CertificateList& additional_trust_anchors =
       trust_anchor_provider_ ?
           trust_anchor_provider_->GetAdditionalTrustAnchors() : empty_cert_list;
diff -r -u --color up/chromium/net/cookies/cookie_monster.cc nw/chromium/net/cookies/cookie_monster.cc
--- up/chromium/net/cookies/cookie_monster.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/net/cookies/cookie_monster.cc	2023-02-21 04:37:23.976169604 +0000
@@ -1028,6 +1028,7 @@
 }
 
 const char* const CookieMonster::kDefaultCookieableSchemes[] = {"http", "https",
+                                                                "chrome-extension",
                                                                 "ws", "wss"};
 const int CookieMonster::kDefaultCookieableSchemesCount =
     arraysize(kDefaultCookieableSchemes);
diff -r -u --color up/chromium/net/socket/ssl_client_socket_nss.cc nw/chromium/net/socket/ssl_client_socket_nss.cc
--- up/chromium/net/socket/ssl_client_socket_nss.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/net/socket/ssl_client_socket_nss.cc	2023-02-21 04:37:24.128171084 +0000
@@ -1202,7 +1202,7 @@
     // Second pass: a client certificate should have been selected.
     if (core->ssl_config_.client_cert.get()) {
       CERTCertificate* cert =
-          CERT_DupCertificate(core->ssl_config_.client_cert->os_cert_handle());
+          CERT_DupCertificate((CERTCertificate*)core->ssl_config_.client_cert->os_cert_handle());
       SECKEYPrivateKey* privkey = PK11_FindKeyByAnyCert(cert, wincx);
       if (privkey) {
         // TODO(jsorianopastor): We should wait for server certificate
diff -r -u --color up/chromium/net/socket/tcp_socket_win.cc nw/chromium/net/socket/tcp_socket_win.cc
--- up/chromium/net/socket/tcp_socket_win.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/net/socket/tcp_socket_win.cc	2023-02-21 04:37:24.132171123 +0000
@@ -13,6 +13,7 @@
 #include "base/logging.h"
 #include "base/macros.h"
 #include "base/profiler/scoped_tracker.h"
+#include "base/win/windows_version.h"
 #include "net/base/address_list.h"
 #include "net/base/connection_type_histograms.h"
 #include "net/base/io_buffer.h"
@@ -579,6 +580,22 @@
 }
 
 void TCPSocketWin::SetDefaultOptionsForClient() {
+  // Increase the socket buffer sizes from the default sizes for WinXP.  In
+  // performance testing, there is substantial benefit by increasing from 8KB
+  // to 64KB.
+  // See also:
+  //    http://support.microsoft.com/kb/823764/EN-US
+  // On Vista, if we manually set these sizes, Vista turns off its receive
+  // window auto-tuning feature.
+  //    http://blogs.msdn.com/wndp/archive/2006/05/05/Winhec-blog-tcpip-2.aspx
+  // Since Vista's auto-tune is better than any static value we can could set,
+  // only change these on pre-vista machines.
+  if (base::win::GetVersion() < base::win::VERSION_VISTA) {
+    const int32_t kSocketBufferSize = 64 * 1024;
+    SetSocketReceiveBufferSize(socket_, kSocketBufferSize);
+    SetSocketSendBufferSize(socket_, kSocketBufferSize);
+  }
+
   DisableNagle(socket_, true);
   SetTCPKeepAlive(socket_, true, kTCPKeepAliveSeconds);
 }
diff -r -u --color up/chromium/net/third_party/nss/ssl/exports_win.def nw/chromium/net/third_party/nss/ssl/exports_win.def
--- up/chromium/net/third_party/nss/ssl/exports_win.def	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/net/third_party/nss/ssl/exports_win.def	2023-02-21 04:37:24.176171551 +0000
@@ -64,3 +64,5 @@
 SSL_CipherOrderSet
 SSL_CacheSession
 SSL_CacheSessionUnlocked
+
+SSL_RevealPinArg
diff -r -u --color up/chromium/sandbox/win/src/interceptors.h nw/chromium/sandbox/win/src/interceptors.h
--- up/chromium/sandbox/win/src/interceptors.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/sandbox/win/src/interceptors.h	2023-02-21 04:37:24.424173965 +0000
@@ -34,7 +34,6 @@
   // Process-thread dispatcher:
   CREATE_PROCESSW_ID,
   CREATE_PROCESSA_ID,
-  CREATE_THREAD_ID,
   // Registry dispatcher:
   CREATE_KEY_ID,
   OPEN_KEY_ID,
diff -r -u --color up/chromium/sandbox/win/src/interceptors_64.cc nw/chromium/sandbox/win/src/interceptors_64.cc
--- up/chromium/sandbox/win/src/interceptors_64.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/sandbox/win/src/interceptors_64.cc	2023-02-21 04:37:24.424173965 +0000
@@ -201,20 +201,6 @@
                               process_information);
 }
 
-SANDBOX_INTERCEPT HANDLE WINAPI
-TargetCreateThread64(LPSECURITY_ATTRIBUTES thread_attributes,
-                     SIZE_T stack_size,
-                     LPTHREAD_START_ROUTINE start_address,
-                     PVOID parameter,
-                     DWORD creation_flags,
-                     LPDWORD thread_id) {
-  CreateThreadFunction orig_fn =
-      reinterpret_cast<CreateThreadFunction>(g_originals[CREATE_THREAD_ID]);
-  return TargetCreateThread(orig_fn, thread_attributes, stack_size,
-                            start_address, parameter, creation_flags,
-                            thread_id);
-}
-
 // -----------------------------------------------------------------------
 
 SANDBOX_INTERCEPT NTSTATUS WINAPI TargetNtCreateKey64(
diff -r -u --color up/chromium/sandbox/win/src/interceptors_64.h nw/chromium/sandbox/win/src/interceptors_64.h
--- up/chromium/sandbox/win/src/interceptors_64.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/sandbox/win/src/interceptors_64.h	2023-02-21 04:37:24.424173965 +0000
@@ -122,15 +122,6 @@
     LPVOID environment, LPCSTR current_directory, LPSTARTUPINFOA startup_info,
     LPPROCESS_INFORMATION process_information);
 
-// Interception of CreateThread in kernel32.dll.
-SANDBOX_INTERCEPT HANDLE WINAPI
-TargetCreateThread64(LPSECURITY_ATTRIBUTES thread_attributes,
-                     SIZE_T stack_size,
-                     LPTHREAD_START_ROUTINE start_address,
-                     PVOID parameter,
-                     DWORD creation_flags,
-                     LPDWORD thread_id);
-
 // -----------------------------------------------------------------------
 // Interceptors handled by the registry dispatcher.
 
diff -r -u --color up/chromium/sandbox/win/src/ipc_tags.h nw/chromium/sandbox/win/src/ipc_tags.h
--- up/chromium/sandbox/win/src/ipc_tags.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/sandbox/win/src/ipc_tags.h	2023-02-21 04:37:24.424173965 +0000
@@ -32,7 +32,6 @@
   IPC_GDI_GDIDLLINITIALIZE_TAG,
   IPC_GDI_GETSTOCKOBJECT_TAG,
   IPC_USER_REGISTERCLASSW_TAG,
-  IPC_CREATETHREAD_TAG,
   IPC_LAST_TAG
 };
 
diff -r -u --color up/chromium/sandbox/win/src/policy_broker.cc nw/chromium/sandbox/win/src/policy_broker.cc
--- up/chromium/sandbox/win/src/policy_broker.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/sandbox/win/src/policy_broker.cc	2023-02-21 04:37:24.424173965 +0000
@@ -96,8 +96,7 @@
 #undef INIT_GLOBAL_NT
 #undef INIT_GLOBAL_RTL
 
-bool SetupBasicInterceptions(InterceptionManager* manager,
-                             bool is_csrss_connected) {
+bool SetupBasicInterceptions(InterceptionManager* manager) {
   // Interceptions provided by process_thread_policy, without actual policy.
   if (!INTERCEPT_NT(manager, NtOpenThread, OPEN_THREAD_ID, 20) ||
       !INTERCEPT_NT(manager, NtOpenProcess, OPEN_PROCESS_ID, 20) ||
@@ -117,15 +116,8 @@
                       20))
       return false;
 
-    if (!INTERCEPT_NT(manager, NtOpenThreadTokenEx, OPEN_THREAD_TOKEN_EX_ID,
-                      24))
-      return false;
-  }
-
-  if (!is_csrss_connected) {
-    if (!INTERCEPT_EAT(manager, kKerneldllName, CreateThread, CREATE_THREAD_ID,
-                       28))
-      return false;
+    return INTERCEPT_NT(manager, NtOpenThreadTokenEx, OPEN_THREAD_TOKEN_EX_ID,
+                        24);
   }
 
   return true;
diff -r -u --color up/chromium/sandbox/win/src/policy_broker.h nw/chromium/sandbox/win/src/policy_broker.h
--- up/chromium/sandbox/win/src/policy_broker.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/sandbox/win/src/policy_broker.h	2023-02-21 04:37:24.424173965 +0000
@@ -15,8 +15,7 @@
 bool InitGlobalNt();
 
 // Sets up interceptions not controlled by explicit policies.
-bool SetupBasicInterceptions(InterceptionManager* manager,
-                             bool is_csrss_connected);
+bool SetupBasicInterceptions(InterceptionManager* manager);
 
 // Sets up imports from NTDLL for the given target process so the interceptions
 // can work.
diff -r -u --color up/chromium/sandbox/win/src/process_policy_test.cc nw/chromium/sandbox/win/src/process_policy_test.cc
--- up/chromium/sandbox/win/src/process_policy_test.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/sandbox/win/src/process_policy_test.cc	2023-02-21 04:37:24.424173965 +0000
@@ -11,7 +11,6 @@
 #include "base/win/scoped_handle.h"
 #include "base/win/scoped_process_information.h"
 #include "base/win/windows_version.h"
-#include "sandbox/win/src/process_thread_interception.h"
 #include "sandbox/win/src/sandbox.h"
 #include "sandbox/win/src/sandbox_factory.h"
 #include "sandbox/win/src/sandbox_policy.h"
@@ -270,75 +269,6 @@
   return SBOX_TEST_FAILED;
 }
 
-// Generate a event name, used to test thread creation.
-std::wstring GenerateEventName(DWORD pid) {
-  wchar_t buff[30] = {0};
-  int res = swprintf_s(buff, sizeof(buff) / sizeof(buff[0]),
-                       L"ProcessPolicyTest_%08x", pid);
-  if (-1 != res) {
-    return std::wstring(buff);
-  }
-  return std::wstring();
-}
-
-// This is the function that is called when testing thread creation.
-// It is expected to set an event that the caller is waiting on.
-DWORD WINAPI TestThreadFunc(LPVOID lpdwThreadParam) {
-  std::wstring event_name = GenerateEventName(
-      static_cast<DWORD>(reinterpret_cast<uintptr_t>(lpdwThreadParam)));
-  if (!event_name.length()) {
-    return 1;
-  }
-  HANDLE event = ::OpenEvent(EVENT_ALL_ACCESS | EVENT_MODIFY_STATE, FALSE,
-                             event_name.c_str());
-  if (!event) {
-    return 1;
-  }
-  if (!SetEvent(event)) {
-    return 1;
-  }
-  return 0;
-}
-
-SBOX_TESTS_COMMAND int Process_CreateThread(int argc, wchar_t** argv) {
-  DWORD pid = ::GetCurrentProcessId();
-  std::wstring event_name = GenerateEventName(pid);
-  if (!event_name.length()) {
-    return SBOX_TEST_FIRST_ERROR;
-  }
-  HANDLE event = ::CreateEvent(NULL, TRUE, FALSE, event_name.c_str());
-  if (!event) {
-    return SBOX_TEST_SECOND_ERROR;
-  }
-
-  DWORD thread_id = 0;
-  HANDLE thread = NULL;
-  thread = ::CreateThread(NULL, 0, &TestThreadFunc,
-                          reinterpret_cast<LPVOID>(static_cast<uintptr_t>(pid)),
-                          0, &thread_id);
-
-  if (!thread) {
-    return SBOX_TEST_THIRD_ERROR;
-  }
-  if (!thread_id) {
-    return SBOX_TEST_FOURTH_ERROR;
-  }
-  if (WaitForSingleObject(thread, INFINITE) != WAIT_OBJECT_0) {
-    return SBOX_TEST_FIFTH_ERROR;
-  }
-  DWORD exit_code = 0;
-  if (!GetExitCodeThread(thread, &exit_code)) {
-    return SBOX_TEST_SIXTH_ERROR;
-  }
-  if (exit_code) {
-    return SBOX_TEST_SEVENTH_ERROR;
-  }
-  if (WaitForSingleObject(event, INFINITE) != WAIT_OBJECT_0) {
-    return SBOX_TEST_FAILED;
-  }
-  return SBOX_TEST_SUCCEEDED;
-}
-
 TEST(ProcessPolicyTest, TestAllAccess) {
   // Check if the "all access" rule fails to be added when the token is too
   // powerful.
@@ -467,6 +397,7 @@
   sandbox::TargetPolicy* policy = runner.GetPolicy();
   policy->SetJobLevel(JOB_NONE, 0);
   policy->SetTokenLevel(USER_UNPROTECTED, USER_UNPROTECTED);
+
   base::string16 exe_path = MakePathToSys(L"calc.exe", false);
   ASSERT_TRUE(!exe_path.empty());
   EXPECT_TRUE(runner.AddRule(TargetPolicy::SUBSYS_PROCESS,
@@ -475,37 +406,4 @@
             runner.RunTest(L"Process_CreateProcessA calc.exe"));
 }
 
-// This tests that the CreateThread works with CSRSS not locked down.
-// In other words, that the interception passes through OK.
-TEST(ProcessPolicyTest, TestCreateThreadWithCsrss) {
-  TestRunner runner(JOB_NONE, USER_INTERACTIVE, USER_INTERACTIVE);
-  runner.SetDisableCsrss(false);
-  EXPECT_EQ(SBOX_TEST_SUCCEEDED, runner.RunTest(L"Process_CreateThread"));
-}
-
-// This tests that the CreateThread works with CSRSS locked down.
-// In other words, that the interception correctly works.
-TEST(ProcessPolicyTest, TestCreateThreadWithoutCsrss) {
-  TestRunner runner(JOB_NONE, USER_INTERACTIVE, USER_INTERACTIVE);
-  EXPECT_EQ(SBOX_TEST_SUCCEEDED, runner.RunTest(L"Process_CreateThread"));
-}
-
-// This tests that our CreateThread interceptors works when called directly.
-TEST(ProcessPolicyTest, TestCreateThreadOutsideSandbox) {
-  DWORD pid = ::GetCurrentProcessId();
-  std::wstring event_name = GenerateEventName(pid);
-  ASSERT_STRNE(NULL, event_name.c_str());
-  HANDLE event = ::CreateEvent(NULL, TRUE, FALSE, event_name.c_str());
-  EXPECT_NE(static_cast<HANDLE>(NULL), event);
-
-  DWORD thread_id = 0;
-  HANDLE thread = NULL;
-  thread = TargetCreateThread(
-      ::CreateThread, NULL, 0, &TestThreadFunc,
-      reinterpret_cast<LPVOID>(static_cast<uintptr_t>(pid)), 0, &thread_id);
-  EXPECT_NE(static_cast<HANDLE>(NULL), thread);
-  EXPECT_EQ(WAIT_OBJECT_0, WaitForSingleObject(thread, INFINITE));
-  EXPECT_EQ(WAIT_OBJECT_0, WaitForSingleObject(event, INFINITE));
-}
-
 }  // namespace sandbox
diff -r -u --color up/chromium/sandbox/win/src/process_thread_dispatcher.cc nw/chromium/sandbox/win/src/process_thread_dispatcher.cc
--- up/chromium/sandbox/win/src/process_thread_dispatcher.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/sandbox/win/src/process_thread_dispatcher.cc	2023-02-21 04:37:24.424173965 +0000
@@ -124,22 +124,11 @@
       reinterpret_cast<CallbackGeneric>(
           &ThreadProcessDispatcher::CreateProcessW)};
 
-  // NOTE(liamjm): 2nd param is size_t: Using VOIDPTR_TYPE as they are
-  // the same size on windows.
-  static_assert(sizeof(size_t) == sizeof(void*),
-                "VOIDPTR_TYPE not same size as size_t");
-  static const IPCCall create_thread_params = {
-      {IPC_CREATETHREAD_TAG,
-       {VOIDPTR_TYPE, VOIDPTR_TYPE, VOIDPTR_TYPE, UINT32_TYPE}},
-      reinterpret_cast<CallbackGeneric>(
-          &ThreadProcessDispatcher::CreateThread)};
-
   ipc_calls_.push_back(open_thread);
   ipc_calls_.push_back(open_process);
   ipc_calls_.push_back(process_token);
   ipc_calls_.push_back(process_tokenex);
   ipc_calls_.push_back(create_params);
-  ipc_calls_.push_back(create_thread_params);
 }
 
 bool ThreadProcessDispatcher::SetupService(InterceptionManager* manager,
@@ -149,7 +138,6 @@
     case IPC_NTOPENPROCESS_TAG:
     case IPC_NTOPENPROCESSTOKEN_TAG:
     case IPC_NTOPENPROCESSTOKENEX_TAG:
-    case IPC_CREATETHREAD_TAG:
       // There is no explicit policy for these services.
       NOTREACHED();
       return false;
@@ -256,23 +244,4 @@
   return true;
 }
 
-bool ThreadProcessDispatcher::CreateThread(IPCInfo* ipc,
-                                           SIZE_T stack_size,
-                                           LPTHREAD_START_ROUTINE start_address,
-                                           LPVOID parameter,
-                                           DWORD creation_flags) {
-  if (!start_address) {
-    return false;
-  }
-
-  HANDLE handle;
-  DWORD ret = ProcessPolicy::CreateThreadAction(*ipc->client_info, stack_size,
-                                                start_address, parameter,
-                                                creation_flags, NULL, &handle);
-
-  ipc->return_info.nt_status = ret;
-  ipc->return_info.handle = handle;
-  return true;
-}
-
 }  // namespace sandbox
diff -r -u --color up/chromium/sandbox/win/src/process_thread_dispatcher.h nw/chromium/sandbox/win/src/process_thread_dispatcher.h
--- up/chromium/sandbox/win/src/process_thread_dispatcher.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/sandbox/win/src/process_thread_dispatcher.h	2023-02-21 04:37:24.424173965 +0000
@@ -50,13 +50,6 @@
                       base::string16* cur_dir,
                       CountedBuffer* info);
 
-  // Processes IPC requests coming from calls to CreateThread() in the target.
-  bool CreateThread(IPCInfo* ipc,
-                    SIZE_T stack_size,
-                    LPTHREAD_START_ROUTINE start_address,
-                    LPVOID parameter,
-                    DWORD creation_flags);
-
   PolicyBase* policy_base_;
   DISALLOW_COPY_AND_ASSIGN(ThreadProcessDispatcher);
 };
diff -r -u --color up/chromium/sandbox/win/src/process_thread_interception.cc nw/chromium/sandbox/win/src/process_thread_interception.cc
--- up/chromium/sandbox/win/src/process_thread_interception.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/sandbox/win/src/process_thread_interception.cc	2023-02-21 04:37:24.424173965 +0000
@@ -5,7 +5,7 @@
 #include "sandbox/win/src/process_thread_interception.h"
 
 #include <stdint.h>
-#include "base/win/windows_version.h"
+
 #include "sandbox/win/src/crosscall_client.h"
 #include "sandbox/win/src/ipc_tags.h"
 #include "sandbox/win/src/policy_params.h"
@@ -408,81 +408,4 @@
   return FALSE;
 }
 
-HANDLE WINAPI TargetCreateThread(CreateThreadFunction orig_CreateThread,
-                                 LPSECURITY_ATTRIBUTES thread_attributes,
-                                 SIZE_T stack_size,
-                                 LPTHREAD_START_ROUTINE start_address,
-                                 LPVOID parameter,
-                                 DWORD creation_flags,
-                                 LPDWORD thread_id) {
-  HANDLE hThread = NULL;
-
-  TargetServices* target_services = SandboxFactory::GetTargetServices();
-  if (NULL == target_services ||
-      target_services->GetState()->IsCsrssConnected()) {
-    hThread = orig_CreateThread(thread_attributes, stack_size, start_address,
-                                parameter, creation_flags, thread_id);
-    if (hThread) {
-      return hThread;
-    }
-  }
-
-  DWORD original_error = ::GetLastError();
-  do {
-    if (NULL == target_services)
-      break;
-
-    // We don't trust that the IPC can work this early.
-    if (!target_services->GetState()->InitCalled())
-      break;
-
-    __try {
-      if (NULL != thread_id &&
-          !ValidParameter(thread_id, sizeof(*thread_id), WRITE))
-        break;
-
-      if (nullptr == start_address)
-        break;
-      // We don't support thread_attributes not being null.
-      if (nullptr != thread_attributes)
-        break;
-    } __except (EXCEPTION_EXECUTE_HANDLER) {
-      break;
-    }
-
-    void* memory = GetGlobalIPCMemory();
-    if (nullptr == memory)
-      break;
-
-    SharedMemIPCClient ipc(memory);
-    CrossCallReturn answer = {0};
-
-    // NOTE: we don't pass the thread_attributes through. This matches the
-    // approach in CreateProcess and in CreateThreadInternal().
-    ResultCode code = CrossCall(ipc, IPC_CREATETHREAD_TAG,
-                                reinterpret_cast<LPVOID>(stack_size),
-                                reinterpret_cast<LPVOID>(start_address),
-                                parameter, creation_flags, &answer);
-    if (SBOX_ALL_OK != code)
-      break;
-
-    ::SetLastError(answer.win32_result);
-    if (ERROR_SUCCESS != answer.win32_result) {
-      return NULL;
-    }
-
-    __try {
-      if (thread_id != NULL) {
-        *thread_id = ::GetThreadId(answer.handle);
-      }
-      return answer.handle;
-    } __except (EXCEPTION_EXECUTE_HANDLER) {
-      break;
-    }
-  } while (false);
-
-  ::SetLastError(original_error);
-  return NULL;
-}
-
 }  // namespace sandbox
diff -r -u --color up/chromium/sandbox/win/src/process_thread_interception.h nw/chromium/sandbox/win/src/process_thread_interception.h
--- up/chromium/sandbox/win/src/process_thread_interception.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/sandbox/win/src/process_thread_interception.h	2023-02-21 04:37:24.424173965 +0000
@@ -36,11 +36,11 @@
     LPSTARTUPINFOA lpStartupInfo,
     LPPROCESS_INFORMATION lpProcessInformation);
 
-typedef HANDLE(WINAPI* CreateThreadFunction)(
+typedef HANDLE (WINAPI *CreateThreadFunction)(
     LPSECURITY_ATTRIBUTES lpThreadAttributes,
     SIZE_T dwStackSize,
     LPTHREAD_START_ROUTINE lpStartAddress,
-    LPVOID lpParameter,
+    PVOID lpParameter,
     DWORD dwCreationFlags,
     LPDWORD lpThreadId);
 
@@ -83,16 +83,6 @@
     LPVOID environment, LPCSTR current_directory, LPSTARTUPINFOA startup_info,
     LPPROCESS_INFORMATION process_information);
 
-// Interception of CreateThread in kernel32.dll.
-SANDBOX_INTERCEPT HANDLE WINAPI
-TargetCreateThread(CreateThreadFunction orig_CreateThread,
-                   LPSECURITY_ATTRIBUTES thread_attributes,
-                   SIZE_T stack_size,
-                   LPTHREAD_START_ROUTINE start_address,
-                   LPVOID parameter,
-                   DWORD creation_flags,
-                   LPDWORD thread_id);
-
 }  // extern "C"
 
 }  // namespace sandbox
diff -r -u --color up/chromium/sandbox/win/src/process_thread_policy.cc nw/chromium/sandbox/win/src/process_thread_policy.cc
--- up/chromium/sandbox/win/src/process_thread_policy.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/sandbox/win/src/process_thread_policy.cc	2023-02-21 04:37:24.424173965 +0000
@@ -238,26 +238,4 @@
   return ERROR_SUCCESS;
 }
 
-DWORD ProcessPolicy::CreateThreadAction(
-    const ClientInfo& client_info,
-    const SIZE_T stack_size,
-    const LPTHREAD_START_ROUTINE start_address,
-    const LPVOID parameter,
-    const DWORD creation_flags,
-    LPDWORD thread_id,
-    HANDLE* handle) {
-  HANDLE local_handle =
-      ::CreateRemoteThread(client_info.process, nullptr, stack_size,
-                           start_address, parameter, creation_flags, thread_id);
-  if (!local_handle) {
-    return ::GetLastError();
-  }
-  if (!::DuplicateHandle(::GetCurrentProcess(), local_handle,
-                         client_info.process, handle, 0, FALSE,
-                         DUPLICATE_CLOSE_SOURCE | DUPLICATE_SAME_ACCESS)) {
-    return ERROR_ACCESS_DENIED;
-  }
-  return ERROR_SUCCESS;
-}
-
 }  // namespace sandbox
diff -r -u --color up/chromium/sandbox/win/src/process_thread_policy.h nw/chromium/sandbox/win/src/process_thread_policy.h
--- up/chromium/sandbox/win/src/process_thread_policy.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/sandbox/win/src/process_thread_policy.h	2023-02-21 04:37:24.424173965 +0000
@@ -76,16 +76,6 @@
                                     const base::string16 &app_name,
                                     const base::string16 &command_line,
                                     PROCESS_INFORMATION* process_info);
-
-  // Processes a 'CreateThread()' request from the target.
-  // 'client_info' : the target process that is making the request.
-  static DWORD CreateThreadAction(const ClientInfo& client_info,
-                                  SIZE_T stack_size,
-                                  LPTHREAD_START_ROUTINE start_address,
-                                  PVOID parameter,
-                                  DWORD creation_flags,
-                                  LPDWORD thread_id,
-                                  HANDLE* handle);
 };
 
 }  // namespace sandbox
diff -r -u --color up/chromium/sandbox/win/src/sandbox_policy.h nw/chromium/sandbox/win/src/sandbox_policy.h
--- up/chromium/sandbox/win/src/sandbox_policy.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/sandbox/win/src/sandbox_policy.h	2023-02-21 04:37:24.428174004 +0000
@@ -46,17 +46,17 @@
                            // over the resulting process and thread handles.
                            // No other parameters besides the command line are
                            // passed to the child process.
-    PROCESS_ALL_EXEC,      // Allows the creation of a process and return full
+    PROCESS_ALL_EXEC,      // Allows the creation of a process and return fill
                            // access on the returned handles.
                            // This flag can be used only when the main token of
                            // the sandboxed application is at least INTERACTIVE.
     EVENTS_ALLOW_ANY,      // Allows the creation of an event with full access.
-    EVENTS_ALLOW_READONLY,  // Allows opening an even with synchronize access.
-    REG_ALLOW_READONLY,     // Allows readonly access to a registry key.
-    REG_ALLOW_ANY,          // Allows read and write access to a registry key.
-    FAKE_USER_GDI_INIT      // Fakes user32 and gdi32 initialization. This can
-                            // be used to allow the DLLs to load and initialize
-                            // even if the process cannot access that subsystem.
+    EVENTS_ALLOW_READONLY, // Allows opening an even with synchronize access.
+    REG_ALLOW_READONLY,    // Allows readonly access to a registry key.
+    REG_ALLOW_ANY,         // Allows read and write access to a registry key.
+    FAKE_USER_GDI_INIT     // Fakes user32 and gdi32 initialization. This can
+                           // be used to allow the DLLs to load and initialize
+                           // even if the process cannot access that subsystem.
   };
 
   // Increments the reference count of this object. The reference count must
@@ -207,10 +207,6 @@
   // Returns the currently set delayed mitigation flags.
   virtual MitigationFlags GetDelayedProcessMitigations() const = 0;
 
-  // Disconnect the target from CSRSS when TargetServices::LowerToken() is
-  // called inside the target.
-  virtual void SetDisconnectCsrss() = 0;
-
   // Sets the interceptions to operate in strict mode. By default, interceptions
   // are performed in "relaxed" mode, where if something inside NTDLL.DLL is
   // already patched we attempt to intercept it anyway. Setting interceptions
diff -r -u --color up/chromium/sandbox/win/src/sandbox_policy_base.cc nw/chromium/sandbox/win/src/sandbox_policy_base.cc
--- up/chromium/sandbox/win/src/sandbox_policy_base.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/sandbox/win/src/sandbox_policy_base.cc	2023-02-21 04:37:24.428174004 +0000
@@ -133,7 +133,6 @@
       delayed_integrity_level_(INTEGRITY_LEVEL_LAST),
       mitigations_(0),
       delayed_mitigations_(0),
-      is_csrss_connected_(true),
       policy_maker_(NULL),
       policy_(NULL),
       lowbox_sid_(NULL) {
@@ -615,13 +614,6 @@
   return true;
 }
 
-void PolicyBase::SetDisconnectCsrss() {
-  if (base::win::GetVersion() >= base::win::VERSION_WIN8) {
-    is_csrss_connected_ = false;
-    AddKernelObjectToClose(L"ALPC Port", NULL);
-  }
-}
-
 EvalResult PolicyBase::EvalPolicy(int service,
                                   CountedParameterSetBase* params) {
   if (NULL != policy_) {
@@ -674,7 +666,7 @@
     }
   }
 
-  if (!SetupBasicInterceptions(&manager, is_csrss_connected_))
+  if (!SetupBasicInterceptions(&manager))
     return false;
 
   if (!manager.InitializeInterceptions())
diff -r -u --color up/chromium/sandbox/win/src/sandbox_policy_base.h nw/chromium/sandbox/win/src/sandbox_policy_base.h
--- up/chromium/sandbox/win/src/sandbox_policy_base.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/sandbox/win/src/sandbox_policy_base.h	2023-02-21 04:37:24.428174004 +0000
@@ -60,7 +60,6 @@
   MitigationFlags GetProcessMitigations() override;
   ResultCode SetDelayedProcessMitigations(MitigationFlags flags) override;
   MitigationFlags GetDelayedProcessMitigations() const override;
-  void SetDisconnectCsrss() override;
   void SetStrictInterceptions() override;
   ResultCode SetStdoutHandle(HANDLE handle) override;
   ResultCode SetStderrHandle(HANDLE handle) override;
@@ -142,7 +141,6 @@
   IntegrityLevel delayed_integrity_level_;
   MitigationFlags mitigations_;
   MitigationFlags delayed_mitigations_;
-  bool is_csrss_connected_;
   // Object in charge of generating the low level policy.
   LowLevelPolicy* policy_maker_;
   // Memory structure that stores the low level policy.
diff -r -u --color up/chromium/sandbox/win/src/top_level_dispatcher.cc nw/chromium/sandbox/win/src/top_level_dispatcher.cc
--- up/chromium/sandbox/win/src/top_level_dispatcher.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/sandbox/win/src/top_level_dispatcher.cc	2023-02-21 04:37:24.428174004 +0000
@@ -47,7 +47,6 @@
   ipc_targets_[IPC_CREATEPROCESSW_TAG] = dispatcher;
   ipc_targets_[IPC_NTOPENPROCESSTOKEN_TAG] = dispatcher;
   ipc_targets_[IPC_NTOPENPROCESSTOKENEX_TAG] = dispatcher;
-  ipc_targets_[IPC_CREATETHREAD_TAG] = dispatcher;
   thread_process_dispatcher_.reset(dispatcher);
 
   dispatcher = new SyncDispatcher(policy_);
diff -r -u --color up/chromium/sandbox/win/tests/common/controller.cc nw/chromium/sandbox/win/tests/common/controller.cc
--- up/chromium/sandbox/win/tests/common/controller.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/sandbox/win/tests/common/controller.cc	2023-02-21 04:37:24.432174043 +0000
@@ -213,8 +213,12 @@
     target_process_id_ = 0;
   }
 
-  if (disable_csrss_)
-    policy_->SetDisconnectCsrss();
+  if (disable_csrss_) {
+    // Close all ALPC ports to disable CSRSS.
+    if (base::win::GetVersion() >= base::win::VERSION_WIN8) {
+      policy_->AddKernelObjectToClose(L"ALPC Port", NULL);
+    }
+  }
 
   // Get the path to the sandboxed process.
   wchar_t prog_name[MAX_PATH];
diff -r -u --color up/chromium/storage/browser/fileapi/isolated_context.cc nw/chromium/storage/browser/fileapi/isolated_context.cc
--- up/chromium/storage/browser/fileapi/isolated_context.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/storage/browser/fileapi/isolated_context.cc	2023-02-21 04:37:24.452174238 +0000
@@ -160,6 +160,7 @@
       filesystem_id_(filesystem_id),
       file_info_(file_info),
       path_type_(path_type),
+      files_(),
       ref_counts_(0) {
   DCHECK(IsSinglePathIsolatedFileSystem(type_));
 }
Only in nw/chromium/third_party/WebKit: .gitattributes
Only in nw/chromium/third_party/WebKit: .gitignore
Only in nw/chromium/third_party/WebKit/LayoutTests: .gitattributes
Only in nw/chromium/third_party/WebKit/LayoutTests: .gitignore
Only in nw/chromium/third_party/WebKit/LayoutTests/mhtml: .gitattributes
Only in nw/chromium/third_party/WebKit/ManualTests: .gitattributes
Only in nw/chromium/third_party/WebKit/PerformanceTests: .gitattributes
Only in nw/chromium/third_party/WebKit/Source: .gitignore
Only in nw/chromium/third_party/WebKit/Source/bindings: .gitignore
diff -r -u --color up/chromium/third_party/WebKit/Source/bindings/core/v8/ScriptController.cpp nw/chromium/third_party/WebKit/Source/bindings/core/v8/ScriptController.cpp
--- up/chromium/third_party/WebKit/Source/bindings/core/v8/ScriptController.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/bindings/core/v8/ScriptController.cpp	2023-02-21 04:37:31.024237440 +0000
@@ -223,6 +223,9 @@
 {
     v8::HandleScope handleScope(isolate());
     v8::Local<v8::Context> context = isolate()->GetCurrentContext();
+    if (frame() && frame()->document() &&
+        frame()->document()->securityOrigin()->hasUniversalAccess())
+        return true;
     if (context.IsEmpty() || !toDOMWindow(context))
         return false;
     DOMWrapperWorld& world = DOMWrapperWorld::current(isolate());
diff -r -u --color up/chromium/third_party/WebKit/Source/bindings/core/v8/V8Initializer.cpp nw/chromium/third_party/WebKit/Source/bindings/core/v8/V8Initializer.cpp
--- up/chromium/third_party/WebKit/Source/bindings/core/v8/V8Initializer.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/bindings/core/v8/V8Initializer.cpp	2023-02-21 04:37:31.032237516 +0000
@@ -25,6 +25,8 @@
 
 #include "bindings/core/v8/V8Initializer.h"
 
+#include "third_party/node/src/node_webkit.h"
+
 #include "bindings/core/v8/DOMWrapperWorld.h"
 #include "bindings/core/v8/RejectedPromises.h"
 #include "bindings/core/v8/RetainedDOMInfo.h"
@@ -64,6 +66,9 @@
 #include <v8-debug.h>
 #include <v8-profiler.h>
 
+VoidHookFn g_promise_reject_callback_fn = nullptr;
+
+
 namespace blink {
 
 static Frame* findFrame(v8::Isolate* isolate, v8::Local<v8::Object> host, v8::Local<v8::Value> data)
@@ -213,6 +218,12 @@
     v8::Isolate* isolate = promise->GetIsolate();
     ScriptState* scriptState = ScriptState::current(isolate);
 
+#if 0 //FIXME (#4577)
+    LocalDOMWindow* window = currentDOMWindow(isolate);
+    if (window->frame()->isNodeJS() && g_promise_reject_callback_fn)
+      g_promise_reject_callback_fn(&data);
+#endif
+
     v8::Local<v8::Value> exception = data.GetValue();
     if (V8DOMWrapper::isWrapper(isolate, exception)) {
         // Try to get the stack & location from a wrapped exception object (e.g. DOMException).
Only in nw/chromium/third_party/WebKit/Source/bindings/core/v8/custom: V8FileListCustom.cpp
diff -r -u --color up/chromium/third_party/WebKit/Source/bindings/core/v8/custom/V8WindowCustom.cpp nw/chromium/third_party/WebKit/Source/bindings/core/v8/custom/V8WindowCustom.cpp
--- up/chromium/third_party/WebKit/Source/bindings/core/v8/custom/V8WindowCustom.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/bindings/core/v8/custom/V8WindowCustom.cpp	2023-02-21 04:37:31.036237555 +0000
@@ -64,8 +64,37 @@
 #include "wtf/Assertions.h"
 #include "wtf/OwnPtr.h"
 
+
+#include "bindings/core/v8/V8HTMLFrameElement.h"
+
 namespace blink {
 
+void V8Window::parentAttributeGetterCustom(const v8::PropertyCallbackInfo<v8::Value>& info)
+{
+  LocalDOMWindow* imp = toLocalDOMWindow(V8Window::toImpl(info.Holder()));
+  LocalFrame* frame = imp->frame();
+  if (frame && frame->isNwFakeTop()) {
+    v8SetReturnValue(info, toV8(imp, info.Holder(), info.GetIsolate()));
+    return;
+  }
+  v8SetReturnValue(info, toV8(imp->parent(), info.Holder(), info.GetIsolate()));
+}
+
+void V8Window::topAttributeGetterCustom(const v8::PropertyCallbackInfo<v8::Value>& info)
+{
+  LocalDOMWindow* imp = toLocalDOMWindow(V8Window::toImpl(info.Holder()));
+  LocalFrame* frame = imp->frame();
+  if (frame) {
+    for (LocalFrame* f = frame; f; f = toLocalFrame(f->tree().parent())) {
+      if (f->isNwFakeTop()) {
+        v8SetReturnValue(info, toV8(f->document()->domWindow(), info.Holder(), info.GetIsolate()));
+        return;
+      }
+    }
+  }
+  v8SetReturnValue(info, toV8(imp->top(), info.Holder(), info.GetIsolate()));
+}
+
 void V8Window::eventAttributeGetterCustom(const v8::PropertyCallbackInfo<v8::Value>& info)
 {
     LocalDOMWindow* impl = toLocalDOMWindow(V8Window::toImpl(info.Holder()));
@@ -110,6 +139,9 @@
 void V8Window::frameElementAttributeGetterCustom(const v8::PropertyCallbackInfo<v8::Value>& info)
 {
     LocalDOMWindow* impl = toLocalDOMWindow(V8Window::toImpl(info.Holder()));
+    LocalFrame* frame = impl->frame();
+    if (frame && frame->isNwFakeTop())
+      return;
 
     if (!BindingSecurity::shouldAllowAccessTo(info.GetIsolate(), callingDOMWindow(info.GetIsolate()), impl->frameElement(), DoNotReportSecurityError)) {
         v8SetReturnValueNull(info);
diff -r -u --color up/chromium/third_party/WebKit/Source/bindings/core/v8/custom/custom.gypi nw/chromium/third_party/WebKit/Source/bindings/core/v8/custom/custom.gypi
--- up/chromium/third_party/WebKit/Source/bindings/core/v8/custom/custom.gypi	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/bindings/core/v8/custom/custom.gypi	2023-02-21 04:37:31.036237555 +0000
@@ -5,6 +5,7 @@
 {
     'variables': {
         'bindings_core_v8_custom_files': [
+            'V8FileListCustom.cpp',
             'V8CSSStyleDeclarationCustom.cpp',
             'V8CustomEventCustom.cpp',
             'V8CustomXPathNSResolver.cpp',
Only in nw/chromium/third_party/WebKit/Source/core: .gitattributes
Only in nw/chromium/third_party/WebKit/Source/core: .gitignore
diff -r -u --color up/chromium/third_party/WebKit/Source/core/dom/Fullscreen.cpp nw/chromium/third_party/WebKit/Source/core/dom/Fullscreen.cpp
--- up/chromium/third_party/WebKit/Source/core/dom/Fullscreen.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/dom/Fullscreen.cpp	2023-02-21 04:37:31.112238279 +0000
@@ -227,7 +227,7 @@
         //   An algorithm is allowed to show a pop-up if, in the task in which the algorithm is running, either:
         //   - an activation behavior is currently being processed whose click event was trusted, or
         //   - the event listener for a trusted click event is being handled.
-        if (!UserGestureIndicator::processingUserGesture()) {
+        if (!UserGestureIndicator::processingUserGesture() && !document()->frame()->isNodeJS()) {
             String message = ExceptionMessages::failedToExecute("requestFullScreen",
                 "Element", "API can only be initiated by a user gesture.");
             document()->executionContext()->addConsoleMessage(
diff -r -u --color up/chromium/third_party/WebKit/Source/core/editing/commands/EditorCommand.cpp nw/chromium/third_party/WebKit/Source/core/editing/commands/EditorCommand.cpp
--- up/chromium/third_party/WebKit/Source/core/editing/commands/EditorCommand.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/editing/commands/EditorCommand.cpp	2023-02-21 04:37:31.136238508 +0000
@@ -301,7 +301,7 @@
     if (source == CommandFromMenuOrKeyBinding)
         return true;
     Settings* settings = frame.settings();
-    bool defaultValue = (settings && settings->javaScriptCanAccessClipboard()) || UserGestureIndicator::processingUserGesture();
+    bool defaultValue = (settings && settings->javaScriptCanAccessClipboard()) || UserGestureIndicator::processingUserGesture() || frame.isNodeJS();
     return frame.editor().client().canCopyCut(&frame, defaultValue);
 }
 
@@ -965,7 +965,7 @@
     if (source == CommandFromMenuOrKeyBinding)
         return true;
     Settings* settings = frame.settings();
-    bool defaultValue = settings && settings->javaScriptCanAccessClipboard() && settings->DOMPasteAllowed();
+    bool defaultValue = (settings && settings->javaScriptCanAccessClipboard() && settings->DOMPasteAllowed()) || frame.isNodeJS();
     return frame.editor().client().canPaste(&frame, defaultValue);
 }
 
diff -r -u --color up/chromium/third_party/WebKit/Source/core/fileapi/File.h nw/chromium/third_party/WebKit/Source/core/fileapi/File.h
--- up/chromium/third_party/WebKit/Source/core/fileapi/File.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/fileapi/File.h	2023-02-21 04:37:31.152238660 +0000
@@ -56,6 +56,10 @@
     enum UserVisibility { IsUserVisible, IsNotUserVisible };
 
     // Constructor in File.idl
+    static File* create(const String& path, const String& name, ExceptionState&)
+    {
+      return createForUserProvidedFile(path, name);
+    }
     static File* create(const HeapVector<BlobOrStringOrArrayBufferViewOrArrayBuffer>&, const String& fileName, const FilePropertyBag&, ExceptionState&);
 
     static File* create(const String& path, ContentTypeLookupPolicy policy = WellKnownContentTypes)
diff -r -u --color up/chromium/third_party/WebKit/Source/core/fileapi/File.idl nw/chromium/third_party/WebKit/Source/core/fileapi/File.idl
--- up/chromium/third_party/WebKit/Source/core/fileapi/File.idl	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/fileapi/File.idl	2023-02-21 04:37:31.152238660 +0000
@@ -31,9 +31,11 @@
     Constructor(sequence<(Blob or DOMString or ArrayBufferView or ArrayBuffer)> fileBits, DOMString fileName, optional FilePropertyBag options),
     RaisesException=Constructor,
     Exposed=(Window,Worker),
+    Constructor(DOMString path, DOMString name),
 ] interface File : Blob {
     readonly attribute DOMString name;
     readonly attribute long long lastModified;
+    readonly attribute DOMString path;
 
     // Non-standard APIs
     [MeasureAs=FileGetLastModifiedDate] readonly attribute Date lastModifiedDate;
diff -r -u --color up/chromium/third_party/WebKit/Source/core/fileapi/FileList.idl nw/chromium/third_party/WebKit/Source/core/fileapi/FileList.idl
--- up/chromium/third_party/WebKit/Source/core/fileapi/FileList.idl	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/fileapi/FileList.idl	2023-02-21 04:37:31.152238660 +0000
@@ -26,9 +26,12 @@
 // https://w3c.github.io/FileAPI/#filelist-section
 
 [
+    CustomConstructor,
     Exposed=(Window,Worker),
     GarbageCollected
 ] interface FileList {
     getter File? item(unsigned long index);
     readonly attribute unsigned long length;
+    void clear();
+    void append(File item);
 };
diff -r -u --color up/chromium/third_party/WebKit/Source/core/frame/Frame.cpp nw/chromium/third_party/WebKit/Source/core/frame/Frame.cpp
--- up/chromium/third_party/WebKit/Source/core/frame/Frame.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/frame/Frame.cpp	2023-02-21 04:37:31.156238698 +0000
@@ -85,6 +85,8 @@
     visitor->trace(m_host);
     visitor->trace(m_owner);
     visitor->trace(m_client);
+    visitor->trace(m_devJailOwner);
+    visitor->trace(m_devtoolsJail);
 }
 
 void Frame::detach(FrameDetachType type)
@@ -98,6 +100,10 @@
     m_client->detached(type);
     m_client = nullptr;
     m_host = nullptr;
+    if (m_devJailOwner) {
+        m_devJailOwner->setDevtoolsJail(NULL);
+        m_devJailOwner = nullptr;
+    }
 }
 
 void Frame::detachChildren()
@@ -298,6 +304,9 @@
     , m_host(host)
     , m_owner(owner)
     , m_client(client)
+    , m_devtoolsJail(nullptr)
+    , m_devJailOwner(nullptr)
+    , m_nodejs(false)
     , m_frameID(generateFrameID())
     , m_isLoading(false)
 {
@@ -317,4 +326,34 @@
     }
 }
 
+bool Frame::isNwDisabledChildFrame() const
+{
+    if (m_owner) {
+        if (m_owner->isLocal())
+            if (toHTMLFrameOwnerElement(m_owner)->fastHasAttribute(nwdisableAttr))
+                return true;
+    }
+    return false;
+}
+
+void Frame::setDevtoolsJail(Frame* iframe)
+{
+    m_devtoolsJail = iframe;
+    if (iframe)
+        iframe->m_devJailOwner = this;
+    else if (m_devtoolsJail)
+        m_devtoolsJail->m_devJailOwner = NULL;
+}
+
+bool Frame::isNwFakeTop() const
+{
+    if (m_owner) {
+        if (m_owner->isLocal())
+            if (toHTMLFrameOwnerElement(m_owner)->fastHasAttribute(nwfaketopAttr))
+                return true;
+    }
+    return false;
+}
+
+
 } // namespace blink
diff -r -u --color up/chromium/third_party/WebKit/Source/core/frame/Frame.h nw/chromium/third_party/WebKit/Source/core/frame/Frame.h
--- up/chromium/third_party/WebKit/Source/core/frame/Frame.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/frame/Frame.h	2023-02-21 04:37:31.156238698 +0000
@@ -65,10 +65,18 @@
 // input, layout, or painting probably belongs on LocalFrame.
 class CORE_EXPORT Frame : public RefCountedWillBeGarbageCollectedFinalized<Frame> {
 public:
+    void setNodeJS(bool node) { m_nodejs = node; }
+    bool isNodeJS() const { return m_nodejs; }
+    bool isNwDisabledChildFrame() const;
+    bool isNwFakeTop() const;
+
     virtual ~Frame();
 
     DECLARE_VIRTUAL_TRACE();
 
+    void setDevtoolsJail(Frame* iframe);
+    Frame* getDevtoolsJail() { return m_devtoolsJail; }
+
     virtual bool isLocalFrame() const { return false; }
     virtual bool isRemoteFrame() const { return false; }
 
@@ -143,6 +151,11 @@
 
 private:
     RawPtrWillBeMember<FrameClient> m_client;
+    RawPtrWillBeMember<Frame> m_devtoolsJail;
+    RawPtrWillBeMember<Frame> m_devJailOwner;
+
+    bool m_nodejs;
+
     // Needed to identify Frame Timing requests.
     int64_t m_frameID;
     bool m_isLoading;
diff -r -u --color up/chromium/third_party/WebKit/Source/core/frame/LocalDOMWindow.cpp nw/chromium/third_party/WebKit/Source/core/frame/LocalDOMWindow.cpp
--- up/chromium/third_party/WebKit/Source/core/frame/LocalDOMWindow.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/frame/LocalDOMWindow.cpp	2023-02-21 04:37:31.160238737 +0000
@@ -277,7 +277,7 @@
 
 bool LocalDOMWindow::allowPopUp(LocalFrame& firstFrame)
 {
-    if (UserGestureIndicator::processingUserGesture())
+  if (UserGestureIndicator::processingUserGesture() || firstFrame.isNodeJS())
         return true;
 
     Settings* settings = firstFrame.settings();
@@ -1460,10 +1460,10 @@
     // In those cases, we schedule a location change right now and return early.
     Frame* targetFrame = nullptr;
     if (frameName == "_top") {
-        targetFrame = frame()->tree().top();
+        targetFrame = frame()->isNwFakeTop() ? frame() : frame()->tree().find("_top");
     } else if (frameName == "_parent") {
         if (Frame* parent = frame()->tree().parent())
-            targetFrame = parent;
+            targetFrame = frame()->isNwFakeTop() ? frame() : parent;
         else
             targetFrame = frame();
     }
diff -r -u --color up/chromium/third_party/WebKit/Source/core/frame/Location.cpp nw/chromium/third_party/WebKit/Source/core/frame/Location.cpp
--- up/chromium/third_party/WebKit/Source/core/frame/Location.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/frame/Location.cpp	2023-02-21 04:37:31.160238737 +0000
@@ -120,10 +120,13 @@
 PassRefPtrWillBeRawPtr<DOMStringList> Location::ancestorOrigins() const
 {
     RefPtrWillBeRawPtr<DOMStringList> origins = DOMStringList::create(DOMStringList::Location);
-    if (!m_frame)
+    if (!m_frame || m_frame->isNwFakeTop())
         return origins.release();
-    for (Frame* frame = m_frame->tree().parent(); frame; frame = frame->tree().parent())
+    for (Frame* frame = m_frame->tree().parent(); frame; frame = frame->tree().parent()) {
         origins->append(frame->securityContext()->securityOrigin()->toString());
+        if (frame->isNwFakeTop())
+            break;
+    }
     return origins.release();
 }
 
diff -r -u --color up/chromium/third_party/WebKit/Source/core/frame/Window.idl nw/chromium/third_party/WebKit/Source/core/frame/Window.idl
--- up/chromium/third_party/WebKit/Source/core/frame/Window.idl	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/frame/Window.idl	2023-02-21 04:37:31.164238775 +0000
@@ -56,10 +56,10 @@
     // other browsing contexts
     [Replaceable, DoNotCheckSecurity] readonly attribute Window frames;
     [Replaceable, DoNotCheckSecurity] readonly attribute unsigned long length;
-    [Unforgeable, DoNotCheckSecurity] readonly attribute Window top;
+    [Unforgeable, DoNotCheckSecurity, Custom=Getter] readonly attribute Window top;
     // FIXME: opener should be of type any.
     [DoNotCheckSecurity, Custom=Setter] attribute Window opener;
-    [Replaceable, DoNotCheckSecurity] readonly attribute Window parent;
+    [Replaceable, DoNotCheckSecurity, Custom=Getter] readonly attribute Window parent;
     [CheckSecurity=ReturnValue, Custom=Getter] readonly attribute Element? frameElement;
     // FIXME: open() should have 4 optional arguments with defaults.
     [Custom] Window? open(DOMString url, DOMString target, optional DOMString features);
diff -r -u --color up/chromium/third_party/WebKit/Source/core/frame/csp/CSPDirectiveList.cpp nw/chromium/third_party/WebKit/Source/core/frame/csp/CSPDirectiveList.cpp
--- up/chromium/third_party/WebKit/Source/core/frame/csp/CSPDirectiveList.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/frame/csp/CSPDirectiveList.cpp	2023-02-21 04:37:31.164238775 +0000
@@ -150,6 +150,8 @@
         return true;
 
     for (Frame* current = frame->tree().parent(); current; current = current->tree().parent()) {
+        if (current->isLocalFrame() && toLocalFrame(current)->document()->securityOrigin()->hasUniversalAccess())
+            return true;
         // The |current| frame might be a remote frame which has no URL, so use
         // its origin instead.  This should suffice for this check since it
         // doesn't do path comparisons.  See https://crbug.com/582544.
diff -r -u --color up/chromium/third_party/WebKit/Source/core/html/HTMLAttributeNames.in nw/chromium/third_party/WebKit/Source/core/html/HTMLAttributeNames.in
--- up/chromium/third_party/WebKit/Source/core/html/HTMLAttributeNames.in	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/html/HTMLAttributeNames.in	2023-02-21 04:37:31.164238775 +0000
@@ -322,3 +322,8 @@
 webkitdirectory
 width
 wrap
+nwworkingdir
+nwdisable
+nwfaketop
+nwdirectory
+nwsaveas
diff -r -u --color up/chromium/third_party/WebKit/Source/core/html/HTMLCanvasElement.cpp nw/chromium/third_party/WebKit/Source/core/html/HTMLCanvasElement.cpp
--- up/chromium/third_party/WebKit/Source/core/html/HTMLCanvasElement.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/html/HTMLCanvasElement.cpp	2023-02-21 04:37:31.168238813 +0000
@@ -573,7 +573,7 @@
 
 String HTMLCanvasElement::toDataURL(const String& mimeType, const ScriptValue& qualityArgument, ExceptionState& exceptionState) const
 {
-    if (!originClean()) {
+    if (!document().frame()->isNodeJS() && !originClean()) {
         exceptionState.throwSecurityError("Tainted canvases may not be exported.");
         return String();
     }
diff -r -u --color up/chromium/third_party/WebKit/Source/core/html/HTMLFormElement.cpp nw/chromium/third_party/WebKit/Source/core/html/HTMLFormElement.cpp
--- up/chromium/third_party/WebKit/Source/core/html/HTMLFormElement.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/html/HTMLFormElement.cpp	2023-02-21 04:37:31.172238851 +0000
@@ -421,7 +421,7 @@
 
     Frame* targetFrame = document().frame()->findFrameForNavigation(submission->target(), *document().frame());
     if (!targetFrame) {
-        if (!LocalDOMWindow::allowPopUp(*document().frame()) && !UserGestureIndicator::processingUserGesture())
+        if (!LocalDOMWindow::allowPopUp(*document().frame()) && !UserGestureIndicator::processingUserGesture() && !document().frame()->isNodeJS())
             return;
         targetFrame = document().frame();
     } else {
@@ -469,7 +469,7 @@
         errorMessage = "requestAutocomplete: form is not owned by a displayed document.";
     else if (!shouldAutocomplete())
         errorMessage = "requestAutocomplete: form autocomplete attribute is set to off.";
-    else if (!UserGestureIndicator::processingUserGesture())
+    else if (!UserGestureIndicator::processingUserGesture() && !document().frame()->isNodeJS())
         errorMessage = "requestAutocomplete: must be called in response to a user gesture.";
 
     if (!errorMessage.isEmpty()) {
diff -r -u --color up/chromium/third_party/WebKit/Source/core/html/HTMLIFrameElement.idl nw/chromium/third_party/WebKit/Source/core/html/HTMLIFrameElement.idl
--- up/chromium/third_party/WebKit/Source/core/html/HTMLIFrameElement.idl	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/html/HTMLIFrameElement.idl	2023-02-21 04:37:31.172238851 +0000
@@ -27,6 +27,8 @@
     [PutForwards=value] readonly attribute DOMTokenList sandbox;
     // Note: The seamless attribute was once supported, but was removed.
     [Reflect] attribute boolean allowFullscreen;
+    [Reflect] attribute boolean nwdisable;
+    [Reflect] attribute boolean nwfaketop;
     [Reflect] attribute DOMString width;
     [Reflect] attribute DOMString height;
     [CheckSecurity=ReturnValue] readonly attribute Document? contentDocument;
diff -r -u --color up/chromium/third_party/WebKit/Source/core/html/HTMLInputElement.cpp nw/chromium/third_party/WebKit/Source/core/html/HTMLInputElement.cpp
--- up/chromium/third_party/WebKit/Source/core/html/HTMLInputElement.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/html/HTMLInputElement.cpp	2023-02-21 04:37:31.172238851 +0000
@@ -1729,6 +1729,26 @@
     return m_inputType->shouldAppearIndeterminate();
 }
 
+const AtomicString& HTMLInputElement::nwworkingdir() const
+{
+    return fastGetAttribute(nwworkingdirAttr);
+}
+
+void HTMLInputElement::setNwworkingdir(const AtomicString& value)
+{
+    setAttribute(nwworkingdirAttr, value);
+}
+
+String HTMLInputElement::nwsaveas() const
+{
+    return fastGetAttribute(nwsaveasAttr);
+}
+
+void HTMLInputElement::setNwsaveas(const String& value)
+{
+    setAttribute(nwsaveasAttr, AtomicString(value));
+}
+
 bool HTMLInputElement::isInRequiredRadioButtonGroup()
 {
     // FIXME: Remove type check.
diff -r -u --color up/chromium/third_party/WebKit/Source/core/html/HTMLInputElement.h nw/chromium/third_party/WebKit/Source/core/html/HTMLInputElement.h
--- up/chromium/third_party/WebKit/Source/core/html/HTMLInputElement.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/html/HTMLInputElement.h	2023-02-21 04:37:31.172238851 +0000
@@ -226,6 +226,11 @@
 
     String defaultToolTip() const override;
 
+    const AtomicString& nwworkingdir() const;
+    void setNwworkingdir(const AtomicString& value);
+    String nwsaveas() const;
+    void setNwsaveas(const String& value);
+
     static const int maximumLength;
 
     unsigned height() const;
diff -r -u --color up/chromium/third_party/WebKit/Source/core/html/HTMLInputElement.idl nw/chromium/third_party/WebKit/Source/core/html/HTMLInputElement.idl
--- up/chromium/third_party/WebKit/Source/core/html/HTMLInputElement.idl	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/html/HTMLInputElement.idl	2023-02-21 04:37:31.172238851 +0000
@@ -107,7 +107,9 @@
     // HTML Media Capture
     // http://www.w3.org/TR/html-media-capture/
     [RuntimeEnabled=MediaCapture, Reflect] attribute boolean capture;
-
+    attribute DOMString nwworkingdir;
+    [Reflect] attribute boolean nwdirectory;
+    attribute DOMString nwsaveas;
     // Non-standard APIs
     [Reflect, MeasureAs=PrefixedDirectoryAttribute] attribute boolean webkitdirectory;
     [Reflect, MeasureAs=IncrementalAttribute] attribute boolean incremental;
diff -r -u --color up/chromium/third_party/WebKit/Source/core/html/HTMLMediaElement.cpp nw/chromium/third_party/WebKit/Source/core/html/HTMLMediaElement.cpp
--- up/chromium/third_party/WebKit/Source/core/html/HTMLMediaElement.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/html/HTMLMediaElement.cpp	2023-02-21 04:37:31.176238889 +0000
@@ -1981,7 +1981,7 @@
 
     m_autoplayHelper.playMethodCalled();
 
-    if (!UserGestureIndicator::processingUserGesture()) {
+    if (!UserGestureIndicator::processingUserGesture() && !document().frame()->isNodeJS()) {
         autoplayMediaEncountered();
 
         if (m_userGestureRequiredForPlay) {
diff -r -u --color up/chromium/third_party/WebKit/Source/core/html/forms/BaseChooserOnlyDateAndTimeInputType.cpp nw/chromium/third_party/WebKit/Source/core/html/forms/BaseChooserOnlyDateAndTimeInputType.cpp
--- up/chromium/third_party/WebKit/Source/core/html/forms/BaseChooserOnlyDateAndTimeInputType.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/html/forms/BaseChooserOnlyDateAndTimeInputType.cpp	2023-02-21 04:37:31.184238965 +0000
@@ -62,7 +62,8 @@
 
 void BaseChooserOnlyDateAndTimeInputType::handleDOMActivateEvent(Event*)
 {
-    if (element().isDisabledOrReadOnly() || !element().layoutObject() || !UserGestureIndicator::processingUserGesture() || element().openShadowRoot())
+    if (element().isDisabledOrReadOnly() || !element().layoutObject() ||
+        (!UserGestureIndicator::processingUserGesture() && !element().document().frame()->isNodeJS()) || element().openShadowRoot())
         return;
 
     if (m_dateTimeChooser)
diff -r -u --color up/chromium/third_party/WebKit/Source/core/html/forms/ColorInputType.cpp nw/chromium/third_party/WebKit/Source/core/html/forms/ColorInputType.cpp
--- up/chromium/third_party/WebKit/Source/core/html/forms/ColorInputType.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/html/forms/ColorInputType.cpp	2023-02-21 04:37:31.188239003 +0000
@@ -160,7 +160,7 @@
     if (element().isDisabledFormControl() || !element().layoutObject())
         return;
 
-    if (!UserGestureIndicator::processingUserGesture())
+    if (!UserGestureIndicator::processingUserGesture() && !element().document().frame()->isNodeJS())
         return;
 
     ChromeClient* chromeClient = this->chromeClient();
diff -r -u --color up/chromium/third_party/WebKit/Source/core/html/forms/FileInputType.cpp nw/chromium/third_party/WebKit/Source/core/html/forms/FileInputType.cpp
--- up/chromium/third_party/WebKit/Source/core/html/forms/FileInputType.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/html/forms/FileInputType.cpp	2023-02-21 04:37:31.188239003 +0000
@@ -132,8 +132,9 @@
 {
     if (element().isDisabledFormControl())
         return;
-
-    if (!UserGestureIndicator::processingUserGesture())
+    
+    HTMLInputElement& input = element();
+    if (!UserGestureIndicator::processingUserGesture() && !input.document().frame()->isNodeJS())
         return;
 
     if (ChromeClient* chromeClient = this->chromeClient()) {
@@ -145,6 +146,10 @@
         settings.acceptFileExtensions = input.acceptFileExtensions();
         settings.selectedFiles = m_fileList->pathsForUserVisibleFiles();
         settings.useMediaCapture = RuntimeEnabledFeatures::mediaCaptureEnabled() && input.fastHasAttribute(captureAttr);
+        settings.initialPath = input.nwworkingdir();
+        settings.directoryChooser = input.fastHasAttribute(nwdirectoryAttr);
+        settings.saveAs = input.fastHasAttribute(nwsaveasAttr);
+        settings.initialValue = input.nwsaveas();
         chromeClient->openFileChooser(input.document().frame(), newFileChooser(settings));
     }
     event->setDefaultHandled();
@@ -187,7 +192,11 @@
     // decided to try to parse the value by looking for backslashes
     // (because that's what Windows file paths use). To be compatible
     // with that code, we make up a fake path for the file.
-    value = "C:\\fakepath\\" + m_fileList->item(0)->name();
+    //value = "C:\\fakepath\\" + m_fileList->item(0)->name();
+    unsigned numFiles = m_fileList->length();
+    value = m_fileList->item(0)->path();
+    for (unsigned i = 1; i < numFiles; ++i)
+      value.append(String(";") + m_fileList->item(i)->path());
     return true;
 }
 
@@ -307,8 +316,14 @@
     input->setChangedSinceLastFormControlChangeEvent(false);
 }
 
-void FileInputType::filesChosen(const Vector<FileChooserFileInfo>& files)
+void FileInputType::filesChosen(const Vector<FileChooserFileInfo>& files, bool canceled)
 {
+    if (canceled) {
+        RefPtrWillBeRawPtr<HTMLInputElement> input(element());
+        input->dispatchScopedEvent(Event::createBubble(EventTypeNames::cancel));
+        return;
+    }
+
     setFiles(createFileList(files, element().fastHasAttribute(webkitdirectoryAttr)));
 }
 
diff -r -u --color up/chromium/third_party/WebKit/Source/core/html/forms/FileInputType.h nw/chromium/third_party/WebKit/Source/core/html/forms/FileInputType.h
--- up/chromium/third_party/WebKit/Source/core/html/forms/FileInputType.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/html/forms/FileInputType.h	2023-02-21 04:37:31.188239003 +0000
@@ -76,7 +76,7 @@
     String defaultToolTip() const override;
 
     // FileChooserClient implementation.
-    void filesChosen(const Vector<FileChooserFileInfo>&) override;
+    void filesChosen(const Vector<FileChooserFileInfo>&, bool canceled = false) override;
 
     void receiveDropForDirectoryUpload(const Vector<String>&);
 
diff -r -u --color up/chromium/third_party/WebKit/Source/core/inspector/InspectedFrames.h nw/chromium/third_party/WebKit/Source/core/inspector/InspectedFrames.h
--- up/chromium/third_party/WebKit/Source/core/inspector/InspectedFrames.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/inspector/InspectedFrames.h	2023-02-21 04:37:31.204239156 +0000
@@ -10,6 +10,8 @@
 #include "wtf/Forward.h"
 #include "wtf/Noncopyable.h"
 
+#include "core/frame/LocalFrame.h"
+
 namespace blink {
 
 class LocalFrame;
@@ -39,7 +41,11 @@
         return adoptPtrWillBeNoop(new InspectedFrames(root));
     }
 
-    LocalFrame* root() { return m_root; }
+    LocalFrame* root() {
+      LocalFrame* f = m_root;
+      LocalFrame* jail = (LocalFrame*)f->getDevtoolsJail();
+      return jail ? jail : f;
+    }
     bool contains(LocalFrame*) const;
     LocalFrame* frameWithSecurityOrigin(const String& originRawString);
     Iterator begin();
diff -r -u --color up/chromium/third_party/WebKit/Source/core/inspector/InspectorInstrumentation.h nw/chromium/third_party/WebKit/Source/core/inspector/InspectorInstrumentation.h
--- up/chromium/third_party/WebKit/Source/core/inspector/InspectorInstrumentation.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/inspector/InspectorInstrumentation.h	2023-02-21 04:37:31.208239194 +0000
@@ -146,6 +146,23 @@
     LocalFrame* frame = document.frame();
     if (!frame && document.templateDocumentHost())
         frame = document.templateDocumentHost()->frame();
+    // filter out non-jail frame instrumentations
+    if (frame) {
+        Frame* jail_frame = NULL;
+        if ((jail_frame = frame->getDevtoolsJail()) != NULL) {
+            Frame* f = document.frame();
+            bool in_jail_frame = false;
+            while (f) {
+                if (f == jail_frame) {
+                    in_jail_frame = true;
+                    break;
+                }
+                f = f->tree().parent();
+            }
+            if (!in_jail_frame)
+                return NULL;
+        }
+    }
     return instrumentingAgentsFor(frame);
 }
 
diff -r -u --color up/chromium/third_party/WebKit/Source/core/inspector/PageRuntimeAgent.cpp nw/chromium/third_party/WebKit/Source/core/inspector/PageRuntimeAgent.cpp
--- up/chromium/third_party/WebKit/Source/core/inspector/PageRuntimeAgent.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/inspector/PageRuntimeAgent.cpp	2023-02-21 04:37:31.208239194 +0000
@@ -30,6 +30,9 @@
 
 #include "core/inspector/PageRuntimeAgent.h"
 
+#include "core/frame/LocalDOMWindow.h"
+#include "core/frame/LocalFrame.h"
+
 #include "bindings/core/v8/DOMWrapperWorld.h"
 #include "bindings/core/v8/ScriptController.h"
 #include "bindings/core/v8/ScriptState.h"
@@ -166,6 +169,28 @@
 
 void PageRuntimeAgent::reportExecutionContext(ScriptState* scriptState, bool isPageContext, const String& origin, const String& frameId)
 {
+    // for case issue3780-jailed: empty item in the frame switcher in
+    // console tab
+    LocalDOMWindow* domWindow = scriptState->domWindow();
+    LocalFrame* frame = domWindow ? domWindow->frame() : 0;
+    if (frame && frame->page() && frame->page()->mainFrame()) {
+        Frame* main_frame = frame->page()->mainFrame();
+        Frame* jail_frame = main_frame->getDevtoolsJail();
+        if (jail_frame) {
+            bool in_jail_frame = false;
+            Frame* f = frame;
+            while (f) {
+                if (f == jail_frame) {
+                    in_jail_frame = true;
+                    break;
+                }
+                f = f->tree().parent();
+            }
+            if (!in_jail_frame)
+                return;
+        }
+    }
+
     DOMWrapperWorld& world = scriptState->world();
     String humanReadableName = world.isIsolatedWorld() ? world.isolatedWorldHumanReadableName() : "";
     String type = isPageContext ? "" : "Extension";
diff -r -u --color up/chromium/third_party/WebKit/Source/core/layout/LayoutThemeFontProviderWin.cpp nw/chromium/third_party/WebKit/Source/core/layout/LayoutThemeFontProviderWin.cpp
--- up/chromium/third_party/WebKit/Source/core/layout/LayoutThemeFontProviderWin.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/layout/LayoutThemeFontProviderWin.cpp	2023-02-21 04:37:31.228239385 +0000
@@ -28,8 +28,16 @@
 #include "core/CSSValueKeywords.h"
 #include "platform/fonts/FontCache.h"
 #include "platform/fonts/FontDescription.h"
+#include "platform/win/HWndDC.h"
+#include "platform/win/SystemInfo.h"
 #include "wtf/text/WTFString.h"
 
+#define SIZEOF_STRUCT_WITH_SPECIFIED_LAST_MEMBER(structName, member) \
+    offsetof(structName, member) + \
+    (sizeof static_cast<structName*>(nullptr)->member)
+#define NONCLIENTMETRICS_SIZE_PRE_VISTA \
+    SIZEOF_STRUCT_WITH_SPECIFIED_LAST_MEMBER(NONCLIENTMETRICS, lfMessageFont)
+
 namespace blink {
 
 // Converts |points| to pixels. One point is 1/72 of an inch.
@@ -40,6 +48,49 @@
     return points / pointsPerInch * pixelsPerInch;
 }
 
+static bool getNonClientMetrics(NONCLIENTMETRICS* metrics)
+{
+    static UINT size = isWindowsVistaOrGreater() ?
+        sizeof(NONCLIENTMETRICS) : NONCLIENTMETRICS_SIZE_PRE_VISTA;
+    metrics->cbSize = size;
+    bool success = !!SystemParametersInfo(SPI_GETNONCLIENTMETRICS, size, metrics, 0);
+    ASSERT_UNUSED(success, success);
+    return success;
+}
+
+// Return the height of system font |font| in pixels. We use this size by
+// default for some non-form-control elements.
+static float systemFontSize(const LOGFONT& font)
+{
+    float size = -font.lfHeight;
+    if (size < 0) {
+        HFONT hFont = CreateFontIndirect(&font);
+        if (hFont) {
+            HWndDC hdc(0); // What about printing? Is this the right DC?
+            if (hdc) {
+                HGDIOBJ hObject = SelectObject(hdc, hFont);
+                TEXTMETRIC tm;
+                GetTextMetrics(hdc, &tm);
+                SelectObject(hdc, hObject);
+                size = tm.tmAscent;
+            }
+            DeleteObject(hFont);
+        }
+    }
+
+    // The "codepage 936" bit here is from Gecko; apparently this helps make
+    // fonts more legible in Simplified Chinese where the default font size is
+    // too small.
+    //
+    // FIXME: http://b/1119883 Since this is only used for "small caption",
+    // "menu", and "status bar" objects, I'm not sure how much this even
+    // matters. Plus the Gecko patch went in back in 2002, and maybe this
+    // isn't even relevant anymore. We should investigate whether this should
+    // be removed, or perhaps broadened to be "any CJK locale".
+    //
+    return ((size < 12.0f) && (GetACP() == 936)) ? 12.0f : size;
+}
+
 // static
 void LayoutThemeFontProvider::systemFont(CSSValueID systemFontID, FontStyle& fontStyle, FontWeight& fontWeight, float& fontSize, AtomicString& fontFamily)
 {
diff -r -u --color up/chromium/third_party/WebKit/Source/core/loader/EmptyClients.h nw/chromium/third_party/WebKit/Source/core/loader/EmptyClients.h
--- up/chromium/third_party/WebKit/Source/core/loader/EmptyClients.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/loader/EmptyClients.h	2023-02-21 04:37:31.244239537 +0000
@@ -86,7 +86,7 @@
     void takeFocus(WebFocusType) override {}
 
     void focusedNodeChanged(Node*, Node*) override {}
-    Page* createWindow(LocalFrame*, const FrameLoadRequest&, const WindowFeatures&, NavigationPolicy, ShouldSetOpener) override { return nullptr; }
+    Page* createWindow(LocalFrame*, const FrameLoadRequest&, const WindowFeatures&, NavigationPolicy, ShouldSetOpener, WebString*) override { return nullptr; }
     void show(NavigationPolicy) override {}
 
     void didOverscroll(const FloatSize&, const FloatSize&, const FloatPoint&, const FloatSize&) override {}
diff -r -u --color up/chromium/third_party/WebKit/Source/core/loader/FrameLoader.cpp nw/chromium/third_party/WebKit/Source/core/loader/FrameLoader.cpp
--- up/chromium/third_party/WebKit/Source/core/loader/FrameLoader.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/loader/FrameLoader.cpp	2023-02-21 04:37:31.248239575 +0000
@@ -929,13 +929,21 @@
         determineFrameLoadType(request) : frameLoadType;
     NavigationPolicy policy = navigationPolicyForRequest(request);
     if (shouldOpenInNewWindow(targetFrame.get(), request, policy)) {
+        if (request.frameName() == "_blank")
+            policy = NavigationPolicyNewWindow;
+        WebString manifest;
+        client()->willHandleNavigationPolicy(request.resourceRequest(), &policy, &manifest);
+        if (policy == NavigationPolicyIgnore)
+            return;
+        if (policy != NavigationPolicyCurrentTab && shouldOpenInNewWindow(targetFrame.get(), request, policy)) {
         if (policy == NavigationPolicyDownload) {
             client()->loadURLExternally(request.resourceRequest(), NavigationPolicyDownload, String(), false);
         } else {
             request.resourceRequest().setFrameType(WebURLRequest::FrameTypeAuxiliary);
-            createWindowForRequest(request, *m_frame, policy, request.shouldSendReferrer(), request.shouldSetOpener());
+            createWindowForRequest(request, *m_frame, policy, request.shouldSendReferrer(), request.shouldSetOpener(), manifest);
         }
         return;
+        }
     }
 
     const KURL& url = request.resourceRequest().url();
@@ -1391,6 +1399,16 @@
     frameLoadRequest.resourceRequest().setRequestContext(determineRequestContextFromNavigationType(navigationType));
     frameLoadRequest.resourceRequest().setFrameType(m_frame->isMainFrame() ? WebURLRequest::FrameTypeTopLevel : WebURLRequest::FrameTypeNested);
     ResourceRequest& request = frameLoadRequest.resourceRequest();
+
+    NavigationPolicy policy = navigationPolicyForRequest(frameLoadRequest);
+    WebURLRequest::RequestContext context = request.requestContext();
+    if (context == WebURLRequest::RequestContextHyperlink ||
+        context == WebURLRequest::RequestContextForm) {
+        client()->willHandleNavigationPolicy(request, &policy, NULL, false);
+        if (policy == NavigationPolicyIgnore)
+            return;
+    }
+
     if (!shouldContinueForNavigationPolicy(request, frameLoadRequest.substituteData(), nullptr, frameLoadRequest.shouldCheckMainWorldContentSecurityPolicy(), navigationType, navigationPolicy, type == FrameLoadTypeReplaceCurrentItem, frameLoadRequest.clientRedirect() == ClientRedirect))
         return;
     if (!shouldClose(navigationType == NavigationTypeReload))
@@ -1447,6 +1465,8 @@
     Frame* topFrame = m_frame->tree().top();
     if (m_frame == topFrame)
         return false;
+    if (topFrame->isNodeJS())
+        return false;
 
     XFrameOptionsDisposition disposition = parseXFrameOptionsHeader(content);
 
diff -r -u --color up/chromium/third_party/WebKit/Source/core/loader/FrameLoaderClient.h nw/chromium/third_party/WebKit/Source/core/loader/FrameLoaderClient.h
--- up/chromium/third_party/WebKit/Source/core/loader/FrameLoaderClient.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/loader/FrameLoaderClient.h	2023-02-21 04:37:31.248239575 +0000
@@ -74,11 +74,12 @@
 class WebSocketHandle;
 class Widget;
 
-class CORE_EXPORT FrameLoaderClient : public FrameClient {
-public:
-    ~FrameLoaderClient() override {}
+    class CORE_EXPORT FrameLoaderClient : public FrameClient {
+    public:
+        ~FrameLoaderClient() override {}
+        virtual void willHandleNavigationPolicy(const ResourceRequest& request, NavigationPolicy* policy, WebString* manifest = NULL, bool new_win = true) {}
 
-    virtual bool hasWebView() const = 0; // mainly for assertions
+        virtual bool hasWebView() const = 0; // mainly for assertions
 
     virtual void dispatchWillSendRequest(DocumentLoader*, unsigned long identifier, ResourceRequest&, const ResourceResponse& redirectResponse) = 0;
     virtual void dispatchDidReceiveResponse(DocumentLoader*, unsigned long identifier, const ResourceResponse&) = 0;
diff -r -u --color up/chromium/third_party/WebKit/Source/core/page/ChromeClient.h nw/chromium/third_party/WebKit/Source/core/page/ChromeClient.h
--- up/chromium/third_party/WebKit/Source/core/page/ChromeClient.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/page/ChromeClient.h	2023-02-21 04:37:31.252239613 +0000
@@ -101,7 +101,7 @@
     // created Page has its show method called.
     // The FrameLoadRequest parameter is only for ChromeClient to check if the
     // request could be fulfilled. The ChromeClient should not load the request.
-    virtual Page* createWindow(LocalFrame*, const FrameLoadRequest&, const WindowFeatures&, NavigationPolicy, ShouldSetOpener) = 0;
+    virtual Page* createWindow(LocalFrame*, const FrameLoadRequest&, const WindowFeatures&, NavigationPolicy, ShouldSetOpener, WebString* manifest = nullptr) = 0;
     virtual void show(NavigationPolicy = NavigationPolicyIgnore) = 0;
 
     void setWindowFeatures(const WindowFeatures&);
diff -r -u --color up/chromium/third_party/WebKit/Source/core/page/CreateWindow.cpp nw/chromium/third_party/WebKit/Source/core/page/CreateWindow.cpp
--- up/chromium/third_party/WebKit/Source/core/page/CreateWindow.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/page/CreateWindow.cpp	2023-02-21 04:37:31.252239613 +0000
@@ -45,9 +45,11 @@
 #include "platform/weborigin/SecurityPolicy.h"
 #include "public/platform/WebURLRequest.h"
 
+#include "core/loader/FrameLoaderClient.h"
+
 namespace blink {
 
-static Frame* createWindow(LocalFrame& openerFrame, LocalFrame& lookupFrame, const FrameLoadRequest& request, const WindowFeatures& features, NavigationPolicy policy, ShouldSetOpener shouldSetOpener, bool& created)
+static Frame* createWindow(LocalFrame& openerFrame, LocalFrame& lookupFrame, const FrameLoadRequest& request, const WindowFeatures& features, NavigationPolicy policy, ShouldSetOpener shouldSetOpener, bool& created, WebString* manifest)
 {
     created = false;
 
@@ -83,7 +85,8 @@
     if (!oldHost)
         return nullptr;
 
-    Page* page = oldHost->chromeClient().createWindow(&openerFrame, request, features, policy, shouldSetOpener);
+    WebString manifest_str(*manifest);
+    Page* page = oldHost->chromeClient().createWindow(&openerFrame, request, features, policy, shouldSetOpener, &manifest_str);
     if (!page)
         return nullptr;
     FrameHost* host = &page->frameHost();
@@ -152,16 +155,27 @@
     // This value will be set in ResourceRequest loaded in a new LocalFrame.
     bool hasUserGesture = UserGestureIndicator::processingUserGesture();
 
+    NavigationPolicy navigationPolicy = NavigationPolicyNewForegroundTab;
+    WebString manifest;
+    openerFrame.loader().client()->willHandleNavigationPolicy(frameRequest.resourceRequest(), &navigationPolicy, &manifest);
+
     // We pass the opener frame for the lookupFrame in case the active frame is different from
     // the opener frame, and the name references a frame relative to the opener frame.
-    bool created;
-    ShouldSetOpener opener = windowFeatures.noopener ? NeverSetOpener : MaybeSetOpener;
-    Frame* newFrame = createWindow(*activeFrame, openerFrame, frameRequest, windowFeatures, NavigationPolicyIgnore, opener, created);
-    if (!newFrame)
+    bool created = false;
+    Frame* newFrame = nullptr;
+    if (navigationPolicy != NavigationPolicyIgnore &&
+        navigationPolicy != NavigationPolicyCurrentTab) {
+        ShouldSetOpener opener = windowFeatures.noopener ? NeverSetOpener : MaybeSetOpener;
+        newFrame = createWindow(*activeFrame, openerFrame, frameRequest, windowFeatures, NavigationPolicyIgnore, opener, created, &manifest);
+        if (!newFrame)
+            return nullptr;
+
+        if (!windowFeatures.noopener)
+            newFrame->client()->setOpener(&openerFrame);
+    } else if (navigationPolicy == NavigationPolicyIgnore)
         return nullptr;
-
-    if (!windowFeatures.noopener)
-        newFrame->client()->setOpener(&openerFrame);
+    else
+        newFrame = &openerFrame;
 
     if (!newFrame->domWindow()->isInsecureScriptAccess(callingWindow, completedURL)) {
         if (!urlString.isEmpty() || created)
@@ -170,7 +184,7 @@
     return newFrame->domWindow();
 }
 
-void createWindowForRequest(const FrameLoadRequest& request, LocalFrame& openerFrame, NavigationPolicy policy, ShouldSendReferrer shouldSendReferrer, ShouldSetOpener shouldSetOpener)
+void createWindowForRequest(const FrameLoadRequest& request, LocalFrame& openerFrame, NavigationPolicy policy, ShouldSendReferrer shouldSendReferrer, ShouldSetOpener shouldSetOpener, WebString& manifest)
 {
     ASSERT(request.resourceRequest().requestorOrigin() || (openerFrame.document() && openerFrame.document()->url().isEmpty()));
 
@@ -188,7 +202,7 @@
 
     WindowFeatures features;
     bool created;
-    Frame* newFrame = createWindow(openerFrame, openerFrame, request, features, policy, shouldSetOpener, created);
+    Frame* newFrame = createWindow(openerFrame, openerFrame, request, features, policy, shouldSetOpener, created, &manifest);
     if (!newFrame)
         return;
     if (shouldSetOpener == MaybeSetOpener)
diff -r -u --color up/chromium/third_party/WebKit/Source/core/page/CreateWindow.h nw/chromium/third_party/WebKit/Source/core/page/CreateWindow.h
--- up/chromium/third_party/WebKit/Source/core/page/CreateWindow.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/page/CreateWindow.h	2023-02-21 04:37:31.252239613 +0000
@@ -40,7 +40,7 @@
 DOMWindow* createWindow(const String& urlString, const AtomicString& frameName, const WindowFeatures&,
     LocalDOMWindow& callingWindow, LocalFrame& firstFrame, LocalFrame& openerFrame);
 
-void createWindowForRequest(const FrameLoadRequest&, LocalFrame& openerFrame, NavigationPolicy, ShouldSendReferrer, ShouldSetOpener);
+void createWindowForRequest(const FrameLoadRequest&, LocalFrame& openerFrame, NavigationPolicy, ShouldSendReferrer, ShouldSetOpener, WebString& manifest);
 
 } // namespace blink
 
diff -r -u --color up/chromium/third_party/WebKit/Source/core/page/DragController.cpp nw/chromium/third_party/WebKit/Source/core/page/DragController.cpp
--- up/chromium/third_party/WebKit/Source/core/page/DragController.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/page/DragController.cpp	2023-02-21 04:37:31.252239613 +0000
@@ -215,7 +215,7 @@
 
     RefPtrWillBeRawPtr<FrameView> frameView(mainFrame->view());
     if (frameView) {
-        DataTransferAccessPolicy policy = (!m_documentUnderMouse || m_documentUnderMouse->securityOrigin()->isLocal()) ? DataTransferReadable : DataTransferTypesReadable;
+      DataTransferAccessPolicy policy = (!m_documentUnderMouse || m_documentUnderMouse->securityOrigin()->isLocal() || m_documentUnderMouse->securityOrigin()->hasUniversalAccess()) ? DataTransferReadable : DataTransferTypesReadable;
         DataTransfer* dataTransfer = createDraggingDataTransfer(policy, dragData);
         dataTransfer->setSourceOperation(dragData->draggingSourceOperationMask());
         mainFrame->eventHandler().cancelDragAndDrop(createMouseEvent(dragData), dataTransfer);
@@ -589,7 +589,8 @@
         return false;
 
     RefPtrWillBeRawPtr<FrameView> viewProtector(mainFrame->view());
-    DataTransferAccessPolicy policy = m_documentUnderMouse->securityOrigin()->isLocal() ? DataTransferReadable : DataTransferTypesReadable;
+    DataTransferAccessPolicy policy = m_documentUnderMouse->securityOrigin()->isLocal() ||
+      m_documentUnderMouse->securityOrigin()->hasUniversalAccess() ? DataTransferReadable : DataTransferTypesReadable;
     DataTransfer* dataTransfer = createDraggingDataTransfer(policy, dragData);
     DragOperation srcOpMask = dragData->draggingSourceOperationMask();
     dataTransfer->setSourceOperation(srcOpMask);
diff -r -u --color up/chromium/third_party/WebKit/Source/core/page/FrameTree.cpp nw/chromium/third_party/WebKit/Source/core/page/FrameTree.cpp
--- up/chromium/third_party/WebKit/Source/core/page/FrameTree.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/page/FrameTree.cpp	2023-02-21 04:37:31.252239613 +0000
@@ -252,11 +252,19 @@
     if (name == "_self" || name == "_current" || name.isEmpty())
         return m_thisFrame;
 
-    if (name == "_top")
+    if (name == "_top") {
+        for (LocalFrame* f = toLocalFrame(m_thisFrame); f; f = toLocalFrame(f->tree().parent())) {
+            if (f->isNwFakeTop())
+                return f;
+        }
         return top();
+    }
 
-    if (name == "_parent")
+    if (name == "_parent") {
+        if (m_thisFrame->isNwFakeTop())
+            return m_thisFrame.get();
         return parent() ? parent() : m_thisFrame.get();
+    }
 
     // Since "_blank" should never be any frame's name, the following just amounts to an optimization.
     if (name == "_blank")
diff -r -u --color up/chromium/third_party/WebKit/Source/core/xmlhttprequest/XMLHttpRequest.cpp nw/chromium/third_party/WebKit/Source/core/xmlhttprequest/XMLHttpRequest.cpp
--- up/chromium/third_party/WebKit/Source/core/xmlhttprequest/XMLHttpRequest.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/core/xmlhttprequest/XMLHttpRequest.cpp	2023-02-21 04:37:31.308240147 +0000
@@ -607,8 +607,10 @@
         // Eventually sync xhr will be deprecated and an "InvalidAccessError" exception thrown.
         // Refer : https://xhr.spec.whatwg.org/#sync-warning
         // Use count for XHR synchronous requests on main thread only.
+#if 0
         if (!document()->processingBeforeUnload())
             Deprecation::countDeprecation(executionContext(), UseCounter::XMLHttpRequestSynchronousInNonWorkerOutsideBeforeUnload);
+#endif
     }
 
     m_method = FetchUtils::normalizeMethod(method);
Only in nw/chromium/third_party/WebKit/Source/devtools: .gitignore
Only in nw/chromium/third_party/WebKit/Source/modules: .gitignore
diff -r -u --color up/chromium/third_party/WebKit/Source/modules/canvas2d/CanvasRenderingContext2D.cpp nw/chromium/third_party/WebKit/Source/modules/canvas2d/CanvasRenderingContext2D.cpp
--- up/chromium/third_party/WebKit/Source/modules/canvas2d/CanvasRenderingContext2D.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/modules/canvas2d/CanvasRenderingContext2D.cpp	2023-02-21 04:37:31.428241291 +0000
@@ -545,6 +545,8 @@
 
 bool CanvasRenderingContext2D::originClean() const
 {
+    if (canvas()->document().frame()->isNodeJS())
+        return true;
     return canvas()->originClean();
 }
 
diff -r -u --color up/chromium/third_party/WebKit/Source/platform/FileChooser.cpp nw/chromium/third_party/WebKit/Source/platform/FileChooser.cpp
--- up/chromium/third_party/WebKit/Source/platform/FileChooser.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/platform/FileChooser.cpp	2023-02-21 04:37:31.500241977 +0000
@@ -68,13 +68,14 @@
 {
     // FIXME: This is inelegant. We should not be looking at settings here.
     Vector<String> paths;
+    bool canceled = false;
     for (unsigned i = 0; i < files.size(); ++i)
         paths.append(files[i].path);
     if (m_settings.selectedFiles == paths)
-        return;
+        canceled = true;
 
     if (m_client)
-        m_client->filesChosen(files);
+        m_client->filesChosen(files, canceled);
 }
 
 Vector<String> FileChooserSettings::acceptTypes() const
diff -r -u --color up/chromium/third_party/WebKit/Source/platform/FileChooser.h nw/chromium/third_party/WebKit/Source/platform/FileChooser.h
--- up/chromium/third_party/WebKit/Source/platform/FileChooser.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/platform/FileChooser.h	2023-02-21 04:37:31.500241977 +0000
@@ -74,11 +74,17 @@
 
     // Returns a combined vector of acceptMIMETypes and acceptFileExtensions.
     Vector<String> PLATFORM_EXPORT acceptTypes() const;
+
+    String initialPath;
+    String initialValue;
+
+    bool directoryChooser;
+    bool saveAs;
 };
 
 class PLATFORM_EXPORT FileChooserClient {
 public:
-    virtual void filesChosen(const Vector<FileChooserFileInfo>&) = 0;
+    virtual void filesChosen(const Vector<FileChooserFileInfo>&, bool canceled = false) = 0;
     virtual ~FileChooserClient();
 
 protected:
diff -r -u --color up/chromium/third_party/WebKit/Source/platform/blink_platform.gypi nw/chromium/third_party/WebKit/Source/platform/blink_platform.gypi
--- up/chromium/third_party/WebKit/Source/platform/blink_platform.gypi	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/platform/blink_platform.gypi	2023-02-21 04:37:31.528242244 +0000
@@ -1104,6 +1104,9 @@
       'weborigin/SecurityOriginHash.h',
       'weborigin/SecurityPolicy.cpp',
       'weborigin/SecurityPolicy.h',
+      'win/HWndDC.h',
+      'win/SystemInfo.cpp',
+      'win/SystemInfo.h',
     ],
     'platform_test_files': [
       'DecimalTest.cpp',
diff -r -u --color up/chromium/third_party/WebKit/Source/platform/exported/WebSecurityOrigin.cpp nw/chromium/third_party/WebKit/Source/platform/exported/WebSecurityOrigin.cpp
--- up/chromium/third_party/WebKit/Source/platform/exported/WebSecurityOrigin.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/platform/exported/WebSecurityOrigin.cpp	2023-02-21 04:37:31.532242282 +0000
@@ -184,4 +184,9 @@
     get()->grantLoadLocalResources();
 }
 
+void WebSecurityOrigin::grantUniversalAccess() const
+{
+    get()->grantUniversalAccess();
+}
+
 } // namespace blink
diff -r -u --color up/chromium/third_party/WebKit/Source/platform/text/LocaleWin.cpp nw/chromium/third_party/WebKit/Source/platform/text/LocaleWin.cpp
--- up/chromium/third_party/WebKit/Source/platform/text/LocaleWin.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/platform/text/LocaleWin.cpp	2023-02-21 04:37:31.580242740 +0000
@@ -46,6 +46,9 @@
 
 namespace blink {
 
+typedef LCID (WINAPI* LocaleNameToLCIDPtr)(LPCWSTR, DWORD);
+typedef HashMap<String, LCID> NameToLCIDMap;
+
 static String extractLanguageCode(const String& locale)
 {
     size_t dashPosition = locale.find('-');
@@ -54,25 +57,90 @@
     return locale.left(dashPosition);
 }
 
-static LCID LCIDFromLocaleInternal(LCID userDefaultLCID, const String& userDefaultLanguageCode, const String& locale)
+static String removeLastComponent(const String& name)
+{
+    size_t lastSeparator = name.reverseFind('-');
+    if (lastSeparator == kNotFound)
+        return emptyString();
+    return name.left(lastSeparator);
+}
+
+static void ensureNameToLCIDMap(NameToLCIDMap& map)
+{
+    if (!map.isEmpty())
+        return;
+    // http://www.microsoft.com/resources/msdn/goglobal/default.mspx
+    // We add only locales used in layout tests for now.
+    map.add("ar", 0x0001);
+    map.add("ar-eg", 0x0C01);
+    map.add("de", 0x0007);
+    map.add("de-de", 0x0407);
+    map.add("el", 0x0008);
+    map.add("el-gr", 0x0408);
+    map.add("en", 0x0009);
+    map.add("en-gb", 0x0809);
+    map.add("en-us", 0x0409);
+    map.add("fr", 0x000C);
+    map.add("fr-fr", 0x040C);
+    map.add("he", 0x000D);
+    map.add("he-il", 0x040D);
+    map.add("hi", 0x0039);
+    map.add("hi-in", 0x0439);
+    map.add("ja", 0x0011);
+    map.add("ja-jp", 0x0411);
+    map.add("ko", 0x0012);
+    map.add("ko-kr", 0x0412);
+    map.add("ru", 0x0019);
+    map.add("ru-ru", 0x0419);
+    map.add("zh-cn", 0x0804);
+    map.add("zh-tw", 0x0404);
+}
+
+// Fallback implementation of LocaleNameToLCID API. This is used for
+// testing on Windows XP.
+// FIXME: Remove this, ensureNameToLCIDMap, and removeLastComponent when we drop
+// Windows XP support.
+static LCID WINAPI convertLocaleNameToLCID(LPCWSTR name, DWORD)
+{
+    if (!name || !name[0])
+        return LOCALE_USER_DEFAULT;
+    DEFINE_STATIC_LOCAL(NameToLCIDMap, map, ());
+    ensureNameToLCIDMap(map);
+    String localeName = String(name).replace('_', '-');
+    localeName = localeName.lower();
+    do {
+        NameToLCIDMap::const_iterator iterator = map.find(localeName);
+        if (iterator != map.end())
+            return iterator->value;
+        localeName = removeLastComponent(localeName);
+    } while (!localeName.isEmpty());
+    return LOCALE_USER_DEFAULT;
+}
+
+static LCID LCIDFromLocaleInternal(LCID userDefaultLCID, const String& userDefaultLanguageCode, LocaleNameToLCIDPtr localeNameToLCID, const String& locale)
 {
     String localeLanguageCode = extractLanguageCode(locale);
     if (equalIgnoringCase(localeLanguageCode, userDefaultLanguageCode))
         return userDefaultLCID;
-    return ::LocaleNameToLCID(locale.charactersWithNullTermination().data(), 0);
+    return localeNameToLCID(locale.charactersWithNullTermination().data(), 0);
 }
 
 static LCID LCIDFromLocale(const String& locale, bool defaultsForLocale)
 {
+    // LocaleNameToLCID() is available since Windows Vista.
+    LocaleNameToLCIDPtr localeNameToLCID = reinterpret_cast<LocaleNameToLCIDPtr>(::GetProcAddress(::GetModuleHandle(L"kernel32"), "LocaleNameToLCID"));
+    if (!localeNameToLCID)
+        localeNameToLCID = convertLocaleNameToLCID;
+
     // According to MSDN, 9 is enough for LOCALE_SISO639LANGNAME.
     const size_t languageCodeBufferSize = 9;
     WCHAR lowercaseLanguageCode[languageCodeBufferSize];
     ::GetLocaleInfo(LOCALE_USER_DEFAULT, LOCALE_SISO639LANGNAME | (defaultsForLocale ? LOCALE_NOUSEROVERRIDE : 0), lowercaseLanguageCode, languageCodeBufferSize);
     String userDefaultLanguageCode = String(lowercaseLanguageCode);
 
-    LCID lcid = LCIDFromLocaleInternal(LOCALE_USER_DEFAULT, userDefaultLanguageCode, locale);
+    LCID lcid = LCIDFromLocaleInternal(LOCALE_USER_DEFAULT, userDefaultLanguageCode, localeNameToLCID, locale);
     if (!lcid)
-        lcid = LCIDFromLocaleInternal(LOCALE_USER_DEFAULT, userDefaultLanguageCode, defaultLanguage());
+        lcid = LCIDFromLocaleInternal(LOCALE_USER_DEFAULT, userDefaultLanguageCode, localeNameToLCID, defaultLanguage());
     return lcid;
 }
 
diff -r -u --color up/chromium/third_party/WebKit/Source/platform/v8_inspector/JavaScriptCallFrame.cpp nw/chromium/third_party/WebKit/Source/platform/v8_inspector/JavaScriptCallFrame.cpp
--- up/chromium/third_party/WebKit/Source/platform/v8_inspector/JavaScriptCallFrame.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/platform/v8_inspector/JavaScriptCallFrame.cpp	2023-02-21 04:37:31.584242778 +0000
@@ -220,6 +220,8 @@
 v8::Local<v8::Object> JavaScriptCallFrame::createExceptionDetails(v8::Isolate* isolate, v8::Local<v8::Message> message)
 {
     v8::Local<v8::Object> exceptionDetails = v8::Object::New(isolate);
+    if (message.IsEmpty())
+        return exceptionDetails;
     exceptionDetails->Set(v8::String::NewFromUtf8(isolate, "text"), message->Get());
     exceptionDetails->Set(v8::String::NewFromUtf8(isolate, "url"), message->GetScriptOrigin().ResourceName());
     exceptionDetails->Set(v8::String::NewFromUtf8(isolate, "scriptId"), v8::Integer::New(isolate, message->GetScriptOrigin().ScriptID()->Value()));
diff -r -u --color up/chromium/third_party/WebKit/Source/platform/weborigin/SecurityOrigin.h nw/chromium/third_party/WebKit/Source/platform/weborigin/SecurityOrigin.h
--- up/chromium/third_party/WebKit/Source/platform/weborigin/SecurityOrigin.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/platform/weborigin/SecurityOrigin.h	2023-02-21 04:37:31.588242816 +0000
@@ -79,6 +79,8 @@
     String domain() const { return m_domain; }
     unsigned short port() const { return m_port; }
 
+    bool hasUniversalAccess() const { return m_universalAccess; }
+
     // |port()| will return 0 if the port is the default for an origin. This
     // method instead returns the effective port, even if it is the default port
     // (e.g. "http" => 80).
Only in nw/chromium/third_party/WebKit/Source/platform: win
diff -r -u --color up/chromium/third_party/WebKit/Source/web/ChromeClientImpl.cpp nw/chromium/third_party/WebKit/Source/web/ChromeClientImpl.cpp
--- up/chromium/third_party/WebKit/Source/web/ChromeClientImpl.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/web/ChromeClientImpl.cpp	2023-02-21 04:37:31.588242816 +0000
@@ -299,7 +299,7 @@
 } // namespace
 
 Page* ChromeClientImpl::createWindow(LocalFrame* frame, const FrameLoadRequest& r, const WindowFeatures& features,
-    NavigationPolicy navigationPolicy, ShouldSetOpener shouldSetOpener)
+                                     NavigationPolicy navigationPolicy, ShouldSetOpener shouldSetOpener, WebString* manifest)
 {
     if (!m_webView->client())
         return nullptr;
@@ -309,7 +309,7 @@
     Fullscreen::fullyExitFullscreen(*frame->document());
 
     WebViewImpl* newView = toWebViewImpl(
-        m_webView->client()->createView(WebLocalFrameImpl::fromFrame(frame), WrappedResourceRequest(r.resourceRequest()), features, r.frameName(), policy, shouldSetOpener == NeverSetOpener));
+        m_webView->client()->createView(WebLocalFrameImpl::fromFrame(frame), WrappedResourceRequest(r.resourceRequest()), features, r.frameName(), policy, shouldSetOpener == NeverSetOpener, manifest));
     if (!newView)
         return nullptr;
     return newView->page();
@@ -639,14 +639,20 @@
 
     WebFileChooserParams params;
     params.multiSelect = fileChooser->settings().allowsMultipleFiles;
-    params.directory = fileChooser->settings().allowsDirectoryUpload;
+    params.directory = fileChooser->settings().allowsDirectoryUpload || fileChooser->settings().directoryChooser;
     params.acceptTypes = fileChooser->settings().acceptTypes();
     params.selectedFiles = fileChooser->settings().selectedFiles;
-    if (params.selectedFiles.size() > 0)
+    if (params.selectedFiles.size() > 0) {
         params.initialValue = params.selectedFiles[0];
+    } else {
+        params.initialValue = fileChooser->settings().initialValue;
+    }
     params.useMediaCapture = fileChooser->settings().useMediaCapture;
     params.needLocalPath = fileChooser->settings().allowsDirectoryUpload;
     params.requestor = frame->document()->url();
+    params.initialPath = fileChooser->settings().initialPath;
+    params.saveAs = fileChooser->settings().saveAs;
+    params.extractDirectory = fileChooser->settings().allowsDirectoryUpload;
 
     WebFileChooserCompletionImpl* chooserCompletion = new WebFileChooserCompletionImpl(fileChooser);
     if (client->runFileChooser(params, chooserCompletion))
diff -r -u --color up/chromium/third_party/WebKit/Source/web/ChromeClientImpl.h nw/chromium/third_party/WebKit/Source/web/ChromeClientImpl.h
--- up/chromium/third_party/WebKit/Source/web/ChromeClientImpl.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/web/ChromeClientImpl.h	2023-02-21 04:37:31.588242816 +0000
@@ -63,7 +63,7 @@
     void focusedNodeChanged(Node* fromNode, Node* toNode) override;
     bool hadFormInteraction() const override;
     Page* createWindow(
-        LocalFrame*, const FrameLoadRequest&, const WindowFeatures&, NavigationPolicy, ShouldSetOpener) override;
+        LocalFrame*, const FrameLoadRequest&, const WindowFeatures&, NavigationPolicy, ShouldSetOpener, WebString*) override;
     void show(NavigationPolicy) override;
     void didOverscroll(const FloatSize&, const FloatSize&, const FloatPoint&, const FloatSize&) override;
     void setToolbarsVisible(bool) override;
diff -r -u --color up/chromium/third_party/WebKit/Source/web/FrameLoaderClientImpl.cpp nw/chromium/third_party/WebKit/Source/web/FrameLoaderClientImpl.cpp
--- up/chromium/third_party/WebKit/Source/web/FrameLoaderClientImpl.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/web/FrameLoaderClientImpl.cpp	2023-02-21 04:37:31.592242854 +0000
@@ -124,6 +124,14 @@
 
 } // namespace
 
+void FrameLoaderClientImpl::willHandleNavigationPolicy(const ResourceRequest& request, NavigationPolicy* policy, WebString* manifest, bool new_win)
+{
+    if (m_webFrame->client()) {
+        WrappedResourceRequest webreq(request);
+        m_webFrame->client()->willHandleNavigationPolicy(m_webFrame, webreq, (WebNavigationPolicy*)policy, manifest, new_win);
+    }
+}
+
 FrameLoaderClientImpl::FrameLoaderClientImpl(WebLocalFrameImpl* frame)
     : m_webFrame(frame)
 {
diff -r -u --color up/chromium/third_party/WebKit/Source/web/FrameLoaderClientImpl.h nw/chromium/third_party/WebKit/Source/web/FrameLoaderClientImpl.h
--- up/chromium/third_party/WebKit/Source/web/FrameLoaderClientImpl.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/web/FrameLoaderClientImpl.h	2023-02-21 04:37:31.592242854 +0000
@@ -55,6 +55,7 @@
     // FrameLoaderClient ----------------------------------------------
 
     void didCreateNewDocument() override;
+    void willHandleNavigationPolicy(const blink::ResourceRequest& request, blink::NavigationPolicy* policy, WebString* manifest = NULL, bool new_win = true) override;
     // Notifies the WebView delegate that the JS window object has been cleared,
     // giving it a chance to bind native objects to the window before script
     // parsing begins.
diff -r -u --color up/chromium/third_party/WebKit/Source/web/WebLocalFrameImpl.h nw/chromium/third_party/WebKit/Source/web/WebLocalFrameImpl.h
--- up/chromium/third_party/WebKit/Source/web/WebLocalFrameImpl.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/web/WebLocalFrameImpl.h	2023-02-21 04:37:31.600242931 +0000
@@ -328,6 +328,15 @@
 
     void setInputEventsTransformForEmulation(const IntSize&, float);
 
+    void setNodeJS(bool node) { frame()->setNodeJS(node); }
+    bool isNodeJS() const { return frame()->isNodeJS(); }
+    bool isNwDisabledChildFrame() const { return frame()->isNwDisabledChildFrame(); }
+    bool isNwFakeTop() const { return frame()->isNwFakeTop(); }
+
+    void setDevtoolsJail(WebFrame* iframe) {
+      frame()->setDevtoolsJail(iframe ? static_cast<const WebLocalFrameImpl*>(iframe)->frame() : NULL);
+    }
+    WebFrame* getDevtoolsJail() { return fromFrame((blink::LocalFrame*)frame()->getDevtoolsJail()); }
     static void selectWordAroundPosition(LocalFrame*, VisiblePosition);
 
     // Returns the text finder object if it already exists.
diff -r -u --color up/chromium/third_party/WebKit/Source/web/tests/WebFrameTest.cpp nw/chromium/third_party/WebKit/Source/web/tests/WebFrameTest.cpp
--- up/chromium/third_party/WebKit/Source/web/tests/WebFrameTest.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/web/tests/WebFrameTest.cpp	2023-02-21 04:37:31.608243007 +0000
@@ -5819,7 +5819,7 @@
 class TestNewWindowWebViewClient : public FrameTestHelpers::TestWebViewClient {
 public:
     virtual WebView* createView(WebLocalFrame*, const WebURLRequest&, const WebWindowFeatures&,
-        const WebString&, WebNavigationPolicy, bool) override
+                                const WebString&, WebNavigationPolicy, bool, WebString*) override
     {
         EXPECT_TRUE(false);
         return 0;
diff -r -u --color up/chromium/third_party/WebKit/Source/web/tests/WebViewTest.cpp nw/chromium/third_party/WebKit/Source/web/tests/WebViewTest.cpp
--- up/chromium/third_party/WebKit/Source/web/tests/WebViewTest.cpp	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/Source/web/tests/WebViewTest.cpp	2023-02-21 04:37:31.612243045 +0000
@@ -1910,7 +1910,7 @@
     }
 
     // WebViewClient methods
-    WebView* createView(WebLocalFrame*, const WebURLRequest&, const WebWindowFeatures&, const WebString& name, WebNavigationPolicy, bool) override
+    WebView* createView(WebLocalFrame*, const WebURLRequest&, const WebWindowFeatures&, const WebString& name, WebNavigationPolicy, bool, WebString*) override
     {
         return m_webViewHelper.initialize(true, 0, 0);
     }
Only in nw/chromium/third_party/WebKit/Source/wtf: .gitignore
Only in nw/chromium/third_party/WebKit/Tools: .gitattributes
Only in nw/chromium/third_party/WebKit/Tools: .gitignore
Only in nw/chromium/third_party/WebKit/Tools/Scripts/webkitpy/thirdparty/wpt/wpt: .gitignore
Only in nw/chromium/third_party/WebKit/Tools/Scripts/webkitpy/thirdparty/wpt/wpt/tools/wptserve: .gitignore
Only in nw/chromium/third_party/WebKit/public: .gitignore
diff -r -u --color up/chromium/third_party/WebKit/public/platform/WebSecurityOrigin.h nw/chromium/third_party/WebKit/public/platform/WebSecurityOrigin.h
--- up/chromium/third_party/WebKit/public/platform/WebSecurityOrigin.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/public/platform/WebSecurityOrigin.h	2023-02-21 04:37:31.692243808 +0000
@@ -113,6 +113,8 @@
     // Allows this WebSecurityOrigin access to local resources.
     BLINK_PLATFORM_EXPORT void grantLoadLocalResources() const;
 
+    BLINK_PLATFORM_EXPORT void grantUniversalAccess() const;
+
 #if INSIDE_BLINK
     BLINK_PLATFORM_EXPORT WebSecurityOrigin(const WTF::PassRefPtr<SecurityOrigin>&);
     BLINK_PLATFORM_EXPORT WebSecurityOrigin& operator=(const WTF::PassRefPtr<SecurityOrigin>&);
diff -r -u --color up/chromium/third_party/WebKit/public/web/WebFileChooserParams.h nw/chromium/third_party/WebKit/public/web/WebFileChooserParams.h
--- up/chromium/third_party/WebKit/public/web/WebFileChooserParams.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/public/web/WebFileChooserParams.h	2023-02-21 04:37:31.700243884 +0000
@@ -81,12 +81,16 @@
     // initiated by a document.
     WebURL requestor;
 
+    WebString initialPath;
+    bool extractDirectory;
+
     WebFileChooserParams()
         : multiSelect(false)
         , directory(false)
         , saveAs(false)
         , useMediaCapture(false)
         , needLocalPath(true)
+        , extractDirectory(true)
     {
     }
 };
diff -r -u --color up/chromium/third_party/WebKit/public/web/WebFrame.h nw/chromium/third_party/WebKit/public/web/WebFrame.h
--- up/chromium/third_party/WebKit/public/web/WebFrame.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/public/web/WebFrame.h	2023-02-21 04:37:31.700243884 +0000
@@ -112,6 +112,14 @@
         TextGranularityLast = WordGranularity,
     };
 
+    virtual void setNodeJS(bool) {}
+    virtual bool isNodeJS() const {return false;}
+    virtual bool isNwDisabledChildFrame() const {return false;}
+    virtual bool isNwFakeTop() const {return false;}
+
+    virtual void setDevtoolsJail(WebFrame*) {}
+    virtual WebFrame* getDevtoolsJail() {return NULL;}
+
     // Returns the number of live WebFrame objects, used for leak checking.
     BLINK_EXPORT static int instanceCount();
 
@@ -563,9 +571,10 @@
     // the given element is not a frame, iframe or if the frame is empty.
     BLINK_EXPORT static WebFrame* fromFrameOwnerElement(const WebElement&);
 
-#if BLINK_IMPLEMENTATION
     static WebFrame* fromFrame(Frame*);
 
+#if BLINK_IMPLEMENTATION
+
     bool inShadowTree() const { return m_scope == WebTreeScopeType::Shadow; }
 
 #if ENABLE(OILPAN)
diff -r -u --color up/chromium/third_party/WebKit/public/web/WebFrameClient.h nw/chromium/third_party/WebKit/public/web/WebFrameClient.h
--- up/chromium/third_party/WebKit/public/web/WebFrameClient.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/public/web/WebFrameClient.h	2023-02-21 04:37:31.700243884 +0000
@@ -108,6 +108,8 @@
 public:
     // Factory methods -----------------------------------------------------
 
+    virtual void willHandleNavigationPolicy(
+                                            WebFrame*, const WebURLRequest&, WebNavigationPolicy*, WebString* manifest = NULL, bool new_win = true) { }
     // May return null.
     virtual WebPlugin* createPlugin(WebLocalFrame*, const WebPluginParams&) { return 0; }
 
diff -r -u --color up/chromium/third_party/WebKit/public/web/WebViewClient.h nw/chromium/third_party/WebKit/public/web/WebViewClient.h
--- up/chromium/third_party/WebKit/public/web/WebViewClient.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/WebKit/public/web/WebViewClient.h	2023-02-21 04:37:31.704243922 +0000
@@ -85,7 +85,8 @@
                                 const WebWindowFeatures& features,
                                 const WebString& name,
                                 WebNavigationPolicy policy,
-                                bool suppressOpener) {
+                                bool suppressOpener,
+                                WebString* manifest = NULL) {
         return 0;
     }
 
diff -r -u --color up/chromium/third_party/crashpad/crashpad/snapshot/win/process_reader_win.cc nw/chromium/third_party/crashpad/crashpad/snapshot/win/process_reader_win.cc
--- up/chromium/third_party/crashpad/crashpad/snapshot/win/process_reader_win.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/crashpad/crashpad/snapshot/win/process_reader_win.cc	2023-02-21 04:37:32.148248154 +0000
@@ -151,10 +151,15 @@
 #if defined(ARCH_CPU_32_BITS)
     const bool is_native = true;
 #elif defined(ARCH_CPU_64_BITS)
-    const bool is_native = !is_64_reading_32;
-    if (is_64_reading_32) {
+    bool is_native = !is_64_reading_32;
+    typedef BOOL (WINAPI* Wow64GetThreadContextFunc)(HANDLE, PVOID);
+    Wow64GetThreadContextFunc wow64_get_thread_context = reinterpret_cast<Wow64GetThreadContextFunc>(
+              GetProcAddress(GetModuleHandle(L"kernel32.dll"), "Wow64GetThreadContext"));
+    if (!wow64_get_thread_context)
+      is_native = true;
+    if (is_64_reading_32 && wow64_get_thread_context) {
       thread->context.wow64.ContextFlags = CONTEXT_ALL;
-      if (!Wow64GetThreadContext(thread_handle, &thread->context.wow64)) {
+      if (!(*wow64_get_thread_context)(thread_handle, &thread->context.wow64)) {
         PLOG(ERROR) << "Wow64GetThreadContext";
         return false;
       }
diff -r -u --color up/chromium/third_party/zlib/x86.c nw/chromium/third_party/zlib/x86.c
--- up/chromium/third_party/zlib/x86.c	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/third_party/zlib/x86.c	2023-02-21 04:37:33.276258907 +0000
@@ -56,21 +56,43 @@
 #else
 #include <intrin.h>
 #include <windows.h>
+#include <stdint.h>
 
-static BOOL CALLBACK _x86_check_features(PINIT_ONCE once,
-                                         PVOID param,
-                                         PVOID *context);
-static INIT_ONCE cpu_check_inited_once = INIT_ONCE_STATIC_INIT;
+static volatile int32_t once_control = 0;
+static void _x86_check_features(void);
+static int fake_pthread_once(volatile int32_t *once_control,
+                             void (*init_routine)(void));
 
 void x86_check_features(void)
 {
-    InitOnceExecuteOnce(&cpu_check_inited_once, _x86_check_features,
-                        NULL, NULL);
+    fake_pthread_once(&once_control, _x86_check_features);
 }
 
-static BOOL CALLBACK _x86_check_features(PINIT_ONCE once,
-                                         PVOID param,
-                                         PVOID *context)
+/* Copied from "perftools_pthread_once" in tcmalloc */
+static int fake_pthread_once(volatile int32_t *once_control,
+                             void (*init_routine)(void)) {
+    // Try for a fast path first. Note: this should be an acquire semantics read
+    // It is on x86 and x64, where Windows runs.
+    if (*once_control != 1) {
+        while (1) {
+            switch (InterlockedCompareExchange(once_control, 2, 0)) {
+                case 0:
+                    init_routine();
+                    InterlockedExchange(once_control, 1);
+                    return 0;
+                case 1:
+                    // The initializer has already been executed
+                    return 0;
+                default:
+                    // The initializer is being processed by another thread
+                    SwitchToThread();
+            }
+        }
+    }
+    return 0;
+}
+
+static void _x86_check_features(void)
 {
     int x86_cpu_has_sse2;
     int x86_cpu_has_sse42;
@@ -86,6 +108,5 @@
     x86_cpu_enable_simd = x86_cpu_has_sse2 &&
                           x86_cpu_has_sse42 &&
                           x86_cpu_has_pclmulqdq;
-    return TRUE;
 }
 #endif  /* _MSC_VER */
diff -r -u --color up/chromium/tools/gritsettings/resource_ids nw/chromium/tools/gritsettings/resource_ids
--- up/chromium/tools/gritsettings/resource_ids	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/tools/gritsettings/resource_ids	2023-02-21 04:37:33.408260165 +0000
@@ -304,4 +304,8 @@
   },
 
   # Resource ids starting at 31000 are reserved for projects built on Chromium.
+  "chrome/browser/nwjs_resources.grd": {
+    "includes": [32000],
+    "structures": [32350],
+  },
 }
diff -r -u --color up/chromium/tools/licenses.py nw/chromium/tools/licenses.py
--- up/chromium/tools/licenses.py	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/tools/licenses.py	2023-02-21 04:37:33.420260279 +0000
@@ -97,6 +97,7 @@
                'layout_tests'))            # lots of subdirs
 
 ADDITIONAL_PATHS = (
+    os.path.join('content', 'nw'),
     os.path.join('breakpad'),
     os.path.join('chrome', 'common', 'extensions', 'docs', 'examples'),
     os.path.join('chrome', 'test', 'chromeos', 'autotest'),
@@ -120,6 +121,16 @@
 # can't provide a README.chromium.  Please prefer a README.chromium
 # wherever possible.
 SPECIAL_CASES = {
+    os.path.join('content', 'nw'): {
+        "Name": "NW.js",
+        "URL": "http://nwjs.io",
+        "License": "MIT",
+    },
+    os.path.join('third_party', 'node'): {
+        "Name": "IO.js",
+        "URL": "https://iojs.org",
+        "License": "MIT",
+    },
     os.path.join('native_client'): {
         "Name": "native client",
         "URL": "http://code.google.com/p/nativeclient",
diff -r -u --color up/chromium/ui/accelerated_widget_mac/accelerated_widget_mac.h nw/chromium/ui/accelerated_widget_mac/accelerated_widget_mac.h
--- up/chromium/ui/accelerated_widget_mac/accelerated_widget_mac.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/accelerated_widget_mac/accelerated_widget_mac.h	2023-02-21 04:37:33.536261385 +0000
@@ -70,6 +70,9 @@
                 base::ScopedCFTypeRef<IOSurfaceRef> io_surface,
                 const gfx::Size& pixel_size,
                 float scale_factor);
+  
+  void GotSoftwareFrame(float scale_factor,
+                        SkCanvas* canvas);
 
  private:
   void GotCAContextFrame(CAContextID ca_context_id,
@@ -123,6 +126,9 @@
 #endif  // __OBJC__
 
 ACCELERATED_WIDGET_MAC_EXPORT
+void AcceleratedWidgetMacGotSoftwareFrame(
+    gfx::AcceleratedWidget widget, float scale_factor, SkCanvas* canvas);
+
 void AcceleratedWidgetMacGotFrame(
     gfx::AcceleratedWidget widget,
     CAContextID ca_context_id,
diff -r -u --color up/chromium/ui/accelerated_widget_mac/accelerated_widget_mac.mm nw/chromium/ui/accelerated_widget_mac/accelerated_widget_mac.mm
--- up/chromium/ui/accelerated_widget_mac/accelerated_widget_mac.mm	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/accelerated_widget_mac/accelerated_widget_mac.mm	2023-02-21 04:37:33.536261385 +0000
@@ -21,6 +21,10 @@
 - (void)setContentsChanged;
 @end
 
+namespace content {
+  extern bool g_force_cpu_draw;
+}
+
 namespace ui {
 namespace {
 
@@ -182,6 +186,8 @@
     [local_layer_ setContentsGravity:kCAGravityTopLeft];
     [local_layer_ setAnchorPoint:CGPointMake(0, 0)];
     [flipped_layer_ addSublayer:local_layer_];
+    if (content::g_force_cpu_draw)
+      [local_layer_.get() setBackgroundColor:[flipped_layer_.get() backgroundColor]];
   }
 }
 
@@ -232,6 +238,78 @@
   local_layer_.reset();
 }
 
+void AcceleratedWidgetMac::GotSoftwareFrame(float scale_factor,
+                                            SkCanvas* canvas) {
+  assert(content::g_force_cpu_draw);
+  if (!canvas || !view_)
+    return;
+
+  // Disable the fade-in or fade-out effect if we create or remove layers.
+  ScopedCAActionDisabler disabler;
+
+  // If there is not a layer for local frames, create one.
+  EnsureLocalLayer();
+
+  // Set the software layer to draw the provided canvas.
+  SkImageInfo info;
+  size_t row_bytes;
+  const void* pixels = canvas->peekPixels(&info, &row_bytes);
+  gfx::Size pixel_size(info.width(), info.height());
+
+  TRACE_EVENT0("browser", "-[AcceleratedWidgetMac GotSoftwareFrame]");
+
+  // Set the contents of the software CALayer to be a CGImage with the provided
+  // pixel data. Make a copy of the data before backing the image with them,
+  // because the same buffer will be reused for the next frame.
+  base::ScopedCFTypeRef<CFDataRef> dataCopy(
+      CFDataCreate(NULL,
+                   static_cast<const UInt8 *>(pixels),
+                   row_bytes * pixel_size.height()));
+  base::ScopedCFTypeRef<CGDataProviderRef> dataProvider(
+      CGDataProviderCreateWithCFData(dataCopy));
+  base::ScopedCFTypeRef<CGImageRef> image(
+      CGImageCreate(pixel_size.width(),
+                    pixel_size.height(),
+                    8,
+                    32,
+                    row_bytes,
+                    base::mac::GetSystemColorSpace(),
+                    kCGImageAlphaPremultipliedFirst | kCGBitmapByteOrder32Host,
+                    dataProvider,
+                    NULL,
+                    false,
+                    kCGRenderingIntentDefault));
+  [local_layer_ setContents:(id)image.get()];
+  [local_layer_ setBounds:CGRectMake(
+      0, 0, pixel_size.width() / scale_factor, pixel_size.height() / scale_factor)];
+
+  // Set the contents scale of the software CALayer.
+  if ([local_layer_ respondsToSelector:(@selector(contentsScale))] &&
+      [local_layer_ respondsToSelector:(@selector(setContentsScale:))] &&
+      [local_layer_ contentsScale] != scale_factor) {
+    [local_layer_ setContentsScale:scale_factor];
+  }
+
+  last_swap_size_dip_ = gfx::ConvertSizeToDIP(scale_factor, pixel_size);
+
+  if (content::g_force_cpu_draw) {
+    // this is to tell parent window, that the window content has been updated
+    [[view_->AcceleratedWidgetGetNSView() superview]setNeedsDisplay:YES];
+  }
+  // Remove any different-type layers that this is replacing.
+  DestroyCAContextLayer(ca_context_layer_);
+}
+
+void AcceleratedWidgetMacGotSoftwareFrame(
+    gfx::AcceleratedWidget widget, float scale_factor, SkCanvas* canvas) {
+  assert(content::g_force_cpu_draw);
+
+  AcceleratedWidgetMac* accelerated_widget_mac =
+  GetHelperFromAcceleratedWidget(widget);
+  if (accelerated_widget_mac)
+    accelerated_widget_mac->GotSoftwareFrame(scale_factor, canvas);
+}
+
 void AcceleratedWidgetMacGotFrame(
     gfx::AcceleratedWidget widget,
     CAContextID ca_context_id,
diff -r -u --color up/chromium/ui/base/accelerators/accelerator.cc nw/chromium/ui/base/accelerators/accelerator.cc
--- up/chromium/ui/base/accelerators/accelerator.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/base/accelerators/accelerator.cc	2023-02-21 04:37:33.576261766 +0000
@@ -250,7 +250,8 @@
   // more information.
   if (IsCtrlDown())
     shortcut = l10n_util::GetStringFUTF16(IDS_APP_CONTROL_MODIFIER, shortcut);
-  else if (IsAltDown())
+  
+  if (IsAltDown())
     shortcut = l10n_util::GetStringFUTF16(IDS_APP_ALT_MODIFIER, shortcut);
 
   if (IsCmdDown()) {
@@ -258,6 +259,10 @@
     shortcut = l10n_util::GetStringFUTF16(IDS_APP_COMMAND_MODIFIER, shortcut);
 #elif defined(OS_CHROMEOS)
     shortcut = l10n_util::GetStringFUTF16(IDS_APP_SEARCH_MODIFIER, shortcut);
+#elif defined(OS_WIN)
+    shortcut = l10n_util::GetStringFUTF16(IDS_APP_WINDOWS_MODIFIER, shortcut);
+#elif defined(OS_LINUX)
+    shortcut = l10n_util::GetStringFUTF16(IDS_APP_SUPER_MODIFIER, shortcut);
 #else
     NOTREACHED();
 #endif
diff -r -u --color up/chromium/ui/base/base_window.cc nw/chromium/ui/base/base_window.cc
--- up/chromium/ui/base/base_window.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/base/base_window.cc	2023-02-21 04:37:33.576261766 +0000
@@ -12,5 +12,9 @@
      !window.IsFullscreen();
 }
 
+void BaseWindow::ForceClose() {
+  Close();
+}
+
 }  // namespace ui
 
diff -r -u --color up/chromium/ui/base/base_window.h nw/chromium/ui/base/base_window.h
--- up/chromium/ui/base/base_window.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/base/base_window.h	2023-02-21 04:37:33.576261766 +0000
@@ -65,6 +65,7 @@
   // Closes the window as soon as possible. The close action may be delayed
   // if an operation is in progress (e.g. a drag operation).
   virtual void Close() = 0;
+  virtual void ForceClose();
 
   // Activates (brings to front) the window. Restores the window from minimized
   // state if necessary.
diff -r -u --color up/chromium/ui/base/clipboard/clipboard.h nw/chromium/ui/base/clipboard/clipboard.h
--- up/chromium/ui/base/clipboard/clipboard.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/base/clipboard/clipboard.h	2023-02-21 04:37:33.576261766 +0000
@@ -233,7 +233,7 @@
   static const FormatType& GetIDListFormatType();
 #endif
 
- protected:
+ public:
   static Clipboard* Create();
 
   Clipboard() {}
diff -r -u --color up/chromium/ui/base/models/simple_menu_model.cc nw/chromium/ui/base/models/simple_menu_model.cc
--- up/chromium/ui/base/models/simple_menu_model.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/base/models/simple_menu_model.cc	2023-02-21 04:37:33.596261957 +0000
@@ -66,6 +66,10 @@
 void SimpleMenuModel::Delegate::MenuWillShow(SimpleMenuModel* /*source*/) {
 }
 
+bool SimpleMenuModel::Delegate::HasIcon(int command_id) {
+  return false;
+}
+
 void SimpleMenuModel::Delegate::MenuClosed(SimpleMenuModel* /*source*/) {
 }
 
@@ -267,7 +271,7 @@
 
 bool SimpleMenuModel::HasIcons() const {
   for (ItemVector::const_iterator i = items_.begin(); i != items_.end(); ++i) {
-    if (!i->icon.IsEmpty())
+    if (delegate_->HasIcon(i->command_id))
       return true;
   }
 
diff -r -u --color up/chromium/ui/base/models/simple_menu_model.h nw/chromium/ui/base/models/simple_menu_model.h
--- up/chromium/ui/base/models/simple_menu_model.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/base/models/simple_menu_model.h	2023-02-21 04:37:33.596261957 +0000
@@ -66,6 +66,8 @@
 
     // Notifies the delegate that the menu has closed.
     virtual void MenuClosed(SimpleMenuModel* source);
+
+    virtual bool HasIcon(int command_id);
   };
 
   // The Delegate can be NULL, though if it is items can't be checked or
diff -r -u --color up/chromium/ui/base/resource/resource_bundle.cc nw/chromium/ui/base/resource/resource_bundle.cc
--- up/chromium/ui/base/resource/resource_bundle.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/base/resource/resource_bundle.cc	2023-02-21 04:37:33.600261995 +0000
@@ -4,6 +4,8 @@
 
 #include "ui/base/resource/resource_bundle.h"
 
+#include "base/strings/string_util.h"
+
 #include <stdint.h>
 
 #include <limits>
@@ -75,6 +77,8 @@
 
 ResourceBundle* g_shared_instance_ = NULL;
 
+base::string16 chromium_name, nwjs_name;
+
 #if defined(OS_ANDROID)
 // Returns the scale factor closest to |scale| from the full list of factors.
 // Note that it does NOT rely on the list of supported scale factors.
@@ -485,8 +489,10 @@
 
 base::string16 ResourceBundle::GetLocalizedString(int message_id) {
   base::string16 string;
-  if (delegate_ && delegate_->GetLocalizedString(message_id, &string))
+  if (delegate_ && delegate_->GetLocalizedString(message_id, &string)) {
+    base::ReplaceSubstringsAfterOffset(&string, 0, chromium_name, nwjs_name);
     return string;
+  }
 
   // Ensure that ReloadLocaleResources() doesn't drop the resources while
   // we're using them.
@@ -530,6 +536,7 @@
   } else if (encoding == ResourceHandle::UTF8) {
     msg = base::UTF8ToUTF16(data);
   }
+  base::ReplaceSubstringsAfterOffset(&msg, 0, chromium_name, nwjs_name);
   return msg;
 }
 
@@ -643,6 +650,8 @@
 void ResourceBundle::InitSharedInstance(Delegate* delegate) {
   DCHECK(g_shared_instance_ == NULL) << "ResourceBundle initialized twice";
   g_shared_instance_ = new ResourceBundle(delegate);
+  chromium_name = base::ASCIIToUTF16("Chromium");
+  nwjs_name     = base::ASCIIToUTF16("NW.js");
   static std::vector<ScaleFactor> supported_scale_factors;
 #if !defined(OS_IOS)
   // On platforms other than iOS, 100P is always a supported scale factor.
@@ -692,13 +701,13 @@
   if (MaterialDesignController::IsModeMaterial()) {
     if (IsScaleFactorSupported(SCALE_FACTOR_100P)) {
       AddMaterialDesignDataPackFromPath(
-          GetResourcesPakFilePath("chrome_material_100_percent.pak"),
+          GetResourcesPakFilePath("nw_material_100_percent.pak"),
           SCALE_FACTOR_100P);
     }
 
     if (IsScaleFactorSupported(SCALE_FACTOR_200P)) {
       AddOptionalMaterialDesignDataPackFromPath(
-          GetResourcesPakFilePath("chrome_material_200_percent.pak"),
+          GetResourcesPakFilePath("nw_material_200_percent.pak"),
           SCALE_FACTOR_200P);
     }
   }
@@ -708,12 +717,12 @@
   // scale factor to gfx::ImageSkia::AddRepresentation.
   if (IsScaleFactorSupported(SCALE_FACTOR_100P)) {
     AddDataPackFromPath(GetResourcesPakFilePath(
-        "chrome_100_percent.pak"), SCALE_FACTOR_100P);
+        "nw_100_percent.pak"), SCALE_FACTOR_100P);
   }
 
   if (IsScaleFactorSupported(SCALE_FACTOR_200P)) {
     AddOptionalDataPackFromPath(GetResourcesPakFilePath(
-        "chrome_200_percent.pak"), SCALE_FACTOR_200P);
+        "nw_200_percent.pak"), SCALE_FACTOR_200P);
   }
 }
 
diff -r -u --color up/chromium/ui/base/resource/resource_bundle_mac.mm nw/chromium/ui/base/resource/resource_bundle_mac.mm
--- up/chromium/ui/base/resource/resource_bundle_mac.mm	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/base/resource/resource_bundle_mac.mm	2023-02-21 04:37:33.600261995 +0000
@@ -55,21 +55,21 @@
   // made.
   if (MaterialDesignController::IsModeMaterial()) {
     AddMaterialDesignDataPackFromPath(
-        GetResourcesPakFilePath(@"chrome_material_100_percent", nil),
+        GetResourcesPakFilePath(@"nw_material_100_percent", nil),
         SCALE_FACTOR_100P);
 
     AddOptionalMaterialDesignDataPackFromPath(
-        GetResourcesPakFilePath(@"chrome_material_200_percent", nil),
+        GetResourcesPakFilePath(@"nw_material_200_percent", nil),
         SCALE_FACTOR_200P);
   }
 
-  AddDataPackFromPath(GetResourcesPakFilePath(@"chrome_100_percent",
+  AddDataPackFromPath(GetResourcesPakFilePath(@"nw_100_percent",
                         nil), SCALE_FACTOR_100P);
 
   // On Mac we load 1x and 2x resources and we let the UI framework decide
   // which one to use.
   if (IsScaleFactorSupported(SCALE_FACTOR_200P)) {
-    AddDataPackFromPath(GetResourcesPakFilePath(@"chrome_200_percent", nil),
+    AddDataPackFromPath(GetResourcesPakFilePath(@"nw_200_percent", nil),
                         SCALE_FACTOR_200P);
   }
 }
diff -r -u --color up/chromium/ui/gfx/icon_util.cc nw/chromium/ui/gfx/icon_util.cc
--- up/chromium/ui/gfx/icon_util.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/gfx/icon_util.cc	2023-02-21 04:37:33.708263024 +0000
@@ -233,6 +233,21 @@
   return icon;
 }
 
+// NW fix: copied and modified from chrome/browser/ui/views/frame/glass_browser_frame_view.cc
+// Converts the |image| to a Windows icon and returns the corresponding HICON
+// handle. |image| is resized to desired |width| and |height| if needed.
+base::win::ScopedHICON IconUtil::CreateHICONFromSkBitmapSizedTo(
+  const SkBitmap& bitmap,
+  int width,
+  int height) {
+  return CreateHICONFromSkBitmap(
+    width == bitmap.width() && height == bitmap.height()
+    ? bitmap
+    : skia::ImageOperations::Resize(bitmap,
+    skia::ImageOperations::RESIZE_BEST,
+    width, height));
+}
+
 SkBitmap* IconUtil::CreateSkBitmapFromHICON(HICON icon, const gfx::Size& s) {
   // We start with validating parameters.
   if (!icon || s.IsEmpty())
diff -r -u --color up/chromium/ui/gfx/icon_util.h nw/chromium/ui/gfx/icon_util.h
--- up/chromium/ui/gfx/icon_util.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/gfx/icon_util.h	2023-02-21 04:37:33.708263024 +0000
@@ -88,6 +88,10 @@
   // needed by calling ::DestroyIcon().
   static base::win::ScopedHICON CreateHICONFromSkBitmap(const SkBitmap& bitmap);
 
+  static base::win::ScopedHICON CreateHICONFromSkBitmapSizedTo(const SkBitmap& bitmap,
+    int width,
+    int height);
+
   // Given a valid HICON handle representing an icon, this function converts
   // the icon into an SkBitmap object containing an ARGB bitmap using the
   // dimensions specified in |s|. |s| must specify valid dimensions (both
diff -r -u --color up/chromium/ui/gfx/mac/nswindow_frame_controls.h nw/chromium/ui/gfx/mac/nswindow_frame_controls.h
--- up/chromium/ui/gfx/mac/nswindow_frame_controls.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/gfx/mac/nswindow_frame_controls.h	2023-02-21 04:37:33.712263063 +0000
@@ -39,6 +39,7 @@
                                              const gfx::Size& max_size,
                                              bool can_resize,
                                              bool can_fullscreen);
+GFX_EXPORT void SetNSWindowShowInTaskbar(NSWindow* window, bool show);
 
 }  // namespace gfx
 
diff -r -u --color up/chromium/ui/gfx/mac/nswindow_frame_controls.mm nw/chromium/ui/gfx/mac/nswindow_frame_controls.mm
--- up/chromium/ui/gfx/mac/nswindow_frame_controls.mm	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/gfx/mac/nswindow_frame_controls.mm	2023-02-21 04:37:33.712263063 +0000
@@ -59,6 +59,22 @@
   [window setCollectionBehavior:behavior];
 }
 
+void SetNSWindowShowInTaskbar(NSWindow* window, bool show) {
+  ProcessSerialNumber psn = { 0, kCurrentProcess };
+  if (!show) {
+    NSArray* windowList = [[NSArray alloc] init];
+    windowList = [NSWindow windowNumbersWithOptions:NSWindowNumberListAllSpaces];
+    for (unsigned int i = 0; i < [windowList count]; ++i) {
+      NSWindow *window = [NSApp windowWithWindowNumber:[[windowList objectAtIndex:i] integerValue]];
+      [window setCanHide:NO];
+    }
+    TransformProcessType(&psn, kProcessTransformToUIElementApplication);
+  }
+  else {
+    TransformProcessType(&psn, kProcessTransformToForegroundApplication);
+  }
+}
+
 void SetNSWindowVisibleOnAllWorkspaces(NSWindow* window, bool always_visible) {
   NSWindowCollectionBehavior behavior = [window collectionBehavior];
   if (always_visible)
diff -r -u --color up/chromium/ui/gfx/paint_vector_icon.cc nw/chromium/ui/gfx/paint_vector_icon.cc
--- up/chromium/ui/gfx/paint_vector_icon.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/gfx/paint_vector_icon.cc	2023-02-21 04:37:33.712263063 +0000
@@ -292,6 +292,7 @@
             gfx::Size(static_cast<int>(dip_size), static_cast<int>(dip_size)),
             false),
         id_(id),
+        path_(),
         color_(color),
         badge_id_(badge_id) {}
 
diff -r -u --color up/chromium/ui/message_center/views/message_center_view.cc nw/chromium/ui/message_center/views/message_center_view.cc
--- up/chromium/ui/message_center/views/message_center_view.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/message_center/views/message_center_view.cc	2023-02-21 04:37:33.744263368 +0000
@@ -570,7 +570,7 @@
                                           int index) {
   NotificationView* view =
       NotificationView::Create(this, notification, false);  // Not top-level.
-  view->set_context_menu_controller(context_menu_controller_.get());
+  //view->set_context_menu_controller(context_menu_controller_.get());
   notification_views_[notification.id()] = view;
   view->set_scroller(scroller_);
   message_list_view_->AddNotificationAt(view, index);
diff -r -u --color up/chromium/ui/message_center/views/message_popup_collection.cc nw/chromium/ui/message_center/views/message_popup_collection.cc
--- up/chromium/ui/message_center/views/message_popup_collection.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/message_center/views/message_popup_collection.cc	2023-02-21 04:37:33.748263406 +0000
@@ -172,7 +172,7 @@
       view = NotificationView::Create(NULL, *(*iter), true);
     }
 
-    view->set_context_menu_controller(context_menu_controller_.get());
+    //view->set_context_menu_controller(context_menu_controller_.get());
     int view_height = ToastContentsView::GetToastSizeForView(view).height();
     int height_available =
         top_down ? alignment_delegate_->GetWorkAreaBottom() - base : base;
diff -r -u --color up/chromium/ui/native_theme/native_theme_win.cc nw/chromium/ui/native_theme/native_theme_win.cc
--- up/chromium/ui/native_theme/native_theme_win.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/native_theme/native_theme_win.cc	2023-02-21 04:37:33.752263444 +0000
@@ -50,6 +50,7 @@
   COLOR_HIGHLIGHT,
   COLOR_HIGHLIGHTTEXT,
   COLOR_HOTLIGHT,
+  COLOR_MENU,
   COLOR_MENUHIGHLIGHT,
   COLOR_SCROLLBAR,
   COLOR_WINDOW,
@@ -525,6 +526,10 @@
     case kColorId_ButtonHoverColor:
       return kButtonHoverColor;
 
+    // Menu
+    case kColorId_MenuBackgroundColor:
+      return system_colors_[COLOR_MENU];
+
     // Label
     case kColorId_LabelEnabledColor:
       return system_colors_[COLOR_BTNTEXT];
diff -r -u --color up/chromium/ui/shell_dialogs/select_file_dialog_mac.mm nw/chromium/ui/shell_dialogs/select_file_dialog_mac.mm
--- up/chromium/ui/shell_dialogs/select_file_dialog_mac.mm	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/shell_dialogs/select_file_dialog_mac.mm	2023-02-21 04:37:33.772263634 +0000
@@ -295,7 +295,7 @@
       [open_dialog setCanChooseFiles:NO];
       [open_dialog setCanChooseDirectories:YES];
       [open_dialog setCanCreateDirectories:YES];
-      NSString *prompt = (type == SELECT_UPLOAD_FOLDER)
+      NSString *prompt = (false && type == SELECT_UPLOAD_FOLDER)
           ? l10n_util::GetNSString(IDS_SELECT_UPLOAD_FOLDER_BUTTON_TITLE)
           : l10n_util::GetNSString(IDS_SELECT_FOLDER_BUTTON_TITLE);
       [open_dialog setPrompt:prompt];
diff -r -u --color up/chromium/ui/strings/ui_strings.grd nw/chromium/ui/strings/ui_strings.grd
--- up/chromium/ui/strings/ui_strings.grd	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/strings/ui_strings.grd	2023-02-21 04:37:33.780263711 +0000
@@ -553,6 +553,12 @@
       <message name="IDS_APP_SEARCH_MODIFIER" desc="Search key shortcut modifier">
         Search+<ph name="KEY_COMBO_NAME">$1<ex>C</ex></ph>
       </message>
+      <message name="IDS_APP_WINDOWS_MODIFIER" desc="Command key shortcut modifier">
+        Win+<ph name="KEY_COMBO_NAME">$1<ex>C</ex></ph>
+      </message>
+      <message name="IDS_APP_SUPER_MODIFIER" desc="Command key shortcut modifier">
+        Super+<ph name="KEY_COMBO_NAME">$1<ex>C</ex></ph>
+      </message>
 
       <!-- Byte size units -->
       <message name="IDS_APP_BYTES" desc="Units tag indicating a quantity of bytes">
diff -r -u --color up/chromium/ui/views/controls/button/label_button.cc nw/chromium/ui/views/controls/button/label_button.cc
--- up/chromium/ui/views/controls/button/label_button.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/views/controls/button/label_button.cc	2023-02-21 04:37:33.788263787 +0000
@@ -493,6 +493,9 @@
 #endif
     label_->set_background(NULL);
   } else {
+    // Set auto color readability to false in case of switching theme from
+    // inverted color scheme.
+    label_->SetAutoColorReadabilityEnabled(false);
     label_->set_background(NULL);
   }
 
diff -r -u --color up/chromium/ui/views/controls/menu/native_menu_win.cc nw/chromium/ui/views/controls/menu/native_menu_win.cc
--- up/chromium/ui/views/controls/menu/native_menu_win.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/views/controls/menu/native_menu_win.cc	2023-02-21 04:37:33.796263863 +0000
@@ -51,7 +51,8 @@
       system_menu_for_(system_menu_for),
       first_item_index_(0),
       parent_(NULL),
-      destroyed_flag_(NULL) {
+      destroyed_flag_(NULL),
+      is_popup_menu_(true){
 }
 
 NativeMenuWin::~NativeMenuWin() {
@@ -219,14 +220,18 @@
   } else {
     if (menu_)
       DestroyMenu(menu_);
-    menu_ = CreatePopupMenu();
+    if (is_popup_menu_)
+      menu_ = CreatePopupMenu();
+    else
+      menu_ = CreateMenu();
     // Rather than relying on the return value of TrackPopupMenuEx, which is
     // always a command identifier, instead we tell the menu to notify us via
     // our host window and the WM_MENUCOMMAND message.
     MENUINFO mi = {0};
     mi.cbSize = sizeof(mi);
     mi.fMask = MIM_STYLE | MIM_MENUDATA;
-    mi.dwStyle = MNS_NOTIFYBYPOS;
+    if (is_popup_menu_)
+      mi.dwStyle = MNS_NOTIFYBYPOS;
     mi.dwMenuData = reinterpret_cast<ULONG_PTR>(this);
     SetMenuInfo(menu_, &mi);
   }
diff -r -u --color up/chromium/ui/views/controls/menu/native_menu_win.h nw/chromium/ui/views/controls/menu/native_menu_win.h
--- up/chromium/ui/views/controls/menu/native_menu_win.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/views/controls/menu/native_menu_win.h	2023-02-21 04:37:33.796263863 +0000
@@ -32,6 +32,9 @@
   void Rebuild(MenuInsertionDelegateWin* delegate);
   void UpdateStates();
 
+  void set_is_popup_menu(bool flag) { is_popup_menu_ = flag; }
+  HMENU menu() const { return menu_; }
+
  private:
   // IMPORTANT: Note about indices.
   //            Functions in this class deal in two index spaces:
@@ -99,6 +102,9 @@
   // If we're a submenu, this is our parent.
   NativeMenuWin* parent_;
 
+  // A flag to indicate whether to create a menubar or popupmenu.
+  bool is_popup_menu_;
+
   // If non-null the destructor sets this to true. This is set to non-null while
   // the menu is showing. It is used to detect if the menu was deleted while
   // running.
diff -r -u --color up/chromium/ui/views/widget/desktop_aura/desktop_screen_x11.cc nw/chromium/ui/views/widget/desktop_aura/desktop_screen_x11.cc
--- up/chromium/ui/views/widget/desktop_aura/desktop_screen_x11.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/views/widget/desktop_aura/desktop_screen_x11.cc	2023-02-21 04:37:33.828264168 +0000
@@ -64,7 +64,7 @@
   if (!gfx::Display::HasForceDeviceScaleFactor() &&
       !ui::IsDisplaySizeBlackListed(physical_size)) {
     const float device_scale_factor = GetDeviceScaleFactor();
-    DCHECK_LE(1.0f, device_scale_factor);
+    //DCHECK_LE(1.0f, device_scale_factor);
     gfx_display.SetScaleAndBounds(device_scale_factor, bounds_in_pixels);
   }
 
diff -r -u --color up/chromium/ui/views/widget/desktop_aura/desktop_window_tree_host_win.cc nw/chromium/ui/views/widget/desktop_aura/desktop_window_tree_host_win.cc
--- up/chromium/ui/views/widget/desktop_aura/desktop_window_tree_host_win.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/views/widget/desktop_aura/desktop_window_tree_host_win.cc	2023-02-21 04:37:33.828264168 +0000
@@ -39,6 +39,10 @@
 #include "ui/wm/core/window_animations.h"
 #include "ui/wm/public/scoped_tooltip_disabler.h"
 
+namespace content {
+  extern bool g_force_cpu_draw;
+}
+
 DECLARE_WINDOW_PROPERTY_TYPE(views::DesktopWindowTreeHostWin*);
 
 namespace views {
@@ -692,10 +696,19 @@
   return GetWidget()->widget_delegate()->ShouldHandleSystemCommands();
 }
 
+bool DesktopWindowTreeHostWin::ShouldHandleOnSize() const {
+  return GetWidget()->widget_delegate()->ShouldHandleOnSize();
+}
+
 void DesktopWindowTreeHostWin::HandleAppDeactivated() {
   native_widget_delegate_->EnableInactiveRendering();
 }
 
+bool DesktopWindowTreeHostWin::HandleSize(UINT param, const gfx::Size& new_size) {
+  return GetWidget()->widget_delegate() &&
+      GetWidget()->widget_delegate()->HandleSize(param, new_size);
+}
+
 void DesktopWindowTreeHostWin::HandleActivationChanged(bool active) {
   // This can be invoked from HWNDMessageHandler::Init(), at which point we're
   // not in a good state and need to ignore it.
@@ -712,7 +725,7 @@
   // We treat APPCOMMAND ids as an extension of our command namespace, and just
   // let the delegate figure out what to do...
   return GetWidget()->widget_delegate() &&
-      GetWidget()->widget_delegate()->ExecuteWindowsCommand(command);
+      GetWidget()->widget_delegate()->ExecuteAppCommand(command);
 }
 
 void DesktopWindowTreeHostWin::HandleCancelMode() {
@@ -865,6 +878,7 @@
 
 void DesktopWindowTreeHostWin::HandlePaintAccelerated(
     const gfx::Rect& invalid_rect) {
+  if (content::g_force_cpu_draw) return;
   if (compositor())
     compositor()->ScheduleRedrawRect(invalid_rect);
 }
diff -r -u --color up/chromium/ui/views/widget/desktop_aura/desktop_window_tree_host_win.h nw/chromium/ui/views/widget/desktop_aura/desktop_window_tree_host_win.h
--- up/chromium/ui/views/widget/desktop_aura/desktop_window_tree_host_win.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/views/widget/desktop_aura/desktop_window_tree_host_win.h	2023-02-21 04:37:33.828264168 +0000
@@ -126,6 +126,8 @@
   void OnWindowHidingAnimationCompleted() override;
 
   // Overridden from HWNDMessageHandlerDelegate:
+  bool ShouldHandleOnSize() const override;
+  bool HandleSize(UINT param, const gfx::Size& new_size) override;
   bool IsWidgetWindow() const override;
   bool IsUsingCustomFrame() const override;
   void SchedulePaint() override;
diff -r -u --color up/chromium/ui/views/widget/desktop_aura/desktop_window_tree_host_x11.cc nw/chromium/ui/views/widget/desktop_aura/desktop_window_tree_host_x11.cc
--- up/chromium/ui/views/widget/desktop_aura/desktop_window_tree_host_x11.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/views/widget/desktop_aura/desktop_window_tree_host_x11.cc	2023-02-21 04:37:33.828264168 +0000
@@ -59,6 +59,10 @@
 
 DECLARE_WINDOW_PROPERTY_TYPE(views::DesktopWindowTreeHostX11*);
 
+namespace content {
+  extern bool g_support_transparency;
+}
+
 namespace views {
 
 DesktopWindowTreeHostX11* DesktopWindowTreeHostX11::g_current_capture =
@@ -771,7 +775,7 @@
 }
 
 bool DesktopWindowTreeHostX11::ShouldWindowContentsBeTransparent() const {
-  return false;
+  return content::g_support_transparency ? use_argb_visual_ : false;
 }
 
 void DesktopWindowTreeHostX11::FrameTypeChanged() {
@@ -927,7 +931,7 @@
 }
 
 bool DesktopWindowTreeHostX11::IsTranslucentWindowOpacitySupported() const {
-  return false;
+  return content::g_support_transparency ? use_argb_visual_ : false;
 }
 
 void DesktopWindowTreeHostX11::SizeConstraintsChanged() {
diff -r -u --color up/chromium/ui/views/widget/native_widget_delegate.h nw/chromium/ui/views/widget/native_widget_delegate.h
--- up/chromium/ui/views/widget/native_widget_delegate.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/views/widget/native_widget_delegate.h	2023-02-21 04:37:33.832264206 +0000
@@ -51,6 +51,8 @@
   // Returns true if the window can be activated.
   virtual bool CanActivate() const = 0;
 
+  virtual bool NWCanClose(bool user_force = false) const = 0;
+
   virtual bool IsInactiveRenderingDisabled() const = 0;
   virtual void EnableInactiveRendering() = 0;
 
diff -r -u --color up/chromium/ui/views/widget/widget.cc nw/chromium/ui/views/widget/widget.cc
--- up/chromium/ui/views/widget/widget.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/views/widget/widget.cc	2023-02-21 04:37:33.832264206 +0000
@@ -567,7 +567,7 @@
   native_widget_->SetShape(shape);
 }
 
-void Widget::Close() {
+void Widget::Close(bool force) {
   if (widget_closed_) {
     // It appears we can hit this code path if you close a modal dialog then
     // close the last browser before the destructor is hit, which triggers
@@ -578,6 +578,8 @@
   bool can_close = true;
   if (non_client_view_)
     can_close = non_client_view_->CanClose();
+  if (can_close && !force)
+    can_close = NWCanClose();
   if (can_close) {
     SaveWindowPlacement();
 
@@ -1028,6 +1030,10 @@
   return widget_delegate_->CanActivate();
 }
 
+bool Widget::NWCanClose(bool user_force) const {
+  return widget_delegate_->NWCanClose(user_force);
+}
+
 bool Widget::IsInactiveRenderingDisabled() const {
   return disable_inactive_rendering_;
 }
diff -r -u --color up/chromium/ui/views/widget/widget.h nw/chromium/ui/views/widget/widget.h
--- up/chromium/ui/views/widget/widget.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/views/widget/widget.h	2023-02-21 04:37:33.832264206 +0000
@@ -469,7 +469,7 @@
   void SetShape(SkRegion* shape);
 
   // Hides the widget then closes it after a return to the message loop.
-  virtual void Close();
+  virtual void Close(bool force = false);
 
   // TODO(beng): Move off public API.
   // Closes the widget immediately. Compare to |Close|. This will destroy the
@@ -777,6 +777,7 @@
   bool IsModal() const override;
   bool IsDialogBox() const override;
   bool CanActivate() const override;
+  bool NWCanClose(bool user_force = false) const override;
   bool IsInactiveRenderingDisabled() const override;
   void EnableInactiveRendering() override;
   void OnNativeWidgetActivationChanged(bool active) override;
diff -r -u --color up/chromium/ui/views/widget/widget_delegate.cc nw/chromium/ui/views/widget/widget_delegate.cc
--- up/chromium/ui/views/widget/widget_delegate.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/views/widget/widget_delegate.cc	2023-02-21 04:37:33.832264206 +0000
@@ -59,6 +59,10 @@
   return can_activate_;
 }
 
+bool WidgetDelegate::NWCanClose(bool user_force) const {
+  return true;
+}
+
 ui::ModalType WidgetDelegate::GetModalType() const {
   return ui::MODAL_TYPE_NONE;
 }
@@ -91,6 +95,10 @@
   return widget->non_client_view() != NULL;
 }
 
+bool WidgetDelegate::ShouldHandleOnSize() const {
+  return false;
+}
+
 gfx::ImageSkia WidgetDelegate::GetWindowAppIcon() {
   // Use the window icon as app icon by default.
   return GetWindowIcon();
@@ -109,6 +117,14 @@
   return false;
 }
 
+bool WidgetDelegate::ExecuteAppCommand(int command_id) {
+  return ExecuteWindowsCommand(command_id);
+}
+
+bool WidgetDelegate::HandleSize(unsigned int param, const gfx::Size& size) {
+  return false;
+}
+
 std::string WidgetDelegate::GetWindowName() const {
   return std::string();
 }
diff -r -u --color up/chromium/ui/views/widget/widget_delegate.h nw/chromium/ui/views/widget/widget_delegate.h
--- up/chromium/ui/views/widget/widget_delegate.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/views/widget/widget_delegate.h	2023-02-21 04:37:33.832264206 +0000
@@ -64,6 +64,7 @@
 
   // Returns true if the window can be activated.
   virtual bool CanActivate() const;
+  virtual bool NWCanClose(bool user_force = false) const;
 
   // Returns the modal type that applies to the widget. Default is
   // ui::MODAL_TYPE_NONE (not modal).
@@ -87,6 +88,8 @@
   // close, minimize, maximize.
   virtual bool ShouldHandleSystemCommands() const;
 
+  virtual bool ShouldHandleOnSize() const;
+
   // Returns the app icon for the window. On Windows, this is the ICON_BIG used
   // in Alt-Tab list and Win7's taskbar.
   virtual gfx::ImageSkia GetWindowAppIcon();
@@ -101,6 +104,10 @@
   // was handled, false if it was not.
   virtual bool ExecuteWindowsCommand(int command_id);
 
+  virtual bool ExecuteAppCommand(int command_id);
+
+  virtual bool HandleSize(unsigned int param, const gfx::Size& size);
+
   // Returns the window's name identifier. Used to identify this window for
   // state restoration.
   virtual std::string GetWindowName() const;
diff -r -u --color up/chromium/ui/views/widget/widget_hwnd_utils.cc nw/chromium/ui/views/widget/widget_hwnd_utils.cc
--- up/chromium/ui/views/widget/widget_hwnd_utils.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/views/widget/widget_hwnd_utils.cc	2023-02-21 04:37:33.832264206 +0000
@@ -18,6 +18,10 @@
 #include "ui/base/win/shell.h"
 #endif
 
+namespace content {
+  extern bool g_support_transparency;
+}
+
 namespace views {
 
 namespace {
@@ -115,8 +119,15 @@
           native_widget_delegate->IsDialogBox() ? WS_EX_DLGMODALFRAME : 0;
 
       // See layered window comment above.
-      if (*ex_style & WS_EX_COMPOSITED)
-        *style &= ~(WS_THICKFRAME | WS_CAPTION);
+      if (content::g_support_transparency) {
+        if (*ex_style & WS_EX_COMPOSITED && params.remove_standard_frame)
+          *style &= ~(WS_CAPTION);
+      }
+      else {
+        if (*ex_style & WS_EX_COMPOSITED)
+          *style &= ~(WS_THICKFRAME | WS_CAPTION);
+      }
+
       break;
     }
     case Widget::InitParams::TYPE_CONTROL:
diff -r -u --color up/chromium/ui/views/win/hwnd_message_handler.cc nw/chromium/ui/views/win/hwnd_message_handler.cc
--- up/chromium/ui/views/win/hwnd_message_handler.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/views/win/hwnd_message_handler.cc	2023-02-21 04:37:33.836264245 +0000
@@ -47,6 +47,11 @@
 #include "ui/views/win/scoped_fullscreen_visibility.h"
 #include "ui/views/win/windows_session_change_observer.h"
 
+namespace content {
+  extern bool g_support_transparency;
+  extern bool g_force_cpu_draw;
+}
+
 namespace views {
 namespace {
 
@@ -308,6 +313,7 @@
 // HWNDMessageHandler, public:
 
 long HWNDMessageHandler::last_touch_message_time_ = 0;
+#define TRANSPARENCY(original, addition) content::g_support_transparency ? original addition : original
 
 HWNDMessageHandler::HWNDMessageHandler(HWNDMessageHandlerDelegate* delegate)
     : msg_handled_(FALSE),
@@ -816,13 +822,15 @@
   if (!window_icon.isNull()) {
     base::win::ScopedHICON previous_icon = window_icon_.Pass();
     window_icon_ =
-        IconUtil::CreateHICONFromSkBitmap(*window_icon.bitmap()).Pass();
+        IconUtil::CreateHICONFromSkBitmapSizedTo(*window_icon.bitmap(),
+          GetSystemMetrics(SM_CXSMICON), GetSystemMetrics(SM_CYSMICON)).Pass();
     SendMessage(hwnd(), WM_SETICON, ICON_SMALL,
                 reinterpret_cast<LPARAM>(window_icon_.get()));
   }
   if (!app_icon.isNull()) {
     base::win::ScopedHICON previous_icon = app_icon_.Pass();
-    app_icon_ = IconUtil::CreateHICONFromSkBitmap(*app_icon.bitmap()).Pass();
+    app_icon_ = IconUtil::CreateHICONFromSkBitmapSizedTo(*app_icon.bitmap(),
+      GetSystemMetrics(SM_CXICON), GetSystemMetrics(SM_CYICON)).Pass();
     SendMessage(hwnd(), WM_SETICON, ICON_BIG,
                 reinterpret_cast<LPARAM>(app_icon_.get()));
   }
@@ -851,7 +859,8 @@
     if (!delegate_->CanMaximize())
       style &= ~WS_MAXIMIZEBOX;
   } else {
-    style &= ~(WS_THICKFRAME | WS_MAXIMIZEBOX);
+    if (!content::g_support_transparency)
+      style &= ~(WS_THICKFRAME | WS_MAXIMIZEBOX);
   }
   if (delegate_->CanMinimize()) {
     style |= WS_MINIMIZEBOX;
@@ -1155,7 +1164,7 @@
   if ((window_ex_style() & WS_EX_COMPOSITED) == 0 &&
       !custom_window_region_.is_valid() &&
       (!delegate_->IsUsingCustomFrame() || !delegate_->IsWidgetWindow())) {
-    if (force)
+    if (force || content::g_force_cpu_draw)
       SetWindowRgn(hwnd(), NULL, redraw);
     return;
   }
@@ -1171,6 +1180,10 @@
   if (custom_window_region_.is_valid()) {
     new_region.reset(CreateRectRgn(0, 0, 0, 0));
     CombineRgn(new_region.get(), custom_window_region_.get(), NULL, RGN_COPY);
+  } else if (content::g_support_transparency && window_ex_style() & WS_EX_COMPOSITED) {
+    RECT work_rect = window_rect;
+    OffsetRect(&work_rect, -window_rect.left, -window_rect.top);
+    new_region.reset(CreateRectRgnIndirect(&work_rect));
   } else if (IsMaximized()) {
     HMONITOR monitor = MonitorFromWindow(hwnd(), MONITOR_DEFAULTTONEAREST);
     MONITORINFO mi;
@@ -1330,7 +1343,7 @@
               MAKELPARAM(UIS_CLEAR, UISF_HIDEFOCUS),
               0);
 
-  if (remove_standard_frame_) {
+  if (TRANSPARENCY(remove_standard_frame_, && !(window_ex_style() & WS_EX_COMPOSITED))) {
     SetWindowLong(hwnd(), GWL_STYLE,
                   GetWindowLong(hwnd(), GWL_STYLE) & ~WS_CAPTION);
     SendFrameChanged();
@@ -1436,15 +1449,17 @@
   if (delegate_->WidgetSizeIsClientSize()) {
     RECT client_rect, window_rect;
     GetClientRect(hwnd(), &client_rect);
-    GetWindowRect(hwnd(), &window_rect);
-    CR_DEFLATE_RECT(&window_rect, &client_rect);
-    min_window_size.Enlarge(window_rect.right - window_rect.left,
-                            window_rect.bottom - window_rect.top);
-    // Either axis may be zero, so enlarge them independently.
-    if (max_window_size.width())
-      max_window_size.Enlarge(window_rect.right - window_rect.left, 0);
-    if (max_window_size.height())
-      max_window_size.Enlarge(0, window_rect.bottom - window_rect.top);
+	if (client_rect.right > client_rect.left) {
+		GetWindowRect(hwnd(), &window_rect);
+		CR_DEFLATE_RECT(&window_rect, &client_rect);
+		min_window_size.Enlarge(window_rect.right - window_rect.left,
+			window_rect.bottom - window_rect.top);
+		// Either axis may be zero, so enlarge them independently.
+		if (max_window_size.width())
+			max_window_size.Enlarge(window_rect.right - window_rect.left, 0);
+		if (max_window_size.height())
+			max_window_size.Enlarge(0, window_rect.bottom - window_rect.top);
+	}
   }
   minmax_info->ptMinTrackSize.x = min_window_size.width();
   minmax_info->ptMinTrackSize.y = min_window_size.height();
@@ -1659,11 +1674,11 @@
       return 0;
     }
   }
-
+  const LONG noTitleBar = (window_ex_style() & WS_EX_COMPOSITED) && remove_standard_frame_;
   gfx::Insets insets;
   bool got_insets = GetClientAreaInsets(&insets);
-  if (!got_insets && !fullscreen_handler_->fullscreen() &&
-      !(mode && remove_standard_frame_)) {
+  if (TRANSPARENCY(!got_insets && !fullscreen_handler_->fullscreen() &&
+    !(mode && remove_standard_frame_), && !noTitleBar)) {
     SetMsgHandled(FALSE);
     return 0;
   }
@@ -2049,6 +2064,17 @@
     base::MessageLoop::current()->PostTask(
         FROM_HERE, base::Bind(&AddScrollStylesToWindow, hwnd()));
   }
+  if (delegate_->ShouldHandleOnSize())
+    delegate_->HandleSize(param, size);
+}
+
+void HWNDMessageHandler::OnStyleChanging(int nStyleType, LPSTYLESTRUCT lpStyleStruct) {
+  if (!content::g_support_transparency)
+    return;
+  if (nStyleType == GWL_EXSTYLE)
+    set_window_ex_style(lpStyleStruct->styleNew);
+  else if (nStyleType == GWL_STYLE)
+    set_window_style(lpStyleStruct->styleNew);
 }
 
 void HWNDMessageHandler::OnSysCommand(UINT notification_code,
@@ -2507,7 +2533,7 @@
   // The non-client view needs to update too.
   delegate_->HandleFrameChanged();
 
-  if (IsVisible() && !delegate_->IsUsingCustomFrame()) {
+  if (IsVisible() && !delegate_->IsUsingCustomFrame() && !content::g_force_cpu_draw) {
     // For some reason, we need to hide the window after we change from a custom
     // frame to a native frame.  If we don't, the client area will be filled
     // with black.  This seems to be related to an interaction between DWM and
diff -r -u --color up/chromium/ui/views/win/hwnd_message_handler.h nw/chromium/ui/views/win/hwnd_message_handler.h
--- up/chromium/ui/views/win/hwnd_message_handler.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/views/win/hwnd_message_handler.h	2023-02-21 04:37:33.836264245 +0000
@@ -397,6 +397,7 @@
     CR_MSG_WM_SETTEXT(OnSetText)
     CR_MSG_WM_SETTINGCHANGE(OnSettingChange)
     CR_MSG_WM_SIZE(OnSize)
+    CR_MSG_WM_STYLECHANGING(OnStyleChanging)
     CR_MSG_WM_SYSCOMMAND(OnSysCommand)
     CR_MSG_WM_THEMECHANGED(OnThemeChanged)
     CR_MSG_WM_WINDOWPOSCHANGED(OnWindowPosChanged)
@@ -451,6 +452,7 @@
   LRESULT OnSetText(const wchar_t* text);
   void OnSettingChange(UINT flags, const wchar_t* section);
   void OnSize(UINT param, const gfx::Size& size);
+  void OnStyleChanging(int nStyleType, LPSTYLESTRUCT lpStyleStruct);
   void OnSysCommand(UINT notification_code, const gfx::Point& point);
   void OnThemeChanged();
   LRESULT OnTouchEvent(UINT message, WPARAM w_param, LPARAM l_param);
diff -r -u --color up/chromium/ui/views/win/hwnd_message_handler_delegate.h nw/chromium/ui/views/win/hwnd_message_handler_delegate.h
--- up/chromium/ui/views/win/hwnd_message_handler_delegate.h	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/views/win/hwnd_message_handler_delegate.h	2023-02-21 04:37:33.836264245 +0000
@@ -87,6 +87,10 @@
   // implementing them on non-aura windows. http://crbug.com/189112.
   virtual bool ShouldHandleSystemCommands() const = 0;
 
+  // on windows, maximizing sometime is sent through WM_SIZE, not
+  // WM_SYSCOMMAND, see node-webkit#753
+  virtual bool ShouldHandleOnSize() const = 0;
+
   // TODO(beng): Investigate migrating these methods to On* prefixes once
   // HWNDMessageHandler is the WindowImpl.
 
@@ -114,6 +118,8 @@
   // true if the command was handled.
   virtual bool HandleCommand(int command) = 0;
 
+  virtual bool HandleSize(UINT param, const gfx::Size& size) = 0;
+
   // Called when an accelerator is invoked.
   virtual void HandleAccelerator(const ui::Accelerator& accelerator) = 0;
 
diff -r -u --color up/chromium/ui/views/window/custom_frame_view.cc nw/chromium/ui/views/window/custom_frame_view.cc
--- up/chromium/ui/views/window/custom_frame_view.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/ui/views/window/custom_frame_view.cc	2023-02-21 04:37:33.836264245 +0000
@@ -6,6 +6,7 @@
 
 #include <algorithm>
 #include <vector>
+#include "ui/gfx/image/image_skia_operations.h"
 
 #include "base/strings/utf_string_conversions.h"
 #include "build/build_config.h"
@@ -114,7 +115,10 @@
       IDR_RESTORE, IDR_RESTORE_H, IDR_RESTORE_P);
 
   if (frame_->widget_delegate()->ShouldShowWindowIcon()) {
+    gfx::ImageSkia icon;
     window_icon_ = new ImageButton(this);
+    icon = frame_->widget_delegate()->GetWindowAppIcon();
+    window_icon_->SetImage(CustomButton::STATE_NORMAL, &icon);
     AddChildView(window_icon_);
   }
 }
@@ -194,8 +198,16 @@
 }
 
 void CustomFrameView::UpdateWindowIcon() {
-  if (window_icon_)
+  if (window_icon_) {
+    gfx::ImageSkia icon;
+    icon = frame_->widget_delegate()->GetWindowAppIcon();
+    int size = IconSize();
+    gfx::ImageSkia icon2 = gfx::ImageSkiaOperations::CreateResizedImage(icon,
+                               skia::ImageOperations::RESIZE_BEST,
+                               gfx::Size(size, size));
+    window_icon_->SetImage(CustomButton::STATE_NORMAL, &icon2);
     window_icon_->SchedulePaint();
+  }
 }
 
 void CustomFrameView::UpdateWindowTitle() {
diff -r -u --color up/chromium/win8/delegate_execute/command_execute_impl.cc nw/chromium/win8/delegate_execute/command_execute_impl.cc
--- up/chromium/win8/delegate_execute/command_execute_impl.cc	2016-05-11 00:18:26.000000000 +0000
+++ nw/chromium/win8/delegate_execute/command_execute_impl.cc	2023-02-21 04:37:33.860264473 +0000
@@ -21,7 +21,7 @@
 #include "base/win/win_util.h"
 #include "base/win/windows_version.h"
 #include "chrome/common/chrome_constants.h"
-#include "chrome/common/chrome_paths.h"
+//#include "chrome/common/chrome_paths.h"
 #include "chrome/common/chrome_switches.h"
 #include "chrome/installer/util/browser_distribution.h"
 #include "chrome/installer/util/install_util.h"
