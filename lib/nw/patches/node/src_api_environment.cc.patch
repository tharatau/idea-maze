diff -r -u --color up/node/src/api/environment.cc nw/node/src/api/environment.cc
--- up/node/src/api/environment.cc	2023-02-20 19:32:04.000000000 +0000
+++ nw/node/src/api/environment.cc	2023-02-25 19:08:13.814006688 +0000
@@ -43,6 +43,8 @@
 using v8::String;
 using v8::Value;
 
+extern bool node_is_nwjs;
+
 bool AllowWasmCodeGenerationCallback(Local<Context> context,
                                      Local<String>) {
   Local<Value> wasm_code_gen =
@@ -116,10 +118,16 @@
 }
 
 void NodeArrayBufferAllocator::Free(void* data, size_t size) {
+  if (data == &zero_fill_field_)
+    return;
   total_mem_usage_.fetch_sub(size, std::memory_order_relaxed);
   allocator_->Free(data, size);
 }
 
+void NodeArrayBufferAllocator::Free(void* data, size_t size, AllocationMode mode) {
+  Free(data, size);
+}
+
 DebuggingArrayBufferAllocator::~DebuggingArrayBufferAllocator() {
   CHECK(allocations_.empty());
 }
@@ -242,12 +250,12 @@
             errors::PerIsolateMessageListener,
             Isolate::MessageErrorLevel::kMessageError |
                 Isolate::MessageErrorLevel::kMessageWarning);
-
+#if 0
   auto* abort_callback = s.should_abort_on_uncaught_exception_callback ?
       s.should_abort_on_uncaught_exception_callback :
       ShouldAbortOnUncaughtException;
   isolate->SetAbortOnUncaughtExceptionCallback(abort_callback);
-
+#endif
   auto* fatal_error_cb = s.fatal_error_callback ?
       s.fatal_error_callback : OnFatalError;
   isolate->SetFatalErrorHandler(fatal_error_cb);
@@ -290,14 +298,18 @@
         shadow_realm::HostCreateShadowRealmContextCallback);
   }
 
+#if 0
   if ((s.flags & SHOULD_NOT_SET_PROMISE_REJECTION_CALLBACK) == 0) {
     auto* promise_reject_cb = s.promise_reject_callback ?
       s.promise_reject_callback : PromiseRejectCallback;
     isolate->SetPromiseRejectCallback(promise_reject_cb);
   }
+#endif
 
+#if 0
   if (s.flags & DETAILED_SOURCE_POSITIONS_FOR_PROFILING)
     v8::CpuProfiler::UseDetailedSourcePositionsForProfiling(isolate);
+#endif
 }
 
 void SetIsolateUpForNode(v8::Isolate* isolate,
@@ -640,8 +652,8 @@
 // InitializeContext, because embedders don't necessarily
 // call NewContext and so they will experience breakages.
 Local<Context> NewContext(Isolate* isolate,
-                          Local<ObjectTemplate> object_template) {
-  auto context = Context::New(isolate, nullptr, object_template);
+                          Local<ObjectTemplate> object_template, bool create) {
+  auto context = create ? Context::New(isolate, nullptr, object_template) : isolate->GetEnteredOrMicrotaskContext();
   if (context.IsEmpty()) return context;
 
   if (InitializeContext(context).IsNothing()) {
