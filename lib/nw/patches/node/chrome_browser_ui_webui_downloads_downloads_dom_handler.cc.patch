diff -r -u --color up/chromium/chrome/browser/ui/webui/downloads/downloads_dom_handler.cc nw/chromium/chrome/browser/ui/webui/downloads/downloads_dom_handler.cc
--- up/chromium/chrome/browser/ui/webui/downloads/downloads_dom_handler.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/chrome/browser/ui/webui/downloads/downloads_dom_handler.cc	2023-02-24 20:54:08.540513463 +0000
@@ -187,6 +187,7 @@
 
 void DownloadsDOMHandler::DiscardDangerous(const std::string& id) {
   CountDownloadsDOMEvents(DOWNLOADS_DOM_EVENT_DISCARD_DANGEROUS);
+#if 0
   download::DownloadItem* download = GetDownloadByStringId(id);
   if (download) {
     // The warning action event needs to be added before Safe Browsing report is
@@ -218,6 +219,7 @@
       }
     }
   }
+#endif
   RemoveDownloadInArgs(id);
 }
 
@@ -411,7 +413,7 @@
   if (download) {
     DownloadItemModel model(download);
     model.SetOpenWhenComplete(true);
-#if BUILDFLAG(FULL_SAFE_BROWSING)
+#if 0 //BUILDFLAG(FULL_SAFE_BROWSING)
     model.CompleteSafeBrowsingScan();
 #endif
   }
@@ -425,11 +427,13 @@
   }
 
   CountDownloadsDOMEvents(DOWNLOADS_DOM_EVENT_REVIEW_DANGEROUS);
+#if 0
   download::DownloadItem* download = GetDownloadByStringId(id);
   if (download) {
     DownloadItemModel model(download);
     model.ReviewScanningVerdict(GetWebUIWebContents());
   }
+#endif
 }
 
 // DownloadsDOMHandler, private: --------------------------------------------
@@ -458,12 +462,14 @@
 
 void DownloadsDOMHandler::ShowDangerPrompt(
     download::DownloadItem* dangerous_item) {
+#if 0
   DownloadDangerPrompt* danger_prompt = DownloadDangerPrompt::Create(
       dangerous_item, GetWebUIWebContents(), false,
       base::BindOnce(&DownloadsDOMHandler::DangerPromptDone,
                      weak_ptr_factory_.GetWeakPtr(), dangerous_item->GetId()));
   // danger_prompt will delete itself.
   DCHECK(danger_prompt);
+#endif
 }
 
 void DownloadsDOMHandler::DangerPromptDone(
