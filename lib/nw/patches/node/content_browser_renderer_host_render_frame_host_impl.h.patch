diff -r -u --color up/chromium/content/browser/renderer_host/render_frame_host_impl.h nw/chromium/content/browser/renderer_host/render_frame_host_impl.h
--- up/chromium/content/browser/renderer_host/render_frame_host_impl.h	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/content/browser/renderer_host/render_frame_host_impl.h	2023-02-24 06:16:27.960479559 +0000
@@ -377,6 +377,8 @@
                              size_t max_nodes,
                              const base::TimeDelta& timeout) override;
   void RequestDistilledAXTree(AXTreeDistillerCallback callback) override;
+  bool nodejs() override;
+  bool context_created() override;
   SiteInstanceImpl* GetSiteInstance() const override;
   RenderProcessHost* GetProcess() const override;
   GlobalRenderFrameHostId GetGlobalId() const override;
@@ -2355,6 +2357,7 @@
                          WindowOpenDisposition disposition,
                          blink::mojom::WindowFeaturesPtr window_features,
                          bool user_gesture,
+                         const std::u16string& manifest,
                          ShowCreatedWindowCallback callback) override;
   void SetWindowRect(const gfx::Rect& bounds,
                      SetWindowRectCallback callback) override;
@@ -2996,8 +2999,9 @@
   // itself.
   // This does not consider inner frame trees (i.e. not accounting for fenced
   // frames, portals or GuestView).
+ public:
   bool IsDescendantOfWithinFrameTree(RenderFrameHostImpl* ancestor);
-
+ private:
   // mojom::FrameHost:
   void CreateNewWindow(mojom::CreateNewWindowParamsPtr params,
                        CreateNewWindowCallback callback) override;
@@ -3073,6 +3077,8 @@
   void HandleAXLocationChanges(
       const ui::AXTreeID& tree_id,
       std::vector<blink::mojom::LocationChangesPtr> changes);
+  void SetNodeJS(bool node) override;
+  void SetContextCreated(bool created) override;
 
   // mojom::DomAutomationControllerHost:
   void DomOperationResponse(const std::string& json_string) override;
@@ -3952,6 +3958,10 @@
   };
   RenderFrameState render_frame_state_ = RenderFrameState::kNeverCreated;
 
+  bool nodejs_;
+
+  bool context_created_;
+
   // When the last BeforeUnload message was sent.
   base::TimeTicks send_before_unload_start_time_;
 
