diff -r -u --color up/chromium/chrome/browser/ui/browser_window_state.cc nw/chromium/chrome/browser/ui/browser_window_state.cc
--- up/chromium/chrome/browser/ui/browser_window_state.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/chrome/browser/ui/browser_window_state.cc	2023-02-24 20:54:08.292514606 +0000
@@ -4,6 +4,8 @@
 
 #include "chrome/browser/ui/browser_window_state.h"
 
+#include "content/nw/src/nw_base.h"
+
 #include <stddef.h>
 
 #include <utility>
@@ -51,6 +53,8 @@
 }  // namespace
 
 std::string GetWindowName(const Browser* browser) {
+  if (browser->is_type_popup() && !browser->windows_key().empty())
+    return browser->windows_key();
   switch (browser->type()) {
     case Browser::TYPE_NORMAL:
 #if BUILDFLAG(IS_CHROMEOS_ASH)
@@ -117,11 +121,16 @@
 }
 
 bool SavedBoundsAreContentBounds(const Browser* browser) {
+  return !browser->is_type_devtools();
+#if 0
   // Applications other than web apps (such as devtools) save their window size.
   // Web apps, on the other hand, have the same behavior as popups, and save
   // their content bounds.
   return !browser->is_type_normal() && !browser->is_type_devtools() &&
          !browser->is_trusted_source();
+  // bounds should be content bounds for NW.js apps
+         //!browser->is_trusted_source();
+#endif
 }
 
 void SaveWindowPlacement(const Browser* browser,
@@ -151,14 +160,15 @@
   }
 }
 
-void GetSavedWindowBoundsAndShowState(const Browser* browser,
+bool GetSavedWindowBoundsAndShowState(const Browser* browser,
                                       gfx::Rect* bounds,
                                       ui::WindowShowState* show_state) {
   DCHECK(browser);
   DCHECK(bounds);
   DCHECK(show_state);
+
   *bounds = browser->override_bounds();
-  WindowSizer::GetBrowserWindowBoundsAndShowState(*bounds, browser, bounds,
+  bool ret = WindowSizer::GetBrowserWindowBoundsAndShowState(*bounds, browser, bounds,
                                                   show_state);
 
   const base::CommandLine& parsed_command_line =
@@ -166,6 +176,7 @@
 
   internal::UpdateWindowBoundsAndShowStateFromCommandLine(parsed_command_line,
                                                           bounds, show_state);
+  return ret;
 }
 
 namespace internal {
