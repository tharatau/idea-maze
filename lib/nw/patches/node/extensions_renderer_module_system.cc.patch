diff -r -u --color up/chromium/extensions/renderer/module_system.cc nw/chromium/extensions/renderer/module_system.cc
--- up/chromium/extensions/renderer/module_system.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/extensions/renderer/module_system.cc	2023-02-24 20:54:13.772489337 +0000
@@ -528,11 +528,11 @@
   CHECK(v8_helpers::IsTrue(maybe));
 }
 
-void ModuleSystem::OnNativeBindingCreated(
+v8::Local<v8::Value> ModuleSystem::OnNativeBindingCreated(
     const std::string& api_name,
     v8::Local<v8::Value> api_bridge_value) {
   DCHECK(!get_internal_api_.IsEmpty());
-  v8::HandleScope scope(GetIsolate());
+  v8::EscapableHandleScope scope(GetIsolate());
   if (source_map_->Contains(api_name)) {
     // We need to load the custom bindings and store them in our modules.
     // Storing them is important so that calls through CallModuleMethod() route
@@ -542,7 +542,7 @@
                     &modules) ||
         !modules->IsObject()) {
       NOTREACHED();
-      return;
+      return v8::Undefined(GetIsolate());
     }
 
     NativesEnabledScope enabled(this);
@@ -550,7 +550,9 @@
         LoadModuleWithNativeAPIBridge(api_name, api_bridge_value);
     SetPrivateProperty(context()->v8_context(), modules.As<v8::Object>(),
                        gin::StringToSymbol(GetIsolate(), api_name), exports);
+    return scope.Escape(exports);
   }
+  return v8::Undefined(GetIsolate());
 }
 
 void ModuleSystem::SetGetInternalAPIHook(
