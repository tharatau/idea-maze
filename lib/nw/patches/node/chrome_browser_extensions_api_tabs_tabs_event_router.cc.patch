diff -r -u --color up/chromium/chrome/browser/extensions/api/tabs/tabs_event_router.cc nw/chromium/chrome/browser/extensions/api/tabs/tabs_event_router.cc
--- up/chromium/chrome/browser/extensions/api/tabs/tabs_event_router.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/api/tabs/tabs_event_router.cc	2023-02-24 20:12:03.280811399 +0000
@@ -150,6 +150,15 @@
   router_->TabUpdated(this, std::move(changed_property_names));
 }
 
+void TabsEventRouter::NWStatusUpdated(content::WebContents* web_contents,
+                                      const std::string& nwstatus) {
+  std::set<std::string> changed_property_names;
+  changed_property_names.insert("nwstatus");
+  TabEntry* entry = GetTabEntry(web_contents);
+  if (entry)
+    TabUpdated(entry, std::move(changed_property_names));
+}
+
 void TabsEventRouter::TabEntry::TitleWasSet(content::NavigationEntry* entry) {
   std::set<std::string> changed_property_names;
   changed_property_names.insert(tabs_constants::kTitleKey);
@@ -192,6 +201,13 @@
   }
 }
 
+void TabsEventRouter::OnBrowserNoLongerActive(Browser* browser) {
+  TabsWindowsAPI* tabs_window_api = TabsWindowsAPI::Get(profile_);
+  if (tabs_window_api) {
+    tabs_window_api->windows_event_router()->OnActiveWindowChanged(NULL);
+  }
+}
+
 void TabsEventRouter::OnTabStripModelChanged(
     TabStripModel* tab_strip_model,
     const TabStripModelChange& change,
