diff -r -u --color up/chromium/chrome/browser/download/download_danger_prompt.cc nw/chromium/chrome/browser/download/download_danger_prompt.cc
--- up/chromium/chrome/browser/download/download_danger_prompt.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/chrome/browser/download/download_danger_prompt.cc	2023-02-24 06:16:20.864059560 +0000
@@ -24,13 +24,15 @@
 using safe_browsing::ClientSafeBrowsingReportRequest;
 
 namespace {
-const char kDownloadDangerPromptPrefix[] = "Download.DownloadDangerPrompt";
+//const char kDownloadDangerPromptPrefix[] = "Download.DownloadDangerPrompt";
+
 }  // namespace
 
 void DownloadDangerPrompt::SendSafeBrowsingDownloadReport(
     ClientSafeBrowsingReportRequest::ReportType report_type,
     bool did_proceed,
     download::DownloadItem* download) {
+#if 0
   ClientDownloadResponse::Verdict download_verdict =
       safe_browsing::DownloadProtectionService::GetDownloadProtectionVerdict(
           download);
@@ -41,11 +43,13 @@
   g_browser_process->safe_browsing_service()->SendDownloadReport(
       download, report_type, did_proceed,
       /*show_download_in_folder=*/absl::nullopt);
+#endif
 }
 
 void DownloadDangerPrompt::RecordDownloadDangerPrompt(
     bool did_proceed,
     const download::DownloadItem& download) {
+#if 0
   int64_t file_type_uma_value =
       safe_browsing::FileTypePolicies::GetInstance()->UmaValueForFile(
           download.GetTargetFilePath());
@@ -61,6 +65,7 @@
                            download::GetDownloadDangerTypeString(danger_type)),
         file_type_uma_value);
   }
+#endif
 }
 
 void DownloadDangerPrompt::RecordDownloadWarningEvent(
