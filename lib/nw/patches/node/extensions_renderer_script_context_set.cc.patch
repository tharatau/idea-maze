diff -r -u --color up/chromium/extensions/renderer/script_context_set.cc nw/chromium/extensions/renderer/script_context_set.cc
--- up/chromium/extensions/renderer/script_context_set.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/extensions/renderer/script_context_set.cc	2023-02-24 06:16:29.124548430 +0000
@@ -67,7 +67,7 @@
   GURL frame_url = ScriptContext::GetDocumentLoaderURLForFrame(frame);
   Feature::Context context_type = ClassifyJavaScriptContext(
       extension, world_id, frame_url, frame->GetDocument().GetSecurityOrigin(),
-      view_type);
+      view_type, frame);
   Feature::Context effective_context_type = ClassifyJavaScriptContext(
       effective_extension, world_id,
       ScriptContext::GetEffectiveDocumentURLForContext(frame, frame_url, true),
@@ -200,7 +200,9 @@
     int32_t world_id,
     const GURL& url,
     const blink::WebSecurityOrigin& origin,
-    mojom::ViewType view_type) {
+    mojom::ViewType view_type,
+    const blink::WebLocalFrame* frame
+                                                             ) {
   // WARNING: This logic must match ProcessMap::GetContextType, as much as
   // possible.
 
@@ -222,7 +224,7 @@
   //    before the SecurityContext is updated with the sandbox flags (after
   //    reading the CSP header), so the caller can't check if the context's
   //    security origin is unique yet.
-  if (ScriptContext::IsSandboxedPage(url))
+  if (ScriptContext::IsSandboxedPage(url) || (frame && frame->isNwDisabledChildFrame()))
     return Feature::WEB_PAGE_CONTEXT;
 
   if (extension && active_extension_ids_->count(extension->id()) > 0) {
