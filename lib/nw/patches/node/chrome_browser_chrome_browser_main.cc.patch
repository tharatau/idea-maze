diff -r -u --color up/chromium/chrome/browser/chrome_browser_main.cc nw/chromium/chrome/browser/chrome_browser_main.cc
--- up/chromium/chrome/browser/chrome_browser_main.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/chrome/browser/chrome_browser_main.cc	2023-02-24 20:54:07.020520472 +0000
@@ -15,6 +15,11 @@
 #include <vector>
 
 #include "ash/constants/ash_features.h"
+
+#include "content/nw/src/browser/nw_chrome_browser_hooks.h"
+#include "content/nw/src/browser/nw_content_browser_hooks.h"
+
+
 #include "base/at_exit.h"
 #include "base/base_switches.h"
 #include "base/bind.h"
@@ -470,6 +475,9 @@
     return;
   }
 
+  if (!nw::ProcessSingletonNotificationCallbackHook(command_line, current_directory))
+    return;
+
   g_browser_process->platform_part()->PlatformSpecificCommandLineProcessing(
       command_line);
 
@@ -643,7 +651,7 @@
   g_browser_process->metrics_service()->StartUpdatingLastLiveTimestamp();
 #endif
 
-  g_browser_process->GetMetricsServicesManager()->UpdateUploadPermissions(true);
+  g_browser_process->GetMetricsServicesManager()->UpdateUploadPermissions(false);
 
 #if BUILDFLAG(ENABLE_PROCESS_SINGLETON)
   ChromeProcessSingleton::RegisterEarlySingletonFeature();
@@ -802,9 +810,13 @@
   // should be deferred to PreMainMessageLoopRunImpl.
 
   TRACE_EVENT0("startup", "ChromeBrowserMainParts::PreCreateThreads");
+
   result_code_ = PreCreateThreadsImpl();
 
   if (result_code_ == content::RESULT_CODE_NORMAL_EXIT) {
+    result_code_ = nw::MainPartsPreCreateThreadsHook();
+    if (result_code_ != content::RESULT_CODE_NORMAL_EXIT)
+      return result_code_;
     // These members must be initialized before exiting this function normally.
 #if !BUILDFLAG(IS_ANDROID)
     DCHECK(browser_creator_.get());
@@ -1143,6 +1155,8 @@
 
   result_code_ = PreMainMessageLoopRunImpl();
 
+  nw::MainPartsPreMainMessageLoopRunHook();
+
   for (auto& chrome_extra_part : chrome_extra_parts_)
     chrome_extra_part->PreMainMessageLoopRun();
 
@@ -1265,8 +1279,8 @@
 
   language::LanguageUsageMetrics::RecordAcceptLanguages(
       profile->GetPrefs()->GetString(language::prefs::kAcceptLanguages));
-  translate::TranslateMetricsLoggerImpl::LogApplicationStartMetrics(
-      ChromeTranslateClient::CreateTranslatePrefs(profile->GetPrefs()));
+  //translate::TranslateMetricsLoggerImpl::LogApplicationStartMetrics(
+  //    ChromeTranslateClient::CreateTranslatePrefs(profile->GetPrefs()));
 // On ChromeOS results in a crash. https://crbug.com/1151558
 #if !BUILDFLAG(IS_CHROMEOS_ASH)
   language::LanguageUsageMetrics::RecordPageLanguages(
@@ -1566,6 +1580,7 @@
 #endif  // BUILDFLAG(ENABLE_BACKGROUND_MODE)
   // Post-profile init ---------------------------------------------------------
 
+#if 0
   TranslateService::Initialize();
   if (base::FeatureList::IsEnabled(features::kGeoLanguage) ||
       base::FeatureList::IsEnabled(language::kExplicitLanguageAsk) ||
@@ -1574,7 +1589,7 @@
     language::GeoLanguageProvider::GetInstance()->StartUp(
         browser_process_->local_state());
   }
-
+#endif
   // Needs to be done before PostProfileInit, since login manager on CrOS is
   // called inside PostProfileInit.
   content::WebUIControllerFactory::RegisterFactory(
@@ -1607,7 +1622,7 @@
   // Call `PostProfileInit()`and set it up for profiles created later.
   profile_init_manager_ = std::make_unique<ProfileInitManager>(this, profile);
 
-#if !BUILDFLAG(IS_ANDROID) && !BUILDFLAG(IS_CHROMEOS_ASH)
+#if 0 //!BUILDFLAG(IS_ANDROID) && !BUILDFLAG(IS_CHROMEOS_ASH)
   // Execute first run specific code after the PrefService has been initialized
   // and preferences have been registered since some of the import code depends
   // on preferences.
@@ -1663,7 +1678,7 @@
   //
   // This can't be created in the BrowserProcessImpl constructor because it
   // needs to read prefs that get set after that runs.
-  browser_process_->intranet_redirect_detector();
+  //browser_process_->intranet_redirect_detector();
 #endif
 
 #if BUILDFLAG(ENABLE_PRINT_PREVIEW) && !defined(OFFICIAL_BUILD)
@@ -1879,7 +1894,7 @@
   for (auto& chrome_extra_part : chrome_extra_parts_)
     chrome_extra_part->PostMainMessageLoopRun();
 
-  TranslateService::Shutdown();
+  //TranslateService::Shutdown();
 
 #if BUILDFLAG(ENABLE_PROCESS_SINGLETON)
   if (notify_result_ == ProcessSingleton::PROCESS_NONE)
@@ -1957,6 +1972,8 @@
 
   device_event_log::Shutdown();
 
+  nw::MainPartsPostDestroyThreadsHook();
+
 #if BUILDFLAG(IS_CHROMEOS_ASH)
   ash::HWDataUsageController::Shutdown();
   arc::StabilityMetricsManager::Shutdown();
