diff -r -u --color up/chromium/third_party/blink/renderer/bindings/core/v8/custom/v8_window_custom.cc nw/chromium/third_party/blink/renderer/bindings/core/v8/custom/v8_window_custom.cc
--- up/chromium/third_party/blink/renderer/bindings/core/v8/custom/v8_window_custom.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/third_party/blink/renderer/bindings/core/v8/custom/v8_window_custom.cc	2023-02-24 06:16:33.228791103 +0000
@@ -60,6 +60,9 @@
 #include "third_party/blink/renderer/platform/bindings/v8_set_return_value.h"
 #include "third_party/blink/renderer/platform/instrumentation/use_counter.h"
 
+
+#include "third_party/blink/renderer/bindings/core/v8/v8_html_frame_element.h"
+
 namespace blink {
 
 template <typename CallbackInfo>
@@ -110,11 +113,90 @@
   LocationAttributeGet(info);
 }
 
+
+template <typename CallbackInfo>
+static void ParentAttributeGet(const CallbackInfo& info)
+{
+  v8::Local<v8::Object> v8_win = info.Holder();
+  DOMWindow* blink_win = V8Window::ToWrappableUnsafe(v8_win);
+  const char* const property_name = "parent";
+  blink_win->ReportCoopAccess(property_name);
+  DOMWindow* return_value = blink_win->parent();
+  if (blink_win->IsLocalDOMWindow()) {
+    LocalDOMWindow* imp = To<LocalDOMWindow>(V8Window::ToImpl(info.Holder()));
+    LocalFrame* frame = imp->GetFrame();
+    if (frame && frame->isNwFakeTop()) {
+      V8SetReturnValue(info, ToV8(imp, info.Holder(), info.GetIsolate()));
+      return;
+    }
+    V8SetReturnValue(info, ToV8(imp->parent(), info.Holder(), info.GetIsolate()));
+  } else {
+    V8SetReturnValue(info, return_value, blink_win,
+                     bindings::V8ReturnValue::kMaybeCrossOriginWindow);
+  }
+}
+
+template <typename CallbackInfo>
+static void TopAttributeGet(const CallbackInfo& info)
+{
+  v8::Local<v8::Object> v8_win = info.Holder();
+  DOMWindow* blink_win = V8Window::ToWrappableUnsafe(v8_win);
+  const char* const property_name = "top";
+  blink_win->ReportCoopAccess(property_name);
+  DOMWindow* return_value = blink_win->top();
+  if (blink_win->IsLocalDOMWindow()) {
+    LocalDOMWindow* imp = To<LocalDOMWindow>(V8Window::ToImpl(info.Holder()));
+    LocalFrame* frame = imp->GetFrame();
+    if (frame) {
+      for (LocalFrame* f = frame; f; ) {
+        if (f->isNwFakeTop()) {
+          V8SetReturnValue(info, ToV8(f->GetDocument()->domWindow(), info.Holder(), info.GetIsolate()));
+          return;
+        }
+        Frame* fr = f->Tree().Parent();
+        if (!fr || !fr->IsLocalFrame())
+          break;
+        f = DynamicTo<LocalFrame>(fr);
+      }
+    }
+    V8SetReturnValue(info, ToV8(imp->top(), info.Holder(), info.GetIsolate()));
+  } else {
+    V8SetReturnValue(info, return_value, blink_win,
+                     bindings::V8ReturnValue::kMaybeCrossOriginWindow);
+  }
+}
+
+void V8Window::ParentAttributeGetterCustom(
+    const v8::FunctionCallbackInfo<v8::Value>& info) {
+  ParentAttributeGet(info);
+}
+
+void V8Window::ParentAttributeGetterCustom(
+    const v8::PropertyCallbackInfo<v8::Value>& info) {
+  ParentAttributeGet(info);
+}
+
+void V8Window::TopAttributeGetterCustom(
+    const v8::FunctionCallbackInfo<v8::Value>& info) {
+  ParentAttributeGet(info);
+}
+
+void V8Window::TopAttributeGetterCustom(
+    const v8::PropertyCallbackInfo<v8::Value>& info) {
+  ParentAttributeGet(info);
+}
+
+
 void V8Window::FrameElementAttributeGetterCustom(
     const v8::FunctionCallbackInfo<v8::Value>& info) {
   LocalDOMWindow* impl = To<LocalDOMWindow>(V8Window::ToImpl(info.Holder()));
   Element* frameElement = impl->frameElement();
 
+  LocalFrame* frame = impl->GetFrame();
+  if (frame && frame->isNwFakeTop()) {
+    V8SetReturnValueNull(info);
+    return;
+  }
   if (!BindingSecurity::ShouldAllowAccessTo(
           CurrentDOMWindow(info.GetIsolate()), frameElement,
           BindingSecurity::ErrorReportOption::kDoNotReport)) {
