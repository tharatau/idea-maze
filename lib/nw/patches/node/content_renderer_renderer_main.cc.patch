diff -r -u --color up/chromium/content/renderer/renderer_main.cc nw/chromium/content/renderer/renderer_main.cc
--- up/chromium/content/renderer/renderer_main.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/content/renderer/renderer_main.cc	2023-02-24 06:16:28.216494706 +0000
@@ -4,7 +4,7 @@
 
 #include <stddef.h>
 #include <utility>
-
+#include "base/files/file_util.h"
 #include "base/base_switches.h"
 #include "base/command_line.h"
 #include "base/debug/debugger.h"
@@ -12,6 +12,7 @@
 #include "base/feature_list.h"
 #include "base/i18n/rtl.h"
 #include "base/message_loop/message_pump.h"
+#include "base/message_loop/message_pump_uv.h"
 #include "base/message_loop/message_pump_type.h"
 #include "base/metrics/histogram_functions.h"
 #include "base/metrics/histogram_macros.h"
@@ -50,6 +51,7 @@
 #include "third_party/icu/source/i18n/unicode/timezone.h"
 #include "third_party/webrtc_overrides/init_webrtc.h"  // nogncheck
 #include "ui/base/ui_base_switches.h"
+#include "content/nw/src/nw_content.h"
 
 #if BUILDFLAG(IS_ANDROID)
 #include "base/android/library_loader/library_loader_hooks.h"
@@ -63,6 +65,7 @@
 #include "base/mac/scoped_nsautorelease_pool.h"
 #include "base/message_loop/message_pump_mac.h"
 #include "third_party/blink/public/web/web_view.h"
+#include "base/message_loop/message_pumpuv_mac.h"
 #endif  // BUILDFLAG(IS_MAC)
 
 #if BUILDFLAG(IS_CHROMEOS_ASH)
@@ -88,6 +91,17 @@
 #endif
 
 namespace content {
+
+#if defined(__clang__)
+#pragma clang diagnostic push
+#pragma clang diagnostic ignored "-Wexit-time-destructors"
+#endif
+CONTENT_EXPORT base::FilePath g_nw_temp_dir;
+CONTENT_EXPORT base::FilePath g_nw_old_cwd;
+#if defined(__clang__)
+#pragma clang diagnostic pop
+#endif
+
 namespace {
 
 // This function provides some ways to test crash and assertion handling
@@ -100,17 +114,30 @@
     WaitForDebugger("Renderer");
 }
 
-std::unique_ptr<base::MessagePump> CreateMainThreadMessagePump() {
+std::unique_ptr<base::MessagePump> CreateMainThreadMessagePump(bool nwjs) {
 #if BUILDFLAG(IS_MAC)
   // As long as scrollbars on Mac are painted with Cocoa, the message pump
   // needs to be backed by a Foundation-level loop to process NSTimers. See
   // http://crbug.com/306348#c24 for details.
-  return base::MessagePump::Create(base::MessagePumpType::NS_RUNLOOP);
+  base::MessagePump* p;
+  if (nwjs) {
+    p = new base::MessagePumpUVNSRunLoop();
+  } else
+    p = new base::MessagePumpNSRunLoop();
+  std::unique_ptr<base::MessagePump> pump(p);
+  return pump;
+
 #elif BUILDFLAG(IS_FUCHSIA)
   // Allow FIDL APIs on renderer main thread.
   return base::MessagePump::Create(base::MessagePumpType::IO);
 #else
-  return base::MessagePump::Create(base::MessagePumpType::DEFAULT);
+  base::MessagePump* p;
+  if (nwjs) {
+    p = new base::MessagePumpUV();
+    std::unique_ptr<base::MessagePump> pump(p);
+    return pump;
+  } else
+    return base::MessagePump::Create(base::MessagePumpType::DEFAULT);
 #endif
 }
 
@@ -147,6 +174,11 @@
 
   const base::CommandLine& command_line = *parameters.command_line;
 
+  bool nwjs = command_line.HasSwitch(switches::kNWJS);
+
+  if (nwjs)
+    nw::LoadNodeSymbols();
+
 #if BUILDFLAG(IS_MAC)
   base::mac::ScopedNSAutoreleasePool* pool = parameters.autorelease_pool;
 #endif  // BUILDFLAG(IS_MAC)
@@ -217,7 +249,7 @@
   blink::Platform::InitializeBlink();
   std::unique_ptr<blink::scheduler::WebThreadScheduler> main_thread_scheduler =
       blink::scheduler::WebThreadScheduler::CreateMainThreadScheduler(
-          CreateMainThreadMessagePump());
+          CreateMainThreadMessagePump(nwjs));
 
   platform.PlatformInitialize();
 
@@ -330,6 +362,12 @@
       run_loop.Run();
     }
 
+    if (!g_nw_temp_dir.empty()) {
+      base::SetCurrentDirectory(g_nw_temp_dir.DirName());
+      if (base::StartsWith(g_nw_temp_dir.BaseName().value(), FILE_PATH_LITERAL("nw"),
+                           base::CompareCase::SENSITIVE))
+        base::DeleteFile(g_nw_temp_dir);
+    }
 #if defined(LEAK_SANITIZER)
     // Run leak detection before RenderProcessImpl goes out of scope. This helps
     // ignore shutdown-only leaks.
