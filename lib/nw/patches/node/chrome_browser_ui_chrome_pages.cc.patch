diff -r -u --color up/chromium/chrome/browser/ui/chrome_pages.cc nw/chromium/chrome/browser/ui/chrome_pages.cc
--- up/chromium/chrome/browser/ui/chrome_pages.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/chrome/browser/ui/chrome_pages.cc	2023-02-24 20:12:04.408822885 +0000
@@ -77,7 +77,7 @@
 namespace chrome {
 namespace {
 
-const char kHashMark[] = "#";
+//const char kHashMark[] = "#";
 
 void FocusWebContents(Browser* browser) {
   auto* const contents = browser->tab_strip_model()->GetActiveWebContents();
@@ -175,6 +175,7 @@
 #endif  // BUILDFLAG(IS_CHROMEOS_ASH) && BUILDFLAG(GOOGLE_CHROME_BRANDING)
 }
 
+#if 0
 std::string GenerateContentSettingsExceptionsSubPage(ContentSettingsType type) {
   // In MD Settings, the exceptions no longer have a separate subpage.
   // This list overrides the group names defined in site_settings_helper for the
@@ -201,6 +202,7 @@
                            ? site_settings::ContentSettingsTypeToGroupName(type)
                            : it->second});
 }
+#endif
 
 void ShowSiteSettingsImpl(Browser* browser, Profile* profile, const GURL& url) {
   // If a valid non-file origin, open a settings page specific to the current
@@ -400,15 +402,19 @@
 
 void ShowContentSettingsExceptions(Browser* browser,
                                    ContentSettingsType content_settings_type) {
+#if 0
   ShowSettingsSubPage(
       browser, GenerateContentSettingsExceptionsSubPage(content_settings_type));
+#endif
 }
 
 void ShowContentSettingsExceptionsForProfile(
     Profile* profile,
     ContentSettingsType content_settings_type) {
+#if 0
   ShowSettingsSubPageForProfile(
       profile, GenerateContentSettingsExceptionsSubPage(content_settings_type));
+#endif
 }
 
 void ShowSiteSettings(Browser* browser, const GURL& url) {
@@ -422,10 +428,12 @@
 
 void ShowContentSettings(Browser* browser,
                          ContentSettingsType content_settings_type) {
+#if 0
   ShowSettingsSubPage(
       browser, base::StrCat({kContentSettingsSubPage, kHashMark,
                              site_settings::ContentSettingsTypeToGroupName(
                                  content_settings_type)}));
+#endif
 }
 
 void ShowClearBrowsingDataDialog(Browser* browser) {
