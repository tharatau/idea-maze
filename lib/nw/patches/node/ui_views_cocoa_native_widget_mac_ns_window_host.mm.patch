diff -r -u --color up/chromium/ui/views/cocoa/native_widget_mac_ns_window_host.mm nw/chromium/ui/views/cocoa/native_widget_mac_ns_window_host.mm
--- up/chromium/ui/views/cocoa/native_widget_mac_ns_window_host.mm	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/ui/views/cocoa/native_widget_mac_ns_window_host.mm	2023-02-24 06:16:56.254108850 +0000
@@ -537,6 +537,12 @@
     GetNSWindowMojo()->ExitFullscreen();
 }
 
+bool NativeWidgetMacNSWindowHost::IsMaximized() const {
+  bool maximized = false;
+  GetNSWindowMojo()->IsMaximized(&maximized);
+  return maximized && !is_miniaturized_;
+}
+
 void NativeWidgetMacNSWindowHost::SetRootView(views::View* root_view) {
   root_view_ = root_view;
   if (root_view_) {
@@ -663,6 +669,11 @@
 gfx::Rect NativeWidgetMacNSWindowHost::GetRestoredBounds() const {
   if (target_fullscreen_state_ || in_fullscreen_transition_)
     return window_bounds_before_fullscreen_;
+  if (IsMaximized()) {
+    gfx::Rect ret;
+    if (GetNSWindowMojo()->GetRestoredBounds(&ret))
+      return ret;
+  }
   return window_bounds_in_screen_;
 }
 
@@ -1322,6 +1333,10 @@
 bool NativeWidgetMacNSWindowHost::OnWindowCloseRequested(
     bool* can_window_close) {
   *can_window_close = true;
+  if (root_view_ && !root_view_->GetWidget()->NWCanClose()) {
+    *can_window_close = false;
+    return true;
+  }
   views::NonClientView* non_client_view =
       root_view_ ? root_view_->GetWidget()->non_client_view() : nullptr;
   if (non_client_view)
