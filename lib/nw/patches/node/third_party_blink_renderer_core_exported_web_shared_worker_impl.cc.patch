diff -r -u --color up/chromium/third_party/blink/renderer/core/exported/web_shared_worker_impl.cc nw/chromium/third_party/blink/renderer/core/exported/web_shared_worker_impl.cc
--- up/chromium/third_party/blink/renderer/core/exported/web_shared_worker_impl.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/third_party/blink/renderer/core/exported/web_shared_worker_impl.cc	2023-02-24 20:54:17.720467851 +0000
@@ -40,6 +40,17 @@
 #include "third_party/blink/public/common/loader/worker_main_script_load_parameters.h"
 #include "third_party/blink/public/common/origin_trials/trial_token_validator.h"
 #include "third_party/blink/public/mojom/browser_interface_broker.mojom-blink.h"
+
+#include "third_party/node-nw/src/node_webkit.h"
+#define BLINK_HOOK_MAP(type, sym, fn) extern type fn;
+#if defined(COMPONENT_BUILD) && defined(WIN32)
+#define NW_HOOK_MAP(type, sym, fn) BASE_EXPORT type fn;
+#else
+#define NW_HOOK_MAP(type, sym, fn) extern type fn;
+#endif
+#include "content/nw/src/common/node_hooks.h"
+#undef NW_HOOK_MAP
+
 #include "third_party/blink/public/mojom/devtools/devtools_agent.mojom-blink.h"
 #include "third_party/blink/public/mojom/loader/fetch_client_settings_object.mojom-blink.h"
 #include "third_party/blink/public/mojom/script/script_type.mojom-blink.h"
@@ -189,7 +200,7 @@
   scope->Connect(std::move(channel));
 }
 
-void WebSharedWorkerImpl::StartWorkerContext(
+void WebSharedWorkerImpl::StartWorkerContext(bool nodejs, const base::FilePath& root_path,
     const WebURL& script_request_url,
     mojom::blink::ScriptType script_type,
     network::mojom::CredentialsMode credentials_mode,
@@ -217,6 +228,15 @@
   DCHECK(web_worker_fetch_context);
   CHECK(constructor_origin.Get()->CanAccessSharedWorkers());
 
+  nodejs_ = nodejs;
+  root_path_ = root_path;
+
+  std::string main_script = root_path_.AsUTF8Unsafe();
+  KURL req_url = script_request_url;
+  if (g_web_worker_start_thread_fn && nodejs_) {
+    (*g_web_worker_start_thread_fn)(nullptr, (void*)req_url.GetPath().Utf8().data(), &main_script, &nodejs_);
+  }
+
   // Creates 'outside settings' used in the "Processing model" algorithm in the
   // HTML spec:
   // https://html.spec.whatwg.org/C/#worker-processing-model
@@ -265,7 +285,7 @@
   // Some params (e.g. address space) passed to GlobalScopeCreationParams are
   // dummy values. They will be updated after worker script fetch on the worker
   // thread.
-  auto creation_params = std::make_unique<GlobalScopeCreationParams>(
+  auto creation_params = std::make_unique<GlobalScopeCreationParams>(nodejs_, main_script,
       script_request_url, script_type, name,
       full_ua_enabled ? full_user_agent
                       : (reduced_ua_enabled ? reduced_user_agent : user_agent),
@@ -342,6 +362,8 @@
 }
 
 std::unique_ptr<WebSharedWorker> WebSharedWorker::CreateAndStart(
+                                                                 bool nodejs,
+                                                                 const base::FilePath& main_script,
     const blink::SharedWorkerToken& token,
     const WebURL& script_request_url,
     mojom::blink::ScriptType script_type,
@@ -370,7 +392,7 @@
     ukm::SourceId ukm_source_id) {
   auto worker =
       base::WrapUnique(new WebSharedWorkerImpl(token, std::move(host), client));
-  worker->StartWorkerContext(
+  worker->StartWorkerContext(nodejs, main_script,
       script_request_url, script_type, credentials_mode, name,
       constructor_origin, is_constructor_secure_context, user_agent,
       full_user_agent, reduced_user_agent, ua_metadata,
