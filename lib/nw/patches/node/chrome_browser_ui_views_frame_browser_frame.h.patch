diff -r -u --color up/chromium/chrome/browser/ui/views/frame/browser_frame.h nw/chromium/chrome/browser/ui/views/frame/browser_frame.h
--- up/chromium/chrome/browser/ui/views/frame/browser_frame.h	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/chrome/browser/ui/views/frame/browser_frame.h	2023-02-24 06:16:22.472154789 +0000
@@ -56,7 +56,7 @@
 // This is a virtual interface that allows system specific browser frames.
 class BrowserFrame : public views::Widget, public views::ContextMenuController {
  public:
-  explicit BrowserFrame(BrowserView* browser_view);
+  explicit BrowserFrame(BrowserView* browser_view, bool frameless = false);
 
   BrowserFrame(const BrowserFrame&) = delete;
   BrowserFrame& operator=(const BrowserFrame&) = delete;
@@ -72,7 +72,7 @@
 #endif
 
   // Initialize the frame (creates the underlying native window).
-  void InitBrowserFrame();
+  bool InitBrowserFrame();
 
   // Determine the distance of the left edge of the minimize button from the
   // left edge of the window. Used in our Non-Client View's Layout.
@@ -157,6 +157,7 @@
   void SetTabDragKind(TabDragKind tab_drag_kind);
   TabDragKind tab_drag_kind() const { return tab_drag_kind_; }
 
+  bool frameless() { return frameless_; }
  protected:
   // views::Widget:
   ui::ColorProviderManager::Key GetColorProviderKey() const override;
@@ -173,6 +174,7 @@
   // Regenerate the frame on theme change if necessary. Returns true if
   // regenerated.
   bool RegenerateFrameOnThemeChange(BrowserThemeChangeType theme_change_type);
+  bool frameless_;
 
   // Returns whether the browser should always use the dark theme no matter user
   // makes any selection.
