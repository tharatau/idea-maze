diff -r -u --color up/chromium/chrome/browser/extensions/api/tabs/windows_event_router.cc nw/chromium/chrome/browser/extensions/api/tabs/windows_event_router.cc
--- up/chromium/chrome/browser/extensions/api/tabs/windows_event_router.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/api/tabs/windows_event_router.cc	2023-02-24 06:16:20.984066667 +0000
@@ -280,6 +280,44 @@
 }
 #endif
 
+void WindowsEventRouter::OnWindowMove(WindowController* window_controller) {
+  if (!HasEventListener(windows::OnMove::kEventName))
+    return;
+  if (!window_controller)
+    return;
+  if (!profile_->IsSameOrParent(window_controller->profile()))
+    return;
+  // Ignore any windows without an associated browser (e.g., AppWindows).
+  if (!window_controller->GetBrowser())
+    return;
+
+  base::Value::List args;
+  args.Append(ExtensionTabUtil::CreateWindowValueForExtension(
+      *window_controller->GetBrowser(), nullptr,
+      ExtensionTabUtil::kDontPopulateTabs, Feature::UNSPECIFIED_CONTEXT));
+  DispatchEvent(events::UNKNOWN, windows::OnMove::kEventName,
+                window_controller, std::move(args));
+}
+
+void WindowsEventRouter::OnWindowChanged(WindowController* window_controller) {
+  if (!window_controller)
+    return;
+  if (!HasEventListener(windows::OnWindowChanged::kEventName))
+    return;
+  if (!profile_->IsSameOrParent(window_controller->profile()))
+    return;
+  // Ignore any windows without an associated browser (e.g., AppWindows).
+  if (!window_controller->GetBrowser())
+    return;
+
+  base::Value::List args;
+  args.Append(ExtensionTabUtil::CreateWindowValueForExtension(
+      *window_controller->GetBrowser(), nullptr,
+      ExtensionTabUtil::kDontPopulateTabs, Feature::UNSPECIFIED_CONTEXT));
+  DispatchEvent(events::UNKNOWN, windows::OnWindowChanged::kEventName,
+                window_controller, std::move(args));
+}
+
 void WindowsEventRouter::OnActiveWindowChanged(
     WindowController* window_controller) {
   Profile* window_profile = nullptr;
