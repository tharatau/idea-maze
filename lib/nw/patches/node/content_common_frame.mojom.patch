diff -r -u --color up/chromium/content/common/frame.mojom nw/chromium/content/common/frame.mojom
--- up/chromium/content/common/frame.mojom	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/content/common/frame.mojom	2023-02-24 06:16:28.096487606 +0000
@@ -3,6 +3,7 @@
 // found in the LICENSE file.
 
 module content.mojom;
+import "mojo/public/mojom/base/string16.mojom";
 
 import "cc/mojom/browser_controls_state.mojom";
 import "content/common/frame_messages.mojom";
@@ -155,6 +156,8 @@
 
   // Base background color of this view. Only used by a local main frame.
   skia.mojom.SkColor? base_background_color;
+
+  bool skip_blocking_parser;
 };
 
 // A union to distinguish between parameters specific to local main frame
@@ -473,6 +476,8 @@
       blink.mojom.RemoteFrameInterfacesFromBrowser new_remote_frame_interfaces,
       blink.mojom.RemoteMainFrameInterfaces new_remote_main_frame_interfaces);
 
+  SetSkipBlockingParser(bool skip);
+
   // Causes all new subresource requests to be blocked (not being started) until
   // ResumeBlockedRequests is called.
   BlockRequests();
@@ -537,6 +542,7 @@
 };
 
 struct CreateNewWindowParams {
+  mojo_base.mojom.String16 nw_window_manifest;
   // True if ContentRendererClient allows popups.  This is the case only for
   // extensions.
   bool allow_popup;
@@ -681,6 +687,8 @@
 // Implemented by the frame server (i.e. the browser process). For messages that
 // must be associated with the IPC channel.
 interface FrameHost {
+  SetNodeJS(bool node);
+  SetContextCreated(bool created);
   // Sent by the renderer to request the browser to create a new window. |reply|
   // is only non-null on when status == CreateNewWindowStatus::kSuccess.
   [Sync] CreateNewWindow(CreateNewWindowParams params)
