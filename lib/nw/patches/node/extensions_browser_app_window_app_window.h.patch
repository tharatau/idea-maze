diff -r -u --color up/chromium/extensions/browser/app_window/app_window.h nw/chromium/extensions/browser/app_window/app_window.h
--- up/chromium/extensions/browser/app_window/app_window.h	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/extensions/browser/app_window/app_window.h	2023-02-24 20:12:10.236872626 +0000
@@ -38,6 +38,10 @@
 class WebContents;
 }  // namespace content
 
+namespace nw {
+class Menu;
+}
+
 namespace extensions {
 
 class AppDelegate;
@@ -63,7 +67,9 @@
   // Called to initialize the WebContents, before the app window is created.
   virtual void Initialize(content::BrowserContext* context,
                           content::RenderFrameHost* creator_frame,
-                          const GURL& url) = 0;
+                          const GURL& url,
+                          const Extension* extension,
+                          bool skip_blocking_parser) = 0;
 
   // Called to load the contents, after the app window is created.
   virtual void LoadContents(int32_t creator_process_id) = 0;
@@ -101,6 +107,12 @@
     FRAME_NONE,    // Frameless window.
   };
 
+  enum Position {
+    POS_NONE,
+    POS_CENTER,
+    POS_MOUSE,
+  };
+
   enum FullscreenType {
     // Not fullscreen.
     FULLSCREEN_TYPE_NONE = 0,
@@ -200,6 +212,20 @@
     // Icon URL to be used for setting the window icon.
     GURL window_icon_url;
 
+    bool skip_load;
+
+    bool show_in_taskbar;
+    bool new_instance;
+    bool skip_block_parser;
+
+    Position position;
+
+    std::string title;
+
+    std::string inject_js_start, inject_js_end;
+
+    gfx::Image icon;
+
     // The API enables developers to specify content or window bounds. This
     // function combines them into a single, constrained window size.
     gfx::Rect GetInitialWindowBounds(const gfx::Insets& frame_insets) const;
@@ -242,9 +268,12 @@
   WindowType window_type() const { return window_type_; }
   content::BrowserContext* browser_context() const { return browser_context_; }
   const gfx::Image& custom_app_icon() const { return custom_app_icon_; }
+  const gfx::Image& icon_override() const { return icon_override_; }
   const GURL& app_icon_url() const { return app_icon_url_; }
   const GURL& initial_url() const { return initial_url_; }
   bool is_hidden() const { return is_hidden_; }
+  const std::string& title_override() const { return title_override_; }
+  void set_title_override(const std::string& title) { title_override_ = title; }
 
   // Calls to this should always be guarded by a nullptr check as this can
   // return nullptr if the extension is no longer installed.
@@ -253,6 +282,8 @@
   NativeAppWindow* GetBaseWindow();
   gfx::NativeWindow GetNativeWindow();
 
+  bool NWCanClose(bool user_force = false) const;
+
   // Returns the bounds that should be reported to the renderer.
   gfx::Rect GetClientBounds() const;
 
@@ -322,6 +353,8 @@
   void Minimize();
   void Restore();
 
+  void SetShowInTaskbar(bool);
+
   // Transitions to OS fullscreen. See FULLSCREEN_TYPE_OS for more details.
   void OSFullscreen();
 
@@ -384,6 +417,7 @@
       std::unique_ptr<AppWindowContents> contents) {
     app_window_contents_ = std::move(contents);
   }
+  nw::Menu* menu_;
 
   void SetNativeAppWindowForTesting(
       std::unique_ptr<NativeAppWindow> native_app_window) {
@@ -401,6 +435,10 @@
 
   // content::WebContentsDelegate implementation.
   void ActivateContents(content::WebContents* contents) override;
+  void LoadingStateChanged(content::WebContents* source,
+                           bool to_different_document) override;
+  content::JavaScriptDialogManager* GetJavaScriptDialogManager(
+      content::WebContents* source) override;
   void CloseContents(content::WebContents* contents) override;
   bool ShouldSuppressDialogs(content::WebContents* source) override;
   void RunFileChooser(content::RenderFrameHost* render_frame_host,
@@ -525,6 +563,8 @@
   // not own this object.
   raw_ptr<content::BrowserContext> browser_context_;
 
+  std::string title_override_;
+
   const std::string extension_id_;
 
   // Identifier that is used when saving and restoring geometry for this
@@ -536,6 +576,7 @@
 
   // Custom icon shown in the task bar or in Chrome OS shelf.
   gfx::Image custom_app_icon_;
+  gfx::Image icon_override_;
 
   // Icon URL to be used for setting the app icon. If not empty, app_icon_ will
   // be fetched and set using this URL.
@@ -576,6 +617,8 @@
   // Whether |is_ime_window| was set in the CreateParams.
   bool is_ime_window_ = false;
 
+  bool last_to_different_document_ = false;
+
   // Whether |show_on_lock_screen| was set in the CreateParams.
   bool show_on_lock_screen_ = false;
 
