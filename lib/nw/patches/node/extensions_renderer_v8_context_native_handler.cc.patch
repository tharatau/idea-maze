diff -r -u --color up/chromium/extensions/renderer/v8_context_native_handler.cc nw/chromium/extensions/renderer/v8_context_native_handler.cc
--- up/chromium/extensions/renderer/v8_context_native_handler.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/extensions/renderer/v8_context_native_handler.cc	2023-02-24 06:16:29.128548666 +0000
@@ -35,8 +35,21 @@
   v8::Isolate* isolate = args.GetIsolate();
   std::string api_name = *v8::String::Utf8Value(isolate, args[0]);
   Feature::Availability availability = context_->GetAvailability(api_name);
-
   v8::Local<v8::Context> context = context_->v8_context();
+
+  if (api_name == "app.window" || api_name == "nw.Window" ||
+      api_name == "runtime") {
+  v8::Local<v8::Object> ret = v8::Object::New(isolate);
+  ret->Set(context, v8::String::NewFromUtf8(isolate, "is_available", v8::NewStringType::kNormal).ToLocalChecked(),
+           v8::Boolean::New(isolate, true)).ToChecked();
+  ret->Set(context, v8::String::NewFromUtf8(isolate, "message", v8::NewStringType::kNormal).ToLocalChecked(),
+           v8::String::NewFromUtf8(isolate, "", v8::NewStringType::kNormal).ToLocalChecked()).ToChecked();
+  ret->Set(context, v8::String::NewFromUtf8(isolate, "result", v8::NewStringType::kNormal).ToLocalChecked(),
+           v8::Integer::New(isolate, Feature::IS_AVAILABLE)).ToChecked();
+  args.GetReturnValue().Set(ret);
+  return;
+  }
+
   v8::Local<v8::Object> ret = v8::Object::New(isolate);
   v8::Maybe<bool> maybe = ret->SetPrototype(context, v8::Null(isolate));
   CHECK(maybe.IsJust() && maybe.FromJust());
