diff -r -u --color up/chromium/extensions/browser/event_router.cc nw/chromium/extensions/browser/event_router.cc
--- up/chromium/extensions/browser/event_router.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/extensions/browser/event_router.cc	2023-02-24 20:12:10.240872659 +0000
@@ -758,8 +758,10 @@
 
 bool EventRouter::ExtensionHasEventListener(
     const std::string& extension_id,
-    const std::string& event_name) const {
-  return listeners_.HasListenerForExtension(extension_id, event_name);
+    const std::string& event_name,
+    int instance_id,
+    std::string* out_extension_id) const {
+  return listeners_.HasListenerForExtension(extension_id, event_name, instance_id, out_extension_id);
 }
 
 bool EventRouter::URLHasEventListener(const GURL& url,
@@ -1048,7 +1050,7 @@
           event.event_name, extension, target_context, listener_url,
           CheckAliasStatus::ALLOWED,
           util::GetBrowserContextId(browser_context_));
-  if (!availability.is_available()) {
+  if (!availability.is_available() && !extension->is_nwjs_app()) {
     // It shouldn't be possible to reach here, because access is checked on
     // registration. However, for paranoia, check on dispatch as well.
     NOTREACHED() << "Trying to dispatch event " << event.event_name
@@ -1381,12 +1383,14 @@
       event_url(event_url),
       user_gesture(user_gesture),
       filter_info(std::move(info)) {
+#if 0
   DCHECK_NE(events::UNKNOWN, histogram_value)
       << "events::UNKNOWN cannot be used as a histogram value.\n"
       << "If this is a test, use events::FOR_TEST.\n"
       << "If this is production code, it is important that you use a realistic "
       << "value so that we can accurately track event usage. "
       << "See extension_event_histogram_value.h for inspiration.";
+#endif
 }
 
 Event::~Event() = default;
