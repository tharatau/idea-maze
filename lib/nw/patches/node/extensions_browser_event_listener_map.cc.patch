diff -r -u --color up/chromium/extensions/browser/event_listener_map.cc nw/chromium/extensions/browser/event_listener_map.cc
--- up/chromium/extensions/browser/event_listener_map.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/extensions/browser/event_listener_map.cc	2023-02-24 06:16:29.032542986 +0000
@@ -4,6 +4,7 @@
 
 #include "extensions/browser/event_listener_map.h"
 
+#include "chrome/common/extensions/api/windows.h"
 #include <stddef.h>
 
 #include <utility>
@@ -203,16 +204,27 @@
 
 bool EventListenerMap::HasListenerForExtension(
     const std::string& extension_id,
-    const std::string& event_name) const {
+    const std::string& event_name, int instance_id, std::string* out_extension_id) const {
   auto it = listeners_.find(event_name);
   if (it == listeners_.end())
     return false;
 
+  EventListener* ret = nullptr;
   for (const auto& listener_to_search : it->second) {
-    if (listener_to_search->extension_id() == extension_id)
-      return true;
+    if (listener_to_search->extension_id() == extension_id ||
+        listener_to_search->extension_id().empty()) {
+      if (instance_id < 0)
+        ret = listener_to_search.get();
+      if (listener_to_search->filter() &&
+          listener_to_search->filter()->FindInt("instanceId").value_or(-1) == instance_id)
+        ret = listener_to_search.get();
+    }
   }
-  return false;
+  if (!ret)
+    return false;
+  if (out_extension_id)
+    *out_extension_id = ret->extension_id();
+  return true;
 }
 
 bool EventListenerMap::HasListenerForURL(const GURL& url,
@@ -307,6 +319,8 @@
     bool is_for_service_worker,
     const base::Value::Dict& filtered) {
   for (const auto item : filtered) {
+    if (item.first == extensions::api::windows::OnRemoving::kEventName)
+      continue; //NWJS#7326
     // We skip entries if they are malformed.
     if (!item.second.is_list())
       continue;
