diff -r -u --color up/chromium/chrome/chrome_elf/chrome_elf_main.cc nw/chromium/chrome/chrome_elf/chrome_elf_main.cc
--- up/chromium/chrome/chrome_elf/chrome_elf_main.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/chrome/chrome_elf/chrome_elf_main.cc	2023-02-24 20:54:08.764512430 +0000
@@ -4,6 +4,7 @@
 
 #include "chrome/chrome_elf/chrome_elf_main.h"
 
+#include "components/crash/core/app/crash_reporter_client.h"
 #include <assert.h>
 #include <windows.h>
 
@@ -16,11 +17,15 @@
 #include "chrome/install_static/product_install_details.h"
 #include "chrome/install_static/user_data_dir.h"
 
+extern std::wstring g_nwjs_prod_name, g_nwjs_prod_version;
+
 // This function is exported from the DLL so that it can be called by WinMain
 // after startup has completed in the browser process. For non-browser processes
 // it will be called inside the DLL loader lock so it should do as little as
 // possible to prevent deadlocks.
-void SignalInitializeCrashReporting() {
+void SignalInitializeCrashReporting(void* prod_name, void* prod_version) {
+  if (prod_name) g_nwjs_prod_name = *(std::wstring*)prod_name;
+  if (prod_version) g_nwjs_prod_version = *(std::wstring*)prod_version;
   if (!elf_crash::InitializeCrashReporting()) {
 #ifdef _DEBUG
     assert(false);
@@ -58,6 +63,11 @@
 //         This can result in path expansion that triggers secondary DLL loads,
 //         that will blow up with the loader lock held.
 //         https://bugs.chromium.org/p/chromium/issues/detail?id=748949#c18
+
+void* ElfGetReporterClient() {
+  return crash_reporter::GetCrashReporterClient();
+}
+
 BOOL APIENTRY DllMain(HMODULE module, DWORD reason, LPVOID reserved) {
   if (reason == DLL_PROCESS_ATTACH) {
     install_static::InitializeProductDetailsForPrimaryModule();
@@ -75,10 +85,12 @@
       } __except (elf_crash::GenerateCrashDump(GetExceptionInformation())) {
       }
     } else if (!install_static::IsCrashpadHandlerProcess()) {
-      SignalInitializeCrashReporting();
+      //SignalInitializeCrashReporting(nullptr, nullptr);
       // CRT on initialization installs an exception filter which calls
       // TerminateProcess. We need to hook CRT's attempt to set an exception.
+#if 0 ////disable this or NW will fail with Enigma VB
       elf_crash::DisableSetUnhandledExceptionFilter();
+#endif
     }
 
   } else if (reason == DLL_PROCESS_DETACH) {
