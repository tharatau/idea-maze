diff -r -u --color up/chromium/third_party/node/node.py nw/chromium/third_party/node/node.py
--- up/chromium/third_party/node/node.py	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/third_party/node/node.py	2023-02-24 20:12:29.301029621 +0000
@@ -7,8 +7,11 @@
 import platform
 import subprocess
 import sys
+import atexit
 import os
+import signal
 
+is_win = (platform.system() == 'Windows')
 
 def GetBinaryPath():
   darwin_name = ('node-darwin-arm64' if platform.machine() == 'arm64' else
@@ -19,12 +22,30 @@
     'Windows': ('win', 'node.exe'),
   }[platform.system()])
 
-
 def RunNode(cmd_parts, stdout=None):
   cmd = [GetBinaryPath()] + cmd_parts
-  process = subprocess.Popen(
-      cmd, cwd=os.getcwd(), stdout=subprocess.PIPE, stderr=subprocess.PIPE,
-      universal_newlines=True)
+  process = None
+  if is_win:
+    process = subprocess.Popen(
+        cmd, cwd=os.getcwd(), stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
+  else:
+    process = subprocess.Popen(
+      cmd, cwd=os.getcwd(), stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True, preexec_fn=os.setsid)
+  pgid = None
+  if not is_win:
+    pgid = os.getpgid(process.pid)
+  @atexit.register
+  def kill_process(*args):
+      try:
+        if is_win:
+          os.popen('taskkill /T /F /PID %d' % process.pid)
+        else:
+          os.kill(process.pid, signal.SIGTERM)
+          os.killpg(pgid, signal.SIGTERM)
+        process.wait()
+      except OSError:
+        pass
+  signal.signal(signal.SIGTERM, kill_process)
   stdout, stderr = process.communicate()
 
   if process.returncode != 0:
