diff -r -u --color up/chromium/chrome/browser/ui/views/chrome_views_delegate.cc nw/chromium/chrome/browser/ui/views/chrome_views_delegate.cc
--- up/chromium/chrome/browser/ui/views/chrome_views_delegate.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/chrome/browser/ui/views/chrome_views_delegate.cc	2023-02-24 06:16:22.448153367 +0000
@@ -7,6 +7,8 @@
 #include <memory>
 
 #include "base/check_op.h"
+#include "content/nw/src/nw_content.h"
+
 #include "build/build_config.h"
 #include "build/chromeos_buildflags.h"
 #include "chrome/browser/browser_process.h"
@@ -97,6 +99,7 @@
   window_preferences.Set("right", bounds.right());
   window_preferences.Set("bottom", bounds.bottom());
   window_preferences.Set("maximized", show_state == ui::SHOW_STATE_MAXIMIZED);
+  window_preferences.Set("fullscreen", show_state == ui::SHOW_STATE_FULLSCREEN);
 
   gfx::Rect work_area(display::Screen::GetScreen()
                           ->GetDisplayNearestView(window->GetNativeView())
@@ -127,8 +130,11 @@
 
   bounds->SetRect(*left, *top, *right - *left, *bottom - *top);
 
-  const bool maximized = dictionary.FindBool("maximized").value_or(false);
+  bool maximized = dictionary.FindBool("maximized").value_or(false);
+  bool fullscreen = dictionary.FindBool("fullscreen").value_or(false);
   *show_state = maximized ? ui::SHOW_STATE_MAXIMIZED : ui::SHOW_STATE_NORMAL;
+  if (fullscreen)
+    *show_state = ui::SHOW_STATE_FULLSCREEN;
 
 #if BUILDFLAG(IS_CHROMEOS_ASH)
   AdjustSavedWindowPlacementChromeOS(widget, bounds);
