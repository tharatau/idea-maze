diff -r -u --color up/chromium/services/network/network_service.cc nw/chromium/services/network/network_service.cc
--- up/chromium/services/network/network_service.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/services/network/network_service.cc	2023-02-24 20:12:13.088896626 +0000
@@ -8,6 +8,7 @@
 #include <utility>
 #include <vector>
 
+
 #include "base/bind.h"
 #include "base/callback.h"
 #include "base/check.h"
@@ -109,6 +110,7 @@
 class FirstPartySetEntry;
 }
 
+#include "net/cert/test_root_certs.h"
 namespace network {
 
 namespace {
@@ -448,6 +450,16 @@
   host_resolver_manager_->DisableSystemResolverForTesting();  // IN-TEST
 }
 
+void NetworkService::SetAdditionalTrustAnchors(const net::CertificateList& anchors) {
+  for (NetworkContext* nc : network_contexts_)
+    nc->SetTrustAnchors(anchors);
+#if defined(OS_MAC)
+  net::TestRootCerts* certs = net::TestRootCerts::GetInstance();
+  for (size_t i = 0; i < anchors.size(); i++)
+    certs->Add(anchors[i].get());
+#endif
+}
+
 std::unique_ptr<NetworkService> NetworkService::Create(
     mojo::PendingReceiver<mojom::NetworkService> receiver) {
   return std::make_unique<NetworkService>(nullptr, std::move(receiver));
@@ -646,6 +658,8 @@
   auto it = raw_headers_access_origins_by_pid_.find(process_id);
   if (it == raw_headers_access_origins_by_pid_.end())
     return false;
+  if (it->second.size() == 1 && (*it->second.begin()).opaque())
+    return true;
   return it->second.find(url::Origin::Create(resource_url)) != it->second.end();
 }
 
