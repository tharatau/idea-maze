diff -r -u --color up/chromium/chrome/app/chrome_crash_reporter_client.cc nw/chromium/chrome/app/chrome_crash_reporter_client.cc
--- up/chromium/chrome/app/chrome_crash_reporter_client.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/chrome/app/chrome_crash_reporter_client.cc	2023-02-24 20:54:05.764526132 +0000
@@ -24,7 +24,7 @@
 #include "components/crash/core/common/crash_keys.h"
 #include "content/public/common/content_switches.h"
 
-#if BUILDFLAG(IS_POSIX) && !BUILDFLAG(IS_MAC)
+#if BUILDFLAG(IS_POSIX)
 #include "components/upload_list/crash_upload_list.h"
 #include "components/version_info/version_info.h"
 #include "components/version_info/version_info_values.h"
@@ -96,7 +96,7 @@
 }
 #endif
 
-#if BUILDFLAG(IS_POSIX) && !BUILDFLAG(IS_MAC)
+#if BUILDFLAG(IS_POSIX)// && !BUILDFLAG(IS_MAC)
 void ChromeCrashReporterClient::GetProductNameAndVersion(
     const char** product_name,
     const char** version) {
@@ -110,13 +110,13 @@
   *product_name = "Chrome_Lacros";
 #else  // BUILDFLAG(IS_ANDROID)
 #if !defined(ADDRESS_SANITIZER)
-  *product_name = "Chrome_Linux";
+  *product_name = product_name_.c_str();
 #else
   *product_name = "Chrome_Linux_ASan";
 #endif
 #endif
 
-  *version = PRODUCT_VERSION;
+  *version = product_version_.c_str();
 }
 
 void ChromeCrashReporterClient::GetProductNameAndVersion(
@@ -131,6 +131,7 @@
   *channel = chrome::GetChannelName(chrome::WithExtendedStable(true));
 }
 
+#if !BUILDFLAG(IS_MAC)
 base::FilePath ChromeCrashReporterClient::GetReporterLogFilename() {
   return base::FilePath(CrashUploadList::kReporterLogFilename);
 }
@@ -138,6 +139,7 @@
 bool ChromeCrashReporterClient::GetShouldDumpLargerDumps() {
   return chrome::GetChannel() != version_info::Channel::STABLE;
 }
+#endif
 #endif  // BUILDFLAG(IS_POSIX) && !BUILDFLAG(IS_MAC)
 
 bool ChromeCrashReporterClient::GetCrashDumpLocation(
@@ -155,11 +157,14 @@
 #endif  // BUILDFLAG(IS_MAC) || BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
 
 bool ChromeCrashReporterClient::IsRunningUnattended() {
-  std::unique_ptr<base::Environment> env(base::Environment::Create());
-  return env->HasVar(env_vars::kHeadless);
+  // std::unique_ptr<base::Environment> env(base::Environment::Create());
+  // return env->HasVar(env_vars::kHeadless);
+  return !enable_upload_;
 }
 
 bool ChromeCrashReporterClient::GetCollectStatsConsent() {
+  return true;
+#if 0
 #if BUILDFLAG(GOOGLE_CHROME_BRANDING)
   bool is_official_chrome_build = true;
 #else
@@ -196,6 +201,7 @@
           << " so returning that";
   return settings_consent;
 #endif  // BUILDFLAG(IS_ANDROID)
+#endif // 0
 }
 
 #if BUILDFLAG(IS_ANDROID)
