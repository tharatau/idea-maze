diff -r -u --color up/chromium/chrome/browser/ui/views/frame/browser_desktop_window_tree_host_win.cc nw/chromium/chrome/browser/ui/views/frame/browser_desktop_window_tree_host_win.cc
--- up/chromium/chrome/browser/ui/views/frame/browser_desktop_window_tree_host_win.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/chrome/browser/ui/views/frame/browser_desktop_window_tree_host_win.cc	2023-02-24 20:12:04.524824066 +0000
@@ -314,6 +314,11 @@
 bool BrowserDesktopWindowTreeHostWin::GetClientAreaInsets(
     gfx::Insets* insets,
     HMONITOR monitor) const {
+  //NWJS#7221, this is called during NCCALCSIZE handler
+  //without this, it will lead to a window with white bg shown
+  //initially during first ShowWindow call.
+  if (browser_view_->browser()->is_transparent())
+    return false;
   // Always use default insets for opaque frame.
   if (!ShouldUseNativeFrame())
     return false;
@@ -327,7 +332,7 @@
     // In fullscreen mode there is no frame.
     *insets = gfx::Insets();
   } else {
-    const int frame_thickness = ui::GetFrameThickness(monitor);
+    const int frame_thickness = browser_view_->CanResize() ? ui::GetFrameThickness(monitor) : 1;
     // Reduce the non-client border size; UpdateDWMFrame() will instead extend
     // the border into the window client area. For maximized windows, Windows
     // outdents the window rect from the screen's client rect by
@@ -408,7 +413,8 @@
 void BrowserDesktopWindowTreeHostWin::HandleFrameChanged() {
   // Reinitialize the status bubble, since it needs to be initialized
   // differently depending on whether or not DWM composition is enabled
-  browser_view_->InitStatusBubble();
+  //browser_view_->InitStatusBubble();
+
   DesktopWindowTreeHostWin::HandleFrameChanged();
 }
 
@@ -510,7 +516,10 @@
   // context of the BrowserView destructor.
   if (!browser_view_->browser())
     return false;
-
+  if (browser_view_->browser()->is_transparent())
+    return true;
+  if (browser_view_->browser()->is_frameless())
+    return false;
   if (IsOpaqueHostedAppFrame())
     return false;
 
@@ -526,8 +535,8 @@
 
 bool BrowserDesktopWindowTreeHostWin::ShouldWindowContentsBeTransparent()
     const {
-  return !ShouldCustomDrawSystemTitlebar() &&
-         views::DesktopWindowTreeHostWin::ShouldWindowContentsBeTransparent();
+  return browser_view_->browser()->is_transparent() || (!ShouldCustomDrawSystemTitlebar() &&
+         views::DesktopWindowTreeHostWin::ShouldWindowContentsBeTransparent());
 }
 
 ////////////////////////////////////////////////////////////////////////////////
