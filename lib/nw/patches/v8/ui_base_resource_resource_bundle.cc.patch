diff -r -u --color up/chromium/ui/base/resource/resource_bundle.cc nw/chromium/ui/base/resource/resource_bundle.cc
--- up/chromium/ui/base/resource/resource_bundle.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/ui/base/resource/resource_bundle.cc	2023-02-24 06:16:54.890032650 +0000
@@ -4,6 +4,8 @@
 
 #include "ui/base/resource/resource_bundle.h"
 
+#include "base/strings/string_util.h"
+
 #include <stdint.h>
 
 #include <string>
@@ -100,6 +102,8 @@
 ResourceBundle* g_shared_instance_ = nullptr;
 
 #if !BUILDFLAG(IS_CHROMEOS_LACROS)
+std::u16string *chromium_name, *nwjs_name;
+
 base::FilePath GetResourcesPakFilePath(const std::string& pak_name) {
   base::FilePath path;
   if (base::PathService::Get(base::DIR_ASSETS, &path))
@@ -923,6 +927,8 @@
   DCHECK(g_shared_instance_ == nullptr) << "ResourceBundle initialized twice";
   g_shared_instance_ = new ResourceBundle(delegate);
   std::vector<ResourceScaleFactor> supported_scale_factors;
+  chromium_name = new std::u16string(u"Chromium");
+  nwjs_name     = new std::u16string(u"NW.js");
 #if BUILDFLAG(IS_IOS)
   display::Display display = display::Screen::GetScreen()->GetPrimaryDisplay();
   if (display.device_scale_factor() > 2.0) {
@@ -958,13 +964,13 @@
   // 2x images. The 1x data pack only has 1x images, thus passes in an accurate
   // scale factor to gfx::ImageSkia::AddRepresentation.
   if (IsScaleFactorSupported(k100Percent)) {
-    AddDataPackFromPath(GetResourcesPakFilePath("chrome_100_percent.pak"),
+    AddDataPackFromPath(GetResourcesPakFilePath("nw_100_percent.pak"),
                         k100Percent);
   }
 
   if (IsScaleFactorSupported(k200Percent)) {
     AddOptionalDataPackFromPath(
-        GetResourcesPakFilePath("chrome_200_percent.pak"), k200Percent);
+        GetResourcesPakFilePath("nw_200_percent.pak"), k200Percent);
   }
 }
 #endif  // !BUILDFLAG(IS_CHROMEOS_LACROS)
@@ -1137,8 +1143,10 @@
 
 std::u16string ResourceBundle::GetLocalizedStringImpl(int resource_id) const {
   std::u16string string;
-  if (delegate_ && delegate_->GetLocalizedString(resource_id, &string))
+  if (delegate_ && delegate_->GetLocalizedString(resource_id, &string)) {
+    base::ReplaceSubstringsAfterOffset(&string, 0, *chromium_name, *nwjs_name);
     return MaybeMangleLocalizedString(string);
+  }
 
   // Ensure that ReloadLocaleResources() doesn't drop the resources while
   // we're using them.
@@ -1192,6 +1200,7 @@
   } else if (encoding == ResourceHandle::UTF8) {
     msg = base::UTF8ToUTF16(data);
   }
+  base::ReplaceSubstringsAfterOffset(&msg, 0, *chromium_name, *nwjs_name);
   return MaybeMangleLocalizedString(msg);
 }
 
