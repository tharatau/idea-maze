diff -r -u --color up/chromium/chrome/browser/extensions/api/language_settings_private/language_settings_private_api.cc nw/chromium/chrome/browser/extensions/api/language_settings_private/language_settings_private_api.cc
--- up/chromium/chrome/browser/extensions/api/language_settings_private/language_settings_private_api.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/api/language_settings_private/language_settings_private_api.cc	2023-02-24 20:12:03.256811154 +0000
@@ -212,6 +212,10 @@
 
 ExtensionFunction::ResponseAction
 LanguageSettingsPrivateGetLanguageListFunction::Run() {
+#if 1
+  std::unique_ptr<base::ListValue> language_list(new base::ListValue);
+  return RespondNow(OneArgument(base::Value::FromUniquePtrValue(std::move(language_list))));
+#else
   // Collect the language codes from the supported accept-languages.
   const std::string app_locale = g_browser_process->GetApplicationLocale();
   const std::unique_ptr<translate::TranslatePrefs> translate_prefs =
@@ -295,6 +299,7 @@
 #endif  // BUILDFLAG(IS_WIN)
 
   return RespondNow(WithArguments(std::move(language_list_)));
+#endif
 }
 
 #if BUILDFLAG(IS_WIN)
@@ -329,6 +334,7 @@
   const auto parameters =
       language_settings_private::EnableLanguage::Params::Create(args());
   EXTENSION_FUNCTION_VALIDATE(parameters.get());
+#if 0
   const std::string& language_code = parameters->language_code;
 
   std::unique_ptr<translate::TranslatePrefs> translate_prefs =
@@ -346,6 +352,7 @@
 
   translate_prefs->AddToLanguageList(language_code, /*force_blocked=*/false);
 
+#endif
   return RespondNow(NoArguments());
 }
 
@@ -360,6 +367,7 @@
   const auto parameters =
       language_settings_private::DisableLanguage::Params::Create(args());
   EXTENSION_FUNCTION_VALIDATE(parameters.get());
+#if 0
   const std::string& language_code = parameters->language_code;
 
   std::unique_ptr<translate::TranslatePrefs> translate_prefs =
@@ -380,6 +388,7 @@
     translate_prefs->ResetRecentTargetLanguage();
   }
 
+#endif
   return RespondNow(NoArguments());
 }
 
@@ -394,6 +403,7 @@
   const auto parameters = language_settings_private::
       SetEnableTranslationForLanguage::Params::Create(args());
   EXTENSION_FUNCTION_VALIDATE(parameters.get());
+#if 0
   const std::string& language_code = parameters->language_code;
   // True if translation enabled, false if disabled.
   const bool enable = parameters->enable;
@@ -407,6 +417,7 @@
     translate_prefs->BlockLanguage(language_code);
   }
 
+#endif
   return RespondNow(NoArguments());
 }
 
@@ -418,6 +429,7 @@
 
 ExtensionFunction::ResponseAction
 LanguageSettingsPrivateGetAlwaysTranslateLanguagesFunction::Run() {
+#if 0
   const std::unique_ptr<translate::TranslatePrefs> translate_prefs =
       CreateTranslatePrefsForBrowserContext(browser_context());
 
@@ -430,6 +442,8 @@
   }
 
   return RespondNow(WithArguments(std::move(always_translate_languages)));
+#endif
+  return RespondNow(NoArguments());
 }
 
 LanguageSettingsPrivateSetLanguageAlwaysTranslateStateFunction::
@@ -440,6 +454,7 @@
 
 ExtensionFunction::ResponseAction
 LanguageSettingsPrivateSetLanguageAlwaysTranslateStateFunction::Run() {
+#if 0
   const auto params = language_settings_private::
       SetLanguageAlwaysTranslateState::Params::Create(args());
   EXTENSION_FUNCTION_VALIDATE(params.get());
@@ -449,7 +464,7 @@
 
   translate_prefs->SetLanguageAlwaysTranslateState(params->language_code,
                                                    params->always_translate);
-
+#endif
   return RespondNow(NoArguments());
 }
 
@@ -461,6 +476,7 @@
 
 ExtensionFunction::ResponseAction
 LanguageSettingsPrivateGetNeverTranslateLanguagesFunction::Run() {
+#if 0
   const std::unique_ptr<translate::TranslatePrefs> translate_prefs =
       CreateTranslatePrefsForBrowserContext(browser_context());
 
@@ -472,6 +488,8 @@
     never_translate_languages.Append(std::move(entry));
   }
   return RespondNow(WithArguments(std::move(never_translate_languages)));
+#endif
+  return RespondNow(NoArguments());
 }
 
 LanguageSettingsPrivateMoveLanguageFunction::
@@ -482,6 +500,7 @@
 
 ExtensionFunction::ResponseAction
 LanguageSettingsPrivateMoveLanguageFunction::Run() {
+#if 0
   const auto parameters =
       language_settings_private::MoveLanguage::Params::Create(args());
   EXTENSION_FUNCTION_VALIDATE(parameters.get());
@@ -521,6 +540,7 @@
   translate_prefs->RearrangeLanguage(language_code, where, offset,
                                      supported_language_codes);
 
+#endif
   return RespondNow(NoArguments());
 }
 
@@ -654,12 +674,16 @@
 
 ExtensionFunction::ResponseAction
 LanguageSettingsPrivateGetTranslateTargetLanguageFunction::Run() {
+#if 0
   language::LanguageModel* language_model =
       LanguageModelManagerFactory::GetForBrowserContext(browser_context())
           ->GetPrimaryModel();
   return RespondNow(WithArguments(TranslateService::GetTargetLanguage(
       Profile::FromBrowserContext(browser_context())->GetPrefs(),
       language_model)));
+#else
+  return RespondNow(NoArguments());
+#endif
 }
 
 LanguageSettingsPrivateSetTranslateTargetLanguageFunction::
@@ -670,6 +694,7 @@
 
 ExtensionFunction::ResponseAction
 LanguageSettingsPrivateSetTranslateTargetLanguageFunction::Run() {
+#if 0
   const auto parameters =
       language_settings_private::SetTranslateTargetLanguage::Params::Create(
           args());
@@ -685,7 +710,7 @@
     return RespondNow(NoArguments());
   }
   translate_prefs->SetRecentTargetLanguage(language_code);
-
+#endif
   return RespondNow(NoArguments());
 }
 
