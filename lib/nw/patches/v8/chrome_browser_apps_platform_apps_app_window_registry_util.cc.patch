diff -r -u --color up/chromium/chrome/browser/apps/platform_apps/app_window_registry_util.cc nw/chromium/chrome/browser/apps/platform_apps/app_window_registry_util.cc
--- up/chromium/chrome/browser/apps/platform_apps/app_window_registry_util.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/chrome/browser/apps/platform_apps/app_window_registry_util.cc	2023-02-24 06:16:20.288025449 +0000
@@ -42,7 +42,7 @@
 
 // static
 bool AppWindowRegistryUtil::IsAppWindowVisibleInAnyProfile(
-    int window_type_mask) {
+                                                           int window_type_mask, bool check_visible) {
   std::vector<Profile*> profiles =
       g_browser_process->profile_manager()->GetLoadedProfiles();
   for (std::vector<Profile*>::const_iterator i = profiles.begin();
@@ -57,7 +57,7 @@
       continue;
 
     for (const AppWindow* window : app_windows) {
-      if (!window->is_hidden() &&
+      if ((!window->is_hidden() || !check_visible )&&
           (window_type_mask == 0 || (window->window_type() & window_type_mask)))
         return true;
     }
@@ -67,7 +67,7 @@
 }
 
 // static
-void AppWindowRegistryUtil::CloseAllAppWindows() {
+bool AppWindowRegistryUtil::CloseAllAppWindows(bool user_force) {
   std::vector<Profile*> profiles =
       g_browser_process->profile_manager()->GetLoadedProfiles();
   for (std::vector<Profile*>::const_iterator i = profiles.begin();
@@ -82,8 +82,13 @@
     AppWindowList window_list_copy(registry->app_windows());
     for (auto* window : window_list_copy) {
       // Ensure window is still valid.
-      if (base::Contains(registry->app_windows(), window))
-        window->GetBaseWindow()->Close();
+      if (base::Contains(registry->app_windows(), window)) {
+        if (window->NWCanClose(user_force))
+          window->GetBaseWindow()->Close();
+        else
+          return false;
+      }
     }
   }
+  return true;
 }
