diff -r -u --color up/chromium/third_party/crashpad/crashpad/handler/crash_report_upload_thread.cc nw/chromium/third_party/crashpad/crashpad/handler/crash_report_upload_thread.cc
--- up/chromium/third_party/crashpad/crashpad/handler/crash_report_upload_thread.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/third_party/crashpad/crashpad/handler/crash_report_upload_thread.cc	2023-02-24 20:54:32.472384235 +0000
@@ -14,6 +14,7 @@
 
 #include "handler/crash_report_upload_thread.h"
 
+#include "base/strings/stringprintf.h"
 #include <errno.h>
 #include <time.h>
 
@@ -103,7 +104,7 @@
               this),
       known_pending_report_uuids_(),
       database_(database) {
-  DCHECK(!url_.empty());
+  //DCHECK(!url_.empty());
 }
 
 CrashReportUploadThread::~CrashReportUploadThread() {
@@ -303,6 +304,9 @@
     return UploadResult::kPermanentFailure;
   }
 
+  std::string upload_url;
+  if (parameters.find("url-nwjs") != parameters.end())
+    upload_url = parameters["url-nwjs"];
   HTTPMultipartBuilder http_multipart_builder;
   http_multipart_builder.SetGzipEnabled(options_.upload_gzip);
 
@@ -341,7 +345,8 @@
   // TODO(mark): The timeout should be configurable by the client.
   http_transport->SetTimeout(internal::kUploadReportTimeoutSeconds);
 
-  std::string url = url_;
+#if 0
+  std::string url = upload_url;
   if (options_.identify_client_via_url) {
     // Add parameters to the URL which identify the client to the server.
     static constexpr struct {
@@ -364,7 +369,10 @@
       }
     }
   }
-  http_transport->SetURL(url);
+  if (!url.empty())
+    upload_url = url;
+#endif
+  http_transport->SetURL(upload_url);
 
   if (!http_transport->ExecuteSynchronously(response_body)) {
     return UploadResult::kRetry;
@@ -390,7 +398,7 @@
       // If the most recent upload attempt occurred within the past hour,
       // donâ€™t attempt to upload the new report. If it happened longer ago,
       // attempt to upload the report.
-      constexpr int kUploadAttemptIntervalSeconds = 60 * 60;  // 1 hour
+      constexpr int kUploadAttemptIntervalSeconds = 0;  // 1 hour
       if (now - last_upload_attempt_time < kUploadAttemptIntervalSeconds) {
         database_->SkipReportUpload(
             report.uuid, Metrics::CrashSkippedReason::kUploadThrottled);
