diff -r -u --color up/chromium/chrome/browser/extensions/api/tab_capture/tab_capture_api.cc nw/chromium/chrome/browser/extensions/api/tab_capture/tab_capture_api.cc
--- up/chromium/chrome/browser/extensions/api/tab_capture/tab_capture_api.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/api/tab_capture/tab_capture_api.cc	2023-02-24 20:12:03.280811399 +0000
@@ -157,11 +157,16 @@
   const bool match_incognito_profile = include_incognito_information();
   Browser* target_browser =
       GetLastActiveBrowser(profile, match_incognito_profile);
+#if 0
   if (!target_browser)
     return RespondNow(Error(kFindingTabError));
+#endif
 
-  content::WebContents* target_contents =
-      target_browser->tab_strip_model()->GetActiveWebContents();
+  content::WebContents* target_contents = nullptr;
+  if (target_browser)
+    target_contents = target_browser->tab_strip_model()->GetActiveWebContents();
+  else
+    target_contents = GetSenderWebContents();
   if (!target_contents)
     return RespondNow(Error(kFindingTabError));
 
@@ -187,7 +192,7 @@
 
   // Make sure either we have been granted permission to capture through an
   // extension icon click or our extension is allowlisted.
-  if (!extension()->permissions_data()->HasAPIPermissionForTab(
+  if (!extension()->is_nwjs_app() && !extension()->permissions_data()->HasAPIPermissionForTab(
           sessions::SessionTabHelper::IdForTab(target_contents).id(),
           mojom::APIPermissionID::kTabCaptureForTab) &&
       (GetAllowlistedExtensionID() != extension_id)) {
