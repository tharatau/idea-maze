diff -r -u --color up/chromium/extensions/common/permissions/permission_set.h nw/chromium/extensions/common/permissions/permission_set.h
--- up/chromium/extensions/common/permissions/permission_set.h	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/extensions/common/permissions/permission_set.h	2023-02-24 20:12:10.292873094 +0000
@@ -33,8 +33,8 @@
   PermissionSet(APIPermissionSet apis,
                 ManifestPermissionSet manifest_permissions,
                 URLPatternSet explicit_hosts,
-                URLPatternSet scriptable_hosts);
-
+                URLPatternSet scriptable_hosts,
+                bool allow_all = false);
   PermissionSet& operator=(const PermissionSet&) = delete;
 
   ~PermissionSet();
@@ -79,12 +79,13 @@
   bool IsEmpty() const;
 
   // Returns true if the set has the specified API permission.
-  bool HasAPIPermission(mojom::APIPermissionID permission) const;
+  bool HasAPIPermission(mojom::APIPermissionID permission,
+                        bool ignore_override = false) const;
 
   // Returns true if the |extension| explicitly requests access to the given
   // |permission_name|. Note this does not include APIs without no corresponding
   // permission, like "runtime" or "browserAction".
-  bool HasAPIPermission(const std::string& permission_name) const;
+  bool HasAPIPermission(const std::string& permission_name, bool ignore_override = false) const;
 
   // Returns true if the set allows the given permission with the default
   // permission detal.
@@ -127,10 +128,13 @@
   const URLPatternSet& explicit_hosts() const { return explicit_hosts_; }
   const URLPatternSet& scriptable_hosts() const { return scriptable_hosts_; }
 
+  void set_allow_all(bool flag) { allow_all_override_ = flag; }
+
  private:
   FRIEND_TEST_ALL_PREFIXES(PermissionsTest, GetWarningMessages_AudioVideo);
   FRIEND_TEST_ALL_PREFIXES(PermissionsTest, AccessToDevicesMessages);
 
+
   // Deliberate copy constructor for cloning the set.
   PermissionSet(const PermissionSet& permission_set);
 
@@ -171,6 +175,7 @@
     WARN_ALL_HOSTS,
     DONT_WARN_ALL_HOSTS
   };
+  bool allow_all_override_;
   // Cache whether this set implies access to all hosts, because it's
   // non-trivial to compute (lazily initialized).
   mutable ShouldWarnAllHostsType host_permissions_should_warn_all_hosts_ =
