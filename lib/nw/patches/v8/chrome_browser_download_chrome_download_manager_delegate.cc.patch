diff -r -u --color up/chromium/chrome/browser/download/chrome_download_manager_delegate.cc nw/chromium/chrome/browser/download/chrome_download_manager_delegate.cc
--- up/chromium/chrome/browser/download/chrome_download_manager_delegate.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/chrome/browser/download/chrome_download_manager_delegate.cc	2023-02-24 06:16:20.860059324 +0000
@@ -455,12 +455,14 @@
 
   download_manager_ = dm;
 
+#if 0
   safe_browsing::SafeBrowsingService* sb_service =
       g_browser_process->safe_browsing_service();
   if (sb_service && !profile_->IsOffTheRecord()) {
     // Include this download manager in the set monitored by safe browsing.
     sb_service->AddDownloadManager(dm);
   }
+#endif
 
   if (download_manager_) {
     download_manager_->AddObserver(this);
@@ -826,6 +828,7 @@
 void ChromeDownloadManagerDelegate::SanitizeSavePackageResourceName(
     base::FilePath* filename,
     const GURL& source_url) {
+#if 0
   safe_browsing::FileTypePolicies* file_type_policies =
       safe_browsing::FileTypePolicies::GetInstance();
 
@@ -837,6 +840,7 @@
   base::FilePath default_filename = base::FilePath::FromUTF8Unsafe(
       l10n_util::GetStringUTF8(IDS_DEFAULT_DOWNLOAD_FILENAME));
   *filename = filename->AddExtension(default_filename.BaseName().value());
+#endif
 }
 
 void ChromeDownloadManagerDelegate::SanitizeDownloadParameters(
@@ -876,14 +880,14 @@
   download::DownloadItemRenameHandler* handler = download->GetRenameHandler();
   if (handler) {
     handler->OpenDownload();
-    RecordDownloadOpen(DOWNLOAD_OPEN_METHOD_RENAME_HANDLER,
-                       download->GetMimeType());
+    //RecordDownloadOpen(DOWNLOAD_OPEN_METHOD_RENAME_HANDLER,
+    //                   download->GetMimeType());
     return;
   }
 
   if (!DownloadItemModel(download).ShouldPreferOpeningInBrowser()) {
-    RecordDownloadOpen(DOWNLOAD_OPEN_METHOD_DEFAULT_PLATFORM,
-                       download->GetMimeType());
+    //RecordDownloadOpen(DOWNLOAD_OPEN_METHOD_DEFAULT_PLATFORM,
+    //                   download->GetMimeType());
     OpenDownloadUsingPlatformHandler(download);
     return;
   }
@@ -909,8 +913,8 @@
   else
     browser->OpenURL(params);
 
-  RecordDownloadOpen(DOWNLOAD_OPEN_METHOD_DEFAULT_BROWSER,
-                     download->GetMimeType());
+  //RecordDownloadOpen(DOWNLOAD_OPEN_METHOD_DEFAULT_BROWSER,
+  //                   download->GetMimeType());
 #endif  // BUILDFLAG(IS_ANDROID)
 }
 
@@ -1657,6 +1661,7 @@
 void ChromeDownloadManagerDelegate::MaybeSendDangerousDownloadOpenedReport(
     DownloadItem* download,
     bool show_download_in_folder) {
+#if 0
 #if BUILDFLAG(FULL_SAFE_BROWSING)
   safe_browsing::DownloadProtectionService* service =
       GetDownloadProtectionService();
@@ -1672,6 +1677,7 @@
         download->GetDangerType(), download_content, base::Time::Now(),
         download->GetEndTime(), show_download_in_folder);
   }
+#endif
 }
 
 void ChromeDownloadManagerDelegate::CheckDownloadAllowed(
@@ -1731,7 +1737,8 @@
 
 #if BUILDFLAG(IS_WIN) || BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) || \
     BUILDFLAG(IS_MAC)
-  absl::optional<enterprise_connectors::AnalysisSettings> settings =
+  absl::optional<enterprise_connectors::AnalysisSettings> settings;
+#if 0
       safe_browsing::DeepScanningRequest::ShouldUploadBinary(download_item);
 
   if (settings.has_value()) {
@@ -1755,6 +1762,7 @@
     }
   }
 #endif
+#endif
   std::move(callback).Run(true);
 }
 
