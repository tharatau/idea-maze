diff -r -u --color up/chromium/chrome/browser/ui/browser_navigator.cc nw/chromium/chrome/browser/ui/browser_navigator.cc
--- up/chromium/chrome/browser/ui/browser_navigator.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/chrome/browser/ui/browser_navigator.cc	2023-02-24 20:12:04.404822844 +0000
@@ -9,6 +9,10 @@
 #include <string>
 #include <utility>
 
+#include "chrome/browser/ui/views/frame/browser_frame.h"
+#include "chrome/browser/ui/views/frame/browser_view.h"
+#include "content/browser/web_contents/web_contents_impl.h"
+
 #include "base/command_line.h"
 #include "base/memory/raw_ptr.h"
 #include "base/notreached.h"
@@ -83,6 +87,12 @@
 #include "components/captive_portal/content/captive_portal_tab_helper.h"
 #endif
 
+#include "third_party/blink/public/mojom/renderer_preferences.mojom.h"
+
+#include "content/nw/src/nw_base.h"
+#include "content/nw/src/nw_content.h"
+#include "content/nw/src/common/shell_switches.h"
+
 using content::GlobalRequestID;
 using content::NavigationController;
 using content::WebContents;
@@ -119,6 +129,14 @@
 
 // Finds an existing Browser compatible with |profile|, making a new one if no
 // such Browser is located.
+Browser* GetOrCreateBrowser(Profile* profile, const NavigateParams& params) {
+  Browser* browser = chrome::FindTabbedBrowser(profile, false);
+  Browser::CreateParams browser_params(profile, params.user_gesture, params.window_bounds);
+  browser_params.frameless = params.frameless;
+  return browser ? browser
+    : Browser::Create(browser_params);
+}
+
 Browser* GetOrCreateBrowser(Profile* profile, bool user_gesture) {
   Browser* browser = chrome::FindTabbedBrowser(profile, false);
 
@@ -287,7 +305,7 @@
 
       // Find a compatible window and re-execute this command in it. Otherwise
       // re-run with NEW_WINDOW.
-      return {GetOrCreateBrowser(profile, params.user_gesture), -1};
+      return {GetOrCreateBrowser(profile, params), -1};
     case WindowOpenDisposition::NEW_PICTURE_IN_PICTURE:
 #if !BUILDFLAG(IS_CHROMEOS_LACROS) && !BUILDFLAG(IS_ANDROID)
       if (!base::FeatureList::IsEnabled(
@@ -356,9 +374,11 @@
       Browser* browser = nullptr;
       if (Browser::GetCreationStatusForProfile(profile) ==
           Browser::CreationStatus::kOk) {
-        browser = Browser::Create(
-            Browser::CreateParams(profile, params.user_gesture));
+      Browser::CreateParams browser_params(profile, params.user_gesture, params.window_bounds);
+      browser_params.frameless = params.frameless;
+      browser = Browser::Create(browser_params);
       }
+
       return {browser, -1};
     }
     case WindowOpenDisposition::OFF_THE_RECORD:
@@ -513,6 +533,11 @@
         (*contents_)->Focus();
         window->Activate();
       }
+    } else if (params_->window_action == NavigateParams::SHOW_WINDOW_FULLSCREEN) {
+      BrowserWindow* window2 = params_->browser->window();
+      BrowserFrame* frame = BrowserView::GetBrowserViewForBrowser(params_->browser)->frame();
+      frame->SetFullscreen(true);
+      window2->Show();
     }
   }
 
@@ -568,6 +593,26 @@
   apps::SetAppIdForWebContents(params.browser->profile(), target_contents.get(),
                                params.app_id);
 
+  nw::Package* package = nw::package();
+  std::string js_doc_start(params.inject_js_start), js_doc_end(params.inject_js_end);
+  if (js_doc_start.empty()) {
+    std::string* str = package->root()->FindString(::switches::kmInjectJSDocStart);
+    if (str)
+      js_doc_start = *str;
+  }
+  target_contents->GetMutableRendererPrefs()->nw_inject_js_doc_start = js_doc_start;
+  if (js_doc_end.empty()) {
+    std::string* str = package->root()->FindString(::switches::kmInjectJSDocEnd);
+    if (str)
+      js_doc_end = *str;
+  }
+  target_contents->GetMutableRendererPrefs()->nw_inject_js_doc_end = js_doc_end;
+  bool new_site = params.url.SchemeIs("chrome") || !nw::PinningRenderer();
+  if (params.block_parser && !new_site)
+    static_cast<content::WebContentsImpl*>(target_contents.get())->SetSkipBlockingParser(false);
+  if (!js_doc_start.empty() || !js_doc_end.empty())
+    target_contents->SyncRendererPrefs();
+
 #if BUILDFLAG(ENABLE_CAPTIVE_PORTAL_DETECTION)
   if (params.is_captive_portal_popup) {
     DCHECK_EQ(WindowOpenDisposition::NEW_POPUP, params.disposition);
