diff -r -u --color up/chromium/chrome/app/main_dll_loader_win.cc nw/chromium/chrome/app/main_dll_loader_win.cc
--- up/chromium/chrome/app/main_dll_loader_win.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/chrome/app/main_dll_loader_win.cc	2023-02-24 06:16:19.391972386 +0000
@@ -51,6 +51,8 @@
 
 typedef void (*RelaunchChromeBrowserWithNewCommandLineIfNeededFunc)();
 
+#define BUFSIZE MAX_PATH
+
 void RecordDidRun(const base::FilePath& dll_path) {
   installer::UpdateDidRunState(true);
 }
@@ -88,10 +90,17 @@
 // directory. Returns a handle to the loaded module on success, or nullptr on
 // failure.
 HMODULE LoadModuleWithDirectory(const base::FilePath& module) {
+  bool restore_directory = false;
+  TCHAR Buffer[BUFSIZE];
+  if (::GetCurrentDirectoryW(BUFSIZE, Buffer)) {
+    restore_directory = true;
+  }
   ::SetCurrentDirectoryW(module.DirName().value().c_str());
   base::PreReadFile(module, /*is_executable=*/true);
   HMODULE handle = ::LoadLibraryExW(module.value().c_str(), nullptr,
                                     LOAD_WITH_ALTERED_SEARCH_PATH);
+  if (restore_directory)
+    ::SetCurrentDirectory(Buffer);
   return handle;
 }
 
@@ -106,7 +115,7 @@
   }
   HMODULE dll = LoadModuleWithDirectory(*module);
   if (!dll)
-    PLOG(ERROR) << "Failed to load Chrome DLL from " << module->value();
+    PLOG(ERROR) << "Failed to load NW DLL from " << module->value();
   return dll;
 }
 
Only in nw/chromium/chrome/app: nibs
Only in nw/chromium/chrome/app: nw.dll.manifest
Only in nw/chromium/chrome/app: nw.exe.manifest
