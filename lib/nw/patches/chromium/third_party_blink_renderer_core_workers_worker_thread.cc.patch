diff -r -u --color up/chromium/third_party/blink/renderer/core/workers/worker_thread.cc nw/chromium/third_party/blink/renderer/core/workers/worker_thread.cc
--- up/chromium/third_party/blink/renderer/core/workers/worker_thread.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/third_party/blink/renderer/core/workers/worker_thread.cc	2023-02-24 20:54:18.084465795 +0000
@@ -70,6 +70,17 @@
 #include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"
 #include "third_party/blink/renderer/platform/wtf/threading.h"
 
+
+#include "third_party/node-nw/src/node_webkit.h"
+
+#if defined(COMPONENT_BUILD) && defined(WIN32)
+#define NW_HOOK_MAP(type, sym, fn) BASE_EXPORT type fn;
+#else
+#define NW_HOOK_MAP(type, sym, fn) extern type fn;
+#endif
+#include "content/nw/src/common/node_hooks.h"
+#undef NW_HOOK_MAP
+
 namespace blink {
 
 using ExitCode = WorkerThread::ExitCode;
@@ -599,6 +610,10 @@
     std::unique_ptr<WorkerDevToolsParams> devtools_params) {
   DCHECK(IsCurrentThread());
   backing_thread_weak_factory_.emplace(this);
+
+  bool isNodeJS = global_scope_creation_params->nodejs_;
+  std::string main_script = global_scope_creation_params->main_script_;
+
   worker_reporting_proxy_.WillInitializeWorkerContext();
   {
     TRACE_EVENT0("blink.worker", "WorkerThread::InitializeWorkerContext");
@@ -638,7 +653,7 @@
     GlobalScope()->ScriptController()->Initialize(url_for_debugger);
     v8::HandleScope handle_scope(GetIsolate());
     Platform::Current()->WorkerContextCreated(
-        GlobalScope()->ScriptController()->GetContext());
+          GlobalScope()->ScriptController()->GetContext(), isNodeJS, main_script);
 
     inspector_task_runner_->InitIsolate(GetIsolate());
     SetThreadState(ThreadState::kRunning);
@@ -750,6 +765,7 @@
 
   if (WorkerThreadDebugger* debugger = WorkerThreadDebugger::From(GetIsolate()))
     debugger->WorkerThreadDestroyed(this);
+  ::g_stop_nw_instance_fn();
 
   GetWorkerReportingProxy().WillDestroyWorkerGlobalScope();
 
