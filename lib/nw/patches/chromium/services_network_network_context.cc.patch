diff -r -u --color up/chromium/services/network/network_context.cc nw/chromium/services/network/network_context.cc
--- up/chromium/services/network/network_context.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/services/network/network_context.cc	2023-02-25 19:07:21.489847831 +0000
@@ -2,6 +2,7 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+#pragma clang diagnostic ignored "-Wunused-function"
 #include "services/network/network_context.h"
 
 #include <memory>
@@ -9,6 +10,9 @@
 #include <tuple>
 #include <utility>
 
+#include "content/nw/src/policy_cert_verifier.h"
+#include "net/cert/cert_verify_proc.h"
+
 #include "base/barrier_closure.h"
 #include "base/base64.h"
 #include "base/bind.h"
@@ -60,6 +64,7 @@
 #include "net/cert/caching_cert_verifier.h"
 #include "net/cert/cert_verifier.h"
 #include "net/cert/coalescing_cert_verifier.h"
+#include "net/cert_net/cert_net_fetcher_url_request.h"
 #include "net/cookies/cookie_access_delegate.h"
 #include "net/cookies/cookie_monster.h"
 #include "net/dns/host_cache.h"
@@ -606,6 +611,9 @@
   if (network_service_)
     network_service_->DeregisterNetworkContext(this);
 
+  if (cert_net_fetcher_)
+    cert_net_fetcher_->Shutdown();
+
   if (domain_reliability_monitor_)
     domain_reliability_monitor_->Shutdown();
   // Because of the order of declaration in the class,
@@ -1310,6 +1318,10 @@
   params_->enable_preconnect = enable_preconnect;
 }
 
+void NetworkContext::SetTrustAnchors(const net::CertificateList& anchors) {
+  nw_cert_verifier_->SetTrustAnchors(anchors);
+}
+
 #if BUILDFLAG(IS_CHROMEOS)
 void NetworkContext::UpdateAdditionalCertificates(
     mojom::AdditionalCertificatesPtr additional_certificates) {
@@ -2148,6 +2160,7 @@
         base::BindRepeating(
             &NetworkContext::CreateURLLoaderFactoryForCertNetFetcher,
             base::Unretained(this)));
+#if 0
 
 #if BUILDFLAG(IS_CT_SUPPORTED)
     std::vector<scoped_refptr<const net::CTLogVerifier>> ct_logs;
@@ -2183,6 +2196,14 @@
         std::move(cert_verifier));
     cert_verifier = base::WrapUnique(cert_verifier_with_trust_anchors_.get());
 #endif  // BUILDFLAG(IS_CHROMEOS)
+#endif
+    cert_verifier = std::make_unique<nw::PolicyCertVerifier>(base::RepeatingClosure());
+    nw_cert_verifier_ = (nw::PolicyCertVerifier*)cert_verifier.get();
+#if BUILDFLAG(IS_LINUX)
+    nw_cert_verifier_->InitializeOnIOThread(net::CertVerifyProc::CreateBuiltinVerifyProc(cert_net_fetcher_));
+#else
+    nw_cert_verifier_->InitializeOnIOThread(net::CertVerifyProc::CreateSystemVerifyProc(cert_net_fetcher_));
+#endif
   }
 
   builder.SetCertVerifier(IgnoreErrorsCertVerifier::MaybeWrapCertVerifier(
@@ -2578,6 +2599,9 @@
         result.url_request_context->proxy_resolution_service());
   }
 
+  if (cert_net_fetcher_)
+    cert_net_fetcher_->SetURLRequestContext(result.url_request_context.get());
+
   return result;
 }
 
