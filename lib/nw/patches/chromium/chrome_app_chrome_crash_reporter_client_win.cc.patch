diff -r -u --color up/chromium/chrome/app/chrome_crash_reporter_client_win.cc nw/chromium/chrome/app/chrome_crash_reporter_client_win.cc
--- up/chromium/chrome/app/chrome_crash_reporter_client_win.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/chrome/app/chrome_crash_reporter_client_win.cc	2023-02-19 17:36:25.811439623 +0000
@@ -47,10 +47,12 @@
 
   std::wstring process_type = install_static::GetSwitchValueFromCommandLine(
       ::GetCommandLine(), install_static::kProcessType);
+  std::wstring disable_crash_handler = install_static::GetSwitchValueFromCommandLine(
+    ::GetCommandLine(), L"disable-crash-handler");
   // Don't set up Crashpad crash reporting in the Crashpad handler itself, nor
   // in the fallback crash handler for the Crashpad handler process.
   if (process_type != install_static::kCrashpadHandler &&
-      process_type != install_static::kFallbackHandler) {
+      process_type != install_static::kFallbackHandler && disable_crash_handler != L"true") {
     crash_reporter::SetCrashReporterClient(instance);
 
     std::wstring user_data_dir;
@@ -171,11 +173,11 @@
 }
 
 bool ChromeCrashReporterClient::IsRunningUnattended() {
-  return install_static::HasEnvironmentVariable(install_static::kHeadless);
+  return !enable_upload_;
 }
 
 bool ChromeCrashReporterClient::GetCollectStatsConsent() {
-  return install_static::GetCollectStatsConsent();
+  return true; // install_static::GetCollectStatsConsent();
 }
 
 bool ChromeCrashReporterClient::GetCollectStatsInSample() {
