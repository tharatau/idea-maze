diff -r -u --color up/chromium/chrome/browser/download/download_item_model.cc nw/chromium/chrome/browser/download/download_item_model.cc
--- up/chromium/chrome/browser/download/download_item_model.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/chrome/browser/download/download_item_model.cc	2023-02-19 17:36:27.615444190 +0000
@@ -764,9 +764,11 @@
       // filename. Don't base an "Always open" decision based on it. Also
       // exclude extensions.
       return download_->CanOpenDownload() &&
+#if 0
              safe_browsing::FileTypePolicies::GetInstance()
                  ->IsAllowedToOpenAutomatically(
                      download_->GetTargetFilePath()) &&
+#endif
              !download_crx_util::IsExtensionDownload(*download_);
     case DownloadCommands::PAUSE:
       return !download_->IsSavePackageDownload() &&
@@ -927,6 +929,7 @@
       DownloadUIModel::ExecuteCommand(download_commands, command);
       break;
     case DownloadCommands::DEEP_SCAN:
+#if 0
       safe_browsing::SafeBrowsingService* sb_service =
           g_browser_process->safe_browsing_service();
       if (!sb_service)
@@ -959,12 +962,14 @@
           safe_browsing::DeepScanningRequest::DeepScanTrigger::
               TRIGGER_APP_PROMPT,
           safe_browsing::DownloadCheckResult::UNKNOWN, std::move(settings));
+#endif
       break;
   }
 }
 
 DownloadItemModel::BubbleUIInfo
 DownloadItemModel::GetBubbleUIInfoForTailoredWarning() const {
+#if 0
   download::DownloadDangerType danger_type = GetDangerType();
   TailoredVerdict tailored_verdict = safe_browsing::DownloadProtectionService::
       GetDownloadProtectionTailoredVerdict(download_);
@@ -1030,10 +1035,13 @@
   }
 
   NOTREACHED();
+#endif
   return DownloadUIModel::BubbleUIInfo();
 }
 
 bool DownloadItemModel::ShouldShowTailoredWarning() const {
+  return false;
+#if 0
   if (!IsBubbleV2Enabled() ||
       !base::FeatureList::IsEnabled(safe_browsing::kDownloadTailoredWarnings)) {
     return false;
@@ -1060,6 +1068,7 @@
   }
 
   return false;
+#endif
 }
 
 bool DownloadItemModel::ShouldShowInBubble() const {
