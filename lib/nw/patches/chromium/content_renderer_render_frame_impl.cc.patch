diff -r -u --color up/chromium/content/renderer/render_frame_impl.cc nw/chromium/content/renderer/render_frame_impl.cc
--- up/chromium/content/renderer/render_frame_impl.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/content/renderer/render_frame_impl.cc	2023-02-19 17:36:35.859465035 +0000
@@ -258,6 +258,9 @@
 
 using base::Time;
 using blink::ContextMenuData;
+
+#include "content/nw/src/nw_content.h"
+
 using blink::WebContentDecryptionModule;
 using blink::WebData;
 using blink::WebDocument;
@@ -1150,6 +1153,7 @@
     case blink::kWebNavigationPolicyDownload:
       return WindowOpenDisposition::SAVE_TO_DISK;
     case blink::kWebNavigationPolicyCurrentTab:
+    case blink::kWebNavigationPolicyIgnore:
       return WindowOpenDisposition::CURRENT_TAB;
     case blink::kWebNavigationPolicyNewBackgroundTab:
       return WindowOpenDisposition::NEW_BACKGROUND_TAB;
@@ -1421,6 +1425,16 @@
   return render_frame_->frame_;
 }
 
+void RenderFrameImpl::willHandleNavigationPolicy(
+                                                blink::WebFrame* frame,
+                                                const blink::WebURLRequest& request,
+                                                blink::WebNavigationPolicy* policy,
+                                                blink::WebString* manifest,
+                                                bool new_win) {
+  GetContentClient()->renderer()
+    ->willHandleNavigationPolicy(this, frame, request, policy, manifest, new_win);
+}
+
 // static
 RenderFrameImpl* RenderFrameImpl::Create(
     AgentSchedulingGroup& agent_scheduling_group,
@@ -1828,7 +1842,8 @@
 
 // RenderFrameImpl ----------------------------------------------------------
 RenderFrameImpl::RenderFrameImpl(CreateParams params)
-    : agent_scheduling_group_(*params.agent_scheduling_group),
+  : skip_blocking_parser_(true), frame_(nullptr),
+      agent_scheduling_group_(*params.agent_scheduling_group),
       is_main_frame_(true),
       unique_name_frame_adapter_(this),
       unique_name_helper_(&unique_name_frame_adapter_),
@@ -2471,6 +2486,10 @@
   interface_provider_receivers_.Add(this, std::move(receiver), task_runner);
 }
 
+void RenderFrameImpl::SetSkipBlockingParser(bool value) {
+  skip_blocking_parser_ = value;
+}
+
 void RenderFrameImpl::BlockRequests() {
   frame_request_blocker_->Block();
 }
@@ -4376,6 +4395,7 @@
         context, std::move(mojo_js_interface_broker_));
   }
 
+  GetFrameHost()->SetContextCreated(true);
   for (auto& observer : observers_)
     observer.DidCreateScriptContext(context, world_id);
 }
@@ -4384,6 +4404,7 @@
                                                int world_id) {
   for (auto& observer : observers_)
     observer.WillReleaseScriptContext(context, world_id);
+  GetFrameHost()->SetContextCreated(false);
 }
 
 void RenderFrameImpl::DidChangeScrollOffset() {
@@ -4411,6 +4432,10 @@
 }
 
 blink::WebString RenderFrameImpl::UserAgentOverride() {
+  std::string user_agent;
+  if (nw::GetUserAgentFromManifest(&user_agent))
+    return WebString::FromUTF8(user_agent);
+
   if (ShouldUseUserAgentOverride()) {
     return WebString::FromUTF8(GetWebView()
                                    ->GetRendererPreferences()
@@ -6201,7 +6226,8 @@
     bool& consumed_user_gesture,
     const absl::optional<blink::Impression>& impression,
     const absl::optional<blink::WebPictureInPictureWindowOptions>&
-        pip_options) {
+    pip_options,
+    blink::WebString* manifest) {
   consumed_user_gesture = false;
   mojom::CreateNewWindowParamsPtr params = mojom::CreateNewWindowParams::New();
 
@@ -6232,6 +6258,7 @@
         request.GetReferrerPolicy());
   }
   params->features = ConvertWebWindowFeaturesToMojoWindowFeatures(features);
+  params->nw_window_manifest = manifest->Utf16();
 
   params->is_form_submission = request.IsFormSubmission();
   params->form_submission_post_data =
@@ -6319,6 +6346,7 @@
   // disagrees.
   mojom::CreateViewParamsPtr view_params = mojom::CreateViewParams::New();
 
+  view_params->skip_blocking_parser = true;
   view_params->opener_frame_token = GetWebFrame()->GetFrameToken();
   view_params->window_was_opened_by_another_window = true;
   view_params->renderer_preferences = GetWebView()->GetRendererPreferences();
