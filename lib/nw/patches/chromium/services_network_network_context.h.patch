diff -r -u --color up/chromium/services/network/network_context.h nw/chromium/services/network/network_context.h
--- up/chromium/services/network/network_context.h	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/services/network/network_context.h	2023-02-24 20:54:16.676473748 +0000
@@ -73,11 +73,17 @@
 #include "net/reporting/reporting_report.h"
 #endif  // BUILDFLAG(ENABLE_REPORTING)
 
+namespace nw {
+  class PolicyCertVerifier;
+}
+
 namespace base {
 class UnguessableToken;
 }  // namespace base
 
 namespace net {
+class CertNetFetcher;
+class CertNetFetcherURLRequest;
 class CertVerifier;
 class HostPortPair;
 class IsolationInfo;
@@ -301,6 +307,7 @@
   void SetAcceptLanguage(const std::string& new_accept_language) override;
   void SetEnableReferrers(bool enable_referrers) override;
   void SetEnablePreconnect(bool enable_preconnect) override;
+  void SetTrustAnchors(const net::CertificateList&) override;
 #if BUILDFLAG(IS_CHROMEOS)
   void UpdateAdditionalCertificates(
       mojom::AdditionalCertificatesPtr additional_certificates) override;
@@ -809,6 +816,7 @@
   std::unique_ptr<SCTAuditingHandler> sct_auditing_handler_;
 #endif  // BUILDFLAG(IS_CT_SUPPORTED)
 
+  nw::PolicyCertVerifier* nw_cert_verifier_ = nullptr;
 #if BUILDFLAG(IS_CHROMEOS)
   raw_ptr<CertVerifierWithTrustAnchors> cert_verifier_with_trust_anchors_ =
       nullptr;
@@ -820,6 +828,11 @@
   std::vector<base::OnceClosure> dismount_closures_;
 #endif  // BUILDFLAG(IS_DIRECTORY_TRANSFER_REQUIRED)
 
+  // CertNetFetcher used by the context's CertVerifier. May be nullptr if
+  // CertNetFetcher is not used by the current platform, or if the actual
+  // net::CertVerifier is instantiated outside of the network service.
+  scoped_refptr<net::CertNetFetcherURLRequest> cert_net_fetcher_;
+
   // Created on-demand. Null if unused.
   std::unique_ptr<HostResolver> internal_host_resolver_;
   // Map values set to non-null only if that HostResolver has its own private
