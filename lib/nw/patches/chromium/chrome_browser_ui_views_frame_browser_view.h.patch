diff -r -u --color up/chromium/chrome/browser/ui/views/frame/browser_view.h nw/chromium/chrome/browser/ui/views/frame/browser_view.h
--- up/chromium/chrome/browser/ui/views/frame/browser_view.h	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/chrome/browser/ui/views/frame/browser_view.h	2023-02-24 20:54:08.408514071 +0000
@@ -10,6 +10,8 @@
 #include <string>
 #include <vector>
 
+#include "extensions/browser/app_window/size_constraints.h"
+
 #include "base/callback_list.h"
 #include "base/gtest_prod_util.h"
 #include "base/memory/raw_ptr.h"
@@ -139,6 +141,8 @@
   void set_frame(BrowserFrame* frame) { frame_ = frame; }
   BrowserFrame* frame() const { return frame_; }
 
+  const extensions::SizeConstraints& size_constraints() const { return size_constraints_; }
+
   // Returns a pointer to the BrowserView* interface implementation (an
   // instance of this object, typically) for a given native window, or null if
   // there is no such association.
@@ -440,11 +444,24 @@
   void UpdateSidePanelHorizontalAlignment();
 
   // BrowserWindow:
+  void ForceClose() override;
+  void SetShowInTaskbar(bool) override;
+  void NativeWindowChanged() override;
+  void SetMinimumSize(gfx::Size) override;
+  void SetMaximumSize(gfx::Size) override;
+  void SetResizable(bool) override;
+  void SetAllVisible(bool) override;
+  void UpdateDraggableRegions(
+      const std::vector<extensions::DraggableRegion>& regions) override;
+  SkRegion* GetDraggableRegion() override;
   void Show() override;
   void ShowInactive() override;
   void Hide() override;
   bool IsVisible() const override;
   void SetBounds(const gfx::Rect& bounds) override;
+#if defined(OS_WIN)
+  void SetPosition(const gfx::Point& pos) override;
+#endif
   void Close() override;
   void Activate() override;
   void Deactivate() override;
@@ -660,6 +677,9 @@
                                   ui::Accelerator* accelerator) const override;
 
   // views::WidgetDelegate:
+  bool NWCanClose(bool user_force = false) const override;
+  bool CanResize() const override;
+  bool CanMaximize() const override;
   bool CanActivate() const override;
   std::u16string GetWindowTitle() const override;
   std::u16string GetAccessibleWindowTitle() const override;
@@ -702,6 +722,7 @@
   views::CloseRequestResult OnWindowCloseRequested() override;
   int NonClientHitTest(const gfx::Point& point) override;
   gfx::Size GetMinimumSize() const override;
+  gfx::Size GetMaximumSize() const override;
 
   // infobars::InfoBarContainer::Delegate:
   void InfoBarContainerStateChanged(bool is_animating) override;
@@ -832,12 +853,13 @@
   void CreateJumpList();
 #endif
 
+public:
   // Returns the BrowserViewLayout.
   BrowserViewLayout* GetBrowserViewLayout() const;
 
   // Returns the ContentsLayoutManager.
   ContentsLayoutManager* GetContentsLayoutManager() const;
-
+private:
   // Prepare to show the Bookmark Bar for the specified WebContents.
   // Returns true if the Bookmark Bar can be shown (i.e. it's supported for this
   // Browser type) and there should be a subsequent re-layout to show it.
@@ -942,6 +964,7 @@
   // and activates them. It returns true if it succeeded activating a bubble or
   // false otherwise.
   bool ActivateFirstInactiveBubbleForAccessibility();
+  std::unique_ptr<SkRegion> draggable_region_;
 
   // Notifies that window bounds changed to extensions if needed.
   void TryNotifyWindowBoundsChanged(const gfx::Rect& widget_bounds);
@@ -958,6 +981,9 @@
   // side panel. Should be called when the IPH backend is initialized or
   // whenever the touch mode changes.
   void MaybeShowReadingListInSidePanelIPH();
+  bool resizable_ = true;
+
+  extensions::SizeConstraints size_constraints_, saved_size_constraints_;
 
   void UpdateWindowControlsOverlayEnabled();
 
