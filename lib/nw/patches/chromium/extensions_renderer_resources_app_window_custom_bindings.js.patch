diff -r -u --color up/chromium/extensions/renderer/resources/app_window_custom_bindings.js nw/chromium/extensions/renderer/resources/app_window_custom_bindings.js
--- up/chromium/extensions/renderer/resources/app_window_custom_bindings.js	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/extensions/renderer/resources/app_window_custom_bindings.js	2023-02-25 19:07:17.701827183 +0000
@@ -20,8 +20,23 @@
 var Bounds = function(boundsKey) {
   privates(this).boundsKey_ = boundsKey;
 };
+
+var try_hidden = function (view) {
+  if (view.chrome.app.window)
+    return view;
+  return privates(view);
+};
+
+var try_nw = function (view) {
+  if (view.nw)
+    return view;
+  return privates(view);
+};
+
 Object.defineProperty(Bounds.prototype, 'left', {
   get: function() {
+    if (!privates(this)) //NWJS#6553
+      return 0;
     return appWindowData[privates(this).boundsKey_].left;
   },
   set: function(left) {
@@ -31,6 +46,8 @@
 });
 Object.defineProperty(Bounds.prototype, 'top', {
   get: function() {
+    if (!privates(this)) //NWJS#6553
+      return 0;
     return appWindowData[privates(this).boundsKey_].top;
   },
   set: function(top) {
@@ -40,6 +57,8 @@
 });
 Object.defineProperty(Bounds.prototype, 'width', {
   get: function() {
+    if (!privates(this)) //NWJS#6553
+      return 0;
     return appWindowData[privates(this).boundsKey_].width;
   },
   set: function(width) {
@@ -49,6 +68,8 @@
 });
 Object.defineProperty(Bounds.prototype, 'height', {
   get: function() {
+    if (!privates(this)) //NWJS#6553
+      return 0;
     return appWindowData[privates(this).boundsKey_].height;
   },
   set: function(height) {
@@ -58,36 +79,52 @@
 });
 Object.defineProperty(Bounds.prototype, 'minWidth', {
   get: function() {
+    if (!privates(this)) //NWJS#6553
+      return 0;
     return appWindowData[privates(this).boundsKey_].minWidth;
   },
   set: function(minWidth) {
+    if (!privates(this)) //NWJS#6553
+      return;
     updateSizeConstraints(privates(this).boundsKey_, { minWidth: minWidth });
   },
   enumerable: true
 });
 Object.defineProperty(Bounds.prototype, 'maxWidth', {
   get: function() {
+    if (!privates(this)) //NWJS#6553
+      return 0;
     return appWindowData[privates(this).boundsKey_].maxWidth;
   },
   set: function(maxWidth) {
+    if (!privates(this)) //NWJS#6553
+      return;
     updateSizeConstraints(privates(this).boundsKey_, { maxWidth: maxWidth });
   },
   enumerable: true
 });
 Object.defineProperty(Bounds.prototype, 'minHeight', {
   get: function() {
+    if (!privates(this)) //NWJS#6553
+      return 0;
     return appWindowData[privates(this).boundsKey_].minHeight;
   },
   set: function(minHeight) {
+    if (!privates(this)) //NWJS#6553
+      return;
     updateSizeConstraints(privates(this).boundsKey_, { minHeight: minHeight });
   },
   enumerable: true
 });
 Object.defineProperty(Bounds.prototype, 'maxHeight', {
   get: function() {
+    if (!privates(this)) //NWJS#6553
+      return 0;
     return appWindowData[privates(this).boundsKey_].maxHeight;
   },
   set: function(maxHeight) {
+    if (!privates(this)) //NWJS#6553
+      return;
     updateSizeConstraints(privates(this).boundsKey_, { maxHeight: maxHeight });
   },
   enumerable: true
@@ -128,7 +165,7 @@
     if (windowParams.existingWindow) {
       // Not creating a new window, but activating an existing one, so trigger
       // callback with existing window and don't do anything else.
-      let windowResult = view ? view.chrome.app.window.current() : undefined;
+      let windowResult = view ? try_hidden(view).chrome.app.window.current() : undefined;
       maybeCallback(windowResult);
       return;
     }
@@ -142,7 +179,7 @@
             ' The chrome.app.window.create callback will be called, but ' +
             'there will be no object provided for the sandboxed window.';
       }
-      console.warn(sandbox_window_message);
+      //console.warn(sandbox_window_message);
       maybeCallback(undefined);
       return;
     }
@@ -150,20 +187,27 @@
     // Handle error pages.
     // TODO(arthursonzogni): Figure out why view.chrome.app is defined for error
     // pages and stop doing it.
-    if (!view.chrome.app.window) {
+    if (!try_hidden(view).chrome.app.window) {
       maybeCallback(undefined);
       return;
     }
 
     // Initialize appWindowData in the newly created JS context
-    view.chrome.app.window.initializeAppWindow(windowParams);
+    try_hidden(view).chrome.app.window.initializeAppWindow(windowParams);
 
     var willCallback = renderFrameObserverNatives.OnDocumentElementCreated(
-        windowParams.frameId, function(success) {
-          let windowResult = success ? view.chrome.app.window.current()
-                                     : undefined;
-          maybeCallback(windowResult);
-        });
+      windowParams.frameId, function(success) {
+        if (success) {
+          var appwin = try_hidden(view).chrome.app.window.current();
+          if (!appwin) {
+            try_hidden(view).chrome.app.window.initializeAppWindow(windowParams);
+            appwin = try_hidden(view).chrome.app.window.current();
+          }
+        }
+        let windowResult = success ? appwin
+                : undefined;
+        maybeCallback(windowResult);
+      });
     appWindowNatives.ResumeParser(windowParams.frameId);
     if (!willCallback)
       maybeCallback(undefined);
@@ -171,8 +215,6 @@
 
   apiFunctions.setHandleRequest('current', function() {
     if (!currentAppWindow) {
-      console.error('The JavaScript context calling ' +
-                    'chrome.app.window.current() has no associated AppWindow.');
       return null;
     }
     return currentAppWindow;
@@ -196,7 +238,12 @@
       return true;
     });
     return $Array.map(views, function(win) {
-      return win.chrome.app.window.current();
+      try {
+        if (try_nw(win).nw) //check for undefined case in NWJS#5528
+          try_nw(win).nw.Window.get(); //construct the window object for NWJS#5294
+      } catch (e) { //NWJS#7310
+      }
+      return try_hidden(win).chrome.app.window.current();
     });
   });
 
@@ -253,6 +300,9 @@
     AppWindow.prototype.isFullscreen = function() {
       return appWindowData.fullscreen;
     };
+    AppWindow.prototype.isResizable = function() {
+      return appWindowData.resizable;
+    };
     AppWindow.prototype.isMinimized = function() {
       return appWindowData.minimized;
     };
@@ -314,6 +364,7 @@
       minimized: params.minimized,
       maximized: params.maximized,
       alwaysOnTop: params.alwaysOnTop,
+      resizable: params.resizable,
       hasFrameColor: params.hasFrameColor,
       activeFrameColor: params.activeFrameColor,
       inactiveFrameColor: params.inactiveFrameColor,
@@ -330,6 +381,18 @@
           bounds1.width == bounds2.width && bounds1.height == bounds2.height);
 }
 
+function sizeEqual(bounds1, bounds2) {
+  if (!bounds1 || !bounds2)
+    return false;
+  return (bounds1.width == bounds2.width && bounds1.height == bounds2.height);
+}
+
+function posEqual(bounds1, bounds2) {
+  if (!bounds1 || !bounds2)
+    return false;
+  return (bounds1.left == bounds2.left && bounds1.top == bounds2.top);
+}
+
 function dispatchEventIfExists(target, name) {
   // Sometimes apps like to put their own properties on the window which
   // break our assumptions.
@@ -350,8 +413,20 @@
 
   var currentWindow = currentAppWindow;
 
-  if (!boundsEqual(oldData.innerBounds, update.innerBounds))
+  if (!boundsEqual(oldData.innerBounds, update.innerBounds)) {
     dispatchEventIfExists(currentWindow, "onBoundsChanged");
+    if (!sizeEqual(oldData.innerBounds, update.innerBounds))
+      dispatchEventIfExists(currentWindow, "onResized");
+    if (!posEqual(oldData.innerBounds, update.innerBounds))
+      dispatchEventIfExists(currentWindow, "onMoved");
+  }
+
+  // NW fix: fire onRestored earlier than fullscreen/minimize/maximize
+  // events. See nwjs/nw.js#5388.
+  if ((oldData.fullscreen && !update.fullscreen) ||
+      (oldData.minimized && !update.minimized) ||
+      (oldData.maximized && !update.maximized))
+    dispatchEventIfExists(currentWindow, "onRestored");
 
   if (!oldData.fullscreen && update.fullscreen)
     dispatchEventIfExists(currentWindow, "onFullscreened");
@@ -360,11 +435,6 @@
   if (!oldData.maximized && update.maximized)
     dispatchEventIfExists(currentWindow, "onMaximized");
 
-  if ((oldData.fullscreen && !update.fullscreen) ||
-      (oldData.minimized && !update.minimized) ||
-      (oldData.maximized && !update.maximized))
-    dispatchEventIfExists(currentWindow, "onRestored");
-
   if (oldData.alphaEnabled !== update.alphaEnabled)
     dispatchEventIfExists(currentWindow, "onAlphaEnabledChanged");
 };
