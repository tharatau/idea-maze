diff -r -u --color up/chromium/content/browser/child_process_security_policy_impl.cc nw/chromium/content/browser/child_process_security_policy_impl.cc
--- up/chromium/content/browser/child_process_security_policy_impl.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/content/browser/child_process_security_policy_impl.cc	2023-02-24 20:54:12.640494557 +0000
@@ -306,7 +306,7 @@
 class ChildProcessSecurityPolicyImpl::SecurityState {
  public:
   explicit SecurityState(BrowserContext* browser_context)
-      : enabled_bindings_(0),
+    : grant_all_(false), enabled_bindings_(0),
         can_read_raw_cookies_(false),
         can_send_midi_sysex_(false),
         browser_context_(browser_context),
@@ -346,6 +346,10 @@
     scheme_map_[scheme] = CommitRequestPolicy::kCommitAndRequest;
   }
 
+  void GrantAll() {
+    grant_all_ = true;
+  }
+
   void GrantRequestScheme(const std::string& scheme) {
     // Anything already in |scheme_map_| must have at least request permission
     // already. In that case, the emplace() below will be a no-op.
@@ -423,6 +427,8 @@
   bool CanCommitURL(const GURL& url) {
     DCHECK(!url.SchemeIsBlob() && !url.SchemeIsFileSystem())
         << "inner_url extraction should be done already.";
+    if (grant_all_)
+      return true;
     // Having permission to a scheme implies permission to all of its URLs.
     auto scheme_judgment = scheme_map_.find(url.scheme());
     if (scheme_judgment != scheme_map_.end() &&
@@ -469,6 +475,8 @@
     if (file.IsContentUri())
       return HasPermissionsForContentUri(file, permissions);
 #endif
+    if (grant_all_)
+      return true;
     if (!permissions || file.empty() || !file.IsAbsolute())
       return false;
     base::FilePath current_path = file.StripTrailingSeparators();
@@ -611,6 +619,8 @@
   // granted. There is no provision for revoking.
   SchemeMap scheme_map_;
 
+  bool grant_all_;
+
   // The map of URL origins to commit/request policies the child process has
   // been granted. There is no provision for revoking.
   OriginMap origin_map_;
@@ -750,7 +760,7 @@
   // IsWebSafeScheme(), and then eliminate the next two lines.
   RegisterWebSafeScheme(url::kBlobScheme);
   RegisterWebSafeScheme(url::kFileSystemScheme);
-
+  //RegisterWebSafeScheme("chrome-devtools");
   // We know about the following pseudo schemes and treat them specially.
   RegisterPseudoScheme(url::kAboutScheme);
   RegisterPseudoScheme(url::kJavaScriptScheme);
@@ -941,6 +951,15 @@
   }
 }
 
+void ChildProcessSecurityPolicyImpl::GrantAll(int child_id) {
+  base::AutoLock lock(lock_);
+  SecurityStateMap::iterator state = security_state_.find(child_id);
+  if (state == security_state_.end())
+    return;
+
+  state->second->GrantAll();
+}
+
 void ChildProcessSecurityPolicyImpl::GrantReadFile(int child_id,
                                                    const base::FilePath& file) {
   GrantPermissionsForFile(child_id, file, READ_FILE_GRANT);
