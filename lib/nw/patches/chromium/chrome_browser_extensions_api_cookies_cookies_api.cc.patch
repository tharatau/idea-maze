diff -r -u --color up/chromium/chrome/browser/extensions/api/cookies/cookies_api.cc nw/chromium/chrome/browser/extensions/api/cookies/cookies_api.cc
--- up/chromium/chrome/browser/extensions/api/cookies/cookies_api.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/api/cookies/cookies_api.cc	2023-02-19 17:36:27.687444372 +0000
@@ -5,6 +5,7 @@
 // Implements the Chrome Extensions Cookies API.
 
 #include "chrome/browser/extensions/api/cookies/cookies_api.h"
+#include "base/strings/string_number_conversions.h"
 
 #include <memory>
 #include <utility>
@@ -30,6 +31,7 @@
 #include "components/safe_browsing/core/common/features.h"
 #include "content/public/browser/browser_context.h"
 #include "content/public/browser/browser_thread.h"
+#include "extensions/browser/guest_view/web_view/web_view_guest.h"
 #include "content/public/browser/notification_service.h"
 #include "content/public/browser/storage_partition.h"
 #include "extensions/browser/event_router.h"
@@ -68,6 +70,45 @@
   return true;
 }
 
+std::vector<std::string> Split(std::string str, const std::string delim) {
+  std::vector<std::string> result;
+  size_t position = 0;
+  while ((position = str.find(delim)) != std::string::npos)
+  {
+    result.push_back(str.substr(0, position));
+    str.erase(0, position + delim.length());
+  }
+
+  result.push_back(str);
+  return result;
+}
+
+content::StoragePartition* GetStoragePartitionFromWebview(const std::string& store_id) {
+  if (store_id.find(",") == std::string::npos)
+    return nullptr;
+
+  std::vector<std::string> processGuestIds = Split(store_id, ",");
+  if (processGuestIds.size() != 2)
+    return nullptr;
+
+  int processId, guessId;
+  if (!base::StringToInt(processGuestIds[0], &processId)
+    || !base::StringToInt(processGuestIds[1], &guessId))
+    return nullptr;
+
+  extensions::WebViewGuest* guest = extensions::WebViewGuest::FromInstanceID(
+    processId, guessId);
+
+  if (!guest)
+    return nullptr;
+
+  content::StoragePartition* partition =
+    guest->web_contents()->GetBrowserContext()->GetStoragePartition(
+      guest->web_contents()->GetSiteInstance());
+
+  return partition;
+}
+
 network::mojom::CookieManager* ParseStoreCookieManager(
     content::BrowserContext* function_context,
     bool include_incognito,
@@ -76,6 +117,11 @@
   Profile* function_profile = Profile::FromBrowserContext(function_context);
   Profile* store_profile = nullptr;
   if (!store_id->empty()) {
+    content::StoragePartition* partition = GetStoragePartitionFromWebview(*store_id);
+    if (partition) {
+      return partition->GetCookieManagerForBrowserProcess();
+    }
+
     store_profile = cookies_helpers::ChooseProfileFromStoreId(
         *store_id, function_profile, include_incognito);
     if (!store_profile) {
@@ -285,6 +331,7 @@
 }
 
 void CookiesGetFunction::NotifyExtensionTelemetry() {
+#if 0
   auto* telemetry_service =
       safe_browsing::ExtensionTelemetryServiceFactory::GetForProfile(
           Profile::FromBrowserContext(browser_context()));
@@ -300,6 +347,7 @@
       parsed_args_->details.store_id.value_or(std::string()),
       parsed_args_->details.url);
   telemetry_service->AddSignal(std::move(cookies_get_signal));
+#endif
 }
 
 CookiesGetAllFunction::CookiesGetAllFunction() {
@@ -383,6 +431,7 @@
 }
 
 void CookiesGetAllFunction::NotifyExtensionTelemetry() {
+#if 0
   auto* telemetry_service =
       safe_browsing::ExtensionTelemetryServiceFactory::GetForProfile(
           Profile::FromBrowserContext(browser_context()));
@@ -403,6 +452,7 @@
           parsed_args_->details.url.value_or(std::string()),
           parsed_args_->details.session.value_or(false));
   telemetry_service->AddSignal(std::move(cookies_get_all_signal));
+#endif
 }
 
 CookiesSetFunction::CookiesSetFunction()
