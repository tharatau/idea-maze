diff -r -u --color up/chromium/chrome/browser/lifetime/application_lifetime_desktop.cc nw/chromium/chrome/browser/lifetime/application_lifetime_desktop.cc
--- up/chromium/chrome/browser/lifetime/application_lifetime_desktop.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/chrome/browser/lifetime/application_lifetime_desktop.cc	2023-02-19 17:36:27.919444959 +0000
@@ -1,6 +1,8 @@
 // Copyright 2022 The Chromium Authors
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
+#include "components/keep_alive_registry/keep_alive_registry.h"
+#include "components/keep_alive_registry/keep_alive_types.h"
 
 #include "chrome/browser/lifetime/application_lifetime_desktop.h"
 #include "chrome/browser/lifetime/application_lifetime.h"
@@ -153,12 +155,15 @@
 
 }  // namespace
 
-void CloseAllBrowsersAndQuit() {
+void CloseAllBrowsersAndQuit(bool force, bool user_force) {
   browser_shutdown::SetTryingToQuit(true);
-  CloseAllBrowsers();
+  CloseAllBrowsers(force, user_force);
+  // trigger BrowserProcessImpl::Unpin()
+  KeepAliveRegistry::GetInstance()->Register(KeepAliveOrigin::APP_CONTROLLER, KeepAliveRestartOption::ENABLED);
+  KeepAliveRegistry::GetInstance()->Unregister(KeepAliveOrigin::APP_CONTROLLER, KeepAliveRestartOption::ENABLED);
 }
 
-void CloseAllBrowsers() {
+void CloseAllBrowsers(bool force, bool user_force) {
   // If there are no browsers and closing the last browser would quit the
   // application, send the APP_TERMINATING action here. Otherwise, it will be
   // sent by RemoveBrowser() when the last browser has closed.
@@ -174,7 +179,7 @@
                                                      false);
 #endif  // BUILDFLAG(IS_CHROMEOS_ASH)
   scoped_refptr<BrowserCloseManager> browser_close_manager =
-      new BrowserCloseManager;
+    new BrowserCloseManager(force, user_force);
   browser_close_manager->StartClosingBrowsers();
 }
 
