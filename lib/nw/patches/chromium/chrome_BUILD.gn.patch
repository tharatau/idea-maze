diff -r -u --color up/chromium/chrome/BUILD.gn nw/chromium/chrome/BUILD.gn
--- up/chromium/chrome/BUILD.gn	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/chrome/BUILD.gn	2023-02-25 19:07:06.393760502 +0000
@@ -77,10 +77,10 @@
 
     # See comment in chrome_dll.gypi in the hardlink_to_output
     # target for why this cannot be 'initial' like the DLL.
-    inputs = [ "$root_out_dir/initialexe/chrome.exe" ]
+    inputs = [ "$root_out_dir/initialexe/nw.exe" ]
     outputs = [
-      "$root_out_dir/chrome.exe",
-      "$root_out_dir/chrome.exe.pdb",
+      "$root_out_dir/nw.exe",
+      "$root_out_dir/nw.exe.pdb",
     ]
     args = [
       "-i",
@@ -141,9 +141,9 @@
     configs -= [ "//build/config/compiler:thinlto_optimize_default" ]
     configs += [ "//build/config/compiler:thinlto_optimize_max" ]
     if (is_win) {
-      output_name = "initialexe/chrome"
+      output_name = "initialexe/nw"
     } else {
-      output_name = "chrome"
+      output_name = "nw"
     }
 
     # Because the sources list varies so significantly per-platform, generally
@@ -262,13 +262,19 @@
     }
 
     if (is_linux || is_chromeos || is_fuchsia) {
+      if (!is_component_build) {
+        configs += [ "//build/config/gcc:rpath_for_built_shared_libraries" ]
+      }
+      if (is_component_build) {
       sources += [
         "app/chrome_dll_resource.h",
         "app/chrome_main.cc",
         "app/chrome_main_delegate.cc",
         "app/chrome_main_delegate.h",
       ]
+      }
 
+      if (is_component_build) {
       deps += [
         # On Linux, link the dependencies (libraries) that make up actual
         # Chromium functionality directly into the executable.
@@ -287,7 +293,13 @@
         # For headless mode.
         "//headless:headless_shell_lib",
       ]
+      } else {
+      deps += [
+        ":chrome_dll",
+      ]
+      }
 
+      if (is_component_build) {
       public_deps = [ "//chrome/common:buildflags" ]
 
       if (!is_fuchsia) {
@@ -297,6 +309,7 @@
 
         data_deps += [ "//components/crash/core/app:chrome_crashpad_handler" ]
       }
+      }
 
       ldflags = []
 
@@ -360,6 +373,10 @@
     # The step's output are needed at runtime, so we also need a data_dep.
     data_deps += [ ":packed_resources" ]
 
+    deps += [
+      "//content/nw:nw_base",
+    ]
+
     # ChromeOS by design is safe to have rpath=$ORIGIN. This simplifies shared
     # library usage.
     if (is_chromeos_ash && !is_component_build) {
@@ -377,61 +394,82 @@
   }
 }  # !is_android && !is_mac
 
-if (is_win) {
+if (is_win || (is_linux && !is_component_build)) {
   shared_library("chrome_dll") {
     configs += [ "//build/config/compiler:wexit_time_destructors" ]
     configs -= [ "//build/config/compiler:thinlto_optimize_default" ]
     configs += [ "//build/config/compiler:thinlto_optimize_max" ]
     defines = []
+    ldflags = []
 
     sources = [
-      "//base/win/dllmain.cc",
       "app/chrome_main.cc",
       "app/chrome_main_delegate.cc",
       "app/chrome_main_delegate.h",
     ]
 
-    output_name = "chrome"
+    if (is_win) {
+      sources += [ "//base/win/dllmain.cc" ]
+    }
+
+    output_name = "nw"
 
     deps = [
-      ":chrome_dll_manifest",
-      ":chrome_dll_version",
       ":dependencies",
       "//base/allocator:buildflags",
       "//chrome/app:chrome_dll_resources",
       "//chrome/app:command_ids",
-      "//chrome/app/theme:chrome_unscaled_resources",
-      "//chrome/chrome_elf",
       "//chrome/common:buildflags",
       "//chrome/common/profiler",
-      "//chrome/install_static:install_static_util",
-      "//chrome/install_static:secondary_module",
-      "//components/browser_watcher:stability_client",
-      "//components/crash/core/app",
-      "//components/policy:generated",
-      "//content/public/app",
-      "//crypto",
-      "//headless:headless_renderer",
-      "//headless:headless_shell_browser_lib",
-      "//net:net_resources",
-      "//ppapi/buildflags",
-      "//sandbox/win:sandbox",
-      "//third_party/cld_3/src/src:cld_3",
-      "//third_party/wtl",
-      "//ui/views",
     ]
 
+    # reverts commit a2052ac9b6ec749735f3d8e269bf5a5600935914
+    if (is_win) {
     configs += [ "//build/config/win:delayloads" ]
 
+    deps += [
+        ":chrome_dll_manifest",
+        ":chrome_dll_version",
+        "//chrome/app/theme:chrome_unscaled_resources",
+        "//chrome/install_static:install_static_util",
+        "//chrome/install_static:secondary_module",
+        "//chrome/chrome_elf",
+        "//components/browser_watcher:stability_client",
+        "//components/crash/core/app",
+        "//components/policy:generated",
+        "//crypto",
+        "//headless:headless_renderer",
+        "//headless:headless_shell_lib",
+        "//net:net_resources",
+        "//ppapi/buildflags",
+        "//sandbox/win:sandbox",
+        "//third_party/wtl",
+        "//ui/views",
+    ]
+
+    if (!is_component_build) {
+      deps += [
+        "//v8:v8_initializers",
+      ]
+    }
+
+    } #is_win
+
     if (use_aura) {
       deps += [ "//ui/compositor" ]
     }
+
+    if (is_linux) {
+        deps += [ "//headless:headless_shell_lib", ]
+    }
   }
 
+  if (is_win) {
   copy("copy_first_run") {
     sources = [ "app/FirstRun" ]
     outputs = [ "$root_out_dir/First Run" ]
   }
+  }
 } else if (is_mac) {
   chrome_helper_name = chrome_product_full_name + " Helper"
   chrome_framework_name = chrome_product_full_name + " Framework"
@@ -504,7 +542,7 @@
       "//chrome/common:version_header",
     ]
 
-    if (enable_stripping) {
+    if (false) {
       # At link time, preserve the global symbols specified in the .exports
       # file. All other global symbols will be marked as private. The default
       # //build/config/mac:strip_all config will then remove the remaining
@@ -761,7 +799,7 @@
         ]
       }
 
-      if (enable_stripping) {
+      if (false) {
         # At link time, preserve the global symbols specified in the .exports
         # file. All other global symbols will be marked as private. The default
         # //build/config/mac:strip_all config will then remove the remaining
@@ -959,7 +997,8 @@
         } else if (current_cpu == "x64") {
           sources += [ "$root_out_dir/nacl_irt_x86_64.nexe" ]
         }
-        public_deps += [ "//ppapi/native_client:irt" ]
+        sources += [ "$root_out_dir/pnacl" ]
+        public_deps += [ "//ppapi/native_client:irt", "//ppapi/native_client/src/untrusted/pnacl_support_extension:pnacl_support_extension" ]
       }
     }
   } else {
@@ -1105,6 +1144,8 @@
       ":chrome_framework_shared_library",
     ]
 
+    output_name = "nw"
+
     sources = [
       "app/chrome_crash_reporter_client.cc",
       "app/chrome_crash_reporter_client.h",
@@ -1129,7 +1170,9 @@
       "//components/policy:generated",
       "//content/public/app",
       "//headless:headless_shell_lib",
-      "//third_party/cld_3/src/src:cld_3",
+      #"//third_party/cld_3/src/src:cld_3",
+      "//ui/events:dom_keycode_converter",
+      "//tools/v8_context_snapshot:buildflags",
     ]
 
     if (is_component_build) {
@@ -1143,6 +1186,7 @@
     ]
 
     configs += [ "//build/config/compiler:wexit_time_destructors" ]
+    configs += [ "//v8:external_startup_data" ]
   }
 
   mac_framework_bundle("chrome_framework") {
@@ -1215,7 +1259,7 @@
       ldflags += [
         "-Wl,-install_name,@rpath/$chrome_framework_name.framework/$chrome_framework_name",
         "-Wl,-rpath,@loader_path/../../../../../..",
-        "-Wl,-reexport_library,libchrome_dll.dylib",
+        "-Wl,-reexport_library,libnw.dylib",
       ]
 
       data_deps = [ ":chrome_dll" ]
@@ -1228,7 +1272,7 @@
 
   # TOOD(crbug/1163903#c8) - thakis@ look into why profile and coverage
   # instrumentation adds these symbols in different orders
-  if (!is_component_build && chrome_pgo_phase != 1 && !using_sanitizer) {
+  if (false && !is_component_build && chrome_pgo_phase != 1 && !using_sanitizer) {
     action("verify_chrome_framework_order") {
       script = "//chrome/tools/build/mac/verify_order.py"
       stamp_file = "$target_out_dir/run_$target_name.stamp"
@@ -1300,6 +1344,7 @@
                                get_label_info(dump_syms, "name"),
                            root_build_dir),
                "-m",
+               "-a", "x86_64",
                "-g",
                rebase_path(
                    "$root_out_dir/{{source_file_part}}.dSYM/Contents/Resources/DWARF/{{source_file_part}}",
@@ -1325,6 +1370,41 @@
       }
     }
 
+    action("nw_sym_archive") {
+      script = "//content/nw/tools/archive_symbols.py"
+
+      _syms = [
+        "$root_out_dir/$chrome_framework_name-$chrome_version_full.breakpad",
+        "$root_out_dir/$chrome_helper_name-$chrome_version_full.breakpad",
+        "$root_out_dir/$chrome_product_full_name-$chrome_version_full.breakpad",
+      ]
+
+      sources = _chrome_symbols_sources
+
+      _output = "$root_out_dir/nwjs.breakpad.tar"
+
+      outputs = [
+        _output,
+      ]
+
+      args = [ rebase_path(_output, root_out_dir) ] +
+             rebase_path(_syms, root_out_dir)
+
+      deps = [
+        ":chrome_app",
+        ":chrome_framework",
+        ":chrome_dump_syms",
+        "//components/crash/core/app:chrome_crashpad_handler",
+        "//third_party/angle:libEGL",
+        "//third_party/angle:libGLESv2",
+        "//third_party/crashpad/crashpad/handler:crashpad_handler",
+        "//third_party/swiftshader/src/Vulkan:swiftshader_libvulkan",
+      ]
+      foreach(helper_params, chrome_mac_helpers) {
+        deps += [ ":chrome_helper_app_${helper_params[0]}" ]
+      }
+    }
+
     action("chrome_dsym_archive") {
       script = "//chrome/tools/build/mac/archive_symbols.py"
 
@@ -1566,10 +1646,10 @@
 
     files_to_hash = [
       "resources.pak",
-      "chrome_100_percent.pak",
+      "nw_100_percent.pak",
     ]
     if (enable_hidpi) {
-      files_to_hash += [ "chrome_200_percent.pak" ]
+      files_to_hash += [ "nw_200_percent.pak" ]
     }
   }
 }
@@ -1726,13 +1806,13 @@
       }
     }
     extract_symbols("chrome_symbols") {
-      binary = "$root_out_dir/chrome"
+      binary = "$root_out_dir/nw"
 
       if (current_cpu == "x86") {
         # GYP used "ia32" so keep that naming for back-compat.
-        symbol_file = "$root_out_dir/chrome.breakpad.ia32"
+        symbol_file = "$root_out_dir/nw.breakpad.ia32"
       } else {
-        symbol_file = "$root_out_dir/chrome.breakpad.$current_cpu"
+        symbol_file = "$root_out_dir/nw.breakpad.$current_cpu"
       }
 
       deps = [ ":chrome" ]
