diff -r -u --color up/chromium/third_party/blink/renderer/modules/storage/cached_storage_area.cc nw/chromium/third_party/blink/renderer/modules/storage/cached_storage_area.cc
--- up/chromium/third_party/blink/renderer/modules/storage/cached_storage_area.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/third_party/blink/renderer/modules/storage/cached_storage_area.cc	2023-02-25 19:07:23.717860055 +0000
@@ -23,6 +23,8 @@
 #include "third_party/blink/renderer/platform/wtf/text/unicode.h"
 #include "third_party/blink/renderer/platform/wtf/text/utf8.h"
 
+BLINK_EXPORT int g_nw_dom_storage_quota = 10485760;
+
 namespace blink {
 
 namespace {
@@ -84,11 +86,13 @@
 
   // A quick check to reject obviously overbudget items to avoid priming the
   // cache.
+#if 0
   if ((key.length() + value.length()) * 2 >
       mojom::blink::StorageArea::kPerStorageAreaQuota) {
     return false;
   }
 
+#endif
   EnsureLoaded();
   String old_value;
   if (!map_->SetItem(key, value, &old_value))
@@ -162,8 +166,7 @@
     new_observer = receiver_.BindNewPipeAndPassRemote();
   }
 
-  map_ = std::make_unique<StorageAreaMap>(
-      mojom::blink::StorageArea::kPerStorageAreaQuota);
+  map_ = std::make_unique<StorageAreaMap>(g_nw_dom_storage_quota);
 
   KURL page_url = source->GetPageUrl();
   String source_id = areas_->at(source);
@@ -454,8 +457,7 @@
   // that case because we needed to know whether the StorageArea was actually
   // non-empty prior to the call.
   if (!local_mutation) {
-    map_ = std::make_unique<StorageAreaMap>(
-        mojom::blink::StorageArea::kPerStorageAreaQuota);
+    map_ = std::make_unique<StorageAreaMap>(g_nw_dom_storage_quota);
 
     // Re-apply the most recent local mutations for each key. These must have
     // occurred after the deletion, because we haven't observed events for them
@@ -618,8 +620,7 @@
   const FormatOption key_format = GetKeyFormat();
   const FormatOption value_format = GetValueFormat();
 
-  map_ = std::make_unique<StorageAreaMap>(
-      mojom::blink::StorageArea::kPerStorageAreaQuota);
+  map_ = std::make_unique<StorageAreaMap>(g_nw_dom_storage_quota);
   for (const auto& item : data) {
     map_->SetItemIgnoringQuota(Uint8VectorToString(item->key, key_format),
                                Uint8VectorToString(item->value, value_format));
