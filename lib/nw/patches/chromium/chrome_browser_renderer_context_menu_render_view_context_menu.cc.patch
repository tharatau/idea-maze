diff -r -u --color up/chromium/chrome/browser/renderer_context_menu/render_view_context_menu.cc nw/chromium/chrome/browser/renderer_context_menu/render_view_context_menu.cc
--- up/chromium/chrome/browser/renderer_context_menu/render_view_context_menu.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/chrome/browser/renderer_context_menu/render_view_context_menu.cc	2023-02-25 19:07:09.257778118 +0000
@@ -6,6 +6,8 @@
 
 #include <stddef.h>
 
+#include "content/nw/src/common/shell_switches.h"
+
 #include <algorithm>
 #include <memory>
 #include <set>
@@ -941,6 +943,8 @@
 void RenderViewContextMenu::InitMenu() {
   RenderViewContextMenuBase::InitMenu();
 
+#if 0
+
   if (content_type_->SupportsGroup(
           ContextMenuContentType::ITEM_GROUP_PASSWORD)) {
     AppendPasswordItems();
@@ -984,7 +988,7 @@
           ContextMenuContentType::ITEM_GROUP_MEDIA_PLUGIN)) {
     AppendPluginItems();
   }
-
+#endif
   // ITEM_GROUP_MEDIA_FILE has no specific items.
 
   bool editable =
@@ -1011,6 +1015,7 @@
     }
   }
 
+#if 0
   if (content_type_->SupportsGroup(
           ContextMenuContentType::ITEM_GROUP_EXISTING_LINK_TO_TEXT)) {
     AppendLinkToTextItems();
@@ -1111,7 +1116,7 @@
         ContextMenuContentType::ITEM_GROUP_CURRENT_EXTENSION));
     AppendAllExtensionItems();
   }
-
+#endif
   if (content_type_->SupportsGroup(
           ContextMenuContentType::ITEM_GROUP_CURRENT_EXTENSION)) {
     DCHECK(!content_type_->SupportsGroup(
@@ -1127,20 +1132,34 @@
   if (!IsDevToolsURL(params_.page_url))
     added_accessibility_labels_items = AppendAccessibilityLabelsItems();
 
+#if defined(NWJS_SDK)
+  bool enable_devtools = true;
+  const base::CommandLine* command_line =
+      base::CommandLine::ForCurrentProcess();
+  if (command_line->HasSwitch(switches::kDisableDevTools))
+    enable_devtools = false;
+
+#if 0
   if (content_type_->SupportsGroup(
           ContextMenuContentType::ITEM_GROUP_DEVELOPER)) {
+    if (enable_devtools)
     AppendDeveloperItems();
   }
+#endif
 
   if (content_type_->SupportsGroup(
           ContextMenuContentType::ITEM_GROUP_DEVTOOLS_UNPACKED_EXT)) {
+    if (enable_devtools)
     AppendDevtoolsForUnpackedExtensions();
   }
+#endif
 
+#if 0
   if (content_type_->SupportsGroup(
           ContextMenuContentType::ITEM_GROUP_PRINT_PREVIEW)) {
     AppendPrintPreviewItems();
   }
+#endif
 
   // Remove any redundant trailing separator.
   size_t count = menu_model_.GetItemCount();
@@ -1381,6 +1400,7 @@
 
 std::u16string RenderViewContextMenu::GetTargetLanguageDisplayName(
     bool is_full_page_translation) const {
+#if 0
   std::string source;
   std::string target;
 
@@ -1388,6 +1408,8 @@
       ->GetTranslateLanguages(embedder_web_contents_, &source, &target,
                               is_full_page_translation);
   return l10n_util::GetDisplayNameForLocale(target, target, true);
+#endif
+  return std::u16string();
 }
 
 void RenderViewContextMenu::AppendDeveloperItems() {
@@ -1817,6 +1839,7 @@
   if (has_sharing_menu_items)
     menu_model_.AddSeparator(ui::NORMAL_SEPARATOR);
 
+#if 0
   if (CanTranslate(/*menu_logging=*/true)) {
     menu_model_.AddItem(
         IDC_CONTENT_CONTEXT_TRANSLATE,
@@ -1824,6 +1847,7 @@
             IDS_CONTENT_CONTEXT_TRANSLATE,
             GetTargetLanguageDisplayName(/*is_full_page_translation=*/true)));
   }
+#endif
 }
 
 void RenderViewContextMenu::AppendExitFullscreenItem() {
@@ -1981,7 +2005,11 @@
 }
 
 void RenderViewContextMenu::AppendSpellingAndSearchSuggestionItems() {
-  const bool use_spelling = !chrome::IsRunningInForcedAppMode();
+  bool use_spelling = !chrome::IsRunningInForcedAppMode();
+  const base::CommandLine* command_line =
+      base::CommandLine::ForCurrentProcess();
+  if (!command_line->HasSwitch(switches::kEnableSpellChecking))
+    use_spelling = false;
   if (use_spelling)
     AppendSpellingSuggestionItems();
 
@@ -2060,6 +2088,7 @@
 }
 
 void RenderViewContextMenu::AppendLanguageSettings() {
+#if 0
   const bool use_spelling = !chrome::IsRunningInForcedAppMode();
   if (!use_spelling)
     return;
@@ -2078,6 +2107,7 @@
   spelling_options_submenu_observer_->InitMenu(params_);
   observers_.AddObserver(spelling_options_submenu_observer_.get());
 #endif
+#endif
 }
 
 void RenderViewContextMenu::AppendSpellingSuggestionItems() {
@@ -3097,6 +3127,9 @@
 }
 
 bool RenderViewContextMenu::IsTranslateEnabled() const {
+#if 1
+  return false;
+#else
   ChromeTranslateClient* chrome_translate_client =
       ChromeTranslateClient::FromWebContents(embedder_web_contents_);
   // If no |chrome_translate_client| attached with this WebContents or we're
@@ -3117,6 +3150,7 @@
          !source_lang.empty() &&  // Did we receive the page language yet?
          // Disable on the Instant Extended NTP.
          !search::IsInstantNTP(embedder_web_contents_);
+#endif
 }
 
 bool RenderViewContextMenu::IsSaveLinkAsEnabled() const {
@@ -3795,6 +3829,7 @@
 }
 
 void RenderViewContextMenu::ExecTranslate() {
+#if 0
   ChromeTranslateClient* chrome_translate_client =
       ChromeTranslateClient::FromWebContents(embedder_web_contents_);
   if (!chrome_translate_client)
@@ -3805,9 +3840,11 @@
   DCHECK(manager);
   manager->ShowTranslateUI(/*auto_translate=*/true,
                            /*triggered_from_menu=*/true);
+#endif
 }
 
 void RenderViewContextMenu::ExecPartialTranslate() {
+#if 0
   std::string source_language;
   std::string target_language;
 
@@ -3820,6 +3857,7 @@
     GetBrowser()->window()->StartPartialTranslate(
         source_language, target_language, params_.selection_text);
   }
+#endif
 }
 
 void RenderViewContextMenu::ExecLanguageSettings(int event_flags) {
@@ -3902,9 +3940,12 @@
 }
 
 bool RenderViewContextMenu::CanTranslate(bool menu_logging) {
+  return false;
+#if 0
   ChromeTranslateClient* chrome_translate_client =
       ChromeTranslateClient::FromWebContents(embedder_web_contents_);
   return chrome_translate_client &&
          chrome_translate_client->GetTranslateManager()->CanManuallyTranslate(
              menu_logging);
+#endif
 }
