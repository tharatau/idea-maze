diff -r -u --color up/chromium/content/browser/renderer_host/navigation_request.cc nw/chromium/content/browser/renderer_host/navigation_request.cc
--- up/chromium/content/browser/renderer_host/navigation_request.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/content/browser/renderer_host/navigation_request.cc	2023-02-25 19:07:16.301819551 +0000
@@ -184,6 +184,11 @@
 #include "ui/android/window_android_compositor.h"
 #endif
 
+namespace nw {
+  typedef bool(*RphGuestFilterURLHookFn)(content::RenderProcessHost* rph, const GURL* url);
+  extern RphGuestFilterURLHookFn gRphGuestFilterURLHook;
+}
+
 namespace content {
 
 namespace {
@@ -1806,6 +1811,16 @@
           common_params_->url);
       headers.MergeFrom(client_hints_headers);
     }
+    FrameTreeNode* node = frame_tree_node;
+    std::string user_agent_override = GetUserAgentOverride();
+    while (node) {
+      const std::string& nwuseragent = node->frame_owner_properties().nwuseragent;
+      if (!nwuseragent.empty()) {
+        user_agent_override = nwuseragent;
+        break;
+      }
+      node = FrameTreeNode::From(node->parent());
+    }
 
     // Add reduced accept language header.
     if (auto reduce_accept_lang_utils =
@@ -1830,7 +1845,7 @@
         &headers, common_params_->url, common_params_->navigation_type,
         ui::PageTransitionFromInt(common_params_->transition),
         controller->GetBrowserContext(), common_params_->method,
-        GetUserAgentOverride(), common_params_->initiator_origin,
+        user_agent_override, common_params_->initiator_origin,
         common_params_->referrer.get(), frame_tree_node,
         begin_params_->impression.has_value());
 
@@ -4470,6 +4485,17 @@
   if (navigation_ui_data_)
     navigation_ui_data = navigation_ui_data_->Clone();
 
+  bool nw_trusted = false;
+  if (starting_site_instance_->IsGuest()) {
+    GURL dummy;
+    RenderFrameHostImpl* navigating_frame_host =
+      associated_rfh_type_ == AssociatedRenderFrameHostType::SPECULATIVE
+          ? frame_tree_node_->render_manager()->speculative_frame_host()
+          : frame_tree_node_->current_frame_host();
+    RenderProcessHost* render_process_host = navigating_frame_host->GetProcess();
+    if (nw::gRphGuestFilterURLHook && nw::gRphGuestFilterURLHook(render_process_host, &dummy))
+      nw_trusted = true;
+  }
   // Give DevTools a chance to override begin params (headers, skip SW)
   // before actually loading resource.
   bool report_raw_headers = false;
@@ -4610,7 +4636,7 @@
           frame_tree_node_->current_frame_host()->devtools_frame_token(),
           std::move(cors_exempt_headers), std::move(client_security_state),
           devtools_accepted_stream_types, is_pdf_, initiator_document_,
-          allow_cookies_from_browser_),
+          allow_cookies_from_browser_, nw_trusted),
       std::move(navigation_ui_data), service_worker_handle_.get(),
       std::move(prefetched_signed_exchange_cache_), this, loader_type,
       CreateCookieAccessObserver(),
