diff -r -u --color up/chromium/extensions/components/native_app_window/native_app_window_views.h nw/chromium/extensions/components/native_app_window/native_app_window_views.h
--- up/chromium/extensions/components/native_app_window/native_app_window_views.h	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/extensions/components/native_app_window/native_app_window_views.h	2023-02-25 19:07:17.677827052 +0000
@@ -58,6 +58,7 @@
   void set_window_for_testing(views::Widget* window) { widget_ = window; }
   void set_web_view_for_testing(views::WebView* view) { web_view_ = view; }
 
+  void layout_() { Layout(); }
  protected:
   // Initializes |widget_| for |app_window|.
   virtual void InitializeWindow(
@@ -78,6 +79,7 @@
   void Hide() override;
   bool IsVisible() const override;
   void Close() override;
+  void ForceClose() override;
   void Activate() override;
   void Deactivate() override;
   void Maximize() override;
@@ -89,6 +91,7 @@
   void SetZOrderLevel(ui::ZOrderLevel order) override;
 
   // WidgetDelegate:
+  bool ExecuteAppCommand(int command_id) override;
   void OnWidgetMove() override;
   views::View* GetInitiallyFocusedView() override;
   std::u16string GetWindowTitle() const override;
@@ -116,6 +119,8 @@
 
   // NativeAppWindow:
   void SetFullscreen(int fullscreen_types) override;
+  void SetResizable(bool flag) override;
+  bool IsResizable() const override;
   bool IsFullscreenOrPending() const override;
   void UpdateWindowIcon() override;
   void UpdateWindowTitle() override;
@@ -137,6 +142,7 @@
   bool CanHaveAlphaEnabled() const override;
   void SetVisibleOnAllWorkspaces(bool always_visible) override;
   void SetActivateOnPointer(bool activate_on_pointer) override;
+  void SetShowInTaskbar(bool show) override;
 
   // web_modal::WebContentsModalDialogHost:
   gfx::NativeView GetHostView() const override;
@@ -163,6 +169,7 @@
   bool frameless_ = false;
   bool resizable_ = false;
   extensions::SizeConstraints size_constraints_;
+  extensions::SizeConstraints saved_size_constraints_;
 
   views::UnhandledKeyboardEventHandler unhandled_keyboard_event_handler_;
 
