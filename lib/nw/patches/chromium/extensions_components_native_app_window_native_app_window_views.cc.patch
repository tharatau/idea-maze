diff -r -u --color up/chromium/extensions/components/native_app_window/native_app_window_views.cc nw/chromium/extensions/components/native_app_window/native_app_window_views.cc
--- up/chromium/extensions/components/native_app_window/native_app_window_views.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/extensions/components/native_app_window/native_app_window_views.cc	2023-02-25 19:07:17.677827052 +0000
@@ -3,6 +3,7 @@
 // found in the LICENSE file.
 
 #include "extensions/components/native_app_window/native_app_window_views.h"
+#include "content/nw/src/browser/nw_chrome_browser_hooks.h"
 
 #include "base/bind.h"
 #include "base/observer_list.h"
@@ -23,10 +24,50 @@
 #include "ui/aura/window.h"
 #endif
 
+#include "content/nw/src/browser/browser_view_layout.h"
+#include "content/nw/src/nw_content.h"
+
+#if defined(OS_WIN)
+#include <objbase.h>
+#include <wrl/client.h>
+#include <shobjidl.h>
+#include <dwmapi.h>
+
+#include "base/win/windows_version.h"
+#include "ui/base/win/hidden_window.h"
+#include "ui/gfx/canvas.h"
+#include "ui/gfx/icon_util.h"
+#include "ui/gfx/font_list.h"
+#include "ui/gfx/platform_font.h"
+#include "ui/display/win/dpi.h"
+#include "ui/views/win/hwnd_util.h"
+#endif
+
+using nw::BrowserViewLayout;
+using extensions::AppWindow;
+using extensions::Extension;
+
 namespace native_app_window {
 
+bool NativeAppWindowViews::ExecuteAppCommand(int command_id) {
+  const Extension* extension = app_window_->GetExtension();
+  if (extension && extension->is_nwjs_app()) {
+    return nw::ExecuteAppCommandHook(command_id, app_window_);
+  }
+  return false;
+}
+
 NativeAppWindowViews::NativeAppWindowViews() {
   set_suppress_default_focus_handling();
+#if defined(OS_LINUX) || defined(OS_WIN)
+  const extensions::Extension* extension = nw::GetMainExtension();
+  if (extension && extension->is_nwjs_app()) {
+      auto layout = std::make_unique<BrowserViewLayout>();
+      SetLayoutManager(std::move(layout));
+      return;
+  }
+#endif
+  SetShowIcon(true);
   SetLayoutManager(std::make_unique<views::FillLayout>());
 }
 
@@ -40,6 +81,7 @@
       create_params.GetContentMinimumSize(gfx::Insets()));
   size_constraints_.set_maximum_size(
       create_params.GetContentMaximumSize(gfx::Insets()));
+  saved_size_constraints_ = size_constraints_;
   Observe(app_window_->web_contents());
 
   // TODO(pbos): See if this can retain SetOwnedByWidget(true) and get deleted
@@ -55,6 +97,12 @@
       this));
   web_view_ = AddChildView(std::make_unique<views::WebView>(nullptr));
   web_view_->SetWebContents(app_window_->web_contents());
+#if defined(OS_LINUX) || defined(OS_WIN)
+  const extensions::Extension* extension = app_window_->GetExtension();
+  if (extension && extension->is_nwjs_app()) {
+    ((BrowserViewLayout*)GetLayoutManager())->set_web_view(web_view_);
+  }
+#endif
 
   SetCanMinimize(!app_window_->show_on_lock_screen());
   SetCanMaximize(GetCanMaximizeWindow());
@@ -155,6 +203,10 @@
   widget_->Close();
 }
 
+void NativeAppWindowViews::ForceClose() {
+  widget_->Close(true);
+}
+
 void NativeAppWindowViews::Activate() {
   widget_->Activate();
 }
@@ -207,7 +259,7 @@
 }
 
 bool NativeAppWindowViews::ShouldShowWindowTitle() const {
-  return false;
+  return true;
 }
 
 bool NativeAppWindowViews::ShouldSaveWindowPlacement() const {
@@ -291,6 +343,32 @@
 
 // NativeAppWindow implementation.
 
+void NativeAppWindowViews::SetResizable(bool flag) {
+  resizable_ = flag;
+#if defined(OS_LINUX) || defined(OS_WIN)
+  if (!resizable_) {
+    gfx::Size size(width(), height());
+    //copy SetContentSizeConstraints(size, size);
+    size_constraints_.set_minimum_size(size);
+    size_constraints_.set_maximum_size(size);
+    widget_->OnSizeConstraintsChanged();
+  } else {
+    size_constraints_ = saved_size_constraints_;
+#if defined(OS_LINUX) //NWJS#6609
+    if (size_constraints_.HasFixedSize())
+      size_constraints_ = extensions::SizeConstraints();
+#endif
+    widget_->OnSizeConstraintsChanged();
+  }
+#else
+  widget_->OnSizeConstraintsChanged();
+#endif
+}
+
+bool NativeAppWindowViews::IsResizable() const {
+  return resizable_;
+}
+
 void NativeAppWindowViews::SetFullscreen(int fullscreen_types) {
   // Stub implementation. See also ChromeNativeAppWindowViews.
   widget_->SetFullscreen(fullscreen_types !=
@@ -343,6 +421,42 @@
   return false;
 }
 
+void NativeAppWindowViews::SetShowInTaskbar(bool show) {
+#if defined(OS_WIN)
+  views::Widget* widget = widget_->GetTopLevelWidget();
+
+  if (show == false && base::win::GetVersion() < base::win::Version::VISTA) {
+    // Change the owner of native window. Only needed on Windows XP.
+    ::SetParent(views::HWNDForWidget(widget),
+                ui::GetHiddenWindow());
+  }
+
+  Microsoft::WRL::ComPtr<ITaskbarList3> taskbar;
+  HRESULT result = ::CoCreateInstance(CLSID_TaskbarList, nullptr,
+                                      CLSCTX_INPROC_SERVER, IID_PPV_ARGS(&taskbar));
+  if (FAILED(result)) {
+    VLOG(1) << "Failed creating a TaskbarList object: " << result;
+    return;
+  }
+
+  result = taskbar->HrInit();
+  if (FAILED(result)) {
+    LOG(ERROR) << "Failed initializing an ITaskbarList interface.";
+    return;
+  }
+
+  if (show)
+    result = taskbar->AddTab(views::HWNDForWidget(widget));
+  else
+    result = taskbar->DeleteTab(views::HWNDForWidget(widget));
+
+  if (FAILED(result)) {
+    LOG(ERROR) << "Failed to change the show in taskbar attribute";
+    return;
+  }
+#endif
+}
+
 SkColor NativeAppWindowViews::ActiveFrameColor() const {
   return SK_ColorBLACK;
 }
@@ -381,6 +495,9 @@
   size_constraints_.set_maximum_size(max_size);
   SetCanMaximize(GetCanMaximizeWindow());
   SetCanResize(GetCanResizeWindow());
+
+  saved_size_constraints_ = size_constraints_;
+
   widget_->OnSizeConstraintsChanged();
 }
 
