diff -r -u --color up/chromium/extensions/browser/api/runtime/runtime_api.cc nw/chromium/extensions/browser/api/runtime/runtime_api.cc
--- up/chromium/extensions/browser/api/runtime/runtime_api.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/extensions/browser/api/runtime/runtime_api.cc	2023-02-25 19:07:17.573826485 +0000
@@ -4,6 +4,9 @@
 
 #include "extensions/browser/api/runtime/runtime_api.h"
 
+#include "content/nw/src/browser/nw_chrome_browser_hooks.h"
+#include "chrome/browser/first_run/first_run.h"
+
 #include <memory>
 #include <utility>
 
@@ -215,6 +218,7 @@
 
 void RuntimeAPI::OnExtensionLoaded(content::BrowserContext* browser_context,
                                    const Extension* extension) {
+  bool nw_skip = (extension->id() == nw::GetMainExtensionId() && !first_run::IsChromeFirstRun());
   if (!dispatch_chrome_updated_event_)
     return;
 
@@ -222,7 +226,7 @@
   base::SingleThreadTaskRunner::GetCurrentDefault()->PostTask(
       FROM_HERE,
       base::BindOnce(&RuntimeEventRouter::DispatchOnInstalledEvent,
-                     browser_context_, extension->id(), base::Version(), true));
+                     browser_context_, extension->id(), base::Version(), true, nw_skip));
 }
 
 void RuntimeAPI::OnExtensionUninstalled(
@@ -429,7 +433,7 @@
     content::BrowserContext* context,
     const std::string& extension_id,
     const base::Version& old_version,
-    bool chrome_updated) {
+    bool chrome_updated, bool nw_skip) {
   if (!ExtensionsBrowserClient::Get()->IsValidContext(context))
     return;
   ExtensionSystem* system = ExtensionSystem::Get(context);
@@ -461,12 +465,12 @@
   event_args.Append(std::move(info));
   EventRouter* event_router = EventRouter::Get(context);
   DCHECK(event_router);
-  auto event = std::make_unique<Event>(events::RUNTIME_ON_INSTALLED,
-                                       runtime::OnInstalled::kEventName,
+  auto event = std::make_unique<Event>(nw_skip? events::UNKNOWN: events::RUNTIME_ON_INSTALLED,
+                                       nw_skip? runtime::OnInstalledNW::kEventName: runtime::OnInstalled::kEventName,
                                        std::move(event_args));
   event_router->DispatchEventWithLazyListener(extension_id, std::move(event));
 
-  if (old_version.IsValid()) {
+  if (!nw_skip && old_version.IsValid()) {
     const Extension* extension =
         ExtensionRegistry::Get(context)->enabled_extensions().GetByID(
             extension_id);
@@ -577,10 +581,11 @@
     content::BrowserContext* browser_context,
     const Extension* extension,
     const base::Version& previous_version) {
+  bool nw_skip = (extension->id() == nw::GetMainExtensionId() && !first_run::IsChromeFirstRun());
   base::SingleThreadTaskRunner::GetCurrentDefault()->PostTask(
       FROM_HERE, base::BindOnce(&RuntimeEventRouter::DispatchOnInstalledEvent,
                                 browser_context_, extension->id(),
-                                previous_version, false));
+                                previous_version, false, nw_skip));
 }
 
 ExtensionFunction::ResponseAction RuntimeGetBackgroundPageFunction::Run() {
