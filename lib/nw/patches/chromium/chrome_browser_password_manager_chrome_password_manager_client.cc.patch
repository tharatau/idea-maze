diff -r -u --color up/chromium/chrome/browser/password_manager/chrome_password_manager_client.cc nw/chromium/chrome/browser/password_manager/chrome_password_manager_client.cc
--- up/chromium/chrome/browser/password_manager/chrome_password_manager_client.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/chrome/browser/password_manager/chrome_password_manager_client.cc	2023-02-19 17:36:28.167445587 +0000
@@ -123,13 +123,17 @@
 #include "ui/base/clipboard/clipboard.h"
 #include "ui/base/data_transfer_policy/data_transfer_endpoint.h"
 #include "url/url_constants.h"
+#include "ui/base/clipboard/clipboard.h"
 
 #if BUILDFLAG(SAFE_BROWSING_AVAILABLE)
 #include "chrome/browser/safe_browsing/advanced_protection_status_manager.h"
 #include "chrome/browser/safe_browsing/advanced_protection_status_manager_factory.h"
-#include "third_party/blink/public/mojom/clipboard/clipboard.mojom.h"
 #endif
 
+#include "third_party/blink/public/mojom/clipboard/clipboard.mojom.h"
+#include "ui/base/clipboard/clipboard.h"
+#include "ui/base/data_transfer_policy/data_transfer_endpoint.h"
+
 #if BUILDFLAG(IS_ANDROID)
 #include "chrome/browser/android/tab_android.h"
 #include "chrome/browser/autofill/manual_filling_controller.h"
@@ -894,6 +898,7 @@
 }
 
 autofill::LanguageCode ChromePasswordManagerClient::GetPageLanguage() const {
+#if 0
   // TODO(crbug.com/912597): iOS vs other platforms extracts language from
   // the top level frame vs whatever frame directly holds the form.
   auto* translate_manager =
@@ -901,13 +906,17 @@
   if (translate_manager)
     return autofill::LanguageCode(
         translate_manager->GetLanguageState()->source_language());
+#endif
   return autofill::LanguageCode();
 }
 
 safe_browsing::PasswordProtectionService*
 ChromePasswordManagerClient::GetPasswordProtectionService() const {
+  return nullptr;
+#if 0
   return safe_browsing::ChromePasswordProtectionService::
       GetPasswordProtectionService(profile_);
+#endif
 }
 
 #if defined(ON_FOCUS_PING_ENABLED)
@@ -941,7 +950,7 @@
       web_contents(), web_contents()->GetLastCommittedURL(), username,
       password_type, matching_reused_credentials, password_field_exists);
 
-#if !BUILDFLAG(IS_ANDROID)
+#if 0 //!BUILDFLAG(IS_ANDROID)
   // If the webpage is not an extension page, do nothing.
   if (!GURL(domain).SchemeIs(kExtensionScheme)) {
     return;
@@ -992,6 +1001,7 @@
     bool is_federated,
     const url::Origin& federated_origin,
     const std::u16string& login_user_name) const {
+#if 0
   if (!base::FeatureList::IsEnabled(policy::features::kLoginEventReporting))
     return;
 
@@ -1004,10 +1014,12 @@
   // The router is responsible for checking if the reporting of this event type
   // is enabled by the admin.
   router->OnLoginEvent(url, is_federated, federated_origin, login_user_name);
+#endif
 }
 
 void ChromePasswordManagerClient::MaybeReportEnterprisePasswordBreachEvent(
     const std::vector<std::pair<GURL, std::u16string>>& identities) const {
+#if 0
   if (!base::FeatureList::IsEnabled(
           policy::features::kPasswordBreachEventReporting)) {
     return;
@@ -1022,6 +1034,7 @@
   // The router is responsible for checking if the reporting of this event type
   // is enabled by the admin.
   router->OnPasswordBreach(kPasswordBreachEntryTrigger, identities);
+#endif
 }
 #endif
 
@@ -1601,7 +1614,7 @@
       GURL(password_manager::kPasswordManagerAccountDashboardURL)) {
     is_enabled = false;
   }
-
+#if 0
   // SafeBrowsing Delayed Warnings experiment can delay some SafeBrowsing
   // warnings until user interaction. If the current page has a delayed warning,
   // it'll have a user interaction observer attached. Disable password
@@ -1612,6 +1625,7 @@
     observer->OnPasswordSaveOrAutofillDenied();
     is_enabled = false;
   }
+#endif
 
   if (log_manager_->IsLoggingActive()) {
     password_manager::BrowserSavePasswordProgressLogger logger(
