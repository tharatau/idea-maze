diff -r -u --color up/chromium/extensions/browser/extension_function.cc nw/chromium/extensions/browser/extension_function.cc
--- up/chromium/extensions/browser/extension_function.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/extensions/browser/extension_function.cc	2023-02-25 19:07:17.597826616 +0000
@@ -450,6 +450,10 @@
   EnsureMemoryDumpProviderExists();
 }
 
+bool ExtensionFunction::RunNWSync(base::Value::List* response, std::string* error) {
+  return false;
+}
+
 ExtensionFunction::~ExtensionFunction() {
   if (name())  // name_ may not be set in unit tests.
     ExtensionFunctionMemoryDumpProvider::GetInstance().RemoveFunctionName(
@@ -824,3 +828,35 @@
 ExtensionFunction::ScopedUserGestureForTests::~ScopedUserGestureForTests() {
   UserGestureForTests::GetInstance()->DecrementCount();
 }
+
+NWSyncExtensionFunction::NWSyncExtensionFunction() {
+}
+
+NWSyncExtensionFunction::~NWSyncExtensionFunction() {
+}
+
+ExtensionFunction::ResponseAction NWSyncExtensionFunction::Run() {
+  NOTREACHED() << "NWSyncExtensionFunction::Run";
+  return RespondNow(ArgumentList(base::Value::List()));
+}
+
+// static
+bool NWSyncExtensionFunction::ValidationFailure(
+    NWSyncExtensionFunction* function) {
+  return false;
+}
+
+void NWSyncExtensionFunction::SetError(const std::string& error) {
+  error_ = error;
+}
+
+void NWSyncExtensionFunction::SetResult(std::unique_ptr<base::Value> result) {
+  results_.reset(new base::ListValue());
+  results_->Append(base::Value::FromUniquePtrValue(std::move(result)));
+}
+
+void NWSyncExtensionFunction::SetResultList(
+    std::unique_ptr<base::ListValue> results) {
+  results_ = std::move(results);
+}
+
