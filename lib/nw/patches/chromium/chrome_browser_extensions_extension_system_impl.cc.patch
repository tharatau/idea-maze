diff -r -u --color up/chromium/chrome/browser/extensions/extension_system_impl.cc nw/chromium/chrome/browser/extensions/extension_system_impl.cc
--- up/chromium/chrome/browser/extensions/extension_system_impl.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/extension_system_impl.cc	2023-02-25 19:07:08.737774919 +0000
@@ -77,6 +77,8 @@
 #include "components/user_manager/user_manager.h"
 #endif
 
+#include "content/nw/src/nw_content_verifier_delegate.h"
+
 namespace extensions {
 
 namespace {
@@ -198,7 +200,7 @@
   LoadErrorReporter::Init(allow_noisy_errors);
 
   content_verifier_ = new ContentVerifier(
-      profile_, std::make_unique<ChromeContentVerifierDelegate>(profile_));
+      profile_, std::make_unique<NWContentVerifierDelegate>(profile_));
 
   service_worker_manager_ = std::make_unique<ServiceWorkerManager>(profile_);
 
@@ -215,7 +217,7 @@
   extension_service_ = std::make_unique<ExtensionService>(
       profile_, base::CommandLine::ForCurrentProcess(),
       profile_->GetPath().AppendASCII(extensions::kInstallDirectoryName),
-      ExtensionPrefs::Get(profile_), Blocklist::Get(profile_),
+      ExtensionPrefs::Get(profile_), nullptr,
       autoupdate_enabled, extensions_enabled, &ready_);
 
   uninstall_ping_sender_ = std::make_unique<UninstallPingSender>(
@@ -226,8 +228,8 @@
   // load any extensions.
   {
     InstallVerifier::Get(profile_)->Init();
-    ChromeContentVerifierDelegate::VerifyInfo::Mode mode =
-        ChromeContentVerifierDelegate::GetDefaultMode();
+    ChromeContentVerifierDelegate::VerifyInfo::Mode mode = (ChromeContentVerifierDelegate::VerifyInfo::Mode)
+        NWContentVerifierDelegate::GetDefaultMode();
 #if BUILDFLAG(IS_CHROMEOS_ASH)
     mode = std::max(mode,
                     ChromeContentVerifierDelegate::VerifyInfo::Mode::BOOTSTRAP);
