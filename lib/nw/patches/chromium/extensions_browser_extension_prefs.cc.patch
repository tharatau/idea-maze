diff -r -u --color up/chromium/extensions/browser/extension_prefs.cc nw/chromium/extensions/browser/extension_prefs.cc
--- up/chromium/extensions/browser/extension_prefs.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/extensions/browser/extension_prefs.cc	2023-02-25 19:07:17.601826638 +0000
@@ -326,9 +326,11 @@
     std::unique_ptr<prefs::DictionaryValueUpdate> dict =
         ScopedDictionaryPrefUpdate::Get();
     std::unique_ptr<prefs::DictionaryValueUpdate> extension;
-    if (!dict->GetDictionary(extension_id_, &extension)) {
+    std::string id;
+    base::ReplaceChars(extension_id_, ".", "", &id);
+    if (!dict->GetDictionary(id, &extension)) {
       // Extension pref does not exist, create it.
-      extension = dict->SetDictionary(extension_id_, base::Value::Dict());
+      extension = dict->SetDictionary(id, base::Value::Dict());
     }
     return extension;
   }
@@ -500,6 +502,9 @@
 
 const base::Value::Dict* ExtensionPrefs::GetExtensionPref(
     const std::string& extension_id) const {
+  std::string id;
+  base::ReplaceChars(extension_id, ".", "", &id);
+
   // TODO(https://1297144): Should callers of this method proactively filter out
   // extension IDs? Previously, this function would (potentially surprisingly)
   // return `extensions` below if supplied with an empty `extension_id` due to
@@ -509,7 +514,7 @@
   }
 
   return prefs_->GetDict(pref_names::kExtensions)
-      .FindDictByDottedPath(extension_id);
+      .FindDictByDottedPath(id);
 }
 
 void ExtensionPrefs::SetIntegerPref(const std::string& id,
@@ -2400,7 +2405,10 @@
   std::string scope_string;
   if (!pref_names::ScopeToPrefName(scope, &scope_string))
     return;
-  std::string key = extension_id + "." + scope_string;
+
+  std::string id;
+  base::ReplaceChars(extension_id, ".", "", &id);
+  std::string key = id + "." + scope_string;
 
   const base::Value::Dict& source_dict =
       pref_service()->GetDict(pref_names::kExtensions);
