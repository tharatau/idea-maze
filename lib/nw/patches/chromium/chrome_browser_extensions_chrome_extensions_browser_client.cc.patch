diff -r -u --color up/chromium/chrome/browser/extensions/chrome_extensions_browser_client.cc nw/chromium/chrome/browser/extensions/chrome_extensions_browser_client.cc
--- up/chromium/chrome/browser/extensions/chrome_extensions_browser_client.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/chrome_extensions_browser_client.cc	2023-02-25 19:07:08.709774747 +0000
@@ -101,6 +101,8 @@
 #include "chromeos/startup/browser_params_proxy.h"
 #endif
 
+#include "content/nw/src/api/generated_api_registration.h"
+
 namespace extensions {
 
 namespace {
@@ -666,6 +668,7 @@
     content::BrowserContext* context,
     const ExtensionId& extension_id,
     const std::string& code) const {
+#if 0
   auto* telemetry_service =
       safe_browsing::ExtensionTelemetryServiceFactory::GetForProfile(
           Profile::FromBrowserContext(context));
@@ -678,20 +681,26 @@
   auto signal = std::make_unique<safe_browsing::TabsExecuteScriptSignal>(
       extension_id, code);
   telemetry_service->AddSignal(std::move(signal));
+#endif
 }
 
 bool ChromeExtensionsBrowserClient::IsExtensionTelemetryServiceEnabled(
     content::BrowserContext* context) const {
+  return false;
+#if 0
   auto* telemetry_service =
       safe_browsing::ExtensionTelemetryServiceFactory::GetForProfile(
           Profile::FromBrowserContext(context));
   return telemetry_service && telemetry_service->enabled();
+#endif
 }
 
 void ChromeExtensionsBrowserClient::NotifyExtensionRemoteHostContacted(
     content::BrowserContext* context,
     const ExtensionId& extension_id,
     const GURL& url) const {
+  return;
+#if 0
   safe_browsing::RemoteHostInfo::ProtocolType protocol =
       safe_browsing::RemoteHostInfo::UNSPECIFIED;
   if (base::FeatureList::IsEnabled(
@@ -716,6 +725,7 @@
       std::make_unique<safe_browsing::RemoteHostContactedSignal>(extension_id,
                                                                  url, protocol);
   telemetry_service->AddSignal(std::move(remote_host_signal));
+#endif
 }
 
 // static
