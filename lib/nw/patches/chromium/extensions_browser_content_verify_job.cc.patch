diff -r -u --color up/chromium/extensions/browser/content_verify_job.cc nw/chromium/extensions/browser/content_verify_job.cc
--- up/chromium/extensions/browser/content_verify_job.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/extensions/browser/content_verify_job.cc	2023-02-25 19:07:17.593826594 +0000
@@ -75,11 +75,35 @@
       extension_root_(extension_root),
       relative_path_(relative_path),
       failure_callback_(std::move(failure_callback)),
-      failed_(false) {}
+      failed_(false), len_(0), buf_(nullptr) {
+  buf_ = new char[32768];
+}
+
+ContentVerifyJob::ContentVerifyJob(ContentHashReader* hash_reader,
+                                   const ContentVerifierKey& key,
+                                   FailureCallback failure_callback,
+                                   ReadyCallback ready_callback)
+    : done_reading_(false),
+      hashes_ready_(false),
+      total_bytes_read_(0),
+      current_block_(0),
+      current_hash_byte_count_(0),
+      hash_reader_(hash_reader),
+      failure_callback_(std::move(failure_callback)),
+      ready_callback_(std::move(ready_callback)),
+      failed_(false),
+      len_(0),
+      buf_(nullptr)
+{
+  buf_ = new char[32768];
+}
+
 
 ContentVerifyJob::~ContentVerifyJob() {
   UMA_HISTOGRAM_COUNTS_1M("ExtensionContentVerifyJob.TimeSpentUS",
                           time_spent_.InMicroseconds());
+  delete[] buf_;
+  buf_ = nullptr;
 }
 
 void ContentVerifyJob::Start(ContentVerifier* verifier) {
@@ -130,6 +154,8 @@
     scoped_refptr<TestObserver> test_observer = GetTestObserver();
     if (test_observer)
       test_observer->JobFinished(extension_id_, relative_path_, NONE);
+    else if (!success_callback_.is_null())
+      std::move(success_callback_).Run();
   } else {
     DispatchFailureCallback(HASH_MISMATCH);
   }
@@ -238,6 +264,8 @@
       test_observer = GetTestObserver();
       if (test_observer)
         test_observer->JobFinished(extension_id_, relative_path_, NONE);
+      if (!success_callback_.is_null())
+        std::move(success_callback_).Run();
       return;
     }
     case ContentHashReader::InitStatus::NO_HASHES_FOR_RESOURCE: {
@@ -270,6 +298,9 @@
         test_observer->JobFinished(extension_id_, relative_path_, NONE);
     }
   }
+  if (!ready_callback_.is_null()) {
+    std::move(ready_callback_).Run(this);
+  }
 }
 
 // static
@@ -294,7 +325,7 @@
   if (!failure_callback_.is_null()) {
     VLOG(1) << "job failed for " << extension_id_ << " "
             << relative_path_.MaybeAsASCII() << " reason:" << reason;
-    std::move(failure_callback_).Run(reason);
+    std::move(failure_callback_).Run(reason, this);
   }
   scoped_refptr<TestObserver> test_observer = GetTestObserver();
   if (test_observer)
