diff -r -u --color up/chromium/chrome/browser/extensions/extension_tab_util.cc nw/chromium/chrome/browser/extensions/extension_tab_util.cc
--- up/chromium/chrome/browser/extensions/extension_tab_util.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/extension_tab_util.cc	2023-02-19 17:36:27.791444635 +0000
@@ -63,6 +63,10 @@
 #include "third_party/abseil-cpp/absl/types/optional.h"
 #include "url/gurl.h"
 
+#include "components/guest_view/browser/guest_view_manager.h"
+#include "extensions/browser/app_window/app_window_registry.h"
+#include "extensions/browser/app_window/app_window.h"
+
 using content::NavigationEntry;
 using content::WebContents;
 using extensions::mojom::APIPermissionID;
@@ -175,6 +179,7 @@
       return base::unexpected(error);
   }
 
+#if 0
   // Ensure the selected browser is normal.
   if (!browser->is_type_normal() && browser->IsAttemptingToCloseBrowser())
     browser = chrome::FindTabbedBrowser(
@@ -182,7 +187,7 @@
   if (!browser || !browser->window()) {
     return base::unexpected(tabs_constants::kNoCurrentWindowError);
   }
-
+#endif
   // TODO(jstritar): Add a constant, chrome.tabs.TAB_ID_ACTIVE, that
   // represents the active tab.
   WebContents* opener = nullptr;
@@ -393,6 +398,7 @@
   tab_object.index = tab_index;
   tab_object.window_id = GetWindowIdOfTab(contents);
   tab_object.status = GetLoadingStatus(contents);
+  tab_object.nwstatus = GetLoadingStatus(contents);
   tab_object.active = tab_strip && tab_index == tab_strip->active_index();
   tab_object.selected = tab_strip && tab_index == tab_strip->active_index();
   tab_object.highlighted = tab_strip && tab_strip->IsTabSelected(tab_index);
@@ -458,6 +464,8 @@
   }
 
   ScrubTabForExtension(extension, contents, &tab_object, scrub_tab_behavior);
+
+  tab_object.main_frame_id = contents->GetPrimaryMainFrame()->GetRoutingID();
   return tab_object;
 }
 
@@ -667,6 +675,27 @@
       include_incognito
           ? profile->GetPrimaryOTRProfile(/*create_if_needed=*/false)
           : nullptr;
+  extensions::AppWindowRegistry* registry = AppWindowRegistry::Get(profile);
+  for (extensions::AppWindow* app_window : registry->app_windows()) {
+    WebContents* target_contents = app_window->web_contents();
+    if (sessions::SessionTabHelper::IdForTab(target_contents).id() == tab_id) {
+      if (contents)
+        *contents = target_contents;
+      return true;
+    }
+  }
+  guest_view::GuestViewManager* manager =
+    guest_view::GuestViewManager::FromBrowserContext(browser_context);
+  if (manager) {
+    const std::map<int, content::WebContents*>& guest_contents = manager->guest_web_contents_by_instance_id();
+    for (std::map<int, content::WebContents*>::const_iterator it = guest_contents.begin(); it != guest_contents.end(); it++) {
+      if (sessions::SessionTabHelper::IdForTab(it->second).id() == tab_id) {
+        if (contents)
+          *contents = it->second;
+        return true;
+      }
+    }
+  }
   for (auto* target_browser : *BrowserList::GetInstance()) {
     if (target_browser->profile() == profile ||
         target_browser->profile() == incognito_profile) {
