diff -r -u --color up/chromium/chrome/browser/extensions/api/tabs/tabs_api.cc nw/chromium/chrome/browser/extensions/api/tabs/tabs_api.cc
--- up/chromium/chrome/browser/extensions/api/tabs/tabs_api.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/api/tabs/tabs_api.cc	2023-02-24 20:12:03.280811399 +0000
@@ -2,7 +2,12 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+#pragma clang diagnostic ignored "-Wunused-but-set-variable"
+
 #include "chrome/browser/extensions/api/tabs/tabs_api.h"
+#include "ui/display/screen.h"
+
+#include "ui/gfx/image/image_skia_operations.h"
 
 #include <stddef.h>
 #include <algorithm>
@@ -12,6 +17,14 @@
 #include <utility>
 #include <vector>
 
+#include "content/nw/src/nw_base.h"
+#include "content/nw/src/browser/nw_content_browser_hooks.h"
+#if defined(OS_MAC)
+#include "content/nw/src/nw_content_mac.h"
+#endif
+#include "chrome/browser/ui/views/frame/browser_view.h"
+#include "extensions/browser/extension_registry.h"
+
 #include "base/bind.h"
 #include "base/check_op.h"
 #include "base/command_line.h"
@@ -130,6 +143,8 @@
 #include "ui/views/widget/desktop_aura/desktop_window_tree_host_lacros.h"
 #endif
 
+#include "extensions/browser/guest_view/web_view/web_view_guest.h"
+
 using content::BrowserThread;
 using content::NavigationController;
 using content::NavigationEntry;
@@ -248,6 +263,8 @@
 
 ui::WindowShowState ConvertToWindowShowState(windows::WindowState state) {
   switch (state) {
+    case windows::WINDOW_STATE_HIDDEN:
+      return ui::SHOW_STATE_HIDDEN;
     case windows::WINDOW_STATE_NORMAL:
       return ui::SHOW_STATE_NORMAL;
     case windows::WINDOW_STATE_MINIMIZED:
@@ -280,9 +297,10 @@
     case windows::WINDOW_STATE_FULLSCREEN:
     case windows::WINDOW_STATE_LOCKED_FULLSCREEN:
       // If maximised/fullscreen, default focused state should be focused.
-      return !(create_data->focused && !*create_data->focused) && !has_bound;
+      return true; //!(create_data->focused && !*create_data->focused) && !has_bound;
     case windows::WINDOW_STATE_NORMAL:
     case windows::WINDOW_STATE_NONE:
+    case windows::WINDOW_STATE_HIDDEN:
       return true;
   }
   NOTREACHED();
@@ -642,12 +660,28 @@
   if (!IsValidStateForWindowsCreateFunction(base::OptionalToPtr(create_data)))
     return RespondNow(Error(tabs_constants::kInvalidWindowStateError));
 
-  Browser::Type window_type = Browser::TYPE_NORMAL;
+  Browser::Type window_type = Browser::TYPE_POPUP;
 
   gfx::Rect window_bounds;
   bool focused = true;
+  bool hidden = false;
+  bool new_instance = false;
+  bool mixed_context = false;
+  bool frameless = false;
+  bool kiosk = false;
+  bool transparent = false;
+  bool always_on_top = false;
+  bool all_visible = false;
+  bool show_in_taskbar = true;
+  bool resizable = true;
+  bool block_parser = false;
+  std::string title;
+  int min_width = 0; int min_height = 0; int max_width = 0; int max_height = 0;
   std::string extension_id;
+  std::string position;
+  std::string windows_key;
 
+  std::string inject_js_start, inject_js_end;
   if (create_data) {
     // Figure out window type before figuring out bounds so that default
     // bounds can be set according to the window type.
@@ -668,8 +702,9 @@
 
     // Initialize default window bounds according to window type.
     ui::WindowShowState ignored_show_state = ui::SHOW_STATE_DEFAULT;
+    gfx::Rect ignored_window_bounds;
     WindowSizer::GetBrowserWindowBoundsAndShowState(
-        gfx::Rect(), nullptr, &window_bounds, &ignored_show_state);
+        gfx::Rect(), nullptr, &ignored_window_bounds, &ignored_show_state);
 
     // Update the window bounds based on the create parameters.
     bool set_window_position = false;
@@ -705,8 +740,60 @@
       return RespondNow(Error(tabs_constants::kInvalidWindowBoundsError));
     }
 
+    if (create_data->min_width) {
+      min_width = *create_data->min_width;
+      if (window_bounds.width())
+        window_bounds.set_width(std::max(min_width, window_bounds.width()));
+    }
+    if (create_data->max_width) {
+      max_width = *create_data->max_width;
+      window_bounds.set_width(std::min(max_width, window_bounds.width()));
+    }
+    if (create_data->min_height) {
+      min_height = *create_data->min_height;
+      if (window_bounds.height())
+        window_bounds.set_height(std::max(min_height, window_bounds.height()));
+    }
+    if (create_data->max_height) {
+      max_height = *create_data->max_height;
+      window_bounds.set_height(std::min(max_height, window_bounds.height()));
+    }
+
     if (create_data->focused)
       focused = *create_data->focused;
+
+    if (create_data->hidden)
+      hidden = *create_data->hidden;
+    if (create_data->inject_js_start)
+      inject_js_start = *create_data->inject_js_start;
+    if (create_data->inject_js_end)
+      inject_js_end = *create_data->inject_js_end;
+    if (create_data->new_instance)
+      new_instance = *create_data->new_instance;
+    if (create_data->mixed_context)
+      mixed_context = *create_data->mixed_context;
+    if (create_data->frameless)
+      frameless = *create_data->frameless;
+    if (create_data->kiosk)
+      kiosk = *create_data->kiosk;
+    if (create_data->alpha_enabled)
+      transparent = *create_data->alpha_enabled;
+    if (create_data->always_on_top)
+      always_on_top = *create_data->always_on_top;
+    if (create_data->all_visible)
+      all_visible = *create_data->all_visible;
+    if (create_data->resizable)
+      resizable = *create_data->resizable;
+    if (create_data->show_in_taskbar)
+      show_in_taskbar = *create_data->show_in_taskbar;
+    if (create_data->title)
+      title = *create_data->title;
+    if (create_data->position)
+      position = *create_data->position;
+    if (create_data->block_parser)
+      block_parser = *create_data->block_parser;
+    if (create_data->id)
+      windows_key = *create_data->id;
   }
 
   // Create a new BrowserWindow if possible.
@@ -716,16 +803,46 @@
   }
   Browser::CreateParams create_params(window_type, window_profile,
                                       user_gesture());
+
   if (extension_id.empty()) {
     create_params.initial_bounds = window_bounds;
   } else {
     // extension_id is only set for CREATE_TYPE_POPUP.
     create_params = Browser::CreateParams::CreateForAppPopup(
         web_app::GenerateApplicationNameFromAppId(extension_id),
-        false /* trusted_source */, window_bounds, window_profile,
+        extension() && extension()->is_nwjs_app() /* trusted_source */, window_bounds, window_profile,
         user_gesture());
   }
-  create_params.initial_show_state = ui::SHOW_STATE_NORMAL;
+  create_params.extension_id = extension_id;
+  create_params.windows_key = windows_key;
+  create_params.frameless = frameless;
+  create_params.alpha_enabled = transparent;
+  create_params.always_on_top = always_on_top;
+  create_params.all_visible = all_visible;
+  create_params.resizable = resizable;
+  create_params.show_in_taskbar = show_in_taskbar;
+  create_params.title = title;
+
+  if (create_data && create_data->icon) {
+    base::ScopedAllowBlocking allow_io;
+    gfx::Image app_icon;
+    nw::Package* package = nw::package();
+    if (nw::GetPackageImage(package,
+                            base::FilePath::FromUTF8Unsafe(*create_data->icon),
+                            &app_icon)) {
+      if (app_icon.Width() > 128 || app_icon.Height() > 128) {
+        const gfx::ImageSkia* originImageSkia = app_icon.ToImageSkia();
+        gfx::ImageSkia resizedImageSkia =
+          gfx::ImageSkiaOperations::CreateResizedImage(*originImageSkia,
+                                                       skia::ImageOperations::RESIZE_GOOD,
+                                                       gfx::Size(128, 128));
+        app_icon = gfx::Image(resizedImageSkia);
+      }
+      create_params.icon = app_icon;
+    }
+  }
+
+  create_params.initial_show_state = ui::SHOW_STATE_DEFAULT;
   if (create_data && create_data->state) {
     if (create_data->state == windows::WINDOW_STATE_LOCKED_FULLSCREEN &&
         !ExtensionHasLockedFullscreenPermission(extension())) {
@@ -736,10 +853,19 @@
         ConvertToWindowShowState(create_data->state);
   }
 
+  create_params.position = position;
   Browser* new_window = Browser::Create(create_params);
   if (!new_window)
     return RespondNow(Error(tabs_constants::kBrowserWindowNotAllowed));
 
+  BrowserFrame* frame = BrowserView::GetBrowserViewForBrowser(new_window)->frame();
+
+  if (kiosk) {
+    frame->SetFullscreen(true);
+#if defined(OS_MAC)
+    NWSetNSAppKioskOptions();
+#endif
+  }
   for (const GURL& url : urls) {
     NavigateParams navigate_params(new_window, url, ui::PAGE_TRANSITION_LINK);
     navigate_params.disposition = WindowOpenDisposition::NEW_FOREGROUND_TAB;
@@ -766,7 +892,19 @@
           render_frame_host()->GetSiteInstance();
     }
 
+    navigate_params.inject_js_start = inject_js_start;
+    navigate_params.inject_js_end = inject_js_end;
+    navigate_params.block_parser = block_parser;
+
+    if (new_instance)
+      nw::SetPinningRenderer(false);
+    if (mixed_context)
+      nw::SetMixedContext(true);
     Navigate(&navigate_params);
+    if (mixed_context)
+      nw::SetMixedContext(false);
+    if (new_instance)
+      nw::SetPinningRenderer(true);
   }
 
   WebContents* contents = nullptr;
@@ -795,6 +933,19 @@
       TabStripUserGestureDetails(
           TabStripUserGestureDetails::GestureType::kNone));
 
+  new_window->window()->SetMinimumSize(gfx::Size(min_width, min_height));
+  new_window->window()->SetMaximumSize(gfx::Size(max_width, max_height));
+#if defined(OS_LINUX) || defined(OS_WIN)
+  if (!resizable)
+    new_window->window()->SetResizable(false);
+#endif
+
+  if (create_params.initial_show_state == ui::SHOW_STATE_FULLSCREEN) {
+    BrowserFrame* frame2 = BrowserView::GetBrowserViewForBrowser(new_window)->frame();
+    frame2->SetFullscreen(true);
+  }
+
+  if (!hidden) {
   if (focused) {
     new_window->window()->Show();
   } else {
@@ -819,6 +970,9 @@
     if (reset_active && base::Contains(*browser_list, active_browser))
       active_browser->window()->Activate();
   }
+  } else {
+    new_window->window()->Hide();
+  }
 
   // Lock the window fullscreen only after the new tab has been created
   // (otherwise the tabstrip is empty), and window()->show() has been called
@@ -835,11 +989,32 @@
     // profile and CanCrossIncognito isn't allowed.
     return RespondNow(WithArguments(base::Value()));
   }
-
-  return RespondNow(
-      WithArguments(ExtensionTabUtil::CreateWindowValueForExtension(
+  if (new_window->DidFinishFirstNavigation())
+    return RespondNow(WithArguments(ExtensionTabUtil::CreateWindowValueForExtension(
           *new_window, extension(), ExtensionTabUtil::kPopulateTabs,
           source_context_type())));
+
+  new_window->AddOnDidFinishFirstNavigationCallback(
+    base::BindOnce(&WindowsCreateFunction::
+                   OnFinishedFirstNavigationOrClosed,
+                   this, WithArguments(ExtensionTabUtil::CreateWindowValueForExtension(
+          *new_window, extension(), ExtensionTabUtil::kPopulateTabs,
+          source_context_type()))));
+
+  return RespondLater();
+}
+
+void WindowsCreateFunction::OnFinishedFirstNavigationOrClosed(
+    ResponseValue result_arg,
+    bool did_finish) {
+  DCHECK(!did_respond());
+
+  if (!did_finish) {
+    Respond(Error("Browser is closed before ready to commit first navigation."));
+    return;
+  }
+
+  Respond(std::move(result_arg));
 }
 
 ExtensionFunction::ResponseAction WindowsUpdateFunction::Run() {
@@ -876,21 +1051,71 @@
                                 ? browser->window()->GetRestoredBounds()
                                 : browser->window()->GetBounds();
   bool set_window_bounds = false;
+  bool set_pos_only = false;
+
+  bool set_min_size = false;
+  bool set_max_size = false;
+  gfx::Size min_size = BrowserView::GetBrowserViewForBrowser(browser)->GetMinimumSize();
+  gfx::Size max_size = BrowserView::GetBrowserViewForBrowser(browser)->GetMaximumSize();
+  if (params->update_info.min_width) {
+    min_size.set_width(*params->update_info.min_width);
+    set_min_size = true;
+  }
+  if (params->update_info.min_height) {
+    min_size.set_height(*params->update_info.min_height);
+    set_min_size = true;
+  }
+  if (params->update_info.max_width) {
+    max_size.set_width(*params->update_info.max_width);
+    set_max_size = true;
+  }
+  if (params->update_info.max_height) {
+    max_size.set_height(*params->update_info.max_height);
+    set_max_size = true;
+  }
+  if (set_min_size)
+    browser->window()->SetMinimumSize(min_size);
+  if (set_max_size)
+    browser->window()->SetMaximumSize(max_size);
   if (params->update_info.left) {
     window_bounds.set_x(*params->update_info.left);
     set_window_bounds = true;
+    set_pos_only = true;
   }
   if (params->update_info.top) {
     window_bounds.set_y(*params->update_info.top);
     set_window_bounds = true;
+    set_pos_only = true;
   }
   if (params->update_info.width) {
     window_bounds.set_width(*params->update_info.width);
     set_window_bounds = true;
+    set_pos_only = false;
   }
   if (params->update_info.height) {
     window_bounds.set_height(*params->update_info.height);
     set_window_bounds = true;
+    set_pos_only = false;
+  }
+
+  bool set_client_bounds = false;
+  BrowserFrame* frame = BrowserView::GetBrowserViewForBrowser(browser)->frame();
+  gfx::Rect client_bounds = frame->non_client_view()->frame_view()->GetBoundsForClientView();
+  client_bounds.Offset(window_bounds.OffsetFromOrigin());
+
+  if (params->update_info.inner_width) {
+    client_bounds.set_width(*params->update_info.inner_width);
+    set_client_bounds = true;
+  }
+
+  if (params->update_info.inner_height) {
+    client_bounds.set_height(*params->update_info.inner_height);
+    set_client_bounds = true;
+  }
+
+  if (set_client_bounds) {
+    gfx::Rect win_bounds = frame->non_client_view()->GetWindowBoundsForClientBounds(client_bounds);
+    browser->window()->SetBounds(win_bounds);
   }
 
   if (set_window_bounds && !WindowBoundsIntersectDisplays(window_bounds))
@@ -952,8 +1177,12 @@
           true, extension()->url());
       break;
     case ui::SHOW_STATE_NORMAL:
+      browser->window()->Show();
       browser->window()->Restore();
       break;
+    case ui::SHOW_STATE_HIDDEN:
+      browser->window()->Hide();
+      break;
     default:
       break;
   }
@@ -961,7 +1190,25 @@
   if (set_window_bounds) {
     // TODO(varkha): Updating bounds during a drag can cause problems and a more
     // general solution is needed. See http://crbug.com/251813 .
-    browser->window()->SetBounds(window_bounds);
+#if defined(OS_WIN)
+    if (set_pos_only)
+      browser->window()->SetPosition(window_bounds.origin());
+    else
+#endif
+      browser->window()->SetBounds(window_bounds);
+  }
+
+  if (params->update_info.position &&
+      *params->update_info.position == "center")
+    BrowserView::GetBrowserViewForBrowser(browser)->frame()->CenterWindow(window_bounds.size());
+  if (params->update_info.position &&
+      *params->update_info.position == "mouse") {
+    BrowserFrame* browser_frame =
+      BrowserView::GetBrowserViewForBrowser(browser)->frame();
+      gfx::Point cursor_pos(display::Screen::GetScreen()->GetCursorScreenPoint());
+      gfx::Rect bounds = browser_frame->GetWindowBoundsInScreen();
+      bounds.set_origin(cursor_pos);
+      browser_frame->SetBounds(bounds);
   }
 
   if (params->update_info.focused) {
@@ -972,6 +1219,16 @@
     }
   }
 
+  if (params->update_info.show && *params->update_info.show)
+    browser->window()->Show();
+  if (params->update_info.resizable)
+    browser->window()->SetResizable(*params->update_info.resizable);
+  if (params->update_info.all_visible)
+    browser->window()->SetAllVisible(*params->update_info.all_visible);
+  if (params->update_info.always_on_top)
+    browser->window()->SetZOrderLevel(*params->update_info.always_on_top ? ui::ZOrderLevel::kFloatingWindow : ui::ZOrderLevel::kNormal);
+  if (params->update_info.show_in_taskbar)
+    browser->window()->SetShowInTaskbar(*params->update_info.show_in_taskbar);
   if (params->update_info.draw_attention)
     browser->window()->FlashFrame(*params->update_info.draw_attention);
 
@@ -1267,6 +1524,7 @@
   options.index = params->create_properties.index;
   options.url = params->create_properties.url;
 
+  options.create_browser_if_needed = true;
   std::string error;
   auto result = ExtensionTabUtil::OpenTab(this, options, user_gesture());
   if (!result.has_value())
@@ -2220,6 +2478,8 @@
       tabs::DetectLanguage::Params::Create(args()));
   EXTENSION_FUNCTION_VALIDATE(params.get());
 
+  return RespondNow(Error("disabled in NW.js"));
+#if 0
   int tab_id = 0;
   Browser* browser = nullptr;
   WebContents* contents = nullptr;
@@ -2282,6 +2542,7 @@
   is_observing_ = true;
 
   return RespondLater();
+#endif
 }
 
 void TabsDetectLanguageFunction::NavigationEntryCommitted(
@@ -2306,9 +2567,11 @@
     const std::string& language) {
   // Stop observing.
   if (is_observing_) {
+#if 0
     ChromeTranslateClient::FromWebContents(web_contents())
         ->GetTranslateDriver()
         ->RemoveLanguageDetectionObserver(this);
+#endif
     Observe(nullptr);
   }
 
@@ -2443,12 +2706,17 @@
   bool success = GetTabById(execute_tab_id_, browser_context(),
                             include_incognito_information(), &browser, nullptr,
                             &contents, nullptr, error) &&
-                 contents && browser;
+                 contents;
 
   if (!success)
     return nullptr;
 
-  return TabHelper::FromWebContents(contents)->script_executor();
+  if (TabHelper::FromWebContents(contents))
+    return TabHelper::FromWebContents(contents)->script_executor();
+  auto* web_view = extensions::WebViewGuest::FromWebContents(contents);
+  if (web_view)
+    return web_view->script_executor();
+  return nullptr;
 }
 
 bool ExecuteCodeInTabFunction::IsWebView() const {
