diff -r -u --color up/chromium/ui/views/widget/native_widget_mac.mm nw/chromium/ui/views/widget/native_widget_mac.mm
--- up/chromium/ui/views/widget/native_widget_mac.mm	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/ui/views/widget/native_widget_mac.mm	2023-02-25 19:07:49.553999617 +0000
@@ -47,6 +47,10 @@
 
 using remote_cocoa::mojom::WindowVisibilityState;
 
+namespace content {
+  extern bool g_support_transparency;
+}
+
 namespace views {
 
 namespace {
@@ -408,6 +412,8 @@
     *show_state = ui::SHOW_STATE_FULLSCREEN;
   else if (IsMinimized())
     *show_state = ui::SHOW_STATE_MINIMIZED;
+  else if (IsMaximized())
+    *show_state = ui::SHOW_STATE_MAXIMIZED;
   else
     *show_state = ui::SHOW_STATE_NORMAL;
 }
@@ -597,8 +603,9 @@
     case ui::SHOW_STATE_NORMAL:
     case ui::SHOW_STATE_INACTIVE:
     case ui::SHOW_STATE_MINIMIZED:
-      break;
+    case ui::SHOW_STATE_HIDDEN:
     case ui::SHOW_STATE_MAXIMIZED:
+      break;
     case ui::SHOW_STATE_FULLSCREEN:
       NOTIMPLEMENTED();
       break;
@@ -617,6 +624,8 @@
                        : WindowVisibilityState::kShowInactive;
   }
   GetNSWindowMojo()->SetVisibilityState(window_state);
+  if (show_state == ui::SHOW_STATE_MAXIMIZED)
+    GetNSWindowMojo()->SetRestoredBounds(restore_bounds);
 
   // Ignore the SetInitialFocus() result. BridgedContentView should get
   // firstResponder status regardless.
@@ -672,7 +681,9 @@
 void NativeWidgetMac::Maximize() {
   if (!GetNSWindowMojo())
     return;
-  GetNSWindowMojo()->SetZoomed(true);
+  if (IsFullscreen())
+    return;
+  GetNSWindowMojo()->SetMaximized(true);
 }
 
 void NativeWidgetMac::Minimize() {
@@ -684,7 +695,7 @@
 bool NativeWidgetMac::IsMaximized() const {
   if (!ns_window_host_)
     return false;
-  return ns_window_host_->IsZoomed();
+  return ns_window_host_->IsMaximized();
 }
 
 bool NativeWidgetMac::IsMinimized() const {
@@ -698,7 +709,7 @@
     return;
   GetNSWindowMojo()->ExitFullscreen();
   GetNSWindowMojo()->SetMiniaturized(false);
-  GetNSWindowMojo()->SetZoomed(false);
+  GetNSWindowMojo()->SetMaximized(false);
 }
 
 void NativeWidgetMac::SetFullscreen(bool fullscreen,
@@ -855,7 +866,7 @@
 }
 
 bool NativeWidgetMac::IsTranslucentWindowOpacitySupported() const {
-  return false;
+  return content::g_support_transparency;
 }
 
 ui::GestureRecognizer* NativeWidgetMac::GetGestureRecognizer() {
