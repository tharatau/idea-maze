diff -r -u --color up/chromium/ui/views/widget/widget_delegate.h nw/chromium/ui/views/widget/widget_delegate.h
--- up/chromium/ui/views/widget/widget_delegate.h	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/ui/views/widget/widget_delegate.h	2023-02-25 19:07:49.557999641 +0000
@@ -125,6 +125,7 @@
 
   // Called whenever the widget's position changes.
   virtual void OnWidgetMove();
+  virtual void OnWidgetResize();
 
   // Called with the display changes (color depth or resolution).
   virtual void OnDisplayChanged();
@@ -154,7 +155,7 @@
   virtual DialogDelegate* AsDialogDelegate();
 
   // Returns true if the window can be resized.
-  bool CanResize() const;
+  virtual bool CanResize() const;
 
   // Returns true if the window can be maximized.
   virtual bool CanMaximize() const;
@@ -164,6 +165,7 @@
 
   // Returns true if the window can be activated.
   virtual bool CanActivate() const;
+  virtual bool NWCanClose(bool user_force = false) const;
 
   // Returns the modal type that applies to the widget. Default is
   // ui::MODAL_TYPE_NONE (not modal).
@@ -183,6 +185,8 @@
   // Returns true if the window should show a close button in the title bar.
   virtual bool ShouldShowCloseButton() const;
 
+  virtual bool ShouldHandleOnSize() const;
+
   // Returns the app icon for the window. On Windows, this is the ICON_BIG used
   // in Alt-Tab list and Win7's taskbar.
   virtual ui::ImageModel GetWindowAppIcon();
@@ -197,6 +201,10 @@
   // was handled, false if it was not.
   virtual bool ExecuteWindowsCommand(int command_id);
 
+  virtual bool ExecuteAppCommand(int command_id);
+
+  virtual bool HandleSize(unsigned int param, const gfx::Size& size);
+
   // Returns the window's name identifier. Used to identify this window for
   // state restoration.
   virtual std::string GetWindowName() const;
