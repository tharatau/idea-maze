diff -r -u --color up/chromium/ui/views/window/custom_frame_view.cc nw/chromium/ui/views/window/custom_frame_view.cc
--- up/chromium/ui/views/window/custom_frame_view.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/ui/views/window/custom_frame_view.cc	2023-02-19 17:37:08.971544128 +0000
@@ -7,6 +7,8 @@
 #include <algorithm>
 #include <utility>
 #include <vector>
+#include "ui/gfx/image/image_skia_operations.h"
+#include "ui/base/models/image_model.h"
 
 #include "base/containers/adapters.h"
 #include "base/strings/utf_string_conversions.h"
@@ -76,7 +78,7 @@
     : frame_(frame), frame_background_(new FrameBackground()) {
   close_button_ = InitWindowCaptionButton(
       base::BindRepeating(&Widget::CloseWithReason, base::Unretained(frame_),
-                          views::Widget::ClosedReason::kCloseButtonClicked),
+                          views::Widget::ClosedReason::kCloseButtonClicked, false),
       IDS_APP_ACCNAME_CLOSE, IDR_CLOSE, IDR_CLOSE_H, IDR_CLOSE_P);
   minimize_button_ = InitWindowCaptionButton(
       base::BindRepeating(&Widget::Minimize, base::Unretained(frame_)),
@@ -89,10 +91,13 @@
       IDS_APP_ACCNAME_RESTORE, IDR_RESTORE, IDR_RESTORE_H, IDR_RESTORE_P);
 
   if (frame_->widget_delegate()->ShouldShowWindowIcon()) {
-    window_icon_ =
-        AddChildView(std::make_unique<ImageButton>(Button::PressedCallback()));
+    ui::ImageModel icon;
+    icon = frame_->widget_delegate()->GetWindowAppIcon();
+    window_icon_ = new ImageButton(Button::PressedCallback());
+    window_icon_->SetImage(Button::STATE_NORMAL, icon.GetImage().ToImageSkia());
     // `window_icon_` does not need to be focusable as it is not used here as a
     // button and is not interactive.
+    AddChildView(window_icon_.get());
     window_icon_->SetFocusBehavior(FocusBehavior::NEVER);
   }
 }
@@ -173,8 +178,16 @@
 }
 
 void CustomFrameView::UpdateWindowIcon() {
-  if (window_icon_)
+  if (window_icon_) {
+    ui::ImageModel icon;
+    icon = frame_->widget_delegate()->GetWindowAppIcon();
+    int size = IconSize();
+    gfx::ImageSkia icon2 = gfx::ImageSkiaOperations::CreateResizedImage(*icon.GetImage().ToImageSkia(),
+                               skia::ImageOperations::RESIZE_BEST,
+                               gfx::Size(size, size));
+    window_icon_->SetImage(Button::STATE_NORMAL, &icon2);
     window_icon_->SchedulePaint();
+  }
 }
 
 void CustomFrameView::UpdateWindowTitle() {
