diff -r -u --color up/chromium/content/app_shim_remote_cocoa/render_widget_host_ns_view_bridge.mm nw/chromium/content/app_shim_remote_cocoa/render_widget_host_ns_view_bridge.mm
--- up/chromium/content/app_shim_remote_cocoa/render_widget_host_ns_view_bridge.mm	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/content/app_shim_remote_cocoa/render_widget_host_ns_view_bridge.mm	2023-02-19 17:36:35.219463418 +0000
@@ -22,6 +22,11 @@
 
 using blink::WebGestureEvent;
 
+namespace content {
+  extern bool g_support_transparency;
+  extern bool g_force_cpu_draw;
+}
+
 namespace remote_cocoa {
 
 RenderWidgetHostNSViewBridge::RenderWidgetHostNSViewBridge(
@@ -35,13 +40,21 @@
       withHostHelper:host_helper]);
 
   background_layer_.reset([[CALayer alloc] init]);
+
   display_ca_layer_tree_ =
       std::make_unique<ui::DisplayCALayerTree>(background_layer_.get());
+
+  bool isOpaque = [cocoa_view_ isOpaque];
+  if (content::g_support_transparency) {
+    [background_layer_ setBackgroundColor: (isOpaque || !content::g_support_transparency) ?
+      CGColorGetConstantColor(kCGColorWhite) : CGColorGetConstantColor(kCGColorClear)];
+  }
+
   [cocoa_view_ setLayer:background_layer_];
-  [cocoa_view_ setWantsLayer:YES];
+  [cocoa_view_ setWantsLayer:!content::g_force_cpu_draw];
 
   view_id_ = std::make_unique<remote_cocoa::ScopedNSViewIdMapping>(ns_view_id,
-                                                                   cocoa_view_);
+        cocoa_view_);
 }
 
 RenderWidgetHostNSViewBridge::~RenderWidgetHostNSViewBridge() {
@@ -151,6 +164,10 @@
   if (display_disabled_)
     return;
   display_ca_layer_tree_->UpdateCALayerTree(ca_layer_params);
+  if (content::g_force_cpu_draw) {
+    // this is to tell parent window, that the window content has been updated
+    [[cocoa_view_ superview] setNeedsDisplay:YES];
+  }
 }
 
 void RenderWidgetHostNSViewBridge::SetBackgroundColor(SkColor color) {
@@ -241,6 +258,11 @@
   [cocoa_view_ updateScreenProperties];
 }
 
+CALayer* RenderWidgetHostNSViewBridge::GetBackgroundLayer() {
+  assert(content::g_force_cpu_draw);
+  return background_layer_;
+}
+
 void RenderWidgetHostNSViewBridge::DisplayCursor(const ui::Cursor& cursor) {
   [cocoa_view_ updateCursor:content::WebCursor(cursor).GetNativeCursor()];
 }
