diff -r -u --color up/chromium/chrome/browser/extensions/chrome_content_browser_client_extensions_part.cc nw/chromium/chrome/browser/extensions/chrome_content_browser_client_extensions_part.cc
--- up/chromium/chrome/browser/extensions/chrome_content_browser_client_extensions_part.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/chrome/browser/extensions/chrome_content_browser_client_extensions_part.cc	2023-02-24 20:12:03.292811521 +0000
@@ -4,6 +4,9 @@
 
 #include "chrome/browser/extensions/chrome_content_browser_client_extensions_part.h"
 
+#include "content/browser/renderer_host/render_process_host_impl.h"
+#include "extensions/common/manifest_url_handlers.h"
+
 #include <stddef.h>
 
 #include <algorithm>
@@ -102,6 +105,7 @@
   PRIV_EXTENSION,
 };
 
+#if 0
 RenderProcessHostPrivilege GetPrivilegeRequiredByUrl(
     const GURL& url,
     ExtensionRegistry* registry) {
@@ -125,6 +129,7 @@
     return PRIV_HOSTED;
   return PRIV_EXTENSION;
 }
+#endif
 
 RenderProcessHostPrivilege GetProcessPrivilege(
     content::RenderProcessHost* process_host,
@@ -341,8 +346,12 @@
   const Extension* extension = ExtensionRegistry::Get(browser_context)
                                    ->enabled_extensions()
                                    .GetExtensionOrAppByURL(effective_site_url);
-  // Isolate all extensions.
-  return extension != nullptr;
+  if (!extension)
+    return false;
+
+  if (extension->manifest()->FindKey("devtools_page"))
+    return true;
+  return false;
 }
 
 // static
@@ -395,6 +404,9 @@
   if (extension->is_hosted_app())
     return extension->id() != kWebStoreAppId;
 
+  if (extension->is_nwjs_app()) //NWJS#6784
+    return true;
+
   // Platform app URLs may commit in their own guest processes, when they have
   // the webview permission.  (Some extensions are allowlisted for webviews as
   // well, but their pages load in their own extension process and are allowed
@@ -407,6 +419,8 @@
     bool found_owner = WebViewRendererState::GetInstance()->GetOwnerInfo(
         process_host->GetID(), &owner_process_id, &owner_extension_id);
     DCHECK(found_owner);
+    if (!extensions::ManifestURL::Get(extension, "devtools_page").is_empty())
+      return true;
     return extension->is_platform_app() &&
            extension->permissions_data()->HasAPIPermission(
                extensions::mojom::APIPermissionID::kWebView) &&
@@ -422,6 +436,8 @@
     Profile* profile,
     content::RenderProcessHost* process_host,
     const GURL& site_url) {
+  return true;
+#if 0
   DCHECK(profile);
 
   ExtensionRegistry* registry = ExtensionRegistry::Get(profile);
@@ -438,6 +454,7 @@
       GetPrivilegeRequiredByUrl(site_url, registry);
   return GetProcessPrivilege(process_host, process_map, registry) ==
          privilege_required;
+#endif
 }
 
 size_t
@@ -655,6 +672,8 @@
   if (!extension)
     return;
 
+  if (extension->is_nwjs_app() && !content::RenderProcessHostImpl::main_host())
+    ((content::RenderProcessHostImpl*)site_instance->GetProcess())->set_main_host();
   // Don't consider guests that load extension URLs as extension processes.
   // This is possible when an embedder app navigates <webview> to a
   // webview-accessible app resource; the resulting <webview> process shouldn't
