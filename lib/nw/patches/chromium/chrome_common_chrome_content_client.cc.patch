diff -r -u --color up/chromium/chrome/common/chrome_content_client.cc nw/chromium/chrome/common/chrome_content_client.cc
--- up/chromium/chrome/common/chrome_content_client.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/chrome/common/chrome_content_client.cc	2023-02-19 17:36:29.999450224 +0000
@@ -2,8 +2,10 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+#include "content/nw/src/browser/nw_extensions_browser_hooks.h"
 #include "chrome/common/chrome_content_client.h"
 
+#include "components/crash/core/app/crash_reporter_client.h"
 #include <stdint.h>
 
 #include <memory>
@@ -95,6 +97,8 @@
 #include "chrome/common/media/chrome_media_drm_bridge_client.h"
 #endif
 
+#include "content/nw/src/common/nw_content_common_hooks.h"
+
 namespace {
 
 #if BUILDFLAG(ENABLE_NACL)
@@ -177,6 +181,17 @@
 #endif  // BUILDFLAG(ENABLE_NACL)
 }
 
+void ChromeContentClient::LoadNWAppAsExtension(base::Value::Dict* manifest,
+                                               const base::FilePath& path,
+                                               std::string* error) {
+  nw::LoadNWAppAsExtensionHook(manifest, path, error);
+}
+
+void ChromeContentClient::SetNWReportURL(const GURL& url) {
+  static crash_reporter::CrashKeyString<1024> nwjs_url("url-nwjs");
+  nwjs_url.Set(url.possibly_invalid_spec());
+}
+
 void ChromeContentClient::AddContentDecryptionModules(
     std::vector<content::CdmInfo>* cdms,
     std::vector<media::CdmHostFilePath>* cdm_host_file_paths) {
