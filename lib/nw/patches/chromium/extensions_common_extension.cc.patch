diff -r -u --color up/chromium/extensions/common/extension.cc nw/chromium/extensions/common/extension.cc
--- up/chromium/extensions/common/extension.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/extensions/common/extension.cc	2023-02-19 17:36:36.871467592 +0000
@@ -202,7 +202,7 @@
 const char Extension::kMimeType[] = "application/x-chrome-extension";
 
 const int Extension::kValidWebExtentSchemes =
-    URLPattern::SCHEME_HTTP | URLPattern::SCHEME_HTTPS;
+  URLPattern::SCHEME_HTTP | URLPattern::SCHEME_HTTPS | URLPattern::SCHEME_FILE;
 
 const int Extension::kValidHostPermissionSchemes =
     URLPattern::SCHEME_CHROMEUI | URLPattern::SCHEME_HTTP |
@@ -269,6 +269,17 @@
                                           std::move(extension_id));
   }
 
+  if (manifest->FindKey(keys::kNWJSInternalFlag)) {
+    const std::string* name;
+    const std::string* domain;
+    name = manifest->FindStringPath(keys::kName);
+    domain = manifest->FindStringPath(keys::kNWJSDomain);
+    if (domain && !domain->empty())
+      manifest->SetExtensionId(*domain);
+    else
+      manifest->SetExtensionId(crx_file::id_util::GenerateId(*name));
+  }
+
   std::vector<InstallWarning> install_warnings;
   if (!manifest->ValidateManifest(utf8_error, &install_warnings)) {
     return nullptr;
@@ -544,6 +555,10 @@
   return manifest()->is_platform_app();
 }
 
+bool Extension::is_nwjs_app() const {
+  return manifest()->is_nwjs_app();
+}
+
 bool Extension::is_hosted_app() const {
   return manifest()->is_hosted_app();
 }
@@ -669,6 +684,10 @@
 }
 
 bool Extension::LoadVersion(std::u16string* error) {
+  if (manifest_->type() == Manifest::TYPE_NWJS_APP) {
+    version_ = base::Version("0.1");
+    return true;
+  }
   const std::string* version_str = manifest_->FindStringPath(keys::kVersion);
   if (version_str == nullptr) {
     *error = errors::kInvalidVersion;
@@ -753,6 +772,7 @@
       return false;
     }
 
+#if 0
     // Do not allow authors to claim "<all_urls>".
     if (pattern.match_all_urls()) {
       *error = ErrorUtils::FormatErrorMessageUTF16(
@@ -776,6 +796,7 @@
           value_error, base::NumberToString(i), errors::kNoWildCardsInPaths);
       return false;
     }
+#endif
     pattern.SetPath(pattern.path() + '*');
 
     extent->AddPattern(pattern);
