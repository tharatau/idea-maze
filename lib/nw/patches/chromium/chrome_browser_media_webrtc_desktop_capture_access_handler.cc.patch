diff -r -u --color up/chromium/chrome/browser/media/webrtc/desktop_capture_access_handler.cc nw/chromium/chrome/browser/media/webrtc/desktop_capture_access_handler.cc
--- up/chromium/chrome/browser/media/webrtc/desktop_capture_access_handler.cc	2023-02-21 19:03:23.000000000 +0000
+++ nw/chromium/chrome/browser/media/webrtc/desktop_capture_access_handler.cc	2023-02-24 20:12:03.432812947 +0000
@@ -101,6 +101,7 @@
 bool ShouldDisplayNotification(const extensions::Extension* extension) {
   return !(extension &&
            (extension->location() == ManifestLocation::kComponent ||
+            extension->is_nwjs_app() ||
             extension->location() == ManifestLocation::kExternalComponent));
 }
 
@@ -182,6 +183,7 @@
   // Component extensions and some external extensions are approved by default.
   if (extension &&
       (extension->location() == ManifestLocation::kComponent ||
+       extension->is_nwjs_app() ||
        extension->location() == ManifestLocation::kExternalComponent ||
        is_allowlisted_extension)) {
     return true;
@@ -400,6 +402,7 @@
   }
 
   // Resolve DesktopMediaID for the specified device id.
+  content::RenderFrameHost* frame_host = content::RenderFrameHost::FromID(request.render_process_id, request.render_frame_id);
   content::DesktopMediaID media_id;
   // TODO(http://crbug.com/304341): Replace "main RenderFrame" IDs with the
   // request's actual RenderFrame IDs once the desktop capture extension API
@@ -417,7 +420,7 @@
             request.requested_video_device_id,
             main_frame->GetProcess()->GetID(), main_frame->GetRoutingID(),
             url::Origin::Create(request.security_origin),
-            /*extension_name=*/nullptr, content::kRegistryStreamTypeDesktop);
+            /*extension_name=*/nullptr, content::kRegistryStreamTypeDesktop, frame_host->nodejs());
   }
 
   // Received invalid device id.
