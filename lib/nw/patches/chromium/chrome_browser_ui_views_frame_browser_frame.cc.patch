diff -r -u --color up/chromium/chrome/browser/ui/views/frame/browser_frame.cc nw/chromium/chrome/browser/ui/views/frame/browser_frame.cc
--- up/chromium/chrome/browser/ui/views/frame/browser_frame.cc	2023-02-15 18:46:36.000000000 +0000
+++ nw/chromium/chrome/browser/ui/views/frame/browser_frame.cc	2023-02-19 17:36:29.551449090 +0000
@@ -5,6 +5,15 @@
 #include "chrome/browser/ui/views/frame/browser_frame.h"
 
 #include <memory>
+
+#if defined(USE_AURA)
+#if defined(OS_WIN)
+#include "ui/views/win/hwnd_util.h"
+#endif
+#include "ui/aura/window.h"
+#include "chrome/browser/ui/views/apps/app_window_easy_resize_window_targeter.h"
+#endif
+
 #include <utility>
 
 #include "base/bind.h"
@@ -66,8 +75,8 @@
 ////////////////////////////////////////////////////////////////////////////////
 // BrowserFrame, public:
 
-BrowserFrame::BrowserFrame(BrowserView* browser_view)
-    : native_browser_frame_(nullptr),
+BrowserFrame::BrowserFrame(BrowserView* browser_view, bool frameless)
+    : frameless_(frameless), native_browser_frame_(nullptr),
       root_view_(nullptr),
       browser_frame_view_(nullptr),
       browser_view_(browser_view) {
@@ -79,11 +88,20 @@
 
 BrowserFrame::~BrowserFrame() {}
 
-void BrowserFrame::InitBrowserFrame() {
+bool BrowserFrame::InitBrowserFrame() {
+  bool got_saved_bounds = false;
   native_browser_frame_ =
       NativeBrowserFrameFactory::CreateNativeBrowserFrame(this, browser_view_);
   views::Widget::InitParams params = native_browser_frame_->GetWidgetParams();
   params.name = "BrowserFrame";
+  if (frameless_)
+    params.remove_standard_frame = true;
+  if (browser_view_->browser()->is_transparent())
+    params.opacity = views::Widget::InitParams::WindowOpacity::kTranslucent;
+  if (browser_view_->browser()->initial_ontop())
+    params.z_order = ui::ZOrderLevel::kFloatingWindow;
+  if (browser_view_->browser()->initial_allvisible())
+    params.visible_on_all_workspaces = true;
   params.delegate = browser_view_;
   params.headless_mode = headless::IsHeadlessMode();
 
@@ -99,14 +117,14 @@
 
   if (native_browser_frame_->ShouldRestorePreviousBrowserWidgetState()) {
     if (browser->is_type_normal() || browser->is_type_devtools() ||
-        browser->is_type_app()) {
+        browser->is_type_app() || browser->is_type_popup()) {
       // Typed panel/popup can only return a size once the widget has been
       // created.
       // DevTools counts as a popup, but DevToolsWindow::CreateDevToolsBrowser
       // ensures there is always a size available. Without this, the tools
       // launch on the wrong display and can have sizing issues when
       // repositioned to the saved bounds in Widget::SetInitialBounds.
-      chrome::GetSavedWindowBoundsAndShowState(browser, &params.bounds,
+      got_saved_bounds = chrome::GetSavedWindowBoundsAndShowState(browser, &params.bounds,
                                                &params.show_state);
 
       params.workspace = browser->initial_workspace();
@@ -127,10 +145,23 @@
   Init(std::move(params));
   SelectNativeTheme();
 
+#if defined(USE_AURA)
+  if (frameless_) {
+#if 0
+    HWND hwnd = views::HWNDForWidget(GetTopLevelWidget());
+    int current_style = ::GetWindowLong(hwnd, GWL_STYLE);
+    ::SetWindowLong(hwnd, GWL_STYLE, current_style | WS_CAPTION);
+#endif
+    aura::Window* window = browser_view_->GetWidget()->GetNativeWindow();
+    window->SetEventTargeter(std::make_unique<AppWindowEasyResizeWindowTargeter>(
+      gfx::Insets(5), browser_view_));
+  }
+#endif
   if (!native_browser_frame_->UsesNativeSystemMenu()) {
     DCHECK(non_client_view());
     non_client_view()->set_context_menu_controller(this);
   }
+  return got_saved_bounds;
 }
 
 int BrowserFrame::GetMinimizeButtonOffset() const {
