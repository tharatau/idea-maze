[getdisplaymedia-capture-controller.https.window.html]
  [getDisplayMedia({controller}) must succeed]
    expected:
      if product == "content_shell": FAIL

  [getDisplayMedia({controller: invalid}) must fail with TypeError]
    expected:
      if product == "content_shell": FAIL

  [getDisplayMedia({controller: null}) must fail with TypeError]
    expected:
      if product == "content_shell": FAIL

  [getDisplayMedia({controller: [object Object\]}) must fail with TypeError]
    expected:
      if product == "content_shell": FAIL

  [getDisplayMedia({controller: true}) must fail with TypeError]
    expected:
      if product == "content_shell": FAIL

  [getDisplayMedia({controller}) must fail with InvalidStateError if controller is bound]
    expected:
      if product == "content_shell": FAIL

  [setFocusBehavior("focus-captured-surface") must succeed when window of opportunity is opened if capturing a window]
    expected:
      if product == "content_shell": FAIL

  [setFocusBehavior("no-focus-change") must succeed when window of opportunity is opened if capturing a window]
    expected:
      if product == "content_shell": FAIL

  [setFocusBehavior("focus-captured-surface") must succeed when window of opportunity is opened if capturing a browser]
    expected:
      if product == "content_shell": FAIL

  [setFocusBehavior("no-focus-change") must succeed when window of opportunity is opened if capturing a browser]
    expected:
      if product == "content_shell": FAIL

  [setFocusBehavior("focus-captured-surface") must throw InvalidStateError when track is stopped if capturing a window]
    expected:
      if product == "content_shell": FAIL

  [setFocusBehavior("no-focus-change") must throw InvalidStateError when track is stopped if capturing a window]
    expected:
      if product == "content_shell": FAIL

  [setFocusBehavior("focus-captured-surface") must throw InvalidStateError when track is stopped if capturing a browser]
    expected:
      if product == "content_shell": FAIL

  [setFocusBehavior("no-focus-change") must throw InvalidStateError when track is stopped if capturing a browser]
    expected:
      if product == "content_shell": FAIL

  [setFocusBehavior("focus-captured-surface") must throw InvalidStateError if capturing a monitor]
    expected:
      if product == "content_shell": FAIL

  [setFocusBehavior("no-focus-change") must throw InvalidStateError if capturing a monitor]
    expected:
      if product == "content_shell": FAIL

  [setFocusBehavior("focus-captured-surface") must throw InvalidStateError when window of opportunity is closed if capturing a window]
    expected:
      if product == "content_shell": FAIL

  [setFocusBehavior("no-focus-change") must throw InvalidStateError when window of opportunity is closed if capturing a window]
    expected:
      if product == "content_shell": FAIL

  [setFocusBehavior("focus-captured-surface") must throw InvalidStateError when window of opportunity is closed if capturing a browser]
    expected:
      if product == "content_shell": FAIL

  [setFocusBehavior("no-focus-change") must throw InvalidStateError when window of opportunity is closed if capturing a browser]
    expected:
      if product == "content_shell": FAIL

  [setFocusBehavior("focus-captured-surface") must throw InvalidStateError the second time if capturing a window]
    expected:
      if product == "content_shell": FAIL

  [setFocusBehavior("no-focus-change") must throw InvalidStateError the second time if capturing a window]
    expected:
      if product == "content_shell": FAIL

  [setFocusBehavior("focus-captured-surface") must throw InvalidStateError the second time if capturing a browser]
    expected:
      if product == "content_shell": FAIL

  [setFocusBehavior("no-focus-change") must throw InvalidStateError the second time if capturing a browser]
    expected:
      if product == "content_shell": FAIL
